var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __moduleCache = /* @__PURE__ */ new WeakMap;
var __toCommonJS = (from) => {
  var entry = __moduleCache.get(from), desc;
  if (entry)
    return entry;
  entry = __defProp({}, "__esModule", { value: true });
  if (from && typeof from === "object" || typeof from === "function")
    __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    }));
  __moduleCache.set(from, entry);
  return entry;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// node_modules/level-supports/index.js
var require_level_supports = __commonJS((exports) => {
  exports.supports = function supports(...manifests) {
    const manifest = manifests.reduce((acc, m) => Object.assign(acc, m), {});
    return Object.assign(manifest, {
      snapshots: manifest.snapshots || false,
      permanence: manifest.permanence || false,
      seek: manifest.seek || false,
      clear: manifest.clear || false,
      getMany: manifest.getMany || false,
      keyIterator: manifest.keyIterator || false,
      valueIterator: manifest.valueIterator || false,
      iteratorNextv: manifest.iteratorNextv || false,
      iteratorAll: manifest.iteratorAll || false,
      status: manifest.status || false,
      createIfMissing: manifest.createIfMissing || false,
      errorIfExists: manifest.errorIfExists || false,
      deferredOpen: manifest.deferredOpen || false,
      promises: manifest.promises || false,
      streams: manifest.streams || false,
      encodings: Object.assign({}, manifest.encodings),
      events: Object.assign({}, manifest.events),
      additionalMethods: Object.assign({}, manifest.additionalMethods)
    });
  };
});

// node_modules/module-error/index.js
var require_module_error = __commonJS((exports, module) => {
  module.exports = class ModuleError extends Error {
    constructor(message, options) {
      super(message || "");
      if (typeof options === "object" && options !== null) {
        if (options.code)
          this.code = String(options.code);
        if (options.expected)
          this.expected = true;
        if (options.transient)
          this.transient = true;
        if (options.cause)
          this.cause = options.cause;
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
    }
  };
});

// ../../../../bun-vfs$$/node_modules/buffer/index.js
var exports_buffer = {};
__export(exports_buffer, {
  transcode: () => at,
  resolveObjectURL: () => lt,
  kStringMaxLength: () => K,
  isUtf8: () => pt,
  isAscii: () => ct,
  default: () => export_default,
  createObjectURL: () => ft,
  constants: () => st,
  btoa: () => ht,
  atob: () => ut,
  File: () => ot,
  Buffer: () => export_Buffer,
  Blob: () => nt
});
function lt(i) {
  throw new Error("Not implemented");
}
function at(i, r, t) {
  throw new Error("Not implemented");
}
var gr, $, mr, Ir, Fr, Ar, P = (i, r) => () => (r || i((r = { exports: {} }).exports, r), r.exports), Ur = (i, r) => {
  for (var t in r)
    $(i, t, { get: r[t], enumerable: true });
}, D = (i, r, t, e) => {
  if (r && typeof r == "object" || typeof r == "function")
    for (let n of Ir(r))
      !Ar.call(i, n) && n !== t && $(i, n, { get: () => r[n], enumerable: !(e = mr(r, n)) || e.enumerable });
  return i;
}, x = (i, r, t) => (D(i, r, "default"), t && D(t, r, "default")), O = (i, r, t) => (t = i != null ? gr(Fr(i)) : {}, D(r || !i || !i.__esModule ? $(t, "default", { value: i, enumerable: true }) : t, i)), v, rr, b, w, Br, Er, K, nt, ot, ut, ht, ft, ct = (i) => ArrayBuffer.isView(i) ? i.every((r) => r < 128) : i.split("").every((r) => r.charCodeAt(0) < 128), pt = (i) => {
  throw new Error("Not implemented");
}, st, export_Buffer, export_default;
var init_buffer = __esm(() => {
  gr = Object.create;
  $ = Object.defineProperty;
  mr = Object.getOwnPropertyDescriptor;
  Ir = Object.getOwnPropertyNames;
  Fr = Object.getPrototypeOf;
  Ar = Object.prototype.hasOwnProperty;
  v = P((L) => {
    L.byteLength = Tr;
    L.toByteArray = _r;
    L.fromByteArray = Nr;
    var d = [], B = [], Rr = typeof Uint8Array < "u" ? Uint8Array : Array, G = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (F = 0, Z = G.length;F < Z; ++F)
      d[F] = G[F], B[G.charCodeAt(F)] = F;
    var F, Z;
    B[45] = 62;
    B[95] = 63;
    function Q(i) {
      var r = i.length;
      if (r % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var t = i.indexOf("=");
      t === -1 && (t = r);
      var e = t === r ? 0 : 4 - t % 4;
      return [t, e];
    }
    function Tr(i) {
      var r = Q(i), t = r[0], e = r[1];
      return (t + e) * 3 / 4 - e;
    }
    function Cr(i, r, t) {
      return (r + t) * 3 / 4 - t;
    }
    function _r(i) {
      var r, t = Q(i), e = t[0], n = t[1], o = new Rr(Cr(i, e, n)), u = 0, f = n > 0 ? e - 4 : e, c;
      for (c = 0;c < f; c += 4)
        r = B[i.charCodeAt(c)] << 18 | B[i.charCodeAt(c + 1)] << 12 | B[i.charCodeAt(c + 2)] << 6 | B[i.charCodeAt(c + 3)], o[u++] = r >> 16 & 255, o[u++] = r >> 8 & 255, o[u++] = r & 255;
      return n === 2 && (r = B[i.charCodeAt(c)] << 2 | B[i.charCodeAt(c + 1)] >> 4, o[u++] = r & 255), n === 1 && (r = B[i.charCodeAt(c)] << 10 | B[i.charCodeAt(c + 1)] << 4 | B[i.charCodeAt(c + 2)] >> 2, o[u++] = r >> 8 & 255, o[u++] = r & 255), o;
    }
    function Sr(i) {
      return d[i >> 18 & 63] + d[i >> 12 & 63] + d[i >> 6 & 63] + d[i & 63];
    }
    function Lr(i, r, t) {
      for (var e, n = [], o = r;o < t; o += 3)
        e = (i[o] << 16 & 16711680) + (i[o + 1] << 8 & 65280) + (i[o + 2] & 255), n.push(Sr(e));
      return n.join("");
    }
    function Nr(i) {
      for (var r, t = i.length, e = t % 3, n = [], o = 16383, u = 0, f = t - e;u < f; u += o)
        n.push(Lr(i, u, u + o > f ? f : u + o));
      return e === 1 ? (r = i[t - 1], n.push(d[r >> 2] + d[r << 4 & 63] + "==")) : e === 2 && (r = (i[t - 2] << 8) + i[t - 1], n.push(d[r >> 10] + d[r >> 4 & 63] + d[r << 2 & 63] + "=")), n.join("");
    }
  });
  rr = P((Y) => {
    Y.read = function(i, r, t, e, n) {
      var o, u, f = n * 8 - e - 1, c = (1 << f) - 1, l = c >> 1, s = -7, p = t ? n - 1 : 0, U = t ? -1 : 1, E = i[r + p];
      for (p += U, o = E & (1 << -s) - 1, E >>= -s, s += f;s > 0; o = o * 256 + i[r + p], p += U, s -= 8)
        ;
      for (u = o & (1 << -s) - 1, o >>= -s, s += e;s > 0; u = u * 256 + i[r + p], p += U, s -= 8)
        ;
      if (o === 0)
        o = 1 - l;
      else {
        if (o === c)
          return u ? NaN : (E ? -1 : 1) * (1 / 0);
        u = u + Math.pow(2, e), o = o - l;
      }
      return (E ? -1 : 1) * u * Math.pow(2, o - e);
    };
    Y.write = function(i, r, t, e, n, o) {
      var u, f, c, l = o * 8 - n - 1, s = (1 << l) - 1, p = s >> 1, U = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, E = e ? 0 : o - 1, k = e ? 1 : -1, dr = r < 0 || r === 0 && 1 / r < 0 ? 1 : 0;
      for (r = Math.abs(r), isNaN(r) || r === 1 / 0 ? (f = isNaN(r) ? 1 : 0, u = s) : (u = Math.floor(Math.log(r) / Math.LN2), r * (c = Math.pow(2, -u)) < 1 && (u--, c *= 2), u + p >= 1 ? r += U / c : r += U * Math.pow(2, 1 - p), r * c >= 2 && (u++, c /= 2), u + p >= s ? (f = 0, u = s) : u + p >= 1 ? (f = (r * c - 1) * Math.pow(2, n), u = u + p) : (f = r * Math.pow(2, p - 1) * Math.pow(2, n), u = 0));n >= 8; i[t + E] = f & 255, E += k, f /= 256, n -= 8)
        ;
      for (u = u << n | f, l += n;l > 0; i[t + E] = u & 255, E += k, u /= 256, l -= 8)
        ;
      i[t + E - k] |= dr * 128;
    };
  });
  b = P((_) => {
    var j = v(), T = rr(), tr = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    _.Buffer = h;
    _.SlowBuffer = Pr;
    _.INSPECT_MAX_BYTES = 50;
    var N = 2147483647;
    _.kMaxLength = N;
    h.TYPED_ARRAY_SUPPORT = Mr();
    !h.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function Mr() {
      try {
        let i = new Uint8Array(1), r = { foo: function() {
          return 42;
        } };
        return Object.setPrototypeOf(r, Uint8Array.prototype), Object.setPrototypeOf(i, r), i.foo() === 42;
      } catch {
        return false;
      }
    }
    Object.defineProperty(h.prototype, "parent", { enumerable: true, get: function() {
      if (!!h.isBuffer(this))
        return this.buffer;
    } });
    Object.defineProperty(h.prototype, "offset", { enumerable: true, get: function() {
      if (!!h.isBuffer(this))
        return this.byteOffset;
    } });
    function m(i) {
      if (i > N)
        throw new RangeError('The value "' + i + '" is invalid for option "size"');
      let r = new Uint8Array(i);
      return Object.setPrototypeOf(r, h.prototype), r;
    }
    function h(i, r, t) {
      if (typeof i == "number") {
        if (typeof r == "string")
          throw new TypeError('The "string" argument must be of type string. Received type number');
        return X(i);
      }
      return or(i, r, t);
    }
    h.poolSize = 8192;
    function or(i, r, t) {
      if (typeof i == "string")
        return kr(i, r);
      if (ArrayBuffer.isView(i))
        return Dr(i);
      if (i == null)
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof i);
      if (g(i, ArrayBuffer) || i && g(i.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (g(i, SharedArrayBuffer) || i && g(i.buffer, SharedArrayBuffer)))
        return W(i, r, t);
      if (typeof i == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      let e = i.valueOf && i.valueOf();
      if (e != null && e !== i)
        return h.from(e, r, t);
      let n = $r(i);
      if (n)
        return n;
      if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof i[Symbol.toPrimitive] == "function")
        return h.from(i[Symbol.toPrimitive]("string"), r, t);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof i);
    }
    h.from = function(i, r, t) {
      return or(i, r, t);
    };
    Object.setPrototypeOf(h.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(h, Uint8Array);
    function ur(i) {
      if (typeof i != "number")
        throw new TypeError('"size" argument must be of type number');
      if (i < 0)
        throw new RangeError('The value "' + i + '" is invalid for option "size"');
    }
    function br(i, r, t) {
      return ur(i), i <= 0 ? m(i) : r !== undefined ? typeof t == "string" ? m(i).fill(r, t) : m(i).fill(r) : m(i);
    }
    h.alloc = function(i, r, t) {
      return br(i, r, t);
    };
    function X(i) {
      return ur(i), m(i < 0 ? 0 : V(i) | 0);
    }
    h.allocUnsafe = function(i) {
      return X(i);
    };
    h.allocUnsafeSlow = function(i) {
      return X(i);
    };
    function kr(i, r) {
      if ((typeof r != "string" || r === "") && (r = "utf8"), !h.isEncoding(r))
        throw new TypeError("Unknown encoding: " + r);
      let t = hr(i, r) | 0, e = m(t), n = e.write(i, r);
      return n !== t && (e = e.slice(0, n)), e;
    }
    function q(i) {
      let r = i.length < 0 ? 0 : V(i.length) | 0, t = m(r);
      for (let e = 0;e < r; e += 1)
        t[e] = i[e] & 255;
      return t;
    }
    function Dr(i) {
      if (g(i, Uint8Array)) {
        let r = new Uint8Array(i);
        return W(r.buffer, r.byteOffset, r.byteLength);
      }
      return q(i);
    }
    function W(i, r, t) {
      if (r < 0 || i.byteLength < r)
        throw new RangeError('"offset" is outside of buffer bounds');
      if (i.byteLength < r + (t || 0))
        throw new RangeError('"length" is outside of buffer bounds');
      let e;
      return r === undefined && t === undefined ? e = new Uint8Array(i) : t === undefined ? e = new Uint8Array(i, r) : e = new Uint8Array(i, r, t), Object.setPrototypeOf(e, h.prototype), e;
    }
    function $r(i) {
      if (h.isBuffer(i)) {
        let r = V(i.length) | 0, t = m(r);
        return t.length === 0 || i.copy(t, 0, 0, r), t;
      }
      if (i.length !== undefined)
        return typeof i.length != "number" || J(i.length) ? m(0) : q(i);
      if (i.type === "Buffer" && Array.isArray(i.data))
        return q(i.data);
    }
    function V(i) {
      if (i >= N)
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + N.toString(16) + " bytes");
      return i | 0;
    }
    function Pr(i) {
      return +i != i && (i = 0), h.alloc(+i);
    }
    h.isBuffer = function(r) {
      return r != null && r._isBuffer === true && r !== h.prototype;
    };
    h.compare = function(r, t) {
      if (g(r, Uint8Array) && (r = h.from(r, r.offset, r.byteLength)), g(t, Uint8Array) && (t = h.from(t, t.offset, t.byteLength)), !h.isBuffer(r) || !h.isBuffer(t))
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (r === t)
        return 0;
      let e = r.length, n = t.length;
      for (let o = 0, u = Math.min(e, n);o < u; ++o)
        if (r[o] !== t[o]) {
          e = r[o], n = t[o];
          break;
        }
      return e < n ? -1 : n < e ? 1 : 0;
    };
    h.isEncoding = function(r) {
      switch (String(r).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    h.concat = function(r, t) {
      if (!Array.isArray(r))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (r.length === 0)
        return h.alloc(0);
      let e;
      if (t === undefined)
        for (t = 0, e = 0;e < r.length; ++e)
          t += r[e].length;
      let n = h.allocUnsafe(t), o = 0;
      for (e = 0;e < r.length; ++e) {
        let u = r[e];
        if (g(u, Uint8Array))
          o + u.length > n.length ? (h.isBuffer(u) || (u = h.from(u)), u.copy(n, o)) : Uint8Array.prototype.set.call(n, u, o);
        else if (h.isBuffer(u))
          u.copy(n, o);
        else
          throw new TypeError('"list" argument must be an Array of Buffers');
        o += u.length;
      }
      return n;
    };
    function hr(i, r) {
      if (h.isBuffer(i))
        return i.length;
      if (ArrayBuffer.isView(i) || g(i, ArrayBuffer))
        return i.byteLength;
      if (typeof i != "string")
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof i);
      let t = i.length, e = arguments.length > 2 && arguments[2] === true;
      if (!e && t === 0)
        return 0;
      let n = false;
      for (;; )
        switch (r) {
          case "ascii":
          case "latin1":
          case "binary":
            return t;
          case "utf8":
          case "utf-8":
            return H(i).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return t * 2;
          case "hex":
            return t >>> 1;
          case "base64":
            return xr(i).length;
          default:
            if (n)
              return e ? -1 : H(i).length;
            r = ("" + r).toLowerCase(), n = true;
        }
    }
    h.byteLength = hr;
    function Or(i, r, t) {
      let e = false;
      if ((r === undefined || r < 0) && (r = 0), r > this.length || ((t === undefined || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, r >>>= 0, t <= r))
        return "";
      for (i || (i = "utf8");; )
        switch (i) {
          case "hex":
            return Jr(this, r, t);
          case "utf8":
          case "utf-8":
            return cr(this, r, t);
          case "ascii":
            return Vr(this, r, t);
          case "latin1":
          case "binary":
            return zr(this, r, t);
          case "base64":
            return Hr(this, r, t);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Kr(this, r, t);
          default:
            if (e)
              throw new TypeError("Unknown encoding: " + i);
            i = (i + "").toLowerCase(), e = true;
        }
    }
    h.prototype._isBuffer = true;
    function A(i, r, t) {
      let e = i[r];
      i[r] = i[t], i[t] = e;
    }
    h.prototype.swap16 = function() {
      let r = this.length;
      if (r % 2 !== 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (let t = 0;t < r; t += 2)
        A(this, t, t + 1);
      return this;
    };
    h.prototype.swap32 = function() {
      let r = this.length;
      if (r % 4 !== 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (let t = 0;t < r; t += 4)
        A(this, t, t + 3), A(this, t + 1, t + 2);
      return this;
    };
    h.prototype.swap64 = function() {
      let r = this.length;
      if (r % 8 !== 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (let t = 0;t < r; t += 8)
        A(this, t, t + 7), A(this, t + 1, t + 6), A(this, t + 2, t + 5), A(this, t + 3, t + 4);
      return this;
    };
    h.prototype.toString = function() {
      let r = this.length;
      return r === 0 ? "" : arguments.length === 0 ? cr(this, 0, r) : Or.apply(this, arguments);
    };
    h.prototype.toLocaleString = h.prototype.toString;
    h.prototype.equals = function(r) {
      if (!h.isBuffer(r))
        throw new TypeError("Argument must be a Buffer");
      return this === r ? true : h.compare(this, r) === 0;
    };
    h.prototype.inspect = function() {
      let r = "", t = _.INSPECT_MAX_BYTES;
      return r = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (r += " ... "), "<Buffer " + r + ">";
    };
    tr && (h.prototype[tr] = h.prototype.inspect);
    h.prototype.compare = function(r, t, e, n, o) {
      if (g(r, Uint8Array) && (r = h.from(r, r.offset, r.byteLength)), !h.isBuffer(r))
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof r);
      if (t === undefined && (t = 0), e === undefined && (e = r ? r.length : 0), n === undefined && (n = 0), o === undefined && (o = this.length), t < 0 || e > r.length || n < 0 || o > this.length)
        throw new RangeError("out of range index");
      if (n >= o && t >= e)
        return 0;
      if (n >= o)
        return -1;
      if (t >= e)
        return 1;
      if (t >>>= 0, e >>>= 0, n >>>= 0, o >>>= 0, this === r)
        return 0;
      let u = o - n, f = e - t, c = Math.min(u, f), l = this.slice(n, o), s = r.slice(t, e);
      for (let p = 0;p < c; ++p)
        if (l[p] !== s[p]) {
          u = l[p], f = s[p];
          break;
        }
      return u < f ? -1 : f < u ? 1 : 0;
    };
    function fr(i, r, t, e, n) {
      if (i.length === 0)
        return -1;
      if (typeof t == "string" ? (e = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, J(t) && (t = n ? 0 : i.length - 1), t < 0 && (t = i.length + t), t >= i.length) {
        if (n)
          return -1;
        t = i.length - 1;
      } else if (t < 0)
        if (n)
          t = 0;
        else
          return -1;
      if (typeof r == "string" && (r = h.from(r, e)), h.isBuffer(r))
        return r.length === 0 ? -1 : ir(i, r, t, e, n);
      if (typeof r == "number")
        return r = r & 255, typeof Uint8Array.prototype.indexOf == "function" ? n ? Uint8Array.prototype.indexOf.call(i, r, t) : Uint8Array.prototype.lastIndexOf.call(i, r, t) : ir(i, [r], t, e, n);
      throw new TypeError("val must be string, number or Buffer");
    }
    function ir(i, r, t, e, n) {
      let o = 1, u = i.length, f = r.length;
      if (e !== undefined && (e = String(e).toLowerCase(), e === "ucs2" || e === "ucs-2" || e === "utf16le" || e === "utf-16le")) {
        if (i.length < 2 || r.length < 2)
          return -1;
        o = 2, u /= 2, f /= 2, t /= 2;
      }
      function c(s, p) {
        return o === 1 ? s[p] : s.readUInt16BE(p * o);
      }
      let l;
      if (n) {
        let s = -1;
        for (l = t;l < u; l++)
          if (c(i, l) === c(r, s === -1 ? 0 : l - s)) {
            if (s === -1 && (s = l), l - s + 1 === f)
              return s * o;
          } else
            s !== -1 && (l -= l - s), s = -1;
      } else
        for (t + f > u && (t = u - f), l = t;l >= 0; l--) {
          let s = true;
          for (let p = 0;p < f; p++)
            if (c(i, l + p) !== c(r, p)) {
              s = false;
              break;
            }
          if (s)
            return l;
        }
      return -1;
    }
    h.prototype.includes = function(r, t, e) {
      return this.indexOf(r, t, e) !== -1;
    };
    h.prototype.indexOf = function(r, t, e) {
      return fr(this, r, t, e, true);
    };
    h.prototype.lastIndexOf = function(r, t, e) {
      return fr(this, r, t, e, false);
    };
    function Gr(i, r, t, e) {
      t = Number(t) || 0;
      let n = i.length - t;
      e ? (e = Number(e), e > n && (e = n)) : e = n;
      let o = r.length;
      e > o / 2 && (e = o / 2);
      let u;
      for (u = 0;u < e; ++u) {
        let f = parseInt(r.substr(u * 2, 2), 16);
        if (J(f))
          return u;
        i[t + u] = f;
      }
      return u;
    }
    function Yr(i, r, t, e) {
      return M(H(r, i.length - t), i, t, e);
    }
    function jr(i, r, t, e) {
      return M(rt(r), i, t, e);
    }
    function qr(i, r, t, e) {
      return M(xr(r), i, t, e);
    }
    function Wr(i, r, t, e) {
      return M(tt(r, i.length - t), i, t, e);
    }
    h.prototype.write = function(r, t, e, n) {
      if (t === undefined)
        n = "utf8", e = this.length, t = 0;
      else if (e === undefined && typeof t == "string")
        n = t, e = this.length, t = 0;
      else if (isFinite(t))
        t = t >>> 0, isFinite(e) ? (e = e >>> 0, n === undefined && (n = "utf8")) : (n = e, e = undefined);
      else
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      let o = this.length - t;
      if ((e === undefined || e > o) && (e = o), r.length > 0 && (e < 0 || t < 0) || t > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      n || (n = "utf8");
      let u = false;
      for (;; )
        switch (n) {
          case "hex":
            return Gr(this, r, t, e);
          case "utf8":
          case "utf-8":
            return Yr(this, r, t, e);
          case "ascii":
          case "latin1":
          case "binary":
            return jr(this, r, t, e);
          case "base64":
            return qr(this, r, t, e);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Wr(this, r, t, e);
          default:
            if (u)
              throw new TypeError("Unknown encoding: " + n);
            n = ("" + n).toLowerCase(), u = true;
        }
    };
    h.prototype.toJSON = function() {
      return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
    };
    function Hr(i, r, t) {
      return r === 0 && t === i.length ? j.fromByteArray(i) : j.fromByteArray(i.slice(r, t));
    }
    function cr(i, r, t) {
      t = Math.min(i.length, t);
      let e = [], n = r;
      for (;n < t; ) {
        let o = i[n], u = null, f = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1;
        if (n + f <= t) {
          let c, l, s, p;
          switch (f) {
            case 1:
              o < 128 && (u = o);
              break;
            case 2:
              c = i[n + 1], (c & 192) === 128 && (p = (o & 31) << 6 | c & 63, p > 127 && (u = p));
              break;
            case 3:
              c = i[n + 1], l = i[n + 2], (c & 192) === 128 && (l & 192) === 128 && (p = (o & 15) << 12 | (c & 63) << 6 | l & 63, p > 2047 && (p < 55296 || p > 57343) && (u = p));
              break;
            case 4:
              c = i[n + 1], l = i[n + 2], s = i[n + 3], (c & 192) === 128 && (l & 192) === 128 && (s & 192) === 128 && (p = (o & 15) << 18 | (c & 63) << 12 | (l & 63) << 6 | s & 63, p > 65535 && p < 1114112 && (u = p));
          }
        }
        u === null ? (u = 65533, f = 1) : u > 65535 && (u -= 65536, e.push(u >>> 10 & 1023 | 55296), u = 56320 | u & 1023), e.push(u), n += f;
      }
      return Xr(e);
    }
    var er = 4096;
    function Xr(i) {
      let r = i.length;
      if (r <= er)
        return String.fromCharCode.apply(String, i);
      let t = "", e = 0;
      for (;e < r; )
        t += String.fromCharCode.apply(String, i.slice(e, e += er));
      return t;
    }
    function Vr(i, r, t) {
      let e = "";
      t = Math.min(i.length, t);
      for (let n = r;n < t; ++n)
        e += String.fromCharCode(i[n] & 127);
      return e;
    }
    function zr(i, r, t) {
      let e = "";
      t = Math.min(i.length, t);
      for (let n = r;n < t; ++n)
        e += String.fromCharCode(i[n]);
      return e;
    }
    function Jr(i, r, t) {
      let e = i.length;
      (!r || r < 0) && (r = 0), (!t || t < 0 || t > e) && (t = e);
      let n = "";
      for (let o = r;o < t; ++o)
        n += it[i[o]];
      return n;
    }
    function Kr(i, r, t) {
      let e = i.slice(r, t), n = "";
      for (let o = 0;o < e.length - 1; o += 2)
        n += String.fromCharCode(e[o] + e[o + 1] * 256);
      return n;
    }
    h.prototype.slice = function(r, t) {
      let e = this.length;
      r = ~~r, t = t === undefined ? e : ~~t, r < 0 ? (r += e, r < 0 && (r = 0)) : r > e && (r = e), t < 0 ? (t += e, t < 0 && (t = 0)) : t > e && (t = e), t < r && (t = r);
      let n = this.subarray(r, t);
      return Object.setPrototypeOf(n, h.prototype), n;
    };
    function a(i, r, t) {
      if (i % 1 !== 0 || i < 0)
        throw new RangeError("offset is not uint");
      if (i + r > t)
        throw new RangeError("Trying to access beyond buffer length");
    }
    h.prototype.readUintLE = h.prototype.readUIntLE = function(r, t, e) {
      r = r >>> 0, t = t >>> 0, e || a(r, t, this.length);
      let n = this[r], o = 1, u = 0;
      for (;++u < t && (o *= 256); )
        n += this[r + u] * o;
      return n;
    };
    h.prototype.readUintBE = h.prototype.readUIntBE = function(r, t, e) {
      r = r >>> 0, t = t >>> 0, e || a(r, t, this.length);
      let n = this[r + --t], o = 1;
      for (;t > 0 && (o *= 256); )
        n += this[r + --t] * o;
      return n;
    };
    h.prototype.readUint8 = h.prototype.readUInt8 = function(r, t) {
      return r = r >>> 0, t || a(r, 1, this.length), this[r];
    };
    h.prototype.readUint16LE = h.prototype.readUInt16LE = function(r, t) {
      return r = r >>> 0, t || a(r, 2, this.length), this[r] | this[r + 1] << 8;
    };
    h.prototype.readUint16BE = h.prototype.readUInt16BE = function(r, t) {
      return r = r >>> 0, t || a(r, 2, this.length), this[r] << 8 | this[r + 1];
    };
    h.prototype.readUint32LE = h.prototype.readUInt32LE = function(r, t) {
      return r = r >>> 0, t || a(r, 4, this.length), (this[r] | this[r + 1] << 8 | this[r + 2] << 16) + this[r + 3] * 16777216;
    };
    h.prototype.readUint32BE = h.prototype.readUInt32BE = function(r, t) {
      return r = r >>> 0, t || a(r, 4, this.length), this[r] * 16777216 + (this[r + 1] << 16 | this[r + 2] << 8 | this[r + 3]);
    };
    h.prototype.readBigUInt64LE = I(function(r) {
      r = r >>> 0, C(r, "offset");
      let t = this[r], e = this[r + 7];
      (t === undefined || e === undefined) && S(r, this.length - 8);
      let n = t + this[++r] * 2 ** 8 + this[++r] * 2 ** 16 + this[++r] * 2 ** 24, o = this[++r] + this[++r] * 2 ** 8 + this[++r] * 2 ** 16 + e * 2 ** 24;
      return BigInt(n) + (BigInt(o) << BigInt(32));
    });
    h.prototype.readBigUInt64BE = I(function(r) {
      r = r >>> 0, C(r, "offset");
      let t = this[r], e = this[r + 7];
      (t === undefined || e === undefined) && S(r, this.length - 8);
      let n = t * 2 ** 24 + this[++r] * 2 ** 16 + this[++r] * 2 ** 8 + this[++r], o = this[++r] * 2 ** 24 + this[++r] * 2 ** 16 + this[++r] * 2 ** 8 + e;
      return (BigInt(n) << BigInt(32)) + BigInt(o);
    });
    h.prototype.readIntLE = function(r, t, e) {
      r = r >>> 0, t = t >>> 0, e || a(r, t, this.length);
      let n = this[r], o = 1, u = 0;
      for (;++u < t && (o *= 256); )
        n += this[r + u] * o;
      return o *= 128, n >= o && (n -= Math.pow(2, 8 * t)), n;
    };
    h.prototype.readIntBE = function(r, t, e) {
      r = r >>> 0, t = t >>> 0, e || a(r, t, this.length);
      let n = t, o = 1, u = this[r + --n];
      for (;n > 0 && (o *= 256); )
        u += this[r + --n] * o;
      return o *= 128, u >= o && (u -= Math.pow(2, 8 * t)), u;
    };
    h.prototype.readInt8 = function(r, t) {
      return r = r >>> 0, t || a(r, 1, this.length), this[r] & 128 ? (255 - this[r] + 1) * -1 : this[r];
    };
    h.prototype.readInt16LE = function(r, t) {
      r = r >>> 0, t || a(r, 2, this.length);
      let e = this[r] | this[r + 1] << 8;
      return e & 32768 ? e | 4294901760 : e;
    };
    h.prototype.readInt16BE = function(r, t) {
      r = r >>> 0, t || a(r, 2, this.length);
      let e = this[r + 1] | this[r] << 8;
      return e & 32768 ? e | 4294901760 : e;
    };
    h.prototype.readInt32LE = function(r, t) {
      return r = r >>> 0, t || a(r, 4, this.length), this[r] | this[r + 1] << 8 | this[r + 2] << 16 | this[r + 3] << 24;
    };
    h.prototype.readInt32BE = function(r, t) {
      return r = r >>> 0, t || a(r, 4, this.length), this[r] << 24 | this[r + 1] << 16 | this[r + 2] << 8 | this[r + 3];
    };
    h.prototype.readBigInt64LE = I(function(r) {
      r = r >>> 0, C(r, "offset");
      let t = this[r], e = this[r + 7];
      (t === undefined || e === undefined) && S(r, this.length - 8);
      let n = this[r + 4] + this[r + 5] * 2 ** 8 + this[r + 6] * 2 ** 16 + (e << 24);
      return (BigInt(n) << BigInt(32)) + BigInt(t + this[++r] * 2 ** 8 + this[++r] * 2 ** 16 + this[++r] * 2 ** 24);
    });
    h.prototype.readBigInt64BE = I(function(r) {
      r = r >>> 0, C(r, "offset");
      let t = this[r], e = this[r + 7];
      (t === undefined || e === undefined) && S(r, this.length - 8);
      let n = (t << 24) + this[++r] * 2 ** 16 + this[++r] * 2 ** 8 + this[++r];
      return (BigInt(n) << BigInt(32)) + BigInt(this[++r] * 2 ** 24 + this[++r] * 2 ** 16 + this[++r] * 2 ** 8 + e);
    });
    h.prototype.readFloatLE = function(r, t) {
      return r = r >>> 0, t || a(r, 4, this.length), T.read(this, r, true, 23, 4);
    };
    h.prototype.readFloatBE = function(r, t) {
      return r = r >>> 0, t || a(r, 4, this.length), T.read(this, r, false, 23, 4);
    };
    h.prototype.readDoubleLE = function(r, t) {
      return r = r >>> 0, t || a(r, 8, this.length), T.read(this, r, true, 52, 8);
    };
    h.prototype.readDoubleBE = function(r, t) {
      return r = r >>> 0, t || a(r, 8, this.length), T.read(this, r, false, 52, 8);
    };
    function y(i, r, t, e, n, o) {
      if (!h.isBuffer(i))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (r > n || r < o)
        throw new RangeError('"value" argument is out of bounds');
      if (t + e > i.length)
        throw new RangeError("Index out of range");
    }
    h.prototype.writeUintLE = h.prototype.writeUIntLE = function(r, t, e, n) {
      if (r = +r, t = t >>> 0, e = e >>> 0, !n) {
        let f = Math.pow(2, 8 * e) - 1;
        y(this, r, t, e, f, 0);
      }
      let o = 1, u = 0;
      for (this[t] = r & 255;++u < e && (o *= 256); )
        this[t + u] = r / o & 255;
      return t + e;
    };
    h.prototype.writeUintBE = h.prototype.writeUIntBE = function(r, t, e, n) {
      if (r = +r, t = t >>> 0, e = e >>> 0, !n) {
        let f = Math.pow(2, 8 * e) - 1;
        y(this, r, t, e, f, 0);
      }
      let o = e - 1, u = 1;
      for (this[t + o] = r & 255;--o >= 0 && (u *= 256); )
        this[t + o] = r / u & 255;
      return t + e;
    };
    h.prototype.writeUint8 = h.prototype.writeUInt8 = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 1, 255, 0), this[t] = r & 255, t + 1;
    };
    h.prototype.writeUint16LE = h.prototype.writeUInt16LE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 2, 65535, 0), this[t] = r & 255, this[t + 1] = r >>> 8, t + 2;
    };
    h.prototype.writeUint16BE = h.prototype.writeUInt16BE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 2, 65535, 0), this[t] = r >>> 8, this[t + 1] = r & 255, t + 2;
    };
    h.prototype.writeUint32LE = h.prototype.writeUInt32LE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 4, 4294967295, 0), this[t + 3] = r >>> 24, this[t + 2] = r >>> 16, this[t + 1] = r >>> 8, this[t] = r & 255, t + 4;
    };
    h.prototype.writeUint32BE = h.prototype.writeUInt32BE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 4, 4294967295, 0), this[t] = r >>> 24, this[t + 1] = r >>> 16, this[t + 2] = r >>> 8, this[t + 3] = r & 255, t + 4;
    };
    function pr(i, r, t, e, n) {
      wr(r, e, n, i, t, 7);
      let o = Number(r & BigInt(4294967295));
      i[t++] = o, o = o >> 8, i[t++] = o, o = o >> 8, i[t++] = o, o = o >> 8, i[t++] = o;
      let u = Number(r >> BigInt(32) & BigInt(4294967295));
      return i[t++] = u, u = u >> 8, i[t++] = u, u = u >> 8, i[t++] = u, u = u >> 8, i[t++] = u, t;
    }
    function sr(i, r, t, e, n) {
      wr(r, e, n, i, t, 7);
      let o = Number(r & BigInt(4294967295));
      i[t + 7] = o, o = o >> 8, i[t + 6] = o, o = o >> 8, i[t + 5] = o, o = o >> 8, i[t + 4] = o;
      let u = Number(r >> BigInt(32) & BigInt(4294967295));
      return i[t + 3] = u, u = u >> 8, i[t + 2] = u, u = u >> 8, i[t + 1] = u, u = u >> 8, i[t] = u, t + 8;
    }
    h.prototype.writeBigUInt64LE = I(function(r, t = 0) {
      return pr(this, r, t, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    h.prototype.writeBigUInt64BE = I(function(r, t = 0) {
      return sr(this, r, t, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    h.prototype.writeIntLE = function(r, t, e, n) {
      if (r = +r, t = t >>> 0, !n) {
        let c = Math.pow(2, 8 * e - 1);
        y(this, r, t, e, c - 1, -c);
      }
      let o = 0, u = 1, f = 0;
      for (this[t] = r & 255;++o < e && (u *= 256); )
        r < 0 && f === 0 && this[t + o - 1] !== 0 && (f = 1), this[t + o] = (r / u >> 0) - f & 255;
      return t + e;
    };
    h.prototype.writeIntBE = function(r, t, e, n) {
      if (r = +r, t = t >>> 0, !n) {
        let c = Math.pow(2, 8 * e - 1);
        y(this, r, t, e, c - 1, -c);
      }
      let o = e - 1, u = 1, f = 0;
      for (this[t + o] = r & 255;--o >= 0 && (u *= 256); )
        r < 0 && f === 0 && this[t + o + 1] !== 0 && (f = 1), this[t + o] = (r / u >> 0) - f & 255;
      return t + e;
    };
    h.prototype.writeInt8 = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 1, 127, -128), r < 0 && (r = 255 + r + 1), this[t] = r & 255, t + 1;
    };
    h.prototype.writeInt16LE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 2, 32767, -32768), this[t] = r & 255, this[t + 1] = r >>> 8, t + 2;
    };
    h.prototype.writeInt16BE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 2, 32767, -32768), this[t] = r >>> 8, this[t + 1] = r & 255, t + 2;
    };
    h.prototype.writeInt32LE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 4, 2147483647, -2147483648), this[t] = r & 255, this[t + 1] = r >>> 8, this[t + 2] = r >>> 16, this[t + 3] = r >>> 24, t + 4;
    };
    h.prototype.writeInt32BE = function(r, t, e) {
      return r = +r, t = t >>> 0, e || y(this, r, t, 4, 2147483647, -2147483648), r < 0 && (r = 4294967295 + r + 1), this[t] = r >>> 24, this[t + 1] = r >>> 16, this[t + 2] = r >>> 8, this[t + 3] = r & 255, t + 4;
    };
    h.prototype.writeBigInt64LE = I(function(r, t = 0) {
      return pr(this, r, t, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    h.prototype.writeBigInt64BE = I(function(r, t = 0) {
      return sr(this, r, t, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function lr(i, r, t, e, n, o) {
      if (t + e > i.length)
        throw new RangeError("Index out of range");
      if (t < 0)
        throw new RangeError("Index out of range");
    }
    function ar(i, r, t, e, n) {
      return r = +r, t = t >>> 0, n || lr(i, r, t, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000), T.write(i, r, t, e, 23, 4), t + 4;
    }
    h.prototype.writeFloatLE = function(r, t, e) {
      return ar(this, r, t, true, e);
    };
    h.prototype.writeFloatBE = function(r, t, e) {
      return ar(this, r, t, false, e);
    };
    function yr(i, r, t, e, n) {
      return r = +r, t = t >>> 0, n || lr(i, r, twrite(i, r, t, e, 52, 8), t + 8;
    }
    h.prototype.writeDoubleLE = function(r, t, e) {
      return yr(this, r, t, true, e);
    };
    h.prototype.writeDoubleBE = function(r, t, e) {
      return yr(this, r, t, false, e);
    };
    h.prototype.copy = function(r, t, e, n) {
      if (!h.isBuffer(r))
        throw new TypeError("argument should be a Buffer");
      if (e || (e = 0), !n && n !== 0 && (n = this.length), t >= r.length && (t = r.length), t || (t = 0), n > 0 && n < e && (n = e), n === e || r.length === 0 || this.length === 0)
        return 0;
      if (t < 0)
        throw new RangeError("targetStart out of bounds");
      if (e < 0 || e >= this.length)
        throw new RangeError("Index out of range");
      if (n < 0)
        throw new RangeError("sourceEnd out of bounds");
      n > this.length && (n = this.length), r.length - t < n - e && (n = r.length - t + e);
      let o = n - e;
      return this === r && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(t, e, n) : Uint8Array.prototype.set.call(r, this.subarray(e, n), t), o;
    };
    h.prototype.fill = function(r, t, e, n) {
      if (typeof r == "string") {
        if (typeof t == "string" ? (n = t, t = 0, e = this.length) : typeof e == "string" && (n = e, e = this.length), n !== undefined && typeof n != "string")
          throw new TypeError("encoding must be a string");
        if (typeof n == "string" && !h.isEncoding(n))
          throw new TypeError("Unknown encoding: " + n);
        if (r.length === 1) {
          let u = r.charCodeAt(0);
          (n === "utf8" && u < 128 || n === "latin1") && (r = u);
        }
      } else
        typeof r == "number" ? r = r & 255 : typeof r == "boolean" && (r = Number(r));
      if (t < 0 || this.length < t || this.length < e)
        throw new RangeError("Out of range index");
      if (e <= t)
        return this;
      t = t >>> 0, e = e === undefined ? this.length : e >>> 0, r || (r = 0);
      let o;
      if (typeof r == "number")
        for (o = t;o < e; ++o)
          this[o] = r;
      else {
        let u = h.isBuffer(r) ? r : h.from(r, n), f = u.length;
        if (f === 0)
          throw new TypeError('The value "' + r + '" is invalid for argument "value"');
        for (o = 0;o < e - t; ++o)
          this[o + t] = u[o % f];
      }
      return this;
    };
    var R = {};
    function z(i, r, t) {
      R[i] = class extends t {
        constructor() {
          super(), Object.defineProperty(this, "message", { value: r.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${i}]`, this.stack, delete this.name;
        }
        get code() {
          return i;
        }
        set code(n) {
          Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: n, writable: true });
        }
        toString() {
          return `${this.name} [${i}]: ${this.message}`;
        }
      };
    }
    z("ERR_BUFFER_OUT_OF_BOUNDS", function(i) {
      return i ? `${i} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    z("ERR_INVALID_ARG_TYPE", function(i, r) {
      return `The "${i}" argument must be of type number. Received type ${typeof r}`;
    }, TypeError);
    z("ERR_OUT_OF_RANGE", function(i, r, t) {
      let e = `The value of "${i}" is out of range.`, n = t;
      return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? n = nr(String(t)) : typeof t == "bigint" && (n = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (n = nr(n)), n += "n"), e += ` It must be ${r}. Received ${n}`, e;
    }, RangeError);
    function nr(i) {
      let r = "", t = i.length, e = i[0] === "-" ? 1 : 0;
      for (;t >= e + 4; t -= 3)
        r = `_${i.slice(t - 3, t)}${r}`;
      return `${i.slice(0, t)}${r}`;
    }
    function Zr(i, r, t) {
      C(r, "offset"), (i[r] === undefined || i[r + t] === undefined) && S(r, i.length - (t + 1));
    }
    function wr(i, r, t, e, n, o) {
      if (i > t || i < r) {
        let u = typeof r == "bigint" ? "n" : "", f;
        throw o > 3 ? r === 0 || r === BigInt(0) ? f = `>= 0${u} and < 2${u} ** ${(o + 1) * 8}${u}` : f = `>= -(2${u} ** ${(o + 1) * 8 - 1}${u}) and < 2 ** ${(o + 1) * 8 - 1}${u}` : f = `>= ${r}${u} and <= ${t}${u}`, new R.ERR_OUT_OF_RANGE("value", f, i);
      }
      Zr(e, n, o);
    }
    function C(i, r) {
      if (typeof i != "number")
        throw new R.ERR_INVALID_ARG_TYPE(r, "number", i);
    }
    function S(i, r, t) {
      throw Math.floor(i) !== i ? (C(i, t), new R.ERR_OUT_OF_RANGE(t || "offset", "an integer", i)) : r < 0 ? new R.ERR_BUFFER_OUT_OF_BOUNDS : new R.ERR_OUT_OF_RANGE(t || "offset", `>= ${t ? 1 : 0} and <= ${r}`, i);
    }
    var Qr = /[^+/0-9A-Za-z-_]/g;
    function vr(i) {
      if (i = i.split("=")[0], i = i.trim().replace(Qr, ""), i.length < 2)
        return "";
      for (;i.length % 4 !== 0; )
        i = i + "=";
      return i;
    }
    function H(i, r) {
      r = r || 1 / 0;
      let t, e = i.length, n = null, o = [];
      for (let u = 0;u < e; ++u) {
        if (t = i.charCodeAt(u), t > 55295 && t < 57344) {
          if (!n) {
            if (t > 56319) {
              (r -= 3) > -1 && o.push(239, 191, 189);
              continue;
            } else if (u + 1 === e) {
              (r -= 3) > -1 && o.push(239, 191, 189);
              continue;
            }
            n = t;
            continue;
          }
          if (t < 56320) {
            (r -= 3) > -1 && o.push(239, 191, 189), n = t;
            continue;
          }
          t = (n - 55296 << 10 | t - 56320) + 65536;
        } else
          n && (r -= 3) > -1 && o.push(239, 191, 189);
        if (n = null, t < 128) {
          if ((r -= 1) < 0)
            break;
          o.push(t);
        } else if (t < 2048) {
          if ((r -= 2) < 0)
            break;
          o.push(t >> 6 | 192, t & 63 | 128);
        } else if (t < 65536) {
          if ((r -= 3) < 0)
            break;
          o.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);
        } else if (t < 1114112) {
          if ((r -= 4) < 0)
            break;
          o.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);
        } else
          throw new Error("Invalid code point");
      }
      return o;
    }
    function rt(i) {
      let r = [];
      for (let t = 0;t < i.length; ++t)
        r.push(i.charCodeAt(t) & 255);
      return r;
    }
    function tt(i, r) {
      let t, e, n, o = [];
      for (let u = 0;u < i.length && !((r -= 2) < 0); ++u)
        t = i.charCodeAt(u), e = t >> 8, n = t % 256, o.push(n), o.push(e);
      return o;
    }
    function xr(i) {
      return j.toByteArray(vr(i));
    }
    function M(i, r, t, e) {
      let n;
      for (n = 0;n < e && !(n + t >= r.length || n >= i.length); ++n)
        r[n + t] = i[n];
      return n;
    }
    function g(i, r) {
      return i instanceof r || i != null && i.constructor != null && i.constructor.name != null && i.constructor.name === r.name;
    }
    function J(i) {
      return i !== i;
    }
    var it = function() {
      let i = "0123456789abcdef", r = new Array(256);
      for (let t = 0;t < 16; ++t) {
        let e = t * 16;
        for (let n = 0;n < 16; ++n)
          r[e + n] = i[t] + i[n];
      }
      return r;
    }();
    function I(i) {
      return typeof BigInt > "u" ? et : i;
    }
    function et() {
      throw new Error("BigInt not supported");
    }
  });
  w = {};
  Ur(w, { Blob: () => nt, Buffer: () => Er.Buffer, File: () => ot, atob: () => ut, btoa: () => ht, constants: () => st, createObjectURL: () => ft, default: () => Br.Buffer, isAscii: () => ct, isUtf8: () => pt, kStringMaxLength: () => K, resolveObjectURL: () => lt, transcode: () => at });
  x(w, O(b()));
  Br = O(b());
  Er = O(b());
  K = 2 ** 32 - 1;
  ({ Blob: nt, File: ot, atob: ut, btoa: ht } = globalThis);
  ({ createObjectURL: ft } = URL);
  st = { __proto__: null, MAX_LENGTH: K, MAX_STRING_LENGTH: K, BYTES_PER_ELEMENT: 1 };
  export_Buffer = Er.Buffer;
  export_default = Br.Buffer;
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
});

// node_modules/level-transcoder/lib/text-endec.js
var require_text_endec = __commonJS((exports, module) => {
  var lazy = null;
  module.exports = function() {
    if (lazy === null) {
      lazy = {
        textEncoder: new TextEncoder,
        textDecoder: new TextDecoder
      };
    }
    return lazy;
  };
});

// node_modules/level-transcoder/lib/encoding.js
var require_encoding = __commonJS((exports) => {
  var ModuleError = require_module_error();
  var formats = new Set(["buffer", "view", "utf8"]);

  class Encoding {
    constructor(options) {
      this.encode = options.encode || this.encode;
      this.decode = options.decode || this.decode;
      this.name = options.name || this.name;
      this.format = options.format || this.format;
      if (typeof this.encode !== "function") {
        throw new TypeError("The 'encode' property must be a function");
      }
      if (typeof this.decode !== "function") {
        throw new TypeError("The 'decode' property must be a function");
      }
      this.encode = this.encode.bind(this);
      this.decode = this.decode.bind(this);
      if (typeof this.name !== "string" || this.name === "") {
        throw new TypeError("The 'name' property must be a string");
      }
      if (typeof this.format !== "string" || !formats.has(this.format)) {
        throw new TypeError("The 'format' property must be one of 'buffer', 'view', 'utf8'");
      }
      if (options.createViewTranscoder) {
        this.createViewTranscoder = options.createViewTranscoder;
      }
      if (options.createBufferTranscoder) {
        this.createBufferTranscoder = options.createBufferTranscoder;
      }
      if (options.createUTF8Transcoder) {
        this.createUTF8Transcoder = options.createUTF8Transcoder;
      }
    }
    get commonName() {
      return this.name.split("+")[0];
    }
    createBufferTranscoder() {
      throw new ModuleError(`Encoding '${this.name}' cannot be transcoded to 'buffer'`, {
        code: "LEVEL_ENCODING_NOT_SUPPORTED"
      });
    }
    createViewTranscoder() {
      throw new ModuleError(`Encoding '${this.name}' cannot be transcoded to 'view'`, {
        code: "LEVEL_ENCODING_NOT_SUPPORTED"
      });
    }
    createUTF8Transcoder() {
      throw new ModuleError(`Encoding '${this.name}' cannot be transcoded to 'utf8'`, {
        code: "LEVEL_ENCODING_NOT_SUPPORTED"
      });
    }
  }
  exports.Encoding = Encoding;
});

// node_modules/level-transcoder/lib/formats.js
var require_formats = __commonJS((exports) => {
  var { Buffer: Buffer2 } = (init_buffer(), __toCommonJS(exports_buffer)) || {};
  var { Encoding } = require_encoding();
  var textEndec = require_text_endec();

  class BufferFormat extends Encoding {
    constructor(options) {
      super({ ...options, format: "buffer" });
    }
    createViewTranscoder() {
      return new ViewFormat({
        encode: this.encode,
        decode: (data) => this.decode(Buffer2.from(data.buffer, data.byteOffset, data.byteLength)),
        name: `${this.name}+view`
      });
    }
    createBufferTranscoder() {
      return this;
    }
  }

  class ViewFormat extends Encoding {
    constructor(options) {
      super({ ...options, format: "view" });
    }
    createBufferTranscoder() {
      return new BufferFormat({
        encode: (data) => {
          const view = this.encode(data);
          return Buffer2.from(view.buffer, view.byteOffset, view.byteLength);
        },
        decode: this.decode,
        name: `${this.name}+buffer`
      });
    }
    createViewTranscoder() {
      return this;
    }
  }

  class UTF8Format extends Encoding {
    constructor(options) {
      super({ ...options, format: "utf8" });
    }
    createBufferTranscoder() {
      return new BufferFormat({
        encode: (data) => Buffer2.from(this.encode(data), "utf8"),
        decode: (data) => this.decode(data.toString("utf8")),
        name: `${this.name}+buffer`
      });
    }
    createViewTranscoder() {
      const { textEncoder, textDecoder } = textEndec();
      return new ViewFormat({
        encode: (data) => textEncoder.encode(this.encode(data)),
        decode: (data) => this.decode(textDecoder.decode(data)),
        name: `${this.name}+view`
      });
    }
    createUTF8Transcoder() {
      return this;
    }
  }
  exports.BufferFormat = BufferFormat;
  exports.ViewFormat = ViewFormat;
  exports.UTF8Format = UTF8Format;
});

// node_modules/level-transcoder/lib/encodings.js
var require_encodings = __commonJS((exports) => {
  var { Buffer: Buffer2 } = (init_buffer(), __toCommonJS(exports_buffer)) || { Buffer: { isBuffer: () => false } };
  var { textEncoder, textDecoder } = require_text_endec()();
  var { BufferFormat, ViewFormat, UTF8Format } = require_formats();
  var identity = (v2) => v2;
  exports.utf8 = new UTF8Format({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data.toString("utf8") : ArrayBuffer.isView(data) ? textDecoder.decode(data) : String(data);
    },
    decode: identity,
    name: "utf8",
    createViewTranscoder() {
      return new ViewFormat({
        encode: function(data) {
          return ArrayBuffer.isView(data) ? data : textEncoder.encode(data);
        },
        decode: function(data) {
          return textDecoder.decode(data);
        },
        name: `${this.name}+view`
      });
    },
    createBufferTranscoder() {
      return new BufferFormat({
        encode: function(data) {
          return Buffer2.isBuffer(data) ? data : ArrayBuffer.isView(data) ? Buffer2.from(data.buffer, data.byteOffset, data.byteLength) : Buffer2.from(String(data), "utf8");
        },
        decode: function(data) {
          return data.toString("utf8");
        },
        name: `${this.name}+buffer`
      });
    }
  });
  exports.json = new UTF8Format({
    encode: JSON.stringify,
    decode: JSON.parse,
    name: "json"
  });
  exports.buffer = new BufferFormat({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data : ArrayBuffer.isView(data) ? Buffer2.from(data.buffer, data.byteOffset, data.byteLength) : Buffer2.from(String(data), "utf8");
    },
    decode: identity,
    name: "buffer",
    createViewTranscoder() {
      return new ViewFormat({
        encode: function(data) {
          return ArrayBuffer.isView(data) ? data : Buffer2.from(String(data), "utf8");
        },
        decode: function(data) {
          return Buffer2.from(data.buffer, data.byteOffset, data.byteLength);
        },
        name: `${this.name}+view`
      });
    }
  });
  exports.view = new ViewFormat({
    encode: function(data) {
      return ArrayBuffer.isView(data) ? data : textEncoder.encode(data);
    },
    decode: identity,
    name: "view",
    createBufferTranscoder() {
      return new BufferFormat({
        encode: function(data) {
          return Buffer2.isBuffer(data) ? data : ArrayBuffer.isView(data) ? Buffer2.from(data.buffer, data.byteOffset, data.byteLength) : Buffer2.from(String(data), "utf8");
        },
        decode: identity,
        name: `${this.name}+buffer`
      });
    }
  });
  exports.hex = new BufferFormat({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data : Buffer2.from(String(data), "hex");
    },
    decode: function(buffer) {
      return buffer.toString("hex");
    },
    name: "hex"
  });
  exports.base64 = new BufferFormat({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data : Buffer2.from(String(data), "base64");
    },
    decode: function(buffer) {
      return buffer.toString("base64");
    },
    name: "base64"
  });
});

// node_modules/level-transcoder/index.js
var require_level_transcoder = __commonJS((exports) => {
  var ModuleError = require_module_error();
  var encodings = require_encodings();
  var { Encoding } = require_encoding();
  var { BufferFormat, ViewFormat, UTF8Format } = require_formats();
  var kFormats = Symbol("formats");
  var kEncodings = Symbol("encodings");
  var validFormats = new Set(["buffer", "view", "utf8"]);

  class Transcoder {
    constructor(formats) {
      if (!Array.isArray(formats)) {
        throw new TypeError("The first argument 'formats' must be an array");
      } else if (!formats.every((f) => validFormats.has(f))) {
        throw new TypeError("Format must be one of 'buffer', 'view', 'utf8'");
      }
      this[kEncodings] = new Map;
      this[kFormats] = new Set(formats);
      for (const k in encodings) {
        try {
          this.encoding(k);
        } catch (err) {
          if (err.code !== "LEVEL_ENCODING_NOT_SUPPORTED")
            throw err;
        }
      }
    }
    encodings() {
      return Array.from(new Set(this[kEncodings].values()));
    }
    encoding(encoding) {
      let resolved = this[kEncodings].get(encoding);
      if (resolved === undefined) {
        if (typeof encoding === "string" && encoding !== "") {
          resolved = lookup[encoding];
          if (!resolved) {
            throw new ModuleError(`Encoding '${encoding}' is not found`, {
              code: "LEVEL_ENCODING_NOT_FOUND"
            });
          }
        } else if (typeof encoding !== "object" || encoding === null) {
          throw new TypeError("First argument 'encoding' must be a string or object");
        } else {
          resolved = from(encoding);
        }
        const { name, format } = resolved;
        if (!this[kFormats].has(format)) {
          if (this[kFormats].has("view")) {
            resolved = resolved.createViewTranscoder();
          } else if (this[kFormats].has("buffer")) {
            resolved = resolved.createBufferTranscoder();
          } else if (this[kFormats].has("utf8")) {
            resolved = resolved.createUTF8Transcoder();
          } else {
            throw new ModuleError(`Encoding '${name}' cannot be transcoded`, {
              code: "LEVEL_ENCODING_NOT_SUPPORTED"
            });
          }
        }
        for (const k of [encoding, name, resolved.name, resolved.commonName]) {
          this[kEncodings].set(k, resolved);
        }
      }
      return resolved;
    }
  }
  exports.Transcoder = Transcoder;
  function from(options) {
    if (options instanceof Encoding) {
      return options;
    }
    const maybeType = "type" in options && typeof options.type === "string" ? options.type : undefined;
    const name = options.name || maybeType || `anonymous-${anonymousCount++}`;
    switch (detectFormat(options)) {
      case "view":
        return new ViewFormat({ ...options, name });
      case "utf8":
        return new UTF8Format({ ...options, name });
      case "buffer":
        return new BufferFormat({ ...options, name });
      default: {
        throw new TypeError("Format must be one of 'buffer', 'view', 'utf8'");
      }
    }
  }
  function detectFormat(options) {
    if ("format" in options && options.format !== undefined) {
      return options.format;
    } else if ("buffer" in options && typeof options.buffer === "boolean") {
      return options.buffer ? "buffer" : "utf8";
    } else if ("code" in options && Number.isInteger(options.code)) {
      return "view";
    } else {
      return "buffer";
    }
  }
  var aliases = {
    binary: encodings.buffer,
    "utf-8": encodings.utf8
  };
  var lookup = {
    ...encodings,
    ...aliases
  };
  var anonymousCount = 0;
});

// ../../../../bun-vfs$$/node_modules/events/index.js
var exports_events = {};
__export(exports_events, {
  prototype: () => P2,
  once: () => M,
  default: () => A,
  EventEmitter: () => o
});
function x2(t) {
  console && console.warn && console.warn(t);
}
function o() {
  o.init.call(this);
}
function v2(t) {
  if (typeof t != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t);
}
function m(t) {
  return t._maxListeners === undefined ? o.defaultMaxListeners : t._maxListeners;
}
function y(t, e, n, r) {
  var i, f, s;
  if (v2(n), f = t._events, f === undefined ? (f = t._events = Object.create(null), t._eventsCount = 0) : (f.newListener !== undefined && (t.emit("newListener", e, n.listener ? n.listener : n), f = t._events), s = f[e]), s === undefined)
    s = f[e] = n, ++t._eventsCount;
  else if (typeof s == "function" ? s = f[e] = r ? [n, s] : [s, n] : r ? s.unshift(n) : s.push(n), i = m(t), i > 0 && s.length > i && !s.warned) {
    s.warned = true;
    var u = new Error("Possible EventEmitter memory leak detected. " + s.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    u.name = "MaxListenersExceededWarning", u.emitter = t, u.type = e, u.count = s.length, x2(u);
  }
  return t;
}
function C() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function g(t, e, n) {
  var r = { fired: false, wrapFn: undefined, target: t, type: e, listener: n }, i = C.bind(r);
  return i.listener = n, r.wrapFn = i, i;
}
function _(t, e, n) {
  var r = t._events;
  if (r === undefined)
    return [];
  var i = r[e];
  return i === undefined ? [] : typeof i == "function" ? n ? [i.listener || i] : [i] : n ? R(i) : b2(i, i.length);
}
function w2(t) {
  var e = this._events;
  if (e !== undefined) {
    var n = e[t];
    if (typeof n == "function")
      return 1;
    if (n !== undefined)
      return n.length;
  }
  return 0;
}
function b2(t, e) {
  for (var n = new Array(e), r = 0;r < e; ++r)
    n[r] = t[r];
  return n;
}
function j(t, e) {
  for (;e + 1 < t.length; e++)
    t[e] = t[e + 1];
  t.pop();
}
function R(t) {
  for (var e = new Array(t.length), n = 0;n < e.length; ++n)
    e[n] = t[n].listener || t[n];
  return e;
}
function M(t, e) {
  return new Promise(function(n, r) {
    function i(s) {
      t.removeListener(e, f), r(s);
    }
    function f() {
      typeof t.removeListener == "function" && t.removeListener("error", i), n([].slice.call(arguments));
    }
    E(t, e, f, { once: true }), e !== "error" && N(t, i, { once: true });
  });
}
function N(t, e, n) {
  typeof t.on == "function" && E(t, "error", e, n);
}
function E(t, e, n, r) {
  if (typeof t.on == "function")
    r.once ? t.once(e, n) : t.on(e, n);
  else if (typeof t.addEventListener == "function")
    t.addEventListener(e, function i(f) {
      r.once && t.removeEventListener(e, i), n(f);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t);
}
var a, d, l, L, h = 10, A, P2;
var init_events = __esm(() => {
  a = typeof Reflect == "object" ? Reflect : null;
  d = a && typeof a.apply == "function" ? a.apply : function(e, n, r) {
    return Function.prototype.apply.call(e, n, r);
  };
  a && typeof a.ownKeys == "function" ? l = a.ownKeys : Object.getOwnPropertySymbols ? l = function(e) {
    return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
  } : l = function(e) {
    return Object.getOwnPropertyNames(e);
  };
  L = Number.isNaN || function(e) {
    return e !== e;
  };
  o.EventEmitter = o;
  o.prototype._events = undefined;
  o.prototype._eventsCount = 0;
  o.prototype._maxListeners = undefined;
  Object.defineProperty(o, "defaultMaxListeners", { enumerable: true, get: function() {
    return h;
  }, set: function(t) {
    if (typeof t != "number" || t < 0 || L(t))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
    h = t;
  } });
  o.init = function() {
    (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || undefined;
  };
  o.prototype.setMaxListeners = function(e) {
    if (typeof e != "number" || e < 0 || L(e))
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
    return this._maxListeners = e, this;
  };
  o.prototype.getMaxListeners = function() {
    return m(this);
  };
  o.prototype.emit = function(e) {
    for (var n = [], r = 1;r < arguments.length; r++)
      n.push(arguments[r]);
    var i = e === "error", f = this._events;
    if (f !== undefined)
      i = i && f.error === undefined;
    else if (!i)
      return false;
    if (i) {
      var s;
      if (n.length > 0 && (s = n[0]), s instanceof Error)
        throw s;
      var u = new Error("Unhandled error." + (s ? " (" + s.message + ")" : ""));
      throw u.context = s, u;
    }
    var c = f[e];
    if (c === undefined)
      return false;
    if (typeof c == "function")
      d(c, this, n);
    else
      for (var p = c.length, O2 = b2(c, p), r = 0;r < p; ++r)
        d(O2[r], this, n);
    return true;
  };
  o.prototype.addListener = function(e, n) {
    return y(this, e, n, false);
  };
  o.prototype.on = o.prototype.addListener;
  o.prototype.prependListener = function(e, n) {
    return y(this, e, n, true);
  };
  o.prototype.once = function(e, n) {
    return v2(n), this.on(e, g(this, e, n)), this;
  };
  o.prototype.prependOnceListener = function(e, n) {
    return v2(n), this.prependListener(e, g(this, e, n)), this;
  };
  o.prototype.removeListener = function(e, n) {
    var r, i, f, s, u;
    if (v2(n), i = this._events, i === undefined)
      return this;
    if (r = i[e], r === undefined)
      return this;
    if (r === n || r.listener === n)
      --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, r.listener || n));
    else if (typeof r != "function") {
      for (f = -1, s = r.length - 1;s >= 0; s--)
        if (r[s] === n || r[s].listener === n) {
          u = r[s].listener, f = s;
          break;
        }
      if (f < 0)
        return this;
      f === 0 ? r.shift() : j(r, f), r.length === 1 && (i[e] = r[0]), i.removeListener !== undefined && this.emit("removeListener", e, u || n);
    }
    return this;
  };
  o.prototype.off = o.prototype.removeListener;
  o.prototype.removeAllListeners = function(e) {
    var n, r, i;
    if (r = this._events, r === undefined)
      return this;
    if (r.removeListener === undefined)
      return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : r[e] !== undefined && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete r[e]), this;
    if (arguments.length === 0) {
      var f = Object.keys(r), s;
      for (i = 0;i < f.length; ++i)
        s = f[i], s !== "removeListener" && this.removeAllListeners(s);
      return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
    }
    if (n = r[e], typeof n == "function")
      this.removeListener(e, n);
    else if (n !== undefined)
      for (i = n.length - 1;i >= 0; i--)
        this.removeListener(e, n[i]);
    return this;
  };
  o.prototype.listeners = function(e) {
    return _(this, e, true);
  };
  o.prototype.rawListeners = function(e) {
    return _(this, e, false);
  };
  o.listenerCount = function(t, e) {
    return typeof t.listenerCount == "function" ? t.listenerCount(e) : w2.call(t, e);
  };
  o.prototype.listenerCount = w2;
  o.prototype.eventNames = function() {
    return this._eventsCount > 0 ? l(this._events) : [];
  };
  A = o;
  P2 = o.prototype;
});

// node_modules/catering/next-tick-browser.js
var require_next_tick_browser = __commonJS((exports, module) => {
  module.exports = typeof queueMicrotask === "function" ? queueMicrotask : (fn) => Promise.resolve().then(fn);
});

// node_modules/catering/index.js
var require_catering = __commonJS((exports) => {
  var nextTick = require_next_tick_browser();
  exports.fromCallback = function(callback, symbol) {
    if (callback === undefined) {
      var promise = new Promise(function(resolve, reject) {
        callback = function(err, res) {
          if (err)
            reject(err);
          else
            resolve(res);
        };
      });
      callback[symbol !== undefined ? symbol : "promise"] = promise;
    } else if (typeof callback !== "function") {
      throw new TypeError("Callback must be a function");
    }
    return callback;
  };
  exports.fromPromise = function(promise, callback) {
    if (callback === undefined)
      return promise;
    promise.then(function(res) {
      nextTick(() => callback(null, res));
    }).catch(function(err) {
      nextTick(() => callback(err));
    });
  };
});

// node_modules/abstract-level/lib/common.js
var require_common = __commonJS((exports) => {
  exports.getCallback = function(options, callback) {
    return typeof options === "function" ? options : callback;
  };
  exports.getOptions = function(options, def) {
    if (typeof options === "object" && options !== null) {
      return options;
    }
    if (def !== undefined) {
      return def;
    }
    return {};
  };
});

// node_modules/abstract-level/abstract-iterator.js
var require_abstract_iterator = __commonJS((exports) => {
  var { fromCallback } = require_catering();
  var ModuleError = require_module_error();
  var { getOptions, getCallback } = require_common();
  var kPromise = Symbol("promise");
  var kCallback = Symbol("callback");
  var kWorking = Symbol("working");
  var kHandleOne = Symbol("handleOne");
  var kHandleMany = Symbol("handleMany");
  var kAutoClose = Symbol("autoClose");
  var kFinishWork = Symbol("finishWork");
  var kReturnMany = Symbol("returnMany");
  var kClosing = Symbol("closing");
  var kHandleClose = Symbol("handleClose");
  var kClosed = Symbol("closed");
  var kCloseCallbacks = Symbol("closeCallbacks");
  var kKeyEncoding = Symbol("keyEncoding");
  var kValueEncoding = Symbol("valueEncoding");
  var kAbortOnClose = Symbol("abortOnClose");
  var kLegacy = Symbol("legacy");
  var kKeys = Symbol("keys");
  var kValues = Symbol("values");
  var kLimit = Symbol("limit");
  var kCount = Symbol("count");
  var emptyOptions = Object.freeze({});
  var noop = () => {
  };
  var warnedEnd = false;

  class CommonIterator {
    constructor(db, options, legacy) {
      if (typeof db !== "object" || db === null) {
        const hint = db === null ? "null" : typeof db;
        throw new TypeError(`The first argument must be an abstract-level database, received ${hint}`);
      }
      if (typeof options !== "object" || options === null) {
        throw new TypeError("The second argument must be an options object");
      }
      this[kClosed] = false;
      this[kCloseCallbacks] = [];
      this[kWorking] = false;
      this[kClosing] = false;
      this[kAutoClose] = false;
      this[kCallback] = null;
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
      this[kHandleClose] = this[kHandleClose].bind(this);
      this[kKeyEncoding] = options[kKeyEncoding];
      this[kValueEncoding] = options[kValueEncoding];
      this[kLegacy] = legacy;
      this[kLimit] = Number.isInteger(options.limit) && options.limit >= 0 ? options.limit : Infinity;
      this[kCount] = 0;
      this[kAbortOnClose] = !!options.abortOnClose;
      this.db = db;
      this.db.attachResource(this);
      this.nextTick = db.nextTick;
    }
    get count() {
      return this[kCount];
    }
    get limit() {
      return this[kLimit];
    }
    next(callback) {
      let promise;
      if (callback === undefined) {
        promise = new Promise((resolve, reject) => {
          callback = (err, key, value) => {
            if (err)
              reject(err);
            else if (!this[kLegacy])
              resolve(key);
            else if (key === undefined && value === undefined)
              resolve();
            else
              resolve([key, value]);
          };
        });
      } else if (typeof callback !== "function") {
        throw new TypeError("Callback must be a function");
      }
      if (this[kClosing]) {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call next() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      } else if (this[kWorking]) {
        this.nextTick(callback, new ModuleError("Iterator is busy: cannot call next() until previous call has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        }));
      } else {
        this[kWorking] = true;
        this[kCallback] = callback;
        if (this[kCount] >= this[kLimit])
          this.nextTick(this[kHandleOne], null);
        else
          this._next(this[kHandleOne]);
      }
      return promise;
    }
    _next(callback) {
      this.nextTick(callback);
    }
    nextv(size, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, emptyOptions);
      if (!Number.isInteger(size)) {
        this.nextTick(callback, new TypeError("The first argument 'size' must be an integer"));
        return callback[kPromise];
      }
      if (this[kClosing]) {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call nextv() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      } else if (this[kWorking]) {
        this.nextTick(callback, new ModuleError("Iterator is busy: cannot call nextv() until previous call has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        }));
      } else {
        if (size < 1)
          size = 1;
        if (this[kLimit] < Infinity)
          size = Math.min(size, this[kLimit] - this[kCount]);
        this[kWorking] = true;
        this[kCallback] = callback;
        if (size <= 0)
          this.nextTick(this[kHandleMany], null, []);
        else
          this._nextv(size, options, this[kHandleMany]);
      }
      return callback[kPromise];
    }
    _nextv(size, options, callback) {
      const acc = [];
      const onnext = (err, key, value) => {
        if (err) {
          return callback(err);
        } else if (this[kLegacy] ? key === undefined && value === undefined : key === undefined) {
          return callback(null, acc);
        }
        acc.push(this[kLegacy] ? [key, value] : key);
        if (acc.length === size) {
          callback(null, acc);
        } else {
          this._next(onnext);
        }
      };
      this._next(onnext);
    }
    all(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, emptyOptions);
      if (this[kClosing]) {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call all() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      } else if (this[kWorking]) {
        this.nextTick(callback, new ModuleError("Iterator is busy: cannot call all() until previous call has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        }));
      } else {
        this[kWorking] = true;
        this[kCallback] = callback;
        this[kAutoClose] = true;
        if (this[kCount] >= this[kLimit])
          this.nextTick(this[kHandleMany], null, []);
        else
          this._all(options, this[kHandleMany]);
      }
      return callback[kPromise];
    }
    _all(options, callback) {
      let count = this[kCount];
      const acc = [];
      const nextv = () => {
        const size = this[kLimit] < Infinity ? Math.min(1000, this[kLimit] - count) : 1000;
        if (size <= 0) {
          this.nextTick(callback, null, acc);
        } else {
          this._nextv(size, emptyOptions, onnextv);
        }
      };
      const onnextv = (err, items) => {
        if (err) {
          callback(err);
        } else if (items.length === 0) {
          callback(null, acc);
        } else {
          acc.push.apply(acc, items);
          count += items.length;
          nextv();
        }
      };
      nextv();
    }
    [kFinishWork]() {
      const cb = this[kCallback];
      if (this[kAbortOnClose] && cb === null)
        return noop;
      this[kWorking] = false;
      this[kCallback] = null;
      if (this[kClosing])
        this._close(this[kHandleClose]);
      return cb;
    }
    [kReturnMany](cb, err, items) {
      if (this[kAutoClose]) {
        this.close(cb.bind(null, err, items));
      } else {
        cb(err, items);
      }
    }
    seek(target, options) {
      options = getOptions(options, emptyOptions);
      if (this[kClosing]) {
      } else if (this[kWorking]) {
        throw new ModuleError("Iterator is busy: cannot call seek() until next() has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        });
      } else {
        const keyEncoding = this.db.keyEncoding(options.keyEncoding || this[kKeyEncoding]);
        const keyFormat = keyEncoding.format;
        if (options.keyEncoding !== keyFormat) {
          options = { ...options, keyEncoding: keyFormat };
        }
        const mapped = this.db.prefixKey(keyEncoding.encode(target), keyFormat);
        this._seek(mapped, options);
      }
    }
    _seek(target, options) {
      throw new ModuleError("Iterator does not support seek()", {
        code: "LEVEL_NOT_SUPPORTED"
      });
    }
    close(callback) {
      callback = fromCallback(callback, kPromise);
      if (this[kClosed]) {
        this.nextTick(callback);
      } else if (this[kClosing]) {
        this[kCloseCallbacks].push(callback);
      } else {
        this[kClosing] = true;
        this[kCloseCallbacks].push(callback);
        if (!this[kWorking]) {
          this._close(this[kHandleClose]);
        } else if (this[kAbortOnClose]) {
          const cb = this[kFinishWork]();
          cb(new ModuleError("Aborted on iterator close()", {
            code: "LEVEL_ITERATOR_NOT_OPEN"
          }));
        }
      }
      return callback[kPromise];
    }
    _close(callback) {
      this.nextTick(callback);
    }
    [kHandleClose]() {
      this[kClosed] = true;
      this.db.detachResource(this);
      const callbacks = this[kCloseCallbacks];
      this[kCloseCallbacks] = [];
      for (const cb of callbacks) {
        cb();
      }
    }
    async* [Symbol.asyncIterator]() {
      try {
        let item;
        while ((item = await this.next()) !== undefined) {
          yield item;
        }
      } finally {
        if (!this[kClosed])
          await this.close();
      }
    }
  }

  class AbstractIterator extends CommonIterator {
    constructor(db, options) {
      super(db, options, true);
      this[kKeys] = options.keys !== false;
      this[kValues] = options.values !== false;
    }
    [kHandleOne](err, key, value) {
      const cb = this[kFinishWork]();
      if (err)
        return cb(err);
      try {
        key = this[kKeys] && key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
        value = this[kValues] && value !== undefined ? this[kValueEncoding].decode(value) : undefined;
      } catch (err2) {
        return cb(new IteratorDecodeError("entry", err2));
      }
      if (!(key === undefined && value === undefined)) {
        this[kCount]++;
      }
      cb(null, key, value);
    }
    [kHandleMany](err, entries) {
      const cb = this[kFinishWork]();
      if (err)
        return this[kReturnMany](cb, err);
      try {
        for (const entry of entries) {
          const key = entry[0];
          const value = entry[1];
          entry[0] = this[kKeys] && key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
          entry[1] = this[kValues] && value !== undefined ? this[kValueEncoding].decode(value) : undefined;
        }
      } catch (err2) {
        return this[kReturnMany](cb, new IteratorDecodeError("entries", err2));
      }
      this[kCount] += entries.length;
      this[kReturnMany](cb, null, entries);
    }
    end(callback) {
      if (!warnedEnd && typeof console !== "undefined") {
        warnedEnd = true;
        console.warn(new ModuleError("The iterator.end() method was renamed to close() and end() is an alias that will be removed in a future version", { code: "LEVEL_LEGACY" }));
      }
      return this.close(callback);
    }
  }

  class AbstractKeyIterator extends CommonIterator {
    constructor(db, options) {
      super(db, options, false);
    }
    [kHandleOne](err, key) {
      const cb = this[kFinishWork]();
      if (err)
        return cb(err);
      try {
        key = key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
      } catch (err2) {
        return cb(new IteratorDecodeError("key", err2));
      }
      if (key !== undefined)
        this[kCount]++;
      cb(null, key);
    }
    [kHandleMany](err, keys) {
      const cb = this[kFinishWork]();
      if (err)
        return this[kReturnMany](cb, err);
      try {
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          keys[i] = key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
        }
      } catch (err2) {
        return this[kReturnMany](cb, new IteratorDecodeError("keys", err2));
      }
      this[kCount] += keys.length;
      this[kReturnMany](cb, null, keys);
    }
  }

  class AbstractValueIterator extends CommonIterator {
    constructor(db, options) {
      super(db, options, false);
    }
    [kHandleOne](err, value) {
      const cb = this[kFinishWork]();
      if (err)
        return cb(err);
      try {
        value = value !== undefined ? this[kValueEncoding].decode(value) : undefined;
      } catch (err2) {
        return cb(new IteratorDecodeError("value", err2));
      }
      if (value !== undefined)
        this[kCount]++;
      cb(null, value);
    }
    [kHandleMany](err, values) {
      const cb = this[kFinishWork]();
      if (err)
        return this[kReturnMany](cb, err);
      try {
        for (let i = 0;i < values.length; i++) {
          const value = values[i];
          values[i] = value !== undefined ? this[kValueEncoding].decode(value) : undefined;
        }
      } catch (err2) {
        return this[kReturnMany](cb, new IteratorDecodeError("values", err2));
      }
      this[kCount] += values.length;
      this[kReturnMany](cb, null, values);
    }
  }

  class IteratorDecodeError extends ModuleError {
    constructor(subject, cause) {
      super(`Iterator could not decode ${subject}`, {
        code: "LEVEL_DECODE_ERROR",
        cause
      });
    }
  }
  for (const k of ["_ended property", "_nexting property", "_end method"]) {
    Object.defineProperty(AbstractIterator.prototype, k.split(" ")[0], {
      get() {
        throw new ModuleError(`The ${k} has been removed`, { code: "LEVEL_LEGACY" });
      },
      set() {
        throw new ModuleError(`The ${k} has been removed`, { code: "LEVEL_LEGACY" });
      }
    });
  }
  AbstractIterator.keyEncoding = kKeyEncoding;
  AbstractIterator.valueEncoding = kValueEncoding;
  exports.AbstractIterator = AbstractIterator;
  exports.AbstractKeyIterator = AbstractKeyIterator;
  exports.AbstractValueIterator = AbstractValueIterator;
});

// node_modules/abstract-level/lib/default-kv-iterator.js
var require_default_kv_iterator = __commonJS((exports) => {
  var { AbstractKeyIterator, AbstractValueIterator } = require_abstract_iterator();
  var kIterator = Symbol("iterator");
  var kCallback = Symbol("callback");
  var kHandleOne = Symbol("handleOne");
  var kHandleMany = Symbol("handleMany");

  class DefaultKeyIterator extends AbstractKeyIterator {
    constructor(db, options) {
      super(db, options);
      this[kIterator] = db.iterator({ ...options, keys: true, values: false });
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
    }
  }

  class DefaultValueIterator extends AbstractValueIterator {
    constructor(db, options) {
      super(db, options);
      this[kIterator] = db.iterator({ ...options, keys: false, values: true });
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
    }
  }
  for (const Iterator of [DefaultKeyIterator, DefaultValueIterator]) {
    const keys = Iterator === DefaultKeyIterator;
    const mapEntry = keys ? (entry) => entry[0] : (entry) => entry[1];
    Iterator.prototype._next = function(callback) {
      this[kCallback] = callback;
      this[kIterator].next(this[kHandleOne]);
    };
    Iterator.prototype[kHandleOne] = function(err, key, value) {
      const callback = this[kCallback];
      if (err)
        callback(err);
      else
        callback(null, keys ? key : value);
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      this[kCallback] = callback;
      this[kIterator].nextv(size, options, this[kHandleMany]);
    };
    Iterator.prototype._all = function(options, callback) {
      this[kCallback] = callback;
      this[kIterator].all(options, this[kHandleMany]);
    };
    Iterator.prototype[kHandleMany] = function(err, entries) {
      const callback = this[kCallback];
      if (err)
        callback(err);
      else
        callback(null, entries.map(mapEntry));
    };
    Iterator.prototype._seek = function(target, options) {
      this[kIterator].seek(target, options);
    };
    Iterator.prototype._close = function(callback) {
      this[kIterator].close(callback);
    };
  }
  exports.DefaultKeyIterator = DefaultKeyIterator;
  exports.DefaultValueIterator = DefaultValueIterator;
});

// node_modules/abstract-level/lib/deferred-iterator.js
var require_deferred_iterator = __commonJS((exports) => {
  var { AbstractIterator, AbstractKeyIterator, AbstractValueIterator } = require_abstract_iterator();
  var ModuleError = require_module_error();
  var kNut = Symbol("nut");
  var kUndefer = Symbol("undefer");
  var kFactory = Symbol("factory");

  class DeferredIterator extends AbstractIterator {
    constructor(db, options) {
      super(db, options);
      this[kNut] = null;
      this[kFactory] = () => db.iterator(options);
      this.db.defer(() => this[kUndefer]());
    }
  }

  class DeferredKeyIterator extends AbstractKeyIterator {
    constructor(db, options) {
      super(db, options);
      this[kNut] = null;
      this[kFactory] = () => db.keys(options);
      this.db.defer(() => this[kUndefer]());
    }
  }

  class DeferredValueIterator extends AbstractValueIterator {
    constructor(db, options) {
      super(db, options);
      this[kNut] = null;
      this[kFactory] = () => db.values(options);
      this.db.defer(() => this[kUndefer]());
    }
  }
  for (const Iterator of [DeferredIterator, DeferredKeyIterator, DeferredValueIterator]) {
    Iterator.prototype[kUndefer] = function() {
      if (this.db.status === "open") {
        this[kNut] = this[kFactory]();
      }
    };
    Iterator.prototype._next = function(callback) {
      if (this[kNut] !== null) {
        this[kNut].next(callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._next(callback));
      } else {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call next() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      }
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      if (this[kNut] !== null) {
        this[kNut].nextv(size, options, callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._nextv(size, options, callback));
      } else {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call nextv() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      }
    };
    Iterator.prototype._all = function(options, callback) {
      if (this[kNut] !== null) {
        this[kNut].all(callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._all(options, callback));
      } else {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call all() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      }
    };
    Iterator.prototype._seek = function(target, options) {
      if (this[kNut] !== null) {
        this[kNut]._seek(target, options);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._seek(target, options));
      }
    };
    Iterator.prototype._close = function(callback) {
      if (this[kNut] !== null) {
        this[kNut].close(callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._close(callback));
      } else {
        this.nextTick(callback);
      }
    };
  }
  exports.DeferredIterator = DeferredIterator;
  exports.DeferredKeyIterator = DeferredKeyIterator;
  exports.DeferredValueIterator = DeferredValueIterator;
});

// node_modules/abstract-level/abstract-chained-batch.js
var require_abstract_chained_batch = __commonJS((exports) => {
  var { fromCallback } = require_catering();
  var ModuleError = require_module_error();
  var { getCallback, getOptions } = require_common();
  var kPromise = Symbol("promise");
  var kStatus = Symbol("status");
  var kOperations = Symbol("operations");
  var kFinishClose = Symbol("finishClose");
  var kCloseCallbacks = Symbol("closeCallbacks");

  class AbstractChainedBatch {
    constructor(db) {
      if (typeof db !== "object" || db === null) {
        const hint = db === null ? "null" : typeof db;
        throw new TypeError(`The first argument must be an abstract-level database, received ${hint}`);
      }
      this[kOperations] = [];
      this[kCloseCallbacks] = [];
      this[kStatus] = "open";
      this[kFinishClose] = this[kFinishClose].bind(this);
      this.db = db;
      this.db.attachResource(this);
      this.nextTick = db.nextTick;
    }
    get length() {
      return this[kOperations].length;
    }
    put(key, value, options) {
      if (this[kStatus] !== "open") {
        throw new ModuleError("Batch is not open: cannot call put() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        });
      }
      const err = this.db._checkKey(key) || this.db._checkValue(value);
      if (err)
        throw err;
      const db = options && options.sublevel != null ? options.sublevel : this.db;
      const original = options;
      const keyEncoding = db.keyEncoding(options && options.keyEncoding);
      const valueEncoding = db.valueEncoding(options && options.valueEncoding);
      const keyFormat = keyEncoding.format;
      options = { ...options, keyEncoding: keyFormat, valueEncoding: valueEncoding.format };
      if (db !== this.db) {
        options.sublevel = null;
      }
      const mappedKey = db.prefixKey(keyEncoding.encode(key), keyFormat);
      const mappedValue = valueEncoding.encode(value);
      this._put(mappedKey, mappedValue, options);
      this[kOperations].push({ ...original, type: "put", key, value });
      return this;
    }
    _put(key, value, options) {
    }
    del(key, options) {
      if (this[kStatus] !== "open") {
        throw new ModuleError("Batch is not open: cannot call del() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        });
      }
      const err = this.db._checkKey(key);
      if (err)
        throw err;
      const db = options && options.sublevel != null ? options.sublevel : this.db;
      const original = options;
      const keyEncoding = db.keyEncoding(options && options.keyEncoding);
      const keyFormat = keyEncoding.format;
      options = { ...options, keyEncoding: keyFormat };
      if (db !== this.db) {
        options.sublevel = null;
      }
      this._del(db.prefixKey(keyEncoding.encode(key), keyFormat), options);
      this[kOperations].push({ ...original, type: "del", key });
      return this;
    }
    _del(key, options) {
    }
    clear() {
      if (this[kStatus] !== "open") {
        throw new ModuleError("Batch is not open: cannot call clear() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        });
      }
      this._clear();
      this[kOperations] = [];
      return this;
    }
    _clear() {
    }
    write(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options);
      if (this[kStatus] !== "open") {
        this.nextTick(callback, new ModuleError("Batch is not open: cannot call write() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        }));
      } else if (this.length === 0) {
        this.close(callback);
      } else {
        this[kStatus] = "writing";
        this._write(options, (err) => {
          this[kStatus] = "closing";
          this[kCloseCallbacks].push(() => callback(err));
          if (!err)
            this.db.emit("batch", this[kOperations]);
          this._close(this[kFinishClose]);
        });
      }
      return callback[kPromise];
    }
    _write(options, callback) {
    }
    close(callback) {
      callback = fromCallback(callback, kPromise);
      if (this[kStatus] === "closing") {
        this[kCloseCallbacks].push(callback);
      } else if (this[kStatus] === "closed") {
        this.nextTick(callback);
      } else {
        this[kCloseCallbacks].push(callback);
        if (this[kStatus] !== "writing") {
          this[kStatus] = "closing";
          this._close(this[kFinishClose]);
        }
      }
      return callback[kPromise];
    }
    _close(callback) {
      this.nextTick(callback);
    }
    [kFinishClose]() {
      this[kStatus] = "closed";
      this.db.detachResource(this);
      const callbacks = this[kCloseCallbacks];
      this[kCloseCallbacks] = [];
      for (const cb of callbacks) {
        cb();
      }
    }
  }
  exports.AbstractChainedBatch = AbstractChainedBatch;
});

// node_modules/abstract-level/lib/default-chained-batch.js
var require_default_chained_batch = __commonJS((exports) => {
  var { AbstractChainedBatch } = require_abstract_chained_batch();
  var ModuleError = require_module_error();
  var kEncoded = Symbol("encoded");

  class DefaultChainedBatch extends AbstractChainedBatch {
    constructor(db) {
      super(db);
      this[kEncoded] = [];
    }
    _put(key, value, options) {
      this[kEncoded].push({ ...options, type: "put", key, value });
    }
    _del(key, options) {
      this[kEncoded].push({ ...options, type: "del", key });
    }
    _clear() {
      this[kEncoded] = [];
    }
    _write(options, callback) {
      if (this.db.status === "opening") {
        this.db.defer(() => this._write(options, callback));
      } else if (this.db.status === "open") {
        if (this[kEncoded].length === 0)
          this.nextTick(callback);
        else
          this.db._batch(this[kEncoded], options, callback);
      } else {
        this.nextTick(callback, new ModuleError("Batch is not open: cannot call write() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        }));
      }
    }
  }
  exports.DefaultChainedBatch = DefaultChainedBatch;
});

// node_modules/abstract-level/lib/range-options.js
var require_range_options = __commonJS((exports, module) => {
  var ModuleError = require_module_error();
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var rangeOptions = new Set(["lt", "lte", "gt", "gte"]);
  module.exports = function(options, keyEncoding) {
    const result = {};
    for (const k in options) {
      if (!hasOwnProperty.call(options, k))
        continue;
      if (k === "keyEncoding" || k === "valueEncoding")
        continue;
      if (k === "start" || k === "end") {
        throw new ModuleError(`The legacy range option '${k}' has been removed`, {
          code: "LEVEL_LEGACY"
        });
      } else if (k === "encoding") {
        throw new ModuleError("The levelup-style 'encoding' alias has been removed, use 'valueEncoding' instead", {
          code: "LEVEL_LEGACY"
        });
      }
      if (rangeOptions.has(k)) {
        result[k] = keyEncoding.encode(options[k]);
      } else {
        result[k] = options[k];
      }
    }
    result.reverse = !!result.reverse;
    result.limit = Number.isInteger(result.limit) && result.limit >= 0 ? result.limit : -1;
    return result;
  };
});

// node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS((exports, module) => {
  /*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  var promise;
  module.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
    throw err;
  }, 0));
});

// node_modules/abstract-level/lib/next-tick-browser.js
var require_next_tick_browser2 = __commonJS((exports, module) => {
  var queueMicrotask2 = require_queue_microtask();
  module.exports = function(fn, ...args) {
    if (args.length === 0) {
      queueMicrotask2(fn);
    } else {
      queueMicrotask2(() => fn(...args));
    }
  };
});

// node_modules/abstract-level/lib/abstract-sublevel-iterator.js
var require_abstract_sublevel_iterator = __commonJS((exports) => {
  var { AbstractIterator, AbstractKeyIterator, AbstractValueIterator } = require_abstract_iterator();
  var kUnfix = Symbol("unfix");
  var kIterator = Symbol("iterator");
  var kHandleOne = Symbol("handleOne");
  var kHandleMany = Symbol("handleMany");
  var kCallback = Symbol("callback");

  class AbstractSublevelIterator extends AbstractIterator {
    constructor(db, options, iterator, unfix) {
      super(db, options);
      this[kIterator] = iterator;
      this[kUnfix] = unfix;
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
      this[kCallback] = null;
    }
    [kHandleOne](err, key, value) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      if (key !== undefined)
        key = this[kUnfix](key);
      callback(err, key, value);
    }
    [kHandleMany](err, entries) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      for (const entry of entries) {
        const key = entry[0];
        if (key !== undefined)
          entry[0] = this[kUnfix](key);
      }
      callback(err, entries);
    }
  }

  class AbstractSublevelKeyIterator extends AbstractKeyIterator {
    constructor(db, options, iterator, unfix) {
      super(db, options);
      this[kIterator] = iterator;
      this[kUnfix] = unfix;
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
      this[kCallback] = null;
    }
    [kHandleOne](err, key) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      if (key !== undefined)
        key = this[kUnfix](key);
      callback(err, key);
    }
    [kHandleMany](err, keys) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      for (let i = 0;i < keys.length; i++) {
        const key = keys[i];
        if (key !== undefined)
          keys[i] = this[kUnfix](key);
      }
      callback(err, keys);
    }
  }

  class AbstractSublevelValueIterator extends AbstractValueIterator {
    constructor(db, options, iterator) {
      super(db, options);
      this[kIterator] = iterator;
    }
  }
  for (const Iterator of [AbstractSublevelIterator, AbstractSublevelKeyIterator]) {
    Iterator.prototype._next = function(callback) {
      this[kCallback] = callback;
      this[kIterator].next(this[kHandleOne]);
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      this[kCallback] = callback;
      this[kIterator].nextv(size, options, this[kHandleMany]);
    };
    Iterator.prototype._all = function(options, callback) {
      this[kCallback] = callback;
      this[kIterator].all(options, this[kHandleMany]);
    };
  }
  for (const Iterator of [AbstractSublevelValueIterator]) {
    Iterator.prototype._next = function(callback) {
      this[kIterator].next(callback);
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      this[kIterator].nextv(size, options, callback);
    };
    Iterator.prototype._all = function(options, callback) {
      this[kIterator].all(options, callback);
    };
  }
  for (const Iterator of [AbstractSublevelIterator, AbstractSublevelKeyIterator, AbstractSublevelValueIterator]) {
    Iterator.prototype._seek = function(target, options) {
      this[kIterator].seek(target, options);
    };
    Iterator.prototype._close = function(callback) {
      this[kIterator].close(callback);
    };
  }
  exports.AbstractSublevelIterator = AbstractSublevelIterator;
  exports.AbstractSublevelKeyIterator = AbstractSublevelKeyIterator;
  exports.AbstractSublevelValueIterator = AbstractSublevelValueIterator;
});

// node_modules/abstract-level/lib/abstract-sublevel.js
var require_abstract_sublevel = __commonJS((exports, module) => {
  var ModuleError = require_module_error();
  var { Buffer: Buffer2 } = (init_buffer(), __toCommonJS(exports_buffer)) || {};
  var {
    AbstractSublevelIterator,
    AbstractSublevelKeyIterator,
    AbstractSublevelValueIterator
  } = require_abstract_sublevel_iterator();
  var kPrefix = Symbol("prefix");
  var kUpperBound = Symbol("upperBound");
  var kPrefixRange = Symbol("prefixRange");
  var kParent = Symbol("parent");
  var kUnfix = Symbol("unfix");
  var textEncoder = new TextEncoder;
  var defaults = { separator: "!" };
  module.exports = function({ AbstractLevel }) {

    class AbstractSublevel extends AbstractLevel {
      static defaults(options) {
        if (typeof options === "string") {
          throw new ModuleError("The subleveldown string shorthand for { separator } has been removed", {
            code: "LEVEL_LEGACY"
          });
        } else if (options && options.open) {
          throw new ModuleError("The subleveldown open option has been removed", {
            code: "LEVEL_LEGACY"
          });
        }
        if (options == null) {
          return defaults;
        } else if (!options.separator) {
          return { ...options, separator: "!" };
        } else {
          return options;
        }
      }
      constructor(db, name, options) {
        const { separator, manifest, ...forward } = AbstractSublevel.defaults(options);
        name = trim(name, separator);
        const reserved = separator.charCodeAt(0) + 1;
        const parent = db[kParent] || db;
        if (!textEncoder.encode(name).every((x3) => x3 > reserved && x3 < 127)) {
          throw new ModuleError(`Prefix must use bytes > ${reserved} < ${127}`, {
            code: "LEVEL_INVALID_PREFIX"
          });
        }
        super(mergeManifests(parent, manifest), forward);
        const prefix = (db.prefix || "") + separator + name + separator;
        const upperBound = prefix.slice(0, -1) + String.fromCharCode(reserved);
        this[kParent] = parent;
        this[kPrefix] = new MultiFormat(prefix);
        this[kUpperBound] = new MultiFormat(upperBound);
        this[kUnfix] = new Unfixer;
        this.nextTick = parent.nextTick;
      }
      prefixKey(key, keyFormat) {
        if (keyFormat === "utf8") {
          return this[kPrefix].utf8 + key;
        } else if (key.byteLength === 0) {
          return this[kPrefix][keyFormat];
        } else if (keyFormat === "view") {
          const view = this[kPrefix].view;
          const result = new Uint8Array(view.byteLength + key.byteLength);
          result.set(view, 0);
          result.set(key, view.byteLength);
          return result;
        } else {
          const buffer = this[kPrefix].buffer;
          return Buffer2.concat([buffer, key], buffer.byteLength + key.byteLength);
        }
      }
      [kPrefixRange](range, keyFormat) {
        if (range.gte !== undefined) {
          range.gte = this.prefixKey(range.gte, keyFormat);
        } else if (range.gt !== undefined) {
          range.gt = this.prefixKey(range.gt, keyFormat);
        } else {
          range.gte = this[kPrefix][keyFormat];
        }
        if (range.lte !== undefined) {
          range.lte = this.prefixKey(range.lte, keyFormat);
        } else if (range.lt !== undefined) {
          range.lt = this.prefixKey(range.lt, keyFormat);
        } else {
          range.lte = this[kUpperBound][keyFormat];
        }
      }
      get prefix() {
        return this[kPrefix].utf8;
      }
      get db() {
        return this[kParent];
      }
      _open(options, callback) {
        this[kParent].open({ passive: true }, callback);
      }
      _put(key, value, options, callback) {
        this[kParent].put(key, value, options, callback);
      }
      _get(key, options, callback) {
        this[kParent].get(key, options, callback);
      }
      _getMany(keys, options, callback) {
        this[kParent].getMany(keys, options, callback);
      }
      _del(key, options, callback) {
        this[kParent].del(key, options, callback);
      }
      _batch(operations, options, callback) {
        this[kParent].batch(operations, options, callback);
      }
      _clear(options, callback) {
        this[kPrefixRange](options, options.keyEncoding);
        this[kParent].clear(options, callback);
      }
      _iterator(options) {
        this[kPrefixRange](options, options.keyEncoding);
        const iterator = this[kParent].iterator(options);
        const unfix = this[kUnfix].get(this[kPrefix].utf8.length, options.keyEncoding);
        return new AbstractSublevelIterator(this, options, iterator, unfix);
      }
      _keys(options) {
        this[kPrefixRange](options, options.keyEncoding);
        const iterator = this[kParent].keys(options);
        const unfix = this[kUnfix].get(this[kPrefix].utf8.length, options.keyEncoding);
        return new AbstractSublevelKeyIterator(this, options, iterator, unfix);
      }
      _values(options) {
        this[kPrefixRange](options, options.keyEncoding);
        const iterator = this[kParent].values(options);
        return new AbstractSublevelValueIterator(this, options, iterator);
      }
    }
    return { AbstractSublevel };
  };
  var mergeManifests = function(parent, manifest) {
    return {
      ...parent.supports,
      createIfMissing: false,
      errorIfExists: false,
      events: {},
      additionalMethods: {},
      ...manifest,
      encodings: {
        utf8: supportsEncoding(parent, "utf8"),
        buffer: supportsEncoding(parent, "buffer"),
        view: supportsEncoding(parent, "view")
      }
    };
  };
  var supportsEncoding = function(parent, encoding) {
    return parent.supports.encodings[encoding] ? parent.keyEncoding(encoding).name === encoding : false;
  };

  class MultiFormat {
    constructor(key) {
      this.utf8 = key;
      this.view = textEncoder.encode(key);
      this.buffer = Buffer2 ? Buffer2.from(this.view.buffer, 0, this.view.byteLength) : {};
    }
  }

  class Unfixer {
    constructor() {
      this.cache = new Map;
    }
    get(prefixLength, keyFormat) {
      let unfix = this.cache.get(keyFormat);
      if (unfix === undefined) {
        if (keyFormat === "view") {
          unfix = function(prefixLength2, key) {
            return key.subarray(prefixLength2);
          }.bind(null, prefixLength);
        } else {
          unfix = function(prefixLength2, key) {
            return key.slice(prefixLength2);
          }.bind(null, prefixLength);
        }
        this.cache.set(keyFormat, unfix);
      }
      return unfix;
    }
  }
  var trim = function(str, char) {
    let start = 0;
    let end = str.length;
    while (start < end && str[start] === char)
      start++;
    while (end > start && str[end - 1] === char)
      end--;
    return str.slice(start, end);
  };
});

// node_modules/abstract-level/abstract-level.js
var require_abstract_level = __commonJS((exports) => {
  var { supports } = require_level_supports();
  var { Transcoder } = require_level_transcoder();
  var { EventEmitter } = (init_events(), __toCommonJS(exports_events));
  var { fromCallback } = require_catering();
  var ModuleError = require_module_error();
  var { AbstractIterator } = require_abstract_iterator();
  var { DefaultKeyIterator, DefaultValueIterator } = require_default_kv_iterator();
  var { DeferredIterator, DeferredKeyIterator, DeferredValueIterator } = require_deferred_iterator();
  var { DefaultChainedBatch } = require_default_chained_batch();
  var { getCallback, getOptions } = require_common();
  var rangeOptions = require_range_options();
  var kPromise = Symbol("promise");
  var kLanded = Symbol("landed");
  var kResources = Symbol("resources");
  var kCloseResources = Symbol("closeResources");
  var kOperations = Symbol("operations");
  var kUndefer = Symbol("undefer");
  var kDeferOpen = Symbol("deferOpen");
  var kOptions = Symbol("options");
  var kStatus = Symbol("status");
  var kDefaultOptions = Symbol("defaultOptions");
  var kTranscoder = Symbol("transcoder");
  var kKeyEncoding = Symbol("keyEncoding");
  var kValueEncoding = Symbol("valueEncoding");
  var noop = () => {
  };

  class AbstractLevel extends EventEmitter {
    constructor(manifest, options) {
      super();
      if (typeof manifest !== "object" || manifest === null) {
        throw new TypeError("The first argument 'manifest' must be an object");
      }
      options = getOptions(options);
      const { keyEncoding, valueEncoding, passive, ...forward } = options;
      this[kResources] = new Set;
      this[kOperations] = [];
      this[kDeferOpen] = true;
      this[kOptions] = forward;
      this[kStatus] = "opening";
      this.supports = supports(manifest, {
        status: true,
        promises: true,
        clear: true,
        getMany: true,
        deferredOpen: true,
        snapshots: manifest.snapshots !== false,
        permanence: manifest.permanence !== false,
        keyIterator: true,
        valueIterator: true,
        iteratorNextv: true,
        iteratorAll: true,
        encodings: manifest.encodings || {},
        events: Object.assign({}, manifest.events, {
          opening: true,
          open: true,
          closing: true,
          closed: true,
          put: true,
          del: true,
          batch: true,
          clear: true
        })
      });
      this[kTranscoder] = new Transcoder(formats(this));
      this[kKeyEncoding] = this[kTranscoder].encoding(keyEncoding || "utf8");
      this[kValueEncoding] = this[kTranscoder].encoding(valueEncoding || "utf8");
      for (const encoding of this[kTranscoder].encodings()) {
        if (!this.supports.encodings[encoding.commonName]) {
          this.supports.encodings[encoding.commonName] = true;
        }
      }
      this[kDefaultOptions] = {
        empty: Object.freeze({}),
        entry: Object.freeze({
          keyEncoding: this[kKeyEncoding].commonName,
          valueEncoding: this[kValueEncoding].commonName
        }),
        key: Object.freeze({
          keyEncoding: this[kKeyEncoding].commonName
        })
      };
      this.nextTick(() => {
        if (this[kDeferOpen]) {
          this.open({ passive: false }, noop);
        }
      });
    }
    get status() {
      return this[kStatus];
    }
    keyEncoding(encoding) {
      return this[kTranscoder].encoding(encoding != null ? encoding : this[kKeyEncoding]);
    }
    valueEncoding(encoding) {
      return this[kTranscoder].encoding(encoding != null ? encoding : this[kValueEncoding]);
    }
    open(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = { ...this[kOptions], ...getOptions(options) };
      options.createIfMissing = options.createIfMissing !== false;
      options.errorIfExists = !!options.errorIfExists;
      const maybeOpened = (err) => {
        if (this[kStatus] === "closing" || this[kStatus] === "opening") {
          this.once(kLanded, err ? () => maybeOpened(err) : maybeOpened);
        } else if (this[kStatus] !== "open") {
          callback(new ModuleError("Database is not open", {
            code: "LEVEL_DATABASE_NOT_OPEN",
            cause: err
          }));
        } else {
          callback();
        }
      };
      if (options.passive) {
        if (this[kStatus] === "opening") {
          this.once(kLanded, maybeOpened);
        } else {
          this.nextTick(maybeOpened);
        }
      } else if (this[kStatus] === "closed" || this[kDeferOpen]) {
        this[kDeferOpen] = false;
        this[kStatus] = "opening";
        this.emit("opening");
        this._open(options, (err) => {
          if (err) {
            this[kStatus] = "closed";
            this[kCloseResources](() => {
              this.emit(kLanded);
              maybeOpened(err);
            });
            this[kUndefer]();
            return;
          }
          this[kStatus] = "open";
          this[kUndefer]();
          this.emit(kLanded);
          if (this[kStatus] === "open")
            this.emit("open");
          if (this[kStatus] === "open")
            this.emit("ready");
          maybeOpened();
        });
      } else if (this[kStatus] === "open") {
        this.nextTick(maybeOpened);
      } else {
        this.once(kLanded, () => this.open(options, callback));
      }
      return callback[kPromise];
    }
    _open(options, callback) {
      this.nextTick(callback);
    }
    close(callback) {
      callback = fromCallback(callback, kPromise);
      const maybeClosed = (err) => {
        if (this[kStatus] === "opening" || this[kStatus] === "closing") {
          this.once(kLanded, err ? maybeClosed(err) : maybeClosed);
        } else if (this[kStatus] !== "closed") {
          callback(new ModuleError("Database is not closed", {
            code: "LEVEL_DATABASE_NOT_CLOSED",
            cause: err
          }));
        } else {
          callback();
        }
      };
      if (this[kStatus] === "open") {
        this[kStatus] = "closing";
        this.emit("closing");
        const cancel = (err) => {
          this[kStatus] = "open";
          this[kUndefer]();
          this.emit(kLanded);
          maybeClosed(err);
        };
        this[kCloseResources](() => {
          this._close((err) => {
            if (err)
              return cancel(err);
            this[kStatus] = "closed";
            this[kUndefer]();
            this.emit(kLanded);
            if (this[kStatus] === "closed")
              this.emit("closed");
            maybeClosed();
          });
        });
      } else if (this[kStatus] === "closed") {
        this.nextTick(maybeClosed);
      } else {
        this.once(kLanded, () => this.close(callback));
      }
      return callback[kPromise];
    }
    [kCloseResources](callback) {
      if (this[kResources].size === 0) {
        return this.nextTick(callback);
      }
      let pending = this[kResources].size;
      let sync = true;
      const next = () => {
        if (--pending === 0) {
          if (sync)
            this.nextTick(callback);
          else
            callback();
        }
      };
      for (const resource of this[kResources]) {
        resource.close(next);
      }
      sync = false;
      this[kResources].clear();
    }
    _close(callback) {
      this.nextTick(callback);
    }
    get(key, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].entry);
      if (this[kStatus] === "opening") {
        this.defer(() => this.get(key, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const err = this._checkKey(key);
      if (err) {
        this.nextTick(callback, err);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const valueEncoding = this.valueEncoding(options.valueEncoding);
      const keyFormat = keyEncoding.format;
      const valueFormat = valueEncoding.format;
      if (options.keyEncoding !== keyFormat || options.valueEncoding !== valueFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat, valueEncoding: valueFormat });
      }
      this._get(this.prefixKey(keyEncoding.encode(key), keyFormat), options, (err2, value) => {
        if (err2) {
          if (err2.code === "LEVEL_NOT_FOUND" || err2.notFound || /NotFound/i.test(err2)) {
            if (!err2.code)
              err2.code = "LEVEL_NOT_FOUND";
            if (!err2.notFound)
              err2.notFound = true;
            if (!err2.status)
              err2.status = 404;
          }
          return callback(err2);
        }
        try {
          value = valueEncoding.decode(value);
        } catch (err3) {
          return callback(new ModuleError("Could not decode value", {
            code: "LEVEL_DECODE_ERROR",
            cause: err3
          }));
        }
        callback(null, value);
      });
      return callback[kPromise];
    }
    _get(key, options, callback) {
      this.nextTick(callback, new Error("NotFound"));
    }
    getMany(keys, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].entry);
      if (this[kStatus] === "opening") {
        this.defer(() => this.getMany(keys, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      if (!Array.isArray(keys)) {
        this.nextTick(callback, new TypeError("The first argument 'keys' must be an array"));
        return callback[kPromise];
      }
      if (keys.length === 0) {
        this.nextTick(callback, null, []);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const valueEncoding = this.valueEncoding(options.valueEncoding);
      const keyFormat = keyEncoding.format;
      const valueFormat = valueEncoding.format;
      if (options.keyEncoding !== keyFormat || options.valueEncoding !== valueFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat, valueEncoding: valueFormat });
      }
      const mappedKeys = new Array(keys.length);
      for (let i = 0;i < keys.length; i++) {
        const key = keys[i];
        const err = this._checkKey(key);
        if (err) {
          this.nextTick(callback, err);
          return callback[kPromise];
        }
        mappedKeys[i] = this.prefixKey(keyEncoding.encode(key), keyFormat);
      }
      this._getMany(mappedKeys, options, (err, values) => {
        if (err)
          return callback(err);
        try {
          for (let i = 0;i < values.length; i++) {
            if (values[i] !== undefined) {
              values[i] = valueEncoding.decode(values[i]);
            }
          }
        } catch (err2) {
          return callback(new ModuleError(`Could not decode one or more of ${values.length} value(s)`, {
            code: "LEVEL_DECODE_ERROR",
            cause: err2
          }));
        }
        callback(null, values);
      });
      return callback[kPromise];
    }
    _getMany(keys, options, callback) {
      this.nextTick(callback, null, new Array(keys.length).fill(undefined));
    }
    put(key, value, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].entry);
      if (this[kStatus] === "opening") {
        this.defer(() => this.put(key, value, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const err = this._checkKey(key) || this._checkValue(value);
      if (err) {
        this.nextTick(callback, err);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const valueEncoding = this.valueEncoding(options.valueEncoding);
      const keyFormat = keyEncoding.format;
      const valueFormat = valueEncoding.format;
      if (options.keyEncoding !== keyFormat || options.valueEncoding !== valueFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat, valueEncoding: valueFormat });
      }
      const mappedKey = this.prefixKey(keyEncoding.encode(key), keyFormat);
      const mappedValue = valueEncoding.encode(value);
      this._put(mappedKey, mappedValue, options, (err2) => {
        if (err2)
          return callback(err2);
        this.emit("put", key, value);
        callback();
      });
      return callback[kPromise];
    }
    _put(key, value, options, callback) {
      this.nextTick(callback);
    }
    del(key, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].key);
      if (this[kStatus] === "opening") {
        this.defer(() => this.del(key, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const err = this._checkKey(key);
      if (err) {
        this.nextTick(callback, err);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const keyFormat = keyEncoding.format;
      if (options.keyEncoding !== keyFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat });
      }
      this._del(this.prefixKey(keyEncoding.encode(key), keyFormat), options, (err2) => {
        if (err2)
          return callback(err2);
        this.emit("del", key);
        callback();
      });
      return callback[kPromise];
    }
    _del(key, options, callback) {
      this.nextTick(callback);
    }
    batch(operations, options, callback) {
      if (!arguments.length) {
        if (this[kStatus] === "opening")
          return new DefaultChainedBatch(this);
        if (this[kStatus] !== "open") {
          throw new ModuleError("Database is not open", {
            code: "LEVEL_DATABASE_NOT_OPEN"
          });
        }
        return this._chainedBatch();
      }
      if (typeof operations === "function")
        callback = operations;
      else
        callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].empty);
      if (this[kStatus] === "opening") {
        this.defer(() => this.batch(operations, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      if (!Array.isArray(operations)) {
        this.nextTick(callback, new TypeError("The first argument 'operations' must be an array"));
        return callback[kPromise];
      }
      if (operations.length === 0) {
        this.nextTick(callback);
        return callback[kPromise];
      }
      const mapped = new Array(operations.length);
      const { keyEncoding: ke, valueEncoding: ve, ...forward } = options;
      for (let i = 0;i < operations.length; i++) {
        if (typeof operations[i] !== "object" || operations[i] === null) {
          this.nextTick(callback, new TypeError("A batch operation must be an object"));
          return callback[kPromise];
        }
        const op = Object.assign({}, operations[i]);
        if (op.type !== "put" && op.type !== "del") {
          this.nextTick(callback, new TypeError("A batch operation must have a type property that is 'put' or 'del'"));
          return callback[kPromise];
        }
        const err = this._checkKey(op.key);
        if (err) {
          this.nextTick(callback, err);
          return callback[kPromise];
        }
        const db = op.sublevel != null ? op.sublevel : this;
        const keyEncoding = db.keyEncoding(op.keyEncoding || ke);
        const keyFormat = keyEncoding.format;
        op.key = db.prefixKey(keyEncoding.encode(op.key), keyFormat);
        op.keyEncoding = keyFormat;
        if (op.type === "put") {
          const valueErr = this._checkValue(op.value);
          if (valueErr) {
            this.nextTick(callback, valueErr);
            return callback[kPromise];
          }
          const valueEncoding = db.valueEncoding(op.valueEncoding || ve);
          op.value = valueEncoding.encode(op.value);
          op.valueEncoding = valueEncoding.format;
        }
        if (db !== this) {
          op.sublevel = null;
        }
        mapped[i] = op;
      }
      this._batch(mapped, forward, (err) => {
        if (err)
          return callback(err);
        this.emit("batch", operations);
        callback();
      });
      return callback[kPromise];
    }
    _batch(operations, options, callback) {
      this.nextTick(callback);
    }
    sublevel(name, options) {
      return this._sublevel(name, AbstractSublevel.defaults(options));
    }
    _sublevel(name, options) {
      return new AbstractSublevel(this, name, options);
    }
    prefixKey(key, keyFormat) {
      return key;
    }
    clear(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].empty);
      if (this[kStatus] === "opening") {
        this.defer(() => this.clear(options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const original = options;
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      options = rangeOptions(options, keyEncoding);
      options.keyEncoding = keyEncoding.format;
      if (options.limit === 0) {
        this.nextTick(callback);
      } else {
        this._clear(options, (err) => {
          if (err)
            return callback(err);
          this.emit("clear", original);
          callback();
        });
      }
      return callback[kPromise];
    }
    _clear(options, callback) {
      this.nextTick(callback);
    }
    iterator(options) {
      const keyEncoding = this.keyEncoding(options && options.keyEncoding);
      const valueEncoding = this.valueEncoding(options && options.valueEncoding);
      options = rangeOptions(options, keyEncoding);
      options.keys = options.keys !== false;
      options.values = options.values !== false;
      options[AbstractIterator.keyEncoding] = keyEncoding;
      options[AbstractIterator.valueEncoding] = valueEncoding;
      options.keyEncoding = keyEncoding.format;
      options.valueEncoding = valueEncoding.format;
      if (this[kStatus] === "opening") {
        return new DeferredIterator(this, options);
      } else if (this[kStatus] !== "open") {
        throw new ModuleError("Database is not open", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        });
      }
      return this._iterator(options);
    }
    _iterator(options) {
      return new AbstractIterator(this, options);
    }
    keys(options) {
      const keyEncoding = this.keyEncoding(options && options.keyEncoding);
      const valueEncoding = this.valueEncoding(options && options.valueEncoding);
      options = rangeOptions(options, keyEncoding);
      options[AbstractIterator.keyEncoding] = keyEncoding;
      options[AbstractIterator.valueEncoding] = valueEncoding;
      options.keyEncoding = keyEncoding.format;
      options.valueEncoding = valueEncoding.format;
      if (this[kStatus] === "opening") {
        return new DeferredKeyIterator(this, options);
      } else if (this[kStatus] !== "open") {
        throw new ModuleError("Database is not open", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        });
      }
      return this._keys(options);
    }
    _keys(options) {
      return new DefaultKeyIterator(this, options);
    }
    values(options) {
      const keyEncoding = this.keyEncoding(options && options.keyEncoding);
      const valueEncoding = this.valueEncoding(options && options.valueEncoding);
      options = rangeOptions(options, keyEncoding);
      options[AbstractIterator.keyEncoding] = keyEncoding;
      options[AbstractIterator.valueEncoding] = valueEncoding;
      options.keyEncoding = keyEncoding.format;
      options.valueEncoding = valueEncoding.format;
      if (this[kStatus] === "opening") {
        return new DeferredValueIterator(this, options);
      } else if (this[kStatus] !== "open") {
        throw new ModuleError("Database is not open", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        });
      }
      return this._values(options);
    }
    _values(options) {
      return new DefaultValueIterator(this, options);
    }
    defer(fn) {
      if (typeof fn !== "function") {
        throw new TypeError("The first argument must be a function");
      }
      this[kOperations].push(fn);
    }
    [kUndefer]() {
      if (this[kOperations].length === 0) {
        return;
      }
      const operations = this[kOperations];
      this[kOperations] = [];
      for (const op of operations) {
        op();
      }
    }
    attachResource(resource) {
      if (typeof resource !== "object" || resource === null || typeof resource.close !== "function") {
        throw new TypeError("The first argument must be a resource object");
      }
      this[kResources].add(resource);
    }
    detachResource(resource) {
      this[kResources].delete(resource);
    }
    _chainedBatch() {
      return new DefaultChainedBatch(this);
    }
    _checkKey(key) {
      if (key === null || key === undefined) {
        return new ModuleError("Key cannot be null or undefined", {
          code: "LEVEL_INVALID_KEY"
        });
      }
    }
    _checkValue(value) {
      if (value === null || value === undefined) {
        return new ModuleError("Value cannot be null or undefined", {
          code: "LEVEL_INVALID_VALUE"
        });
      }
    }
  }
  AbstractLevel.prototype.nextTick = require_next_tick_browser2();
  var { AbstractSublevel } = require_abstract_sublevel()({ AbstractLevel });
  exports.AbstractLevel = AbstractLevel;
  exports.AbstractSublevel = AbstractSublevel;
  var maybeError = function(db, callback) {
    if (db[kStatus] !== "open") {
      db.nextTick(callback, new ModuleError("Database is not open", {
        code: "LEVEL_DATABASE_NOT_OPEN"
      }));
      return true;
    }
    return false;
  };
  var formats = function(db) {
    return Object.keys(db.supports.encodings).filter((k) => !!db.supports.encodings[k]);
  };
});

// node_modules/abstract-level/index.js
var require_abstract_level2 = __commonJS((exports) => {
  exports.AbstractLevel = require_abstract_level().AbstractLevel;
  exports.AbstractSublevel = require_abstract_level().AbstractSublevel;
  exports.AbstractIterator = require_abstract_iterator().AbstractIterator;
  exports.AbstractKeyIterator = require_abstract_iterator().AbstractKeyIterator;
  exports.AbstractValueIterator = require_abstract_iterator().AbstractValueIterator;
  exports.AbstractChainedBatch = require_abstract_chained_batch().AbstractChainedBatch;
});

// node_modules/run-parallel-limit/index.js
var require_run_parallel_limit = __commonJS((exports, module) => {
  /*! run-parallel-limit. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  module.exports = runParallelLimit;
  var queueMicrotask2 = require_queue_microtask();
  function runParallelLimit(tasks, limit, cb) {
    if (typeof limit !== "number")
      throw new Error("second argument must be a Number");
    let results, len, pending, keys, isErrored;
    let isSync = true;
    let next;
    if (Array.isArray(tasks)) {
      results = [];
      pending = len = tasks.length;
    } else {
      keys = Object.keys(tasks);
      results = {};
      pending = len = keys.length;
    }
    function done(err) {
      function end() {
        if (cb)
          cb(err, results);
        cb = null;
      }
      if (isSync)
        queueMicrotask2(end);
      else
        end();
    }
    function each(i, err, result) {
      results[i] = result;
      if (err)
        isErrored = true;
      if (--pending === 0 || err) {
        done(err);
      } else if (!isErrored && next < len) {
        let key;
        if (keys) {
          key = keys[next];
          next += 1;
          tasks[key](function(err2, result2) {
            each(key, err2, result2);
          });
        } else {
          key = next;
          next += 1;
          tasks[key](function(err2, result2) {
            each(key, err2, result2);
          });
        }
      }
    }
    next = limit;
    if (!pending) {
      done(null);
    } else if (keys) {
      keys.some(function(key, i) {
        tasks[key](function(err, result) {
          each(key, err, result);
        });
        if (i === limit - 1)
          return true;
        return false;
      });
    } else {
      tasks.some(function(task, i) {
        task(function(err, result) {
          each(i, err, result);
        });
        if (i === limit - 1)
          return true;
        return false;
      });
    }
    isSync = false;
  }
});

// node_modules/browser-level/util/key-range.js
var require_key_range = __commonJS((exports, module) => {
  module.exports = function createKeyRange(options) {
    const lower = options.gte !== undefined ? options.gte : options.gt !== undefined ? options.gt : undefined;
    const upper = options.lte !== undefined ? options.lte : options.lt !== undefined ? options.lt : undefined;
    const lowerExclusive = options.gte === undefined;
    const upperExclusive = options.lte === undefined;
    if (lower !== undefined && upper !== undefined) {
      return IDBKeyRange.bound(lower, upper, lowerExclusive, upperExclusive);
    } else if (lower !== undefined) {
      return IDBKeyRange.lowerBound(lower, lowerExclusive);
    } else if (upper !== undefined) {
      return IDBKeyRange.upperBound(upper, upperExclusive);
    } else {
      return null;
    }
  };
});

// node_modules/browser-level/util/deserialize.js
var require_deserialize = __commonJS((exports, module) => {
  var textEncoder = new TextEncoder;
  module.exports = function(data) {
    if (data instanceof Uint8Array) {
      return data;
    } else if (data instanceof ArrayBuffer) {
      return new Uint8Array(data);
    } else {
      return textEncoder.encode(data);
    }
  };
});

// node_modules/browser-level/iterator.js
var require_iterator = __commonJS((exports) => {
  var { AbstractIterator } = require_abstract_level2();
  var createKeyRange = require_key_range();
  var deserialize = require_deserialize();
  var kCache = Symbol("cache");
  var kFinished = Symbol("finished");
  var kOptions = Symbol("options");
  var kCurrentOptions = Symbol("currentOptions");
  var kPosition = Symbol("position");
  var kLocation = Symbol("location");
  var kFirst = Symbol("first");
  var emptyOptions = {};

  class Iterator extends AbstractIterator {
    constructor(db, location, options) {
      super(db, options);
      this[kCache] = [];
      this[kFinished] = this.limit === 0;
      this[kOptions] = options;
      this[kCurrentOptions] = { ...options };
      this[kPosition] = undefined;
      this[kLocation] = location;
      this[kFirst] = true;
    }
    _nextv(size, options, callback) {
      this[kFirst] = false;
      if (this[kFinished]) {
        return this.nextTick(callback, null, []);
      } else if (this[kCache].length > 0) {
        size = Math.min(size, this[kCache].length);
        return this.nextTick(callback, null, this[kCache].splice(0, size));
      }
      if (this[kPosition] !== undefined) {
        if (this[kOptions].reverse) {
          this[kCurrentOptions].lt = this[kPosition];
          this[kCurrentOptions].lte = undefined;
        } else {
          this[kCurrentOptions].gt = this[kPosition];
          this[kCurrentOptions].gte = undefined;
        }
      }
      let keyRange;
      try {
        keyRange = createKeyRange(this[kCurrentOptions]);
      } catch (_2) {
        this[kFinished] = true;
        return this.nextTick(callback, null, []);
      }
      const transaction = this.db.db.transaction([this[kLocation]], "readonly");
      const store = transaction.objectStore(this[kLocation]);
      const entries = [];
      if (!this[kOptions].reverse) {
        let keys;
        let values;
        const complete = () => {
          if (keys === undefined || values === undefined)
            return;
          const length = Math.max(keys.length, values.length);
          if (length === 0 || size === Infinity) {
            this[kFinished] = true;
          } else {
            this[kPosition] = keys[length - 1];
          }
          entries.length = length;
          for (let i = 0;i < length; i++) {
            const key = keys[i];
            const value = values[i];
            entries[i] = [
              this[kOptions].keys && key !== undefined ? deserialize(key) : undefined,
              this[kOptions].values && value !== undefined ? deserialize(value) : undefined
            ];
          }
          maybeCommit(transaction);
        };
        if (this[kOptions].keys || size < Infinity) {
          store.getAllKeys(keyRange, size < Infinity ? size : undefined).onsuccess = (ev) => {
            keys = ev.target.result;
            complete();
          };
        } else {
          keys = [];
          this.nextTick(complete);
        }
        if (this[kOptions].values) {
          store.getAll(keyRange, size < Infinity ? size : undefined).onsuccess = (ev) => {
            values = ev.target.result;
            complete();
          };
        } else {
          values = [];
          this.nextTick(complete);
        }
      } else {
        const method = !this[kOptions].values && store.openKeyCursor ? "openKeyCursor" : "openCursor";
        store[method](keyRange, "prev").onsuccess = (ev) => {
          const cursor = ev.target.result;
          if (cursor) {
            const { key, value } = cursor;
            this[kPosition] = key;
            entries.push([
              this[kOptions].keys && key !== undefined ? deserialize(key) : undefined,
              this[kOptions].values && value !== undefined ? deserialize(value) : undefined
            ]);
            if (entries.length < size) {
              cursor.continue();
            } else {
              maybeCommit(transaction);
            }
          } else {
            this[kFinished] = true;
          }
        };
      }
      transaction.onabort = () => {
        callback(transaction.error || new Error("aborted by user"));
        callback = null;
      };
      transaction.oncomplete = () => {
        callback(null, entries);
        callback = null;
      };
    }
    _next(callback) {
      if (this[kCache].length > 0) {
        const [key, value] = this[kCache].shift();
        this.nextTick(callback, null, key, value);
      } else if (this[kFinished]) {
        this.nextTick(callback);
      } else {
        let size = Math.min(100, this.limit - this.count);
        if (this[kFirst]) {
          this[kFirst] = false;
          size = 1;
        }
        this._nextv(size, emptyOptions, (err, entries) => {
          if (err)
            return callback(err);
          this[kCache] = entries;
          this._next(callback);
        });
      }
    }
    _all(options, callback) {
      this[kFirst] = false;
      const cache = this[kCache].splice(0, this[kCache].length);
      const size = this.limit - this.count - cache.length;
      if (size <= 0) {
        return this.nextTick(callback, null, cache);
      }
      this._nextv(size, emptyOptions, (err, entries) => {
        if (err)
          return callback(err);
        if (cache.length > 0)
          entries = cache.concat(entries);
        callback(null, entries);
      });
    }
    _seek(target, options) {
      this[kFirst] = true;
      this[kCache] = [];
      this[kFinished] = false;
      this[kPosition] = undefined;
      this[kCurrentOptions] = { ...this[kOptions] };
      let keyRange;
      try {
        keyRange = createKeyRange(this[kOptions]);
      } catch (_2) {
        this[kFinished] = true;
        return;
      }
      if (keyRange !== null && !keyRange.includes(target)) {
        this[kFinished] = true;
      } else if (this[kOptions].reverse) {
        this[kCurrentOptions].lte = target;
      } else {
        this[kCurrentOptions].gte = target;
      }
    }
  }
  exports.Iterator = Iterator;
  function maybeCommit(transaction) {
    if (typeof transaction.commit === "function") {
      transaction.commit();
    }
  }
});

// node_modules/browser-level/util/clear.js
var require_clear = __commonJS((exports, module) => {
  module.exports = function clear(db, location, keyRange, options, callback) {
    if (options.limit === 0)
      return db.nextTick(callback);
    const transaction = db.db.transaction([location], "readwrite");
    const store = transaction.objectStore(location);
    let count = 0;
    transaction.oncomplete = function() {
      callback();
    };
    transaction.onabort = function() {
      callback(transaction.error || new Error("aborted by user"));
    };
    const method = store.openKeyCursor ? "openKeyCursor" : "openCursor";
    const direction = options.reverse ? "prev" : "next";
    store[method](keyRange, direction).onsuccess = function(ev) {
      const cursor = ev.target.result;
      if (cursor) {
        store.delete(cursor.key).onsuccess = function() {
          if (options.limit <= 0 || ++count < options.limit) {
            cursor.continue();
          }
        };
      }
    };
  };
});

// node_modules/browser-level/index.js
var require_browser_level = __commonJS((exports) => {
  var { AbstractLevel } = require_abstract_level2();
  var ModuleError = require_module_error();
  var parallel = require_run_parallel_limit();
  var { fromCallback } = require_catering();
  var { Iterator } = require_iterator();
  var deserialize = require_deserialize();
  var clear = require_clear();
  var createKeyRange = require_key_range();
  var DEFAULT_PREFIX = "level-js-";
  var kIDB = Symbol("idb");
  var kNamePrefix = Symbol("namePrefix");
  var kLocation = Symbol("location");
  var kVersion = Symbol("version");
  var kStore = Symbol("store");
  var kOnComplete = Symbol("onComplete");
  var kPromise = Symbol("promise");

  class BrowserLevel extends AbstractLevel {
    constructor(location, options, _2) {
      if (typeof options === "function" || typeof _2 === "function") {
        throw new ModuleError("The levelup-style callback argument has been removed", {
          code: "LEVEL_LEGACY"
        });
      }
      const { prefix, version, ...forward } = options || {};
      super({
        encodings: { view: true },
        snapshots: false,
        createIfMissing: false,
        errorIfExists: false,
        seek: true
      }, forward);
      if (typeof location !== "string") {
        throw new Error("constructor requires a location string argument");
      }
      this[kLocation] = location;
      this[kNamePrefix] = prefix == null ? DEFAULT_PREFIX : prefix;
      this[kVersion] = parseInt(version || 1, 10);
      this[kIDB] = null;
    }
    get location() {
      return this[kLocation];
    }
    get namePrefix() {
      return this[kNamePrefix];
    }
    get version() {
      return this[kVersion];
    }
    get db() {
      return this[kIDB];
    }
    get type() {
      return "browser-level";
    }
    _open(options, callback) {
      const req = indexedDB.open(this[kNamePrefix] + this[kLocation], this[kVersion]);
      req.onerror = function() {
        callback(req.error || new Error("unknown error"));
      };
      req.onsuccess = () => {
        this[kIDB] = req.result;
        callback();
      };
      req.onupgradeneeded = (ev) => {
        const db = ev.target.result;
        if (!db.objectStoreNames.contains(this[kLocation])) {
          db.createObjectStore(this[kLocation]);
        }
      };
    }
    [kStore](mode) {
      const transaction = this[kIDB].transaction([this[kLocation]], mode);
      return transaction.objectStore(this[kLocation]);
    }
    [kOnComplete](request, callback) {
      const transaction = request.transaction;
      transaction.onabort = function() {
        callback(transaction.error || new Error("aborted by user"));
      };
      transaction.oncomplete = function() {
        callback(null, request.result);
      };
    }
    _get(key, options, callback) {
      const store = this[kStore]("readonly");
      let req;
      try {
        req = store.get(key);
      } catch (err) {
        return this.nextTick(callback, err);
      }
      this[kOnComplete](req, function(err, value) {
        if (err)
          return callback(err);
        if (value === undefined) {
          return callback(new ModuleError("Entry not found", {
            code: "LEVEL_NOT_FOUND"
          }));
        }
        callback(null, deserialize(value));
      });
    }
    _getMany(keys, options, callback) {
      const store = this[kStore]("readonly");
      const tasks = keys.map((key) => (next) => {
        let request;
        try {
          request = store.get(key);
        } catch (err) {
          return next(err);
        }
        request.onsuccess = () => {
          const value = request.result;
          next(null, value === undefined ? value : deserialize(value));
        };
        request.onerror = (ev) => {
          ev.stopPropagation();
          next(request.error);
        };
      });
      parallel(tasks, 16, callback);
    }
    _del(key, options, callback) {
      const store = this[kStore]("readwrite");
      let req;
      try {
        req = store.delete(key);
      } catch (err) {
        return this.nextTick(callback, err);
      }
      this[kOnComplete](req, callback);
    }
    _put(key, value, options, callback) {
      const store = this[kStore]("readwrite");
      let req;
      try {
        req = store.put(value, key);
      } catch (err) {
        return this.nextTick(callback, err);
      }
      this[kOnComplete](req, callback);
    }
    _iterator(options) {
      return new Iterator(this, this[kLocation], options);
    }
    _batch(operations, options, callback) {
      const store = this[kStore]("readwrite");
      const transaction = store.transaction;
      let index = 0;
      let error;
      transaction.onabort = function() {
        callback(error || transaction.error || new Error("aborted by user"));
      };
      transaction.oncomplete = function() {
        callback();
      };
      function loop() {
        const op = operations[index++];
        const key = op.key;
        let req;
        try {
          req = op.type === "del" ? store.delete(key) : store.put(op.value, key);
        } catch (err) {
          error = err;
          transaction.abort();
          return;
        }
        if (index < operations.length) {
          req.onsuccess = loop;
        } else if (typeof transaction.commit === "function") {
          transaction.commit();
        }
      }
      loop();
    }
    _clear(options, callback) {
      let keyRange;
      let req;
      try {
        keyRange = createKeyRange(options);
      } catch (e) {
        return this.nextTick(callback);
      }
      if (options.limit >= 0) {
        return clear(this, this[kLocation], keyRange, options, callback);
      }
      try {
        const store = this[kStore]("readwrite");
        req = keyRange ? store.delete(keyRange) : store.clear();
      } catch (err) {
        return this.nextTick(callback, err);
      }
      this[kOnComplete](req, callback);
    }
    _close(callback) {
      this[kIDB].close();
      this.nextTick(callback);
    }
  }
  BrowserLevel.destroy = function(location, prefix, callback) {
    if (typeof prefix === "function") {
      callback = prefix;
      prefix = DEFAULT_PREFIX;
    }
    callback = fromCallback(callback, kPromise);
    const request = indexedDB.deleteDatabase(prefix + location);
    request.onsuccess = function() {
      callback();
    };
    request.onerror = function(err) {
      callback(err);
    };
    return callback[kPromise];
  };
  exports.BrowserLevel = BrowserLevel;
});

// ../../../../bun-vfs$$/node_modules/crypto/index.js
var exports_crypto = {};
__export(exports_crypto, {
  webcrypto: () => cw,
  timingSafeEqual: () => x0,
  scryptSync: () => Id2,
  scrypt: () => Td,
  randomUUID: () => lw,
  getRandomValues: () => uw,
  getCurves: () => dw,
  default: () => Wq,
  DEFAULT_ENCODING: () => Ga
});
function dw() {
  return Hq;
}
var pw, Xa, vw, bw, mw, gw, R0 = (t, e) => () => (t && (e = t(t = 0)), e), T9 = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports), Ja = (t, e) => {
  for (var r in e)
    Xa(t, r, { get: e[r], enumerable: true });
}, Ya = (t, e, r, o2) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let f2 of bw(e))
      !gw.call(t, f2) && f2 !== r && Xa(t, f2, { get: () => e[f2], enumerable: !(o2 = vw(e, f2)) || o2.enumerable });
  return t;
}, ot2 = (t, e, r) => (Ya(t, e, "default"), r && Ya(r, e, "default")), rn = (t, e, r) => (r = t != null ? pw(mw(t)) : {}, Ya(e || !t || !t.__esModule ? Xa(r, "default", { value: t, enumerable: true }) : r, t)), ur = (t) => Ya(Xa({}, "__esModule", { value: true }), t), Nd, Dd, Ut, Te, on, Ie, ki, W0, $f, pc, Z0, sn, V02, G0, J0, hn, co, Jf, po, Qf, vo, Pc, Oc, th, ph, Qc, np, ap, bh, Ao, Bo, pn, _p, Ep, gh, qp, yh, Op, ko, Tt, Gr, No, Jt, pa, Rh, pr, Y_, Oi, Fi, Ui, k1, yn, Vo, Go, Z1, Xo, Fh, ba, Jh, Dv, Qr, fu, ou, os, eb, cu, lb, bu, vf, S7, db, yi, bf, wb, mu, wu, Mu, Eb, _u, xu, Eu, Au, Ub, Iu, Tu, ar, vs, ku, Yb, Qb, em, im, nm, yf, om, um, dm, pm, bm, Pu, Ou, Fu, ws, Aa, Em, Wu, ju, Ba, Dm, Fm, Es, Hm, Vm, ji, Yu, Ym, Xm, As, tl, ol, rg, ag, hg, hl, pg, dl, kn, cl, bl, Ln, Ds, Lg, Dg, yl, Il, Yg, t2, i2, Ws, Ks, s2, ri, Nl, or, Oa, b22, y22, _22, Pl, Cr, Tf, Cl, N22, Fl, F2, Wl, Z2, V2, Q2, ty, e0, ny, t0, uy, dy, vy, yy, xy, Ey, Iy, o0, td, h0, u0, Kf, d0, c0, nd, Hy, od, hd, Jy, dd, r3, n3, o3, cd, d3, p3, v3, m3, Ha, bd, _3, A3, k3, N32, P32, _d, xd, w0, Ed, j3, Y3, X3, ow, qd, Xt, zq, Ga = "buffer", uw = (t) => crypto.getRandomValues(t), lw = () => crypto.randomUUID(), Hq, x0, Id2, Td, cw, Wq;
var init_crypto = __esm(() => {
  pw = Object.create;
  Xa = Object.defineProperty;
  vw = Object.getOwnPropertyDescriptor;
  bw = Object.getOwnPropertyNames;
  mw = Object.getPrototypeOf;
  gw = Object.prototype.hasOwnProperty;
  Nd = T9((Qa) => {
    Qa.byteLength = ww;
    Qa.toByteArray = _w;
    Qa.fromByteArray = Ew;
    var jr = [], lr = [], yw = typeof Uint8Array < "u" ? Uint8Array : Array, B0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (nn = 0, kd = B0.length;nn < kd; ++nn)
      jr[nn] = B0[nn], lr[B0.charCodeAt(nn)] = nn;
    var nn, kd;
    lr[45] = 62;
    lr[95] = 63;
    function Ld(t) {
      var e = t.length;
      if (e % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var r = t.indexOf("=");
      r === -1 && (r = e);
      var o2 = r === e ? 0 : 4 - r % 4;
      return [r, o2];
    }
    function ww(t) {
      var e = Ld(t), r = e[0], o2 = e[1];
      return (r + o2) * 3 / 4 - o2;
    }
    function Mw(t, e, r) {
      return (e + r) * 3 / 4 - r;
    }
    function _w(t) {
      var e, r = Ld(t), o2 = r[0], f2 = r[1], p = new yw(Mw(t, o2, f2)), m2 = 0, y3 = f2 > 0 ? o2 - 4 : o2, M2;
      for (M2 = 0;M2 < y3; M2 += 4)
        e = lr[t.charCodeAt(M2)] << 18 | lr[t.charCodeAt(M2 + 1)] << 12 | lr[t.charCodeAt(M2 + 2)] << 6 | lr[t.charCodeAt(M2 + 3)], p[m2++] = e >> 16 & 255, p[m2++] = e >> 8 & 255, p[m2++] = e & 255;
      return f2 === 2 && (e = lr[t.charCodeAt(M2)] << 2 | lr[t.charCodeAt(M2 + 1)] >> 4, p[m2++] = e & 255), f2 === 1 && (e = lr[t.charCodeAt(M2)] << 10 | lr[t.charCodeAt(M2 + 1)] << 4 | lr[t.charCodeAt(M2 + 2)] >> 2, p[m2++] = e >> 8 & 255, p[m2++] = e & 255), p;
    }
    function xw(t) {
      return jr[t >> 18 & 63] + jr[t >> 12 & 63] + jr[t >> 6 & 63] + jr[t & 63];
    }
    function Sw(t, e, r) {
      for (var o2, f2 = [], p = e;p < r; p += 3)
        o2 = (t[p] << 16 & 16711680) + (t[p + 1] << 8 & 65280) + (t[p + 2] & 255), f2.push(xw(o2));
      return f2.join("");
    }
    function Ew(t) {
      for (var e, r = t.length, o2 = r % 3, f2 = [], p = 16383, m2 = 0, y3 = r - o2;m2 < y3; m2 += p)
        f2.push(Sw(t, m2, m2 + p > y3 ? y3 : m2 + p));
      return o2 === 1 ? (e = t[r - 1], f2.push(jr[e >> 2] + jr[e << 4 & 63] + "==")) : o2 === 2 && (e = (t[r - 2] << 8) + t[r - 1], f2.push(jr[e >> 10] + jr[e >> 4 & 63] + jr[e << 2 & 63] + "=")), f2.join("");
    }
  });
  Dd = T9((q0) => {
    q0.read = function(t, e, r, o2, f2) {
      var p, m2, y3 = f2 * 8 - o2 - 1, M2 = (1 << y3) - 1, x4 = M2 >> 1, S3 = -7, E3 = r ? f2 - 1 : 0, B2 = r ? -1 : 1, q = t[e + E3];
      for (E3 += B2, p = q & (1 << -S3) - 1, q >>= -S3, S3 += y3;S3 > 0; p = p * 256 + t[e + E3], E3 += B2, S3 -= 8)
        ;
      for (m2 = p & (1 << -S3) - 1, p >>= -S3, S3 += o2;S3 > 0; m2 = m2 * 256 + t[e + E3], E3 += B2, S3 -= 8)
        ;
      if (p === 0)
        p = 1 - x4;
      else {
        if (p === M2)
          return m2 ? NaN : (q ? -1 : 1) * (1 / 0);
        m2 = m2 + Math.pow(2, o2), p = p - x4;
      }
      return (q ? -1 : 1) * m2 * Math.pow(2, p - o2);
    };
    q0.write = function(t, e, r, o2, f2, p) {
      var m2, y3, M2, x4 = p * 8 - f2 - 1, S3 = (1 << x4) - 1, E3 = S3 >> 1, B2 = f2 === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, q = o2 ? 0 : p - 1, L3 = o2 ? 1 : -1, ge = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
      for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (y3 = isNaN(e) ? 1 : 0, m2 = S3) : (m2 = Math.floor(Math.log(e) / Math.LN2), e * (M2 = Math.pow(2, -m2)) < 1 && (m2--, M2 *= 2), m2 + E3 >= 1 ? e += B2 / M2 : e += B2 * Math.pow(2, 1 - E3), e * M2 >= 2 && (m2++, M2 /= 2), m2 + E3 >= S3 ? (y3 = 0, m2 = S3) : m2 + E3 >= 1 ? (y3 = (e * M2 - 1) * Math.pow(2, f2), m2 = m2 + E3) : (y3 = e * Math.pow(2, E3 - 1) * Math.pow(2, f2), m2 = 0));f2 >= 8; t[r + q] = y3 & 255, q += L3, y3 /= 256, f2 -= 8)
        ;
      for (m2 = m2 << f2 | y3, x4 += f2;x4 > 0; t[r + q] = m2 & 255, q += L3, m2 /= 256, x4 -= 8)
        ;
      t[r + q - L3] |= ge * 128;
    };
  });
  Ut = T9((Xn) => {
    var I0 = Nd(), Gn = Dd(), Pd = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    Xn.Buffer = me;
    Xn.SlowBuffer = Tw;
    Xn.INSPECT_MAX_BYTES = 50;
    var eo = 2147483647;
    Xn.kMaxLength = eo;
    me.TYPED_ARRAY_SUPPORT = Aw();
    !me.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function Aw() {
      try {
        let t = new Uint8Array(1), e = { foo: function() {
          return 42;
        } };
        return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(t, e), t.foo() === 42;
      } catch {
        return false;
      }
    }
    Object.defineProperty(me.prototype, "parent", { enumerable: true, get: function() {
      if (!!me.isBuffer(this))
        return this.buffer;
    } });
    Object.defineProperty(me.prototype, "offset", { enumerable: true, get: function() {
      if (!!me.isBuffer(this))
        return this.byteOffset;
    } });
    function li(t) {
      if (t > eo)
        throw new RangeError('The value "' + t + '" is invalid for option "size"');
      let e = new Uint8Array(t);
      return Object.setPrototypeOf(e, me.prototype), e;
    }
    function me(t, e, r) {
      if (typeof t == "number") {
        if (typeof e == "string")
          throw new TypeError('The "string" argument must be of type string. Received type number');
        return N0(t);
      }
      return Ud(t, e, r);
    }
    me.poolSize = 8192;
    function Ud(t, e, r) {
      if (typeof t == "string")
        return Bw(t, e);
      if (ArrayBuffer.isView(t))
        return qw(t);
      if (t == null)
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
      if (Zr(t, ArrayBuffer) || t && Zr(t.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (Zr(t, SharedArrayBuffer) || t && Zr(t.buffer, SharedArrayBuffer)))
        return k0(t, e, r);
      if (typeof t == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      let o2 = t.valueOf && t.valueOf();
      if (o2 != null && o2 !== t)
        return me.from(o2, e, r);
      let f2 = Iw(t);
      if (f2)
        return f2;
      if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof t[Symbol.toPrimitive] == "function")
        return me.from(t[Symbol.toPrimitive]("string"), e, r);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
    }
    me.from = function(t, e, r) {
      return Ud(t, e, r);
    };
    Object.setPrototypeOf(me.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(me, Uint8Array);
    function zd(t) {
      if (typeof t != "number")
        throw new TypeError('"size" argument must be of type number');
      if (t < 0)
        throw new RangeError('The value "' + t + '" is invalid for option "size"');
    }
    function Rw(t, e, r) {
      return zd(t), t <= 0 ? li(t) : e !== undefined ? typeof r == "string" ? li(t).fill(e, r) : li(t).fill(e) : li(t);
    }
    me.alloc = function(t, e, r) {
      return Rw(t, e, r);
    };
    function N0(t) {
      return zd(t), li(t < 0 ? 0 : D0(t) | 0);
    }
    me.allocUnsafe = function(t) {
      return N0(t);
    };
    me.allocUnsafeSlow = function(t) {
      return N0(t);
    };
    function Bw(t, e) {
      if ((typeof e != "string" || e === "") && (e = "utf8"), !me.isEncoding(e))
        throw new TypeError("Unknown encoding: " + e);
      let r = Hd(t, e) | 0, o2 = li(r), f2 = o2.write(t, e);
      return f2 !== r && (o2 = o2.slice(0, f2)), o2;
    }
    function T02(t) {
      let e = t.length < 0 ? 0 : D0(t.length) | 0, r = li(e);
      for (let o2 = 0;o2 < e; o2 += 1)
        r[o2] = t[o2] & 255;
      return r;
    }
    function qw(t) {
      if (Zr(t, Uint8Array)) {
        let e = new Uint8Array(t);
        return k0(e.buffer, e.byteOffset, e.byteLength);
      }
      return T02(t);
    }
    function k0(t, e, r) {
      if (e < 0 || t.byteLength < e)
        throw new RangeError('"offset" is outside of buffer bounds');
      if (t.byteLength < e + (r || 0))
        throw new RangeError('"length" is outside of buffer bounds');
      let o2;
      return e === undefined && r === undefined ? o2 = new Uint8Array(t) : r === undefined ? o2 = new Uint8Array(t, e) : o2 = new Uint8Array(t, e, r), Object.setPrototypeOf(o2, me.prototype), o2;
    }
    function Iw(t) {
      if (me.isBuffer(t)) {
        let e = D0(t.length) | 0, r = li(e);
        return r.length === 0 || t.copy(r, 0, 0, e), r;
      }
      if (t.length !== undefined)
        return typeof t.length != "number" || C0(t.length) ? li(0) : T02(t);
      if (t.type === "Buffer" && Array.isArray(t.data))
        return T02(t.data);
    }
    function D0(t) {
      if (t >= eo)
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + eo.toString(16) + " bytes");
      return t | 0;
    }
    function Tw(t) {
      return +t != t && (t = 0), me.alloc(+t);
    }
    me.isBuffer = function(e) {
      return e != null && e._isBuffer === true && e !== me.prototype;
    };
    me.compare = function(e, r) {
      if (Zr(e, Uint8Array) && (e = me.from(e, e.offset, e.byteLength)), Zr(r, Uint8Array) && (r = me.from(r, r.offset, r.byteLength)), !me.isBuffer(e) || !me.isBuffer(r))
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (e === r)
        return 0;
      let o2 = e.length, f2 = r.length;
      for (let p = 0, m2 = Math.min(o2, f2);p < m2; ++p)
        if (e[p] !== r[p]) {
          o2 = e[p], f2 = r[p];
          break;
        }
      return o2 < f2 ? -1 : f2 < o2 ? 1 : 0;
    };
    me.isEncoding = function(e) {
      switch (String(e).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    me.concat = function(e, r) {
      if (!Array.isArray(e))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (e.length === 0)
        return me.alloc(0);
      let o2;
      if (r === undefined)
        for (r = 0, o2 = 0;o2 < e.length; ++o2)
          r += e[o2].length;
      let f2 = me.allocUnsafe(r), p = 0;
      for (o2 = 0;o2 < e.length; ++o2) {
        let m2 = e[o2];
        if (Zr(m2, Uint8Array))
          p + m2.length > f2.length ? (me.isBuffer(m2) || (m2 = me.from(m2)), m2.copy(f2, p)) : Uint8Array.prototype.set.call(f2, m2, p);
        else if (me.isBuffer(m2))
          m2.copy(f2, p);
        else
          throw new TypeError('"list" argument must be an Array of Buffers');
        p += m2.length;
      }
      return f2;
    };
    function Hd(t, e) {
      if (me.isBuffer(t))
        return t.length;
      if (ArrayBuffer.isView(t) || Zr(t, ArrayBuffer))
        return t.byteLength;
      if (typeof t != "string")
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t);
      let r = t.length, o2 = arguments.length > 2 && arguments[2] === true;
      if (!o2 && r === 0)
        return 0;
      let f2 = false;
      for (;; )
        switch (e) {
          case "ascii":
          case "latin1":
          case "binary":
            return r;
          case "utf8":
          case "utf-8":
            return L02(t).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return r * 2;
          case "hex":
            return r >>> 1;
          case "base64":
            return Xd(t).length;
          default:
            if (f2)
              return o2 ? -1 : L02(t).length;
            e = ("" + e).toLowerCase(), f2 = true;
        }
    }
    me.byteLength = Hd;
    function kw(t, e, r) {
      let o2 = false;
      if ((e === undefined || e < 0) && (e = 0), e > this.length || ((r === undefined || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, e >>>= 0, r <= e))
        return "";
      for (t || (t = "utf8");; )
        switch (t) {
          case "hex":
            return Hw(this, e, r);
          case "utf8":
          case "utf-8":
            return Kd(this, e, r);
          case "ascii":
            return Uw(this, e, r);
          case "latin1":
          case "binary":
            return zw(this, e, r);
          case "base64":
            return Ow(this, e, r);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Ww(this, e, r);
          default:
            if (o2)
              throw new TypeError("Unknown encoding: " + t);
            t = (t + "").toLowerCase(), o2 = true;
        }
    }
    me.prototype._isBuffer = true;
    function fn(t, e, r) {
      let o2 = t[e];
      t[e] = t[r], t[r] = o2;
    }
    me.prototype.swap16 = function() {
      let e = this.length;
      if (e % 2 !== 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (let r = 0;r < e; r += 2)
        fn(this, r, r + 1);
      return this;
    };
    me.prototype.swap32 = function() {
      let e = this.length;
      if (e % 4 !== 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (let r = 0;r < e; r += 4)
        fn(this, r, r + 3), fn(this, r + 1, r + 2);
      return this;
    };
    me.prototype.swap64 = function() {
      let e = this.length;
      if (e % 8 !== 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (let r = 0;r < e; r += 8)
        fn(this, r, r + 7), fn(this, r + 1, r + 6), fn(this, r + 2, r + 5), fn(this, r + 3, r + 4);
      return this;
    };
    me.prototype.toString = function() {
      let e = this.length;
      return e === 0 ? "" : arguments.length === 0 ? Kd(this, 0, e) : kw.apply(this, arguments);
    };
    me.prototype.toLocaleString = me.prototype.toString;
    me.prototype.equals = function(e) {
      if (!me.isBuffer(e))
        throw new TypeError("Argument must be a Buffer");
      return this === e ? true : me.compare(this, e) === 0;
    };
    me.prototype.inspect = function() {
      let e = "", r = Xn.INSPECT_MAX_BYTES;
      return e = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (e += " ... "), "<Buffer " + e + ">";
    };
    Pd && (me.prototype[Pd] = me.prototype.inspect);
    me.prototype.compare = function(e, r, o2, f2, p) {
      if (Zr(e, Uint8Array) && (e = me.from(e, e.offset, e.byteLength)), !me.isBuffer(e))
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
      if (r === undefined && (r = 0), o2 === undefined && (o2 = e ? e.length : 0), f2 === undefined && (f2 = 0), p === undefined && (p = this.length), r < 0 || o2 > e.length || f2 < 0 || p > this.length)
        throw new RangeError("out of range index");
      if (f2 >= p && r >= o2)
        return 0;
      if (f2 >= p)
        return -1;
      if (r >= o2)
        return 1;
      if (r >>>= 0, o2 >>>= 0, f2 >>>= 0, p >>>= 0, this === e)
        return 0;
      let m2 = p - f2, y3 = o2 - r, M2 = Math.min(m2, y3), x4 = this.slice(f2, p), S3 = e.slice(r, o2);
      for (let E3 = 0;E3 < M2; ++E3)
        if (x4[E3] !== S3[E3]) {
          m2 = x4[E3], y3 = S3[E3];
          break;
        }
      return m2 < y3 ? -1 : y3 < m2 ? 1 : 0;
    };
    function Wd(t, e, r, o2, f2) {
      if (t.length === 0)
        return -1;
      if (typeof r == "string" ? (o2 = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, C0(r) && (r = f2 ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
        if (f2)
          return -1;
        r = t.length - 1;
      } else if (r < 0)
        if (f2)
          r = 0;
        else
          return -1;
      if (typeof e == "string" && (e = me.from(e, o2)), me.isBuffer(e))
        return e.length === 0 ? -1 : Cd(t, e, r, o2, f2);
      if (typeof e == "number")
        return e = e & 255, typeof Uint8Array.prototype.indexOf == "function" ? f2 ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : Cd(t, [e], r, o2, f2);
      throw new TypeError("val must be string, number or Buffer");
    }
    function Cd(t, e, r, o2, f2) {
      let p = 1, m2 = t.length, y3 = e.length;
      if (o2 !== undefined && (o2 = String(o2).toLowerCase(), o2 === "ucs2" || o2 === "ucs-2" || o2 === "utf16le" || o2 === "utf-16le")) {
        if (t.length < 2 || e.length < 2)
          return -1;
        p = 2, m2 /= 2, y3 /= 2, r /= 2;
      }
      function M2(S3, E3) {
        return p === 1 ? S3[E3] : S3.readUInt16BE(E3 * p);
      }
      let x4;
      if (f2) {
        let S3 = -1;
        for (x4 = r;x4 < m2; x4++)
          if (M2(t, x4) === M2(e, S3 === -1 ? 0 : x4 - S3)) {
            if (S3 === -1 && (S3 = x4), x4 - S3 + 1 === y3)
              return S3 * p;
          } else
            S3 !== -1 && (x4 -= x4 - S3), S3 = -1;
      } else
        for (r + y3 > m2 && (r = m2 - y3), x4 = r;x4 >= 0; x4--) {
          let S3 = true;
          for (let E3 = 0;E3 < y3; E3++)
            if (M2(t, x4 + E3) !== M2(e, E3)) {
              S3 = false;
              break;
            }
          if (S3)
            return x4;
        }
      return -1;
    }
    me.prototype.includes = function(e, r, o2) {
      return this.indexOf(e, r, o2) !== -1;
    };
    me.prototype.indexOf = function(e, r, o2) {
      return Wd(this, e, r, o2, true);
    };
    me.prototype.lastIndexOf = function(e, r, o2) {
      return Wd(this, e, r, o2, false);
    };
    function Lw(t, e, r, o2) {
      r = Number(r) || 0;
      let f2 = t.length - r;
      o2 ? (o2 = Number(o2), o2 > f2 && (o2 = f2)) : o2 = f2;
      let p = e.length;
      o2 > p / 2 && (o2 = p / 2);
      let m2;
      for (m2 = 0;m2 < o2; ++m2) {
        let y3 = parseInt(e.substr(m2 * 2, 2), 16);
        if (C0(y3))
          return m2;
        t[r + m2] = y3;
      }
      return m2;
    }
    function Nw(t, e, r, o2) {
      return to(L02(e, t.length - r), t, r, o2);
    }
    function Dw(t, e, r, o2) {
      return to(Vw(e), t, r, o2);
    }
    function Pw(t, e, r, o2) {
      return to(Xd(e), t, r, o2);
    }
    function Cw(t, e, r, o2) {
      return to($w(e, t.length - r), t, r, o2);
    }
    me.prototype.write = function(e, r, o2, f2) {
      if (r === undefined)
        f2 = "utf8", o2 = this.length, r = 0;
      else if (o2 === undefined && typeof r == "string")
        f2 = r, o2 = this.length, r = 0;
      else if (isFinite(r))
        r = r >>> 0, isFinite(o2) ? (o2 = o2 >>> 0, f2 === undefined && (f2 = "utf8")) : (f2 = o2, o2 = undefined);
      else
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      let p = this.length - r;
      if ((o2 === undefined || o2 > p) && (o2 = p), e.length > 0 && (o2 < 0 || r < 0) || r > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      f2 || (f2 = "utf8");
      let m2 = false;
      for (;; )
        switch (f2) {
          case "hex":
            return Lw(this, e, r, o2);
          case "utf8":
          case "utf-8":
            return Nw(this, e, r, o2);
          case "ascii":
          case "latin1":
          case "binary":
            return Dw(this, e, r, o2);
          case "base64":
            return Pw(this, e, r, o2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return Cw(this, e, r, o2);
          default:
            if (m2)
              throw new TypeError("Unknown encoding: " + f2);
            f2 = ("" + f2).toLowerCase(), m2 = true;
        }
    };
    me.prototype.toJSON = function() {
      return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
    };
    function Ow(t, e, r) {
      return e === 0 && r === t.length ? I0.fromByteArray(t) : I0.fromByteArray(t.slice(e, r));
    }
    function Kd(t, e, r) {
      r = Math.min(t.length, r);
      let o2 = [], f2 = e;
      for (;f2 < r; ) {
        let p = t[f2], m2 = null, y3 = p > 239 ? 4 : p > 223 ? 3 : p > 191 ? 2 : 1;
        if (f2 + y3 <= r) {
          let M2, x4, S3, E3;
          switch (y3) {
            case 1:
              p < 128 && (m2 = p);
              break;
            case 2:
              M2 = t[f2 + 1], (M2 & 192) === 128 && (E3 = (p & 31) << 6 | M2 & 63, E3 > 127 && (m2 = E3));
              break;
            case 3:
              M2 = t[f2 + 1], x4 = t[f2 + 2], (M2 & 192) === 128 && (x4 & 192) === 128 && (E3 = (p & 15) << 12 | (M2 & 63) << 6 | x4 & 63, E3 > 2047 && (E3 < 55296 || E3 > 57343) && (m2 = E3));
              break;
            case 4:
              M2 = t[f2 + 1], x4 = t[f2 + 2], S3 = t[f2 + 3], (M2 & 192) === 128 && (x4 & 192) === 128 && (S3 & 192) === 128 && (E3 = (p & 15) << 18 | (M2 & 63) << 12 | (x4 & 63) << 6 | S3 & 63, E3 > 65535 && E3 < 1114112 && (m2 = E3));
          }
        }
        m2 === null ? (m2 = 65533, y3 = 1) : m2 > 65535 && (m2 -= 65536, o2.push(m2 >>> 10 & 1023 | 55296), m2 = 56320 | m2 & 1023), o2.push(m2), f2 += y3;
      }
      return Fw(o2);
    }
    var Od = 4096;
    function Fw(t) {
      let e = t.length;
      if (e <= Od)
        return String.fromCharCode.apply(String, t);
      let r = "", o2 = 0;
      for (;o2 < e; )
        r += String.fromCharCode.apply(String, t.slice(o2, o2 += Od));
      return r;
    }
    function Uw(t, e, r) {
      let o2 = "";
      r = Math.min(t.length, r);
      for (let f2 = e;f2 < r; ++f2)
        o2 += String.fromCharCode(t[f2] & 127);
      return o2;
    }
    function zw(t, e, r) {
      let o2 = "";
      r = Math.min(t.length, r);
      for (let f2 = e;f2 < r; ++f2)
        o2 += String.fromCharCode(t[f2]);
      return o2;
    }
    function Hw(t, e, r) {
      let o2 = t.length;
      (!e || e < 0) && (e = 0), (!r || r < 0 || r > o2) && (r = o2);
      let f2 = "";
      for (let p = e;p < r; ++p)
        f2 += Gw[t[p]];
      return f2;
    }
    function Ww(t, e, r) {
      let o2 = t.slice(e, r), f2 = "";
      for (let p = 0;p < o2.length - 1; p += 2)
        f2 += String.fromCharCode(o2[p] + o2[p + 1] * 256);
      return f2;
    }
    me.prototype.slice = function(e, r) {
      let o2 = this.length;
      e = ~~e, r = r === undefined ? o2 : ~~r, e < 0 ? (e += o2, e < 0 && (e = 0)) : e > o2 && (e = o2), r < 0 ? (r += o2, r < 0 && (r = 0)) : r > o2 && (r = o2), r < e && (r = e);
      let f2 = this.subarray(e, r);
      return Object.setPrototypeOf(f2, me.prototype), f2;
    };
    function Dt(t, e, r) {
      if (t % 1 !== 0 || t < 0)
        throw new RangeError("offset is not uint");
      if (t + e > r)
        throw new RangeError("Trying to access beyond buffer length");
    }
    me.prototype.readUintLE = me.prototype.readUIntLE = function(e, r, o2) {
      e = e >>> 0, r = r >>> 0, o2 || Dt(e, r, this.length);
      let f2 = this[e], p = 1, m2 = 0;
      for (;++m2 < r && (p *= 256); )
        f2 += this[e + m2] * p;
      return f2;
    };
    me.prototype.readUintBE = me.prototype.readUIntBE = function(e, r, o2) {
      e = e >>> 0, r = r >>> 0, o2 || Dt(e, r, this.length);
      let f2 = this[e + --r], p = 1;
      for (;r > 0 && (p *= 256); )
        f2 += this[e + --r] * p;
      return f2;
    };
    me.prototype.readUint8 = me.prototype.readUInt8 = function(e, r) {
      return e = e >>> 0, r || Dt(e, 1, this.length), this[e];
    };
    me.prototype.readUint16LE = me.prototype.readUInt16LE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 2, this.length), this[e] | this[e + 1] << 8;
    };
    me.prototype.readUint16BE = me.prototype.readUInt16BE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 2, this.length), this[e] << 8 | this[e + 1];
    };
    me.prototype.readUint32LE = me.prototype.readUInt32LE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;
    };
    me.prototype.readUint32BE = me.prototype.readUInt32BE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
    };
    me.prototype.readBigUInt64LE = Ti(function(e) {
      e = e >>> 0, Yn(e, "offset");
      let r = this[e], o2 = this[e + 7];
      (r === undefined || o2 === undefined) && Vf(e, this.length - 8);
      let f2 = r + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, p = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + o2 * 2 ** 24;
      return BigInt(f2) + (BigInt(p) << BigInt(32));
    });
    me.prototype.readBigUInt64BE = Ti(function(e) {
      e = e >>> 0, Yn(e, "offset");
      let r = this[e], o2 = this[e + 7];
      (r === undefined || o2 === undefined) && Vf(e, this.length - 8);
      let f2 = r * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e], p = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + o2;
      return (BigInt(f2) << BigInt(32)) + BigInt(p);
    });
    me.prototype.readIntLE = function(e, r, o2) {
      e = e >>> 0, r = r >>> 0, o2 || Dt(e, r, this.length);
      let f2 = this[e], p = 1, m2 = 0;
      for (;++m2 < r && (p *= 256); )
        f2 += this[e + m2] * p;
      return p *= 128, f2 >= p && (f2 -= Math.pow(2, 8 * r)), f2;
    };
    me.prototype.readIntBE = function(e, r, o2) {
      e = e >>> 0, r = r >>> 0, o2 || Dt(e, r, this.length);
      let f2 = r, p = 1, m2 = this[e + --f2];
      for (;f2 > 0 && (p *= 256); )
        m2 += this[e + --f2] * p;
      return p *= 128, m2 >= p && (m2 -= Math.pow(2, 8 * r)), m2;
    };
    me.prototype.readInt8 = function(e, r) {
      return e = e >>> 0, r || Dt(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];
    };
    me.prototype.readInt16LE = function(e, r) {
      e = e >>> 0, r || Dt(e, 2, this.length);
      let o2 = this[e] | this[e + 1] << 8;
      return o2 & 32768 ? o2 | 4294901760 : o2;
    };
    me.prototype.readInt16BE = function(e, r) {
      e = e >>> 0, r || Dt(e, 2, this.length);
      let o2 = this[e + 1] | this[e] << 8;
      return o2 & 32768 ? o2 | 4294901760 : o2;
    };
    me.prototype.readInt32LE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
    };
    me.prototype.readInt32BE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
    };
    me.prototype.readBigInt64LE = Ti(function(e) {
      e = e >>> 0, Yn(e, "offset");
      let r = this[e], o2 = this[e + 7];
      (r === undefined || o2 === undefined) && Vf(e, this.length - 8);
      let f2 = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (o2 << 24);
      return (BigInt(f2) << BigInt(32)) + BigInt(r + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);
    });
    me.prototype.readBigInt64BE = Ti(function(e) {
      e = e >>> 0, Yn(e, "offset");
      let r = this[e], o2 = this[e + 7];
      (r === undefined || o2 === undefined) && Vf(e, this.length - 8);
      let f2 = (r << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e];
      return (BigInt(f2) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + o2);
    });
    me.prototype.readFloatLE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 4, this.length), Gn.read(this, e, true, 23, 4);
    };
    me.prototype.readFloatBE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 4, this.length), Gn.read(this, e, false, 23, 4);
    };
    me.prototype.readDoubleLE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 8, this.length), Gn.read(this, e, true, 52, 8);
    };
    me.prototype.readDoubleBE = function(e, r) {
      return e = e >>> 0, r || Dt(e, 8, this.length), Gn.read(this, e, false, 52, 8);
    };
    function er(t, e, r, o2, f2, p) {
      if (!me.isBuffer(t))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (e > f2 || e < p)
        throw new RangeError('"value" argument is out of bounds');
      if (r + o2 > t.length)
        throw new RangeError("Index out of range");
    }
    me.prototype.writeUintLE = me.prototype.writeUIntLE = function(e, r, o2, f2) {
      if (e = +e, r = r >>> 0, o2 = o2 >>> 0, !f2) {
        let y3 = Math.pow(2, 8 * o2) - 1;
        er(this, e, r, o2, y3, 0);
      }
      let p = 1, m2 = 0;
      for (this[r] = e & 255;++m2 < o2 && (p *= 256); )
        this[r + m2] = e / p & 255;
      return r + o2;
    };
    me.prototype.writeUintBE = me.prototype.writeUIntBE = function(e, r, o2, f2) {
      if (e = +e, r = r >>> 0, o2 = o2 >>> 0, !f2) {
        let y3 = Math.pow(2, 8 * o2) - 1;
        er(this, e, r, o2, y3, 0);
      }
      let p = o2 - 1, m2 = 1;
      for (this[r + p] = e & 255;--p >= 0 && (m2 *= 256); )
        this[r + p] = e / m2 & 255;
      return r + o2;
    };
    me.prototype.writeUint8 = me.prototype.writeUInt8 = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 1, 255, 0), this[r] = e & 255, r + 1;
    };
    me.prototype.writeUint16LE = me.prototype.writeUInt16LE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 2, 65535, 0), this[r] = e & 255, this[r + 1] = e >>> 8, r + 2;
    };
    me.prototype.writeUint16BE = me.prototype.writeUInt16BE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 2, 65535, 0), this[r] = e >>> 8, this[r + 1] = e & 255, r + 2;
    };
    me.prototype.writeUint32LE = me.prototype.writeUInt32LE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 4, 4294967295, 0), this[r + 3] = e >>> 24, this[r + 2] = e >>> 16, this[r + 1] = e >>> 8, this[r] = e & 255, r + 4;
    };
    me.prototype.writeUint32BE = me.prototype.writeUInt32BE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 4, 4294967295, 0), this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255, r + 4;
    };
    function jd(t, e, r, o2, f2) {
      Yd(e, o2, f2, t, r, 7);
      let p = Number(e & BigInt(4294967295));
      t[r++] = p, p = p >> 8, t[r++] = p, p = p >> 8, t[r++] = p, p = p >> 8, t[r++] = p;
      let m2 = Number(e >> BigInt(32) & BigInt(4294967295));
      return t[r++] = m2, m2 = m2 >> 8, t[r++] = m2, m2 = m2 >> 8, t[r++] = m2, m2 = m2 >> 8, t[r++] = m2, r;
    }
    function Zd(t, e, r, o2, f2) {
      Yd(e, o2, f2, t, r, 7);
      let p = Number(e & BigInt(4294967295));
      t[r + 7] = p, p = p >> 8, t[r + 6] = p, p = p >> 8, t[r + 5] = p, p = p >> 8, t[r + 4] = p;
      let m2 = Number(e >> BigInt(32) & BigInt(4294967295));
      return t[r + 3] = m2, m2 = m2 >> 8, t[r + 2] = m2, m2 = m2 >> 8, t[r + 1] = m2, m2 = m2 >> 8, t[r] = m2, r + 8;
    }
    me.prototype.writeBigUInt64LE = Ti(function(e, r = 0) {
      return jd(this, e, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    me.prototype.writeBigUInt64BE = Ti(function(e, r = 0) {
      return Zd(this, e, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    me.prototype.writeIntLE = function(e, r, o2, f2) {
      if (e = +e, r = r >>> 0, !f2) {
        let M2 = Math.pow(2, 8 * o2 - 1);
        er(this, e, r, o2, M2 - 1, -M2);
      }
      let p = 0, m2 = 1, y3 = 0;
      for (this[r] = e & 255;++p < o2 && (m2 *= 256); )
        e < 0 && y3 === 0 && this[r + p - 1] !== 0 && (y3 = 1), this[r + p] = (e / m2 >> 0) - y3 & 255;
      return r + o2;
    };
    me.prototype.writeIntBE = function(e, r, o2, f2) {
      if (e = +e, r = r >>> 0, !f2) {
        let M2 = Math.pow(2, 8 * o2 - 1);
        er(this, e, r, o2, M2 - 1, -M2);
      }
      let p = o2 - 1, m2 = 1, y3 = 0;
      for (this[r + p] = e & 255;--p >= 0 && (m2 *= 256); )
        e < 0 && y3 === 0 && this[r + p + 1] !== 0 && (y3 = 1), this[r + p] = (e / m2 >> 0) - y3 & 255;
      return r + o2;
    };
    me.prototype.writeInt8 = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[r] = e & 255, r + 1;
    };
    me.prototype.writeInt16LE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 2, 32767, -32768), this[r] = e & 255, this[r + 1] = e >>> 8, r + 2;
    };
    me.prototype.writeInt16BE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 2, 32767, -32768), this[r] = e >>> 8, this[r + 1] = e & 255, r + 2;
    };
    me.prototype.writeInt32LE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 4, 2147483647, -2147483648), this[r] = e & 255, this[r + 1] = e >>> 8, this[r + 2] = e >>> 16, this[r + 3] = e >>> 24, r + 4;
    };
    me.prototype.writeInt32BE = function(e, r, o2) {
      return e = +e, r = r >>> 0, o2 || er(this, e, r, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255, r + 4;
    };
    me.prototype.writeBigInt64LE = Ti(function(e, r = 0) {
      return jd(this, e, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    me.prototype.writeBigInt64BE = Ti(function(e, r = 0) {
      return Zd(this, e, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function Vd(t, e, r, o2, f2, p) {
      if (r + o2 > t.length)
        throw new RangeError("Index out of range");
      if (r < 0)
        throw new RangeError("Index out of range");
    }
    function $d(t, e, r, o2, f2) {
      return e = +e, r = r >>> 0, f2 || Vd(t, e, r, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000), Gn.write(t, e, r, o2, 23, 4), r + 4;
    }
    me.prototype.writeFloatLE = function(e, r, o2) {
      return $d(this, e, r, true, o2);
    };
    me.prototype.writeFloatBE = function(e, r, o2) {
      return $d(this, e, r, false, o2);
    };
    function Gd(t, e, r, o2, f2) {
      return e = +e, r = r >>> 0, f2 || Vd(t, e, r, 8, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), Gn.write(t, e, r, o2, 52, 8), r + 8;
    }
    me.prototype.writeDoubleLE = function(e, r, o2) {
      return Gd(this, e, r, true, o2);
    };
    me.prototype.writeDoubleBE = function(e, r, o2) {
      return Gd(this, e, r, false, o2);
    };
    me.prototype.copy = function(e, r, o2, f2) {
      if (!me.isBuffer(e))
        throw new TypeError("argument should be a Buffer");
      if (o2 || (o2 = 0), !f2 && f2 !== 0 && (f2 = this.length), r >= e.length && (r = e.length), r || (r = 0), f2 > 0 && f2 < o2 && (f2 = o2), f2 === o2 || e.length === 0 || this.length === 0)
        return 0;
      if (r < 0)
        throw new RangeError("targetStart out of bounds");
      if (o2 < 0 || o2 >= this.length)
        throw new RangeError("Index out of range");
      if (f2 < 0)
        throw new RangeError("sourceEnd out of bounds");
      f2 > this.length && (f2 = this.length), e.length - r < f2 - o2 && (f2 = e.length - r + o2);
      let p = f2 - o2;
      return this === e && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r, o2, f2) : Uint8Array.prototype.set.call(e, this.subarray(o2, f2), r), p;
    };
    me.prototype.fill = function(e, r, o2, f2) {
      if (typeof e == "string") {
        if (typeof r == "string" ? (f2 = r, r = 0, o2 = this.length) : typeof o2 == "string" && (f2 = o2, o2 = this.length), f2 !== undefined && typeof f2 != "string")
          throw new TypeError("encoding must be a string");
        if (typeof f2 == "string" && !me.isEncoding(f2))
          throw new TypeError("Unknown encoding: " + f2);
        if (e.length === 1) {
          let m2 = e.charCodeAt(0);
          (f2 === "utf8" && m2 < 128 || f2 === "latin1") && (e = m2);
        }
      } else
        typeof e == "number" ? e = e & 255 : typeof e == "boolean" && (e = Number(e));
      if (r < 0 || this.length < r || this.length < o2)
        throw new RangeError("Out of range index");
      if (o2 <= r)
        return this;
      r = r >>> 0, o2 = o2 === undefined ? this.length : o2 >>> 0, e || (e = 0);
      let p;
      if (typeof e == "number")
        for (p = r;p < o2; ++p)
          this[p] = e;
      else {
        let m2 = me.isBuffer(e) ? e : me.from(e, f2), y3 = m2.length;
        if (y3 === 0)
          throw new TypeError('The value "' + e + '" is invalid for argument "value"');
        for (p = 0;p < o2 - r; ++p)
          this[p + r] = m2[p % y3];
      }
      return this;
    };
    var $n = {};
    function P0(t, e, r) {
      $n[t] = class extends r {
        constructor() {
          super(), Object.defineProperty(this, "message", { value: e.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${t}]`, this.stack, delete this.name;
        }
        get code() {
          return t;
        }
        set code(f2) {
          Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: f2, writable: true });
        }
        toString() {
          return `${this.name} [${t}]: ${this.message}`;
        }
      };
    }
    P0("ERR_BUFFER_OUT_OF_BOUNDS", function(t) {
      return t ? `${t} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    P0("ERR_INVALID_ARG_TYPE", function(t, e) {
      return `The "${t}" argument must be of type number. Received type ${typeof e}`;
    }, TypeError);
    P0("ERR_OUT_OF_RANGE", function(t, e, r) {
      let o2 = `The value of "${t}" is out of range.`, f2 = r;
      return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? f2 = Fd(String(r)) : typeof r == "bigint" && (f2 = String(r), (r > BigInt(2) ** BigInt(32) || r < -(BigInt(2) ** BigInt(32))) && (f2 = Fd(f2)), f2 += "n"), o2 += ` It must be ${e}. Received ${f2}`, o2;
    }, RangeError);
    function Fd(t) {
      let e = "", r = t.length, o2 = t[0] === "-" ? 1 : 0;
      for (;r >= o2 + 4; r -= 3)
        e = `_${t.slice(r - 3, r)}${e}`;
      return `${t.slice(0, r)}${e}`;
    }
    function Kw(t, e, r) {
      Yn(e, "offset"), (t[e] === undefined || t[e + r] === undefined) && Vf(e, t.length - (r + 1));
    }
    function Yd(t, e, r, o2, f2, p) {
      if (t > r || t < e) {
        let m2 = typeof e == "bigint" ? "n" : "", y3;
        throw p > 3 ? e === 0 || e === BigInt(0) ? y3 = `>= 0${m2} and < 2${m2} ** ${(p + 1) * 8}${m2}` : y3 = `>= -(2${m2} ** ${(p + 1) * 8 - 1}${m2}) and < 2 ** ${(p + 1) * 8 - 1}${m2}` : y3 = `>= ${e}${m2} and <= ${r}${m2}`, new $n.ERR_OUT_OF_RANGE("value", y3, t);
      }
      Kw(o2, f2, p);
    }
    function Yn(t, e) {
      if (typeof t != "number")
        throw new $n.ERR_INVALID_ARG_TYPE(e, "number", t);
    }
    function Vf(t, e, r) {
      throw Math.floor(t) !== t ? (Yn(t, r), new $n.ERR_OUT_OF_RANGE(r || "offset", "an integer", t)) : e < 0 ? new $n.ERR_BUFFER_OUT_OF_BOUNDS : new $n.ERR_OUT_OF_RANGE(r || "offset", `>= ${r ? 1 : 0} and <= ${e}`, t);
    }
    var jw = /[^+/0-9A-Za-z-_]/g;
    function Zw(t) {
      if (t = t.split("=")[0], t = t.trim().replace(jw, ""), t.length < 2)
        return "";
      for (;t.length % 4 !== 0; )
        t = t + "=";
      return t;
    }
    function L02(t, e) {
      e = e || 1 / 0;
      let r, o2 = t.length, f2 = null, p = [];
      for (let m2 = 0;m2 < o2; ++m2) {
        if (r = t.charCodeAt(m2), r > 55295 && r < 57344) {
          if (!f2) {
            if (r > 56319) {
              (e -= 3) > -1 && p.push(239, 191, 189);
              continue;
            } else if (m2 + 1 === o2) {
              (e -= 3) > -1 && p.push(239, 191, 189);
              continue;
            }
            f2 = r;
            continue;
          }
          if (r < 56320) {
            (e -= 3) > -1 && p.push(239, 191, 189), f2 = r;
            continue;
          }
          r = (f2 - 55296 << 10 | r - 56320) + 65536;
        } else
          f2 && (e -= 3) > -1 && p.push(239, 191, 189);
        if (f2 = null, r < 128) {
          if ((e -= 1) < 0)
            break;
          p.push(r);
        } else if (r < 2048) {
          if ((e -= 2) < 0)
            break;
          p.push(r >> 6 | 192, r & 63 | 128);
        } else if (r < 65536) {
          if ((e -= 3) < 0)
            break;
          p.push(r >> 12 | 224, r >> 6 & 63 | 128, r & 63 | 128);
        } else if (r < 1114112) {
          if ((e -= 4) < 0)
            break;
          p.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, r & 63 | 128);
        } else
          throw new Error("Invalid code point");
      }
      return p;
    }
    function Vw(t) {
      let e = [];
      for (let r = 0;r < t.length; ++r)
        e.push(t.charCodeAt(r) & 255);
      return e;
    }
    function $w(t, e) {
      let r, o2, f2, p = [];
      for (let m2 = 0;m2 < t.length && !((e -= 2) < 0); ++m2)
        r = t.charCodeAt(m2), o2 = r >> 8, f2 = r % 256, p.push(f2), p.push(o2);
      return p;
    }
    function Xd(t) {
      return I0.toByteArray(Zw(t));
    }
    function to(t, e, r, o2) {
      let f2;
      for (f2 = 0;f2 < o2 && !(f2 + r >= e.length || f2 >= t.length); ++f2)
        e[f2 + r] = t[f2];
      return f2;
    }
    function Zr(t, e) {
      return t instanceof e || t != null && t.constructor != null && t.constructor.name != null && t.constructor.name === e.name;
    }
    function C0(t) {
      return t !== t;
    }
    var Gw = function() {
      let t = "0123456789abcdef", e = new Array(256);
      for (let r = 0;r < 16; ++r) {
        let o2 = r * 16;
        for (let f2 = 0;f2 < 16; ++f2)
          e[o2 + f2] = t[r] + t[f2];
      }
      return e;
    }();
    function Ti(t) {
      return typeof BigInt > "u" ? Yw : t;
    }
    function Yw() {
      throw new Error("BigInt not supported");
    }
  });
  Te = T9((O0, Qd) => {
    var ro = Ut(), Vr = ro.Buffer;
    function Jd(t, e) {
      for (var r in t)
        e[r] = t[r];
    }
    Vr.from && Vr.alloc && Vr.allocUnsafe && Vr.allocUnsafeSlow ? Qd.exports = ro : (Jd(ro, O0), O0.Buffer = an);
    function an(t, e, r) {
      return Vr(t, e, r);
    }
    an.prototype = Object.create(Vr.prototype);
    Jd(Vr, an);
    an.from = function(t, e, r) {
      if (typeof t == "number")
        throw new TypeError("Argument must not be a number");
      return Vr(t, e, r);
    };
    an.alloc = function(t, e, r) {
      if (typeof t != "number")
        throw new TypeError("Argument must be a number");
      var o2 = Vr(t);
      return e !== undefined ? typeof r == "string" ? o2.fill(e, r) : o2.fill(e) : o2.fill(0), o2;
    };
    an.allocUnsafe = function(t) {
      if (typeof t != "number")
        throw new TypeError("Argument must be a number");
      return Vr(t);
    };
    an.allocUnsafeSlow = function(t) {
      if (typeof t != "number")
        throw new TypeError("Argument must be a number");
      return ro.SlowBuffer(t);
    };
  });
  on = T9((Gq, U0) => {
    var F0 = 65536, Xw = 4294967295;
    function Jw() {
      throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
    }
    var Qw = Te().Buffer, io = global.crypto || global.msCrypto;
    io && io.getRandomValues ? U0.exports = e6 : U0.exports = Jw;
    function e6(t, e) {
      if (t > Xw)
        throw new RangeError("requested too many random bytes");
      var r = Qw.allocUnsafe(t);
      if (t > 0)
        if (t > F0)
          for (var o2 = 0;o2 < t; o2 += F0)
            io.getRandomValues(r.slice(o2, o2 + F0));
        else
          io.getRandomValues(r);
      return typeof e == "function" ? process.nextTick(function() {
        e(null, r);
      }) : r;
    }
  });
  Ie = T9((Yq, z0) => {
    typeof Object.create == "function" ? z0.exports = function(e, r) {
      r && (e.super_ = r, e.prototype = Object.create(r.prototype, { constructor: { value: e, enumerable: false, writable: true, configurable: true } }));
    } : z0.exports = function(e, r) {
      if (r) {
        e.super_ = r;
        var o2 = function() {
        };
        o2.prototype = r.prototype, e.prototype = new o2, e.prototype.constructor = e;
      }
    };
  });
  ki = T9((Xq, H0) => {
    var Jn = typeof Reflect == "object" ? Reflect : null, ec = Jn && typeof Jn.apply == "function" ? Jn.apply : function(e, r, o2) {
      return Function.prototype.apply.call(e, r, o2);
    }, no;
    Jn && typeof Jn.ownKeys == "function" ? no = Jn.ownKeys : Object.getOwnPropertySymbols ? no = function(e) {
      return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
    } : no = function(e) {
      return Object.getOwnPropertyNames(e);
    };
    function t6(t) {
      console && console.warn && console.warn(t);
    }
    var rc = Number.isNaN || function(e) {
      return e !== e;
    };
    function Fe() {
      Fe.init.call(this);
    }
    H0.exports = Fe;
    H0.exports.once = f6;
    Fe.EventEmitter = Fe;
    Fe.prototype._events = undefined;
    Fe.prototype._eventsCount = 0;
    Fe.prototype._maxListeners = undefined;
    var tc = 10;
    function fo(t) {
      if (typeof t != "function")
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t);
    }
    Object.defineProperty(Fe, "defaultMaxListeners", { enumerable: true, get: function() {
      return tc;
    }, set: function(t) {
      if (typeof t != "number" || t < 0 || rc(t))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
      tc = t;
    } });
    Fe.init = function() {
      (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || undefined;
    };
    Fe.prototype.setMaxListeners = function(e) {
      if (typeof e != "number" || e < 0 || rc(e))
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
      return this._maxListeners = e, this;
    };
    function ic(t) {
      return t._maxListeners === undefined ? Fe.defaultMaxListeners : t._maxListeners;
    }
    Fe.prototype.getMaxListeners = function() {
      return ic(this);
    };
    Fe.prototype.emit = function(e) {
      for (var r = [], o2 = 1;o2 < arguments.length; o2++)
        r.push(arguments[o2]);
      var f2 = e === "error", p = this._events;
      if (p !== undefined)
        f2 = f2 && p.error === undefined;
      else if (!f2)
        return false;
      if (f2) {
        var m2;
        if (r.length > 0 && (m2 = r[0]), m2 instanceof Error)
          throw m2;
        var y3 = new Error("Unhandled error." + (m2 ? " (" + m2.message + ")" : ""));
        throw y3.context = m2, y3;
      }
      var M2 = p[e];
      if (M2 === undefined)
        return false;
      if (typeof M2 == "function")
        ec(M2, this, r);
      else
        for (var x4 = M2.length, S3 = sc(M2, x4), o2 = 0;o2 < x4; ++o2)
          ec(S3[o2], this, r);
      return true;
    };
    function nc(t, e, r, o2) {
      var f2, p, m2;
      if (fo(r), p = t._events, p === undefined ? (p = t._events = Object.create(null), t._eventsCount = 0) : (p.newListener !== undefined && (t.emit("newListener", e, r.listener ? r.listener : r), p = t._events), m2 = p[e]), m2 === undefined)
        m2 = p[e] = r, ++t._eventsCount;
      else if (typeof m2 == "function" ? m2 = p[e] = o2 ? [r, m2] : [m2, r] : o2 ? m2.unshift(r) : m2.push(r), f2 = ic(t), f2 > 0 && m2.length > f2 && !m2.warned) {
        m2.warned = true;
        var y3 = new Error("Possible EventEmitter memory leak detected. " + m2.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        y3.name = "MaxListenersExceededWarning", y3.emitter = t, y3.type = e, y3.count = m2.length, t6(y3);
      }
      return t;
    }
    Fe.prototype.addListener = function(e, r) {
      return nc(this, e, r, false);
    };
    Fe.prototype.on = Fe.prototype.addListener;
    Fe.prototype.prependListener = function(e, r) {
      return nc(this, e, r, true);
    };
    function r6() {
      if (!this.fired)
        return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
    }
    function fc(t, e, r) {
      var o2 = { fired: false, wrapFn: undefined, target: t, type: e, listener: r }, f2 = r6.bind(o2);
      return f2.listener = r, o2.wrapFn = f2, f2;
    }
    Fe.prototype.once = function(e, r) {
      return fo(r), this.on(e, fc(this, e, r)), this;
    };
    Fe.prototype.prependOnceListener = function(e, r) {
      return fo(r), this.prependListener(e, fc(this, e, r)), this;
    };
    Fe.prototype.removeListener = function(e, r) {
      var o2, f2, p, m2, y3;
      if (fo(r), f2 = this._events, f2 === undefined)
        return this;
      if (o2 = f2[e], o2 === undefined)
        return this;
      if (o2 === r || o2.listener === r)
        --this._eventsCount === 0 ? this._events = Object.create(null) : (delete f2[e], f2.removeListener && this.emit("removeListener", e, o2.listener || r));
      else if (typeof o2 != "function") {
        for (p = -1, m2 = o2.length - 1;m2 >= 0; m2--)
          if (o2[m2] === r || o2[m2].listener === r) {
            y3 = o2[m2].listener, p = m2;
            break;
          }
        if (p < 0)
          return this;
        p === 0 ? o2.shift() : i6(o2, p), o2.length === 1 && (f2[e] = o2[0]), f2.removeListener !== undefined && this.emit("removeListener", e, y3 || r);
      }
      return this;
    };
    Fe.prototype.off = Fe.prototype.removeListener;
    Fe.prototype.removeAllListeners = function(e) {
      var r, o2, f2;
      if (o2 = this._events, o2 === undefined)
        return this;
      if (o2.removeListener === undefined)
        return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : o2[e] !== undefined && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete o2[e]), this;
      if (arguments.length === 0) {
        var p = Object.keys(o2), m2;
        for (f2 = 0;f2 < p.length; ++f2)
          m2 = p[f2], m2 !== "removeListener" && this.removeAllListeners(m2);
        return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
      }
      if (r = o2[e], typeof r == "function")
        this.removeListener(e, r);
      else if (r !== undefined)
        for (f2 = r.length - 1;f2 >= 0; f2--)
          this.removeListener(e, r[f2]);
      return this;
    };
    function ac(t, e, r) {
      var o2 = t._events;
      if (o2 === undefined)
        return [];
      var f2 = o2[e];
      return f2 === undefined ? [] : typeof f2 == "function" ? r ? [f2.listener || f2] : [f2] : r ? n6(f2) : sc(f2, f2.length);
    }
    Fe.prototype.listeners = function(e) {
      return ac(this, e, true);
    };
    Fe.prototype.rawListeners = function(e) {
      return ac(this, e, false);
    };
    Fe.listenerCount = function(t, e) {
      return typeof t.listenerCount == "function" ? t.listenerCount(e) : oc.call(t, e);
    };
    Fe.prototype.listenerCount = oc;
    function oc(t) {
      var e = this._events;
      if (e !== undefined) {
        var r = e[t];
        if (typeof r == "function")
          return 1;
        if (r !== undefined)
          return r.length;
      }
      return 0;
    }
    Fe.prototype.eventNames = function() {
      return this._eventsCount > 0 ? no(this._events) : [];
    };
    function sc(t, e) {
      for (var r = new Array(e), o2 = 0;o2 < e; ++o2)
        r[o2] = t[o2];
      return r;
    }
    function i6(t, e) {
      for (;e + 1 < t.length; e++)
        t[e] = t[e + 1];
      t.pop();
    }
    function n6(t) {
      for (var e = new Array(t.length), r = 0;r < e.length; ++r)
        e[r] = t[r].listener || t[r];
      return e;
    }
    function f6(t, e) {
      return new Promise(function(r, o2) {
        function f2(m2) {
          t.removeListener(e, p), o2(m2);
        }
        function p() {
          typeof t.removeListener == "function" && t.removeListener("error", f2), r([].slice.call(arguments));
        }
        hc(t, e, p, { once: true }), e !== "error" && a6(t, f2, { once: true });
      });
    }
    function a6(t, e, r) {
      typeof t.on == "function" && hc(t, "error", e, r);
    }
    function hc(t, e, r, o2) {
      if (typeof t.on == "function")
        o2.once ? t.once(e, r) : t.on(e, r);
      else if (typeof t.addEventListener == "function")
        t.addEventListener(e, function f(p) {
          o2.once && t.removeEventListener(e, f), r(p);
        });
      else
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t);
    }
  });
  W0 = T9((Jq, uc) => {
    uc.exports = ki().EventEmitter;
  });
  $f = T9(() => {
  });
  pc = T9((tI, cc) => {
    function lc(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(t);
        e && (o2 = o2.filter(function(f2) {
          return Object.getOwnPropertyDescriptor(t, f2).enumerable;
        })), r.push.apply(r, o2);
      }
      return r;
    }
    function o6(t) {
      for (var e = 1;e < arguments.length; e++) {
        var r = arguments[e] != null ? arguments[e] : {};
        e % 2 ? lc(Object(r), true).forEach(function(o2) {
          s6(t, o2, r[o2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : lc(Object(r)).forEach(function(o2) {
          Object.defineProperty(t, o2, Object.getOwnPropertyDescriptor(r, o2));
        });
      }
      return t;
    }
    function s6(t, e, r) {
      return e in t ? Object.defineProperty(t, e, { value: r, enumerable: true, configurable: true, writable: true }) : t[e] = r, t;
    }
    function h6(t, e) {
      if (!(t instanceof e))
        throw new TypeError("Cannot call a class as a function");
    }
    function dc(t, e) {
      for (var r = 0;r < e.length; r++) {
        var o2 = e[r];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(t, o2.key, o2);
      }
    }
    function u6(t, e, r) {
      return e && dc(t.prototype, e), r && dc(t, r), t;
    }
    var l6 = Ut(), ao = l6.Buffer, d6 = $f(), K0 = d6.inspect, c6 = K0 && K0.custom || "inspect";
    function p6(t, e, r) {
      ao.prototype.copy.call(t, e, r);
    }
    cc.exports = function() {
      function t() {
        h6(this, t), this.head = null, this.tail = null, this.length = 0;
      }
      return u6(t, [{ key: "push", value: function(r) {
        var o2 = { data: r, next: null };
        this.length > 0 ? this.tail.next = o2 : this.head = o2, this.tail = o2, ++this.length;
      } }, { key: "unshift", value: function(r) {
        var o2 = { data: r, next: this.head };
        this.length === 0 && (this.tail = o2), this.head = o2, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r) {
        if (this.length === 0)
          return "";
        for (var o2 = this.head, f2 = "" + o2.data;o2 = o2.next; )
          f2 += r + o2.data;
        return f2;
      } }, { key: "concat", value: function(r) {
        if (this.length === 0)
          return ao.alloc(0);
        for (var o2 = ao.allocUnsafe(r >>> 0), f2 = this.head, p = 0;f2; )
          p6(f2.data, o2, p), p += f2.data.length, f2 = f2.next;
        return o2;
      } }, { key: "consume", value: function(r, o2) {
        var f2;
        return r < this.head.data.length ? (f2 = this.head.data.slice(0, r), this.head.data = this.head.data.slice(r)) : r === this.head.data.length ? f2 = this.shift() : f2 = o2 ? this._getString(r) : this._getBuffer(r), f2;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r) {
        var o2 = this.head, f2 = 1, p = o2.data;
        for (r -= p.length;o2 = o2.next; ) {
          var m2 = o2.data, y3 = r > m2.length ? m2.length : r;
          if (y3 === m2.length ? p += m2 : p += m2.slice(0, r), r -= y3, r === 0) {
            y3 === m2.length ? (++f2, o2.next ? this.head = o2.next : this.head = this.tail = null) : (this.head = o2, o2.data = m2.slice(y3));
            break;
          }
          ++f2;
        }
        return this.length -= f2, p;
      } }, { key: "_getBuffer", value: function(r) {
        var o2 = ao.allocUnsafe(r), f2 = this.head, p = 1;
        for (f2.data.copy(o2), r -= f2.data.length;f2 = f2.next; ) {
          var m2 = f2.data, y3 = r > m2.length ? m2.length : r;
          if (m2.copy(o2, o2.length - r, 0, y3), r -= y3, r === 0) {
            y3 === m2.length ? (++p, f2.next ? this.head = f2.next : this.head = this.tail = null) : (this.head = f2, f2.data = m2.slice(y3));
            break;
          }
          ++p;
        }
        return this.length -= p, o2;
      } }, { key: c6, value: function(r, o2) {
        return K0(this, o6({}, o2, { depth: 0, customInspect: false }));
      } }]), t;
    }();
  });
  Z0 = T9((rI, bc) => {
    function v6(t, e) {
      var r = this, o2 = this._readableState && this._readableState.destroyed, f2 = this._writableState && this._writableState.destroyed;
      return o2 || f2 ? (e ? e(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(j0, this, t)) : process.nextTick(j0, this, t)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t || null, function(p) {
        !e && p ? r._writableState ? r._writableState.errorEmitted ? process.nextTick(oo, r) : (r._writableState.errorEmitted = true, process.nextTick(vc, r, p)) : process.nextTick(vc, r, p) : e ? (process.nextTick(oo, r), e(p)) : process.nextTick(oo, r);
      }), this);
    }
    function vc(t, e) {
      j0(t, e), oo(t);
    }
    function oo(t) {
      t._writableState && !t._writableState.emitClose || t._readableState && !t._readableState.emitClose || t.emit("close");
    }
    function b6() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function j0(t, e) {
      t.emit("error", e);
    }
    function m6(t, e) {
      var { _readableState: r, _writableState: o2 } = t;
      r && r.autoDestroy || o2 && o2.autoDestroy ? t.destroy(e) : t.emit("error", e);
    }
    bc.exports = { destroy: v6, undestroy: b6, errorOrDestroy: m6 };
  });
  sn = T9((iI, yc) => {
    function g6(t, e) {
      t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    var gc = {};
    function dr(t, e, r) {
      r || (r = Error);
      function o2(p, m2, y3) {
        return typeof e == "string" ? e : e(p, m2, y3);
      }
      var f2 = function(p) {
        g6(m2, p);
        function m2(y3, M2, x4) {
          return p.call(this, o2(y3, M2, x4)) || this;
        }
        return m2;
      }(r);
      f2.prototype.name = r.name, f2.prototype.code = t, gc[t] = f2;
    }
    function mc(t, e) {
      if (Array.isArray(t)) {
        var r = t.length;
        return t = t.map(function(o2) {
          return String(o2);
        }), r > 2 ? "one of ".concat(e, " ").concat(t.slice(0, r - 1).join(", "), ", or ") + t[r - 1] : r === 2 ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
      } else
        return "of ".concat(e, " ").concat(String(t));
    }
    function y6(t, e, r) {
      return t.substr(!r || r < 0 ? 0 : +r, e.length) === e;
    }
    function w6(t, e, r) {
      return (r === undefined || r > t.length) && (r = t.length), t.substring(r - e.length, r) === e;
    }
    function M6(t, e, r) {
      return typeof r != "number" && (r = 0), r + e.length > t.length ? false : t.indexOf(e, r) !== -1;
    }
    dr("ERR_INVALID_OPT_VALUE", function(t, e) {
      return 'The value "' + e + '" is invalid for option "' + t + '"';
    }, TypeError);
    dr("ERR_INVALID_ARG_TYPE", function(t, e, r) {
      var o2;
      typeof e == "string" && y6(e, "not ") ? (o2 = "must not be", e = e.replace(/^not /, "")) : o2 = "must be";
      var f2;
      if (w6(t, " argument"))
        f2 = "The ".concat(t, " ").concat(o2, " ").concat(mc(e, "type"));
      else {
        var p = M6(t, ".") ? "property" : "argument";
        f2 = 'The "'.concat(t, '" ').concat(p, " ").concat(o2, " ").concat(mc(e, "type"));
      }
      return f2 += ". Received type ".concat(typeof r), f2;
    }, TypeError);
    dr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    dr("ERR_METHOD_NOT_IMPLEMENTED", function(t) {
      return "The " + t + " method is not implemented";
    });
    dr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    dr("ERR_STREAM_DESTROYED", function(t) {
      return "Cannot call " + t + " after a stream was destroyed";
    });
    dr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    dr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    dr("ERR_STREAM_WRITE_AFTER_END", "write after end");
    dr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    dr("ERR_UNKNOWN_ENCODING", function(t) {
      return "Unknown encoding: " + t;
    }, TypeError);
    dr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    yc.exports.codes = gc;
  });
  V02 = T9((nI, wc) => {
    var _6 = sn().codes.ERR_INVALID_OPT_VALUE;
    function x6(t, e, r) {
      return t.highWaterMark != null ? t.highWaterMark : e ? t[r] : null;
    }
    function S6(t, e, r, o2) {
      var f2 = x6(e, o2, r);
      if (f2 != null) {
        if (!(isFinite(f2) && Math.floor(f2) === f2) || f2 < 0) {
          var p = o2 ? r : "highWaterMark";
          throw new _6(p, f2);
        }
        return Math.floor(f2);
      }
      return t.objectMode ? 16 : 16 * 1024;
    }
    wc.exports = { getHighWaterMark: S6 };
  });
  G0 = T9((fI, Mc) => {
    Mc.exports = E6;
    function E6(t, e) {
      if ($0("noDeprecation"))
        return t;
      var r = false;
      function o2() {
        if (!r) {
          if ($0("throwDeprecation"))
            throw new Error(e);
          $0("traceDeprecation") ? console.trace(e) : console.warn(e), r = true;
        }
        return t.apply(this, arguments);
      }
      return o2;
    }
    function $0(t) {
      try {
        if (!global.localStorage)
          return false;
      } catch {
        return false;
      }
      var e = global.localStorage[t];
      return e == null ? false : String(e).toLowerCase() === "true";
    }
  });
  J0 = T9((aI, Rc) => {
    Rc.exports = ht2;
    function xc(t) {
      var e = this;
      this.next = null, this.entry = null, this.finish = function() {
        J6(e, t);
      };
    }
    var Qn;
    ht2.WritableState = Yf;
    var A6 = { deprecate: G0() }, Sc = W0(), ho = Ut().Buffer, R6 = global.Uint8Array || function() {
    };
    function B6(t) {
      return ho.from(t);
    }
    function q6(t) {
      return ho.isBuffer(t) || t instanceof R6;
    }
    var X0 = Z0(), I6 = V02(), T62 = I6.getHighWaterMark, Li = sn().codes, k6 = Li.ERR_INVALID_ARG_TYPE, L6 = Li.ERR_METHOD_NOT_IMPLEMENTED, N6 = Li.ERR_MULTIPLE_CALLBACK, D6 = Li.ERR_STREAM_CANNOT_PIPE, P6 = Li.ERR_STREAM_DESTROYED, C6 = Li.ERR_STREAM_NULL_VALUES, O6 = Li.ERR_STREAM_WRITE_AFTER_END, F6 = Li.ERR_UNKNOWN_ENCODING, ef = X0.errorOrDestroy;
    Ie()(ht2, Sc);
    function U6() {
    }
    function Yf(t, e, r) {
      Qn = Qn || hn(), t = t || {}, typeof r != "boolean" && (r = e instanceof Qn), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = T62(this, t, "writableHighWaterMark", r), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var o2 = t.decodeStrings === false;
      this.decodeStrings = !o2, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(f2) {
        V6(e, f2);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = t.emitClose !== false, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new xc(this);
    }
    Yf.prototype.getBuffer = function() {
      for (var e = this.bufferedRequest, r = [];e; )
        r.push(e), e = e.next;
      return r;
    };
    (function() {
      try {
        Object.defineProperty(Yf.prototype, "buffer", { get: A6.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {
      }
    })();
    var so;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (so = Function.prototype[Symbol.hasInstance], Object.defineProperty(ht2, Symbol.hasInstance, { value: function(e) {
      return so.call(this, e) ? true : this !== ht2 ? false : e && e._writableState instanceof Yf;
    } })) : so = function(e) {
      return e instanceof this;
    };
    function ht2(t) {
      Qn = Qn || hn();
      var e = this instanceof Qn;
      if (!e && !so.call(ht2, this))
        return new ht2(t);
      this._writableState = new Yf(t, this, e), this.writable = true, t && (typeof t.write == "function" && (this._write = t.write), typeof t.writev == "function" && (this._writev = t.writev), typeof t.destroy == "function" && (this._destroy = t.destroy), typeof t.final == "function" && (this._final = t.final)), Sc.call(this);
    }
    ht2.prototype.pipe = function() {
      ef(this, new D6);
    };
    function z6(t, e) {
      var r = new O6;
      ef(t, r), process.nextTick(e, r);
    }
    function H6(t, e, r, o2) {
      var f2;
      return r === null ? f2 = new C6 : typeof r != "string" && !e.objectMode && (f2 = new k6("chunk", ["string", "Buffer"], r)), f2 ? (ef(t, f2), process.nextTick(o2, f2), false) : true;
    }
    ht2.prototype.write = function(t, e, r) {
      var o2 = this._writableState, f2 = false, p = !o2.objectMode && q6(t);
      return p && !ho.isBuffer(t) && (t = B6(t)), typeof e == "function" && (r = e, e = null), p ? e = "buffer" : e || (e = o2.defaultEncoding), typeof r != "function" && (r = U6), o2.ending ? z6(this, r) : (p || H6(this, o2, t, r)) && (o2.pendingcb++, f2 = K6(this, o2, p, t, e, r)), f2;
    };
    ht2.prototype.cork = function() {
      this._writableState.corked++;
    };
    ht2.prototype.uncork = function() {
      var t = this._writableState;
      t.corked && (t.corked--, !t.writing && !t.corked && !t.bufferProcessing && t.bufferedRequest && Ec(this, t));
    };
    ht2.prototype.setDefaultEncoding = function(e) {
      if (typeof e == "string" && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1))
        throw new F6(e);
      return this._writableState.defaultEncoding = e, this;
    };
    Object.defineProperty(ht2.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function W6(t, e, r) {
      return !t.objectMode && t.decodeStrings !== false && typeof e == "string" && (e = ho.from(e, r)), e;
    }
    Object.defineProperty(ht2.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function K6(t, e, r, o2, f2, p) {
      if (!r) {
        var m2 = W6(e, o2, f2);
        o2 !== m2 && (r = true, f2 = "buffer", o2 = m2);
      }
      var y3 = e.objectMode ? 1 : o2.length;
      e.length += y3;
      var M2 = e.length < e.highWaterMark;
      if (M2 || (e.needDrain = true), e.writing || e.corked) {
        var x4 = e.lastBufferedRequest;
        e.lastBufferedRequest = { chunk: o2, encoding: f2, isBuf: r, callback: p, next: null }, x4 ? x4.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
      } else
        Y0(t, e, false, y3, o2, f2, p);
      return M2;
    }
    function Y0(t, e, r, o2, f2, p, m2) {
      e.writelen = o2, e.writecb = m2, e.writing = true, e.sync = true, e.destroyed ? e.onwrite(new P6("write")) : r ? t._writev(f2, e.onwrite) : t._write(f2, p, e.onwrite), e.sync = false;
    }
    function j6(t, e, r, o2, f2) {
      --e.pendingcb, r ? (process.nextTick(f2, o2), process.nextTick(Gf, t, e), t._writableState.errorEmitted = true, ef(t, o2)) : (f2(o2), t._writableState.errorEmitted = true, ef(t, o2), Gf(t, e));
    }
    function Z6(t) {
      t.writing = false, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
    }
    function V6(t, e) {
      var r = t._writableState, o2 = r.sync, f2 = r.writecb;
      if (typeof f2 != "function")
        throw new N6;
      if (Z6(r), e)
        j6(t, r, o2, e, f2);
      else {
        var p = Ac(r) || t.destroyed;
        !p && !r.corked && !r.bufferProcessing && r.bufferedRequest && Ec(t, r), o2 ? process.nextTick(_c, t, r, p, f2) : _c(t, r, p, f2);
      }
    }
    function _c(t, e, r, o2) {
      r || $6(t, e), e.pendingcb--, o2(), Gf(t, e);
    }
    function $6(t, e) {
      e.length === 0 && e.needDrain && (e.needDrain = false, t.emit("drain"));
    }
    function Ec(t, e) {
      e.bufferProcessing = true;
      var r = e.bufferedRequest;
      if (t._writev && r && r.next) {
        var o2 = e.bufferedRequestCount, f2 = new Array(o2), p = e.corkedRequestsFree;
        p.entry = r;
        for (var m2 = 0, y3 = true;r; )
          f2[m2] = r, r.isBuf || (y3 = false), r = r.next, m2 += 1;
        f2.allBuffers = y3, Y0(t, e, true, e.length, f2, "", p.finish), e.pendingcb++, e.lastBufferedRequest = null, p.next ? (e.corkedRequestsFree = p.next, p.next = null) : e.corkedRequestsFree = new xc(e), e.bufferedRequestCount = 0;
      } else {
        for (;r; ) {
          var { chunk: M2, encoding: x4, callback: S3 } = r, E3 = e.objectMode ? 1 : M2.length;
          if (Y0(t, e, false, E3, M2, x4, S3), r = r.next, e.bufferedRequestCount--, e.writing)
            break;
        }
        r === null && (e.lastBufferedRequest = null);
      }
      e.bufferedRequest = r, e.bufferProcessing = false;
    }
    ht2.prototype._write = function(t, e, r) {
      r(new L6("_write()"));
    };
    ht2.prototype._writev = null;
    ht2.prototype.end = function(t, e, r) {
      var o2 = this._writableState;
      return typeof t == "function" ? (r = t, t = null, e = null) : typeof e == "function" && (r = e, e = null), t != null && this.write(t, e), o2.corked && (o2.corked = 1, this.uncork()), o2.ending || X6(this, o2, r), this;
    };
    Object.defineProperty(ht2.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function Ac(t) {
      return t.ending && t.length === 0 && t.bufferedRequest === null && !t.finished && !t.writing;
    }
    function G6(t, e) {
      t._final(function(r) {
        e.pendingcb--, r && ef(t, r), e.prefinished = true, t.emit("prefinish"), Gf(t, e);
      });
    }
    function Y6(t, e) {
      !e.prefinished && !e.finalCalled && (typeof t._final == "function" && !e.destroyed ? (e.pendingcb++, e.finalCalled = true, process.nextTick(G6, t, e)) : (e.prefinished = true, t.emit("prefinish")));
    }
    function Gf(t, e) {
      var r = Ac(e);
      if (r && (Y6(t, e), e.pendingcb === 0 && (e.finished = true, t.emit("finish"), e.autoDestroy))) {
        var o2 = t._readableState;
        (!o2 || o2.autoDestroy && o2.endEmitted) && t.destroy();
      }
      return r;
    }
    function X6(t, e, r) {
      e.ending = true, Gf(t, e), r && (e.finished ? process.nextTick(r) : t.once("finish", r)), e.ended = true, t.writable = false;
    }
    function J6(t, e, r) {
      var o2 = t.entry;
      for (t.entry = null;o2; ) {
        var f2 = o2.callback;
        e.pendingcb--, f2(r), o2 = o2.next;
      }
      e.corkedRequestsFree.next = t;
    }
    Object.defineProperty(ht2.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(e) {
      !this._writableState || (this._writableState.destroyed = e);
    } });
    ht2.prototype.destroy = X0.destroy;
    ht2.prototype._undestroy = X0.undestroy;
    ht2.prototype._destroy = function(t, e) {
      e(t);
    };
  });
  hn = T9((oI, qc) => {
    var Q6 = Object.keys || function(t) {
      var e = [];
      for (var r in t)
        e.push(r);
      return e;
    };
    qc.exports = $r;
    var Bc = th(), eh = J0();
    Ie()($r, Bc);
    for (Q0 = Q6(eh.prototype), uo = 0;uo < Q0.length; uo++)
      lo = Q0[uo], $r.prototype[lo] || ($r.prototype[lo] = eh.prototype[lo]);
    var Q0, lo, uo;
    function $r(t) {
      if (!(this instanceof $r))
        return new $r(t);
      Bc.call(this, t), eh.call(this, t), this.allowHalfOpen = true, t && (t.readable === false && (this.readable = false), t.writable === false && (this.writable = false), t.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", eM)));
    }
    Object.defineProperty($r.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty($r.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty($r.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function eM() {
      this._writableState.ended || process.nextTick(tM, this);
    }
    function tM(t) {
      t.end();
    }
    Object.defineProperty($r.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(e) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = e, this._writableState.destroyed = e);
    } });
  });
  co = T9((Tc) => {
    var ih = Te().Buffer, Ic = ih.isEncoding || function(t) {
      switch (t = "" + t, t && t.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function rM(t) {
      if (!t)
        return "utf8";
      for (var e;; )
        switch (t) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return t;
          default:
            if (e)
              return;
            t = ("" + t).toLowerCase(), e = true;
        }
    }
    function iM(t) {
      var e = rM(t);
      if (typeof e != "string" && (ih.isEncoding === Ic || !Ic(t)))
        throw new Error("Unknown encoding: " + t);
      return e || t;
    }
    Tc.StringDecoder = Xf;
    function Xf(t) {
      this.encoding = iM(t);
      var e;
      switch (this.encoding) {
        case "utf16le":
          this.text = hM, this.end = uM, e = 4;
          break;
        case "utf8":
          this.fillLast = aM, e = 4;
          break;
        case "base64":
          this.text = lM, this.end = dM, e = 3;
          break;
        default:
          this.write = cM, this.end = pM;
          return;
      }
      this.lastNeed = 0, this.lastTotal = 0, this.lastChar = ih.allocUnsafe(e);
    }
    Xf.prototype.write = function(t) {
      if (t.length === 0)
        return "";
      var e, r;
      if (this.lastNeed) {
        if (e = this.fillLast(t), e === undefined)
          return "";
        r = this.lastNeed, this.lastNeed = 0;
      } else
        r = 0;
      return r < t.length ? e ? e + this.text(t, r) : this.text(t, r) : e || "";
    };
    Xf.prototype.end = sM;
    Xf.prototype.text = oM;
    Xf.prototype.fillLast = function(t) {
      if (this.lastNeed <= t.length)
        return t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length), this.lastNeed -= t.length;
    };
    function rh(t) {
      return t <= 127 ? 0 : t >> 5 === 6 ? 2 : t >> 4 === 14 ? 3 : t >> 3 === 30 ? 4 : t >> 6 === 2 ? -1 : -2;
    }
    function nM(t, e, r) {
      var o2 = e.length - 1;
      if (o2 < r)
        return 0;
      var f2 = rh(e[o2]);
      return f2 >= 0 ? (f2 > 0 && (t.lastNeed = f2 - 1), f2) : --o2 < r || f2 === -2 ? 0 : (f2 = rh(e[o2]), f2 >= 0 ? (f2 > 0 && (t.lastNeed = f2 - 2), f2) : --o2 < r || f2 === -2 ? 0 : (f2 = rh(e[o2]), f2 >= 0 ? (f2 > 0 && (f2 === 2 ? f2 = 0 : t.lastNeed = f2 - 3), f2) : 0));
    }
    function fM(t, e, r) {
      if ((e[0] & 192) !== 128)
        return t.lastNeed = 0, "�";
      if (t.lastNeed > 1 && e.length > 1) {
        if ((e[1] & 192) !== 128)
          return t.lastNeed = 1, "�";
        if (t.lastNeed > 2 && e.length > 2 && (e[2] & 192) !== 128)
          return t.lastNeed = 2, "�";
      }
    }
    function aM(t) {
      var e = this.lastTotal - this.lastNeed, r = fM(this, t, e);
      if (r !== undefined)
        return r;
      if (this.lastNeed <= t.length)
        return t.copy(this.lastChar, e, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      t.copy(this.lastChar, e, 0, t.length), this.lastNeed -= t.length;
    }
    function oM(t, e) {
      var r = nM(this, t, e);
      if (!this.lastNeed)
        return t.toString("utf8", e);
      this.lastTotal = r;
      var o2 = t.length - (r - this.lastNeed);
      return t.copy(this.lastChar, 0, o2), t.toString("utf8", e, o2);
    }
    function sM(t) {
      var e = t && t.length ? this.write(t) : "";
      return this.lastNeed ? e + "�" : e;
    }
    function hM(t, e) {
      if ((t.length - e) % 2 === 0) {
        var r = t.toString("utf16le", e);
        if (r) {
          var o2 = r.charCodeAt(r.length - 1);
          if (o2 >= 55296 && o2 <= 56319)
            return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1], r.slice(0, -1);
        }
        return r;
      }
      return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t[t.length - 1], t.toString("utf16le", e, t.length - 1);
    }
    function uM(t) {
      var e = t && t.length ? this.write(t) : "";
      if (this.lastNeed) {
        var r = this.lastTotal - this.lastNeed;
        return e + this.lastChar.toString("utf16le", 0, r);
      }
      return e;
    }
    function lM(t, e) {
      var r = (t.length - e) % 3;
      return r === 0 ? t.toString("base64", e) : (this.lastNeed = 3 - r, this.lastTotal = 3, r === 1 ? this.lastChar[0] = t[t.length - 1] : (this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1]), t.toString("base64", e, t.length - r));
    }
    function dM(t) {
      var e = t && t.length ? this.write(t) : "";
      return this.lastNeed ? e + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e;
    }
    function cM(t) {
      return t.toString(this.encoding);
    }
    function pM(t) {
      return t && t.length ? this.write(t) : "";
    }
  });
  Jf = {};
  Ja(Jf, { StringDecoder: () => po.StringDecoder, default: () => po.StringDecoder });
  Qf = R0(() => {
    po = rn(co());
  });
  vo = T9((hI, Nc) => {
    var kc = sn().codes.ERR_STREAM_PREMATURE_CLOSE;
    function vM(t) {
      var e = false;
      return function() {
        if (!e) {
          e = true;
          for (var r = arguments.length, o2 = new Array(r), f2 = 0;f2 < r; f2++)
            o2[f2] = arguments[f2];
          t.apply(this, o2);
        }
      };
    }
    function bM() {
    }
    function mM(t) {
      return t.setHeader && typeof t.abort == "function";
    }
    function Lc(t, e, r) {
      if (typeof e == "function")
        return Lc(t, null, e);
      e || (e = {}), r = vM(r || bM);
      var o2 = e.readable || e.readable !== false && t.readable, f2 = e.writable || e.writable !== false && t.writable, p = function() {
        t.writable || y3();
      }, m2 = t._writableState && t._writableState.finished, y3 = function() {
        f2 = false, m2 = true, o2 || r.call(t);
      }, M2 = t._readableState && t._readableState.endEmitted, x4 = function() {
        o2 = false, M2 = true, f2 || r.call(t);
      }, S3 = function(L3) {
        r.call(t, L3);
      }, E3 = function() {
        var L3;
        if (o2 && !M2)
          return (!t._readableState || !t._readableState.ended) && (L3 = new kc), r.call(t, L3);
        if (f2 && !m2)
          return (!t._writableState || !t._writableState.ended) && (L3 = new kc), r.call(t, L3);
      }, B2 = function() {
        t.req.on("finish", y3);
      };
      return mM(t) ? (t.on("complete", y3), t.on("abort", E3), t.req ? B2() : t.on("request", B2)) : f2 && !t._writableState && (t.on("end", p), t.on("close", p)), t.on("end", x4), t.on("finish", y3), e.error !== false && t.on("error", S3), t.on("close", E3), function() {
        t.removeListener("complete", y3), t.removeListener("abort", E3), t.removeListener("request", B2), t.req && t.req.removeListener("finish", y3), t.removeListener("end", p), t.removeListener("close", p), t.removeListener("finish", y3), t.removeListener("end", x4), t.removeListener("error", S3), t.removeListener("close", E3);
      };
    }
    Nc.exports = Lc;
  });
  Pc = T9((uI, Dc) => {
    var bo;
    function Ni(t, e, r) {
      return e in t ? Object.defineProperty(t, e, { value: r, enumerable: true, configurable: true, writable: true }) : t[e] = r, t;
    }
    var gM = vo(), Di = Symbol("lastResolve"), un = Symbol("lastReject"), ea = Symbol("error"), mo = Symbol("ended"), ln = Symbol("lastPromise"), nh = Symbol("handlePromise"), dn = Symbol("stream");
    function Pi2(t, e) {
      return { value: t, done: e };
    }
    function yM(t) {
      var e = t[Di];
      if (e !== null) {
        var r = t[dn].read();
        r !== null && (t[ln] = null, t[Di] = null, t[un] = null, e(Pi2(r, false)));
      }
    }
    function wM(t) {
      process.nextTick(yM, t);
    }
    function MM(t, e) {
      return function(r, o2) {
        t.then(function() {
          if (e[mo]) {
            r(Pi2(undefined, true));
            return;
          }
          e[nh](r, o2);
        }, o2);
      };
    }
    var _M = Object.getPrototypeOf(function() {
    }), xM = Object.setPrototypeOf((bo = { get stream() {
      return this[dn];
    }, next: function() {
      var e = this, r = this[ea];
      if (r !== null)
        return Promise.reject(r);
      if (this[mo])
        return Promise.resolve(Pi2(undefined, true));
      if (this[dn].destroyed)
        return new Promise(function(m2, y3) {
          process.nextTick(function() {
            e[ea] ? y3(e[ea]) : m2(Pi2(undefined, true));
          });
        });
      var o2 = this[ln], f2;
      if (o2)
        f2 = new Promise(MM(o2, this));
      else {
        var p = this[dn].read();
        if (p !== null)
          return Promise.resolve(Pi2(p, false));
        f2 = new Promise(this[nh]);
      }
      return this[ln] = f2, f2;
    } }, Ni(bo, Symbol.asyncIterator, function() {
      return this;
    }), Ni(bo, "return", function() {
      var e = this;
      return new Promise(function(r, o2) {
        e[dn].destroy(null, function(f2) {
          if (f2) {
            o2(f2);
            return;
          }
          r(Pi2(undefined, true));
        });
      });
    }), bo), _M), SM = function(e) {
      var r, o2 = Object.create(xM, (r = {}, Ni(r, dn, { value: e, writable: true }), Ni(r, Di, { value: null, writable: true }), Ni(r, un, { value: null, writable: true }), Ni(r, ea, { value: null, writable: true }), Ni(r, mo, { value: e._readableState.endEmitted, writable: true }), Ni(r, nh, { value: function(p, m2) {
        var y3 = o2[dn].read();
        y3 ? (o2[ln] = null, o2[Di] = null, o2[un] = null, p(Pi2(y3, false))) : (o2[Di] = p, o2[un] = m2);
      }, writable: true }), r));
      return o2[ln] = null, gM(e, function(f2) {
        if (f2 && f2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var p = o2[un];
          p !== null && (o2[ln] = null, o2[Di] = null, o2[un] = null, p(f2)), o2[ea] = f2;
          return;
        }
        var m2 = o2[Di];
        m2 !== null && (o2[ln] = null, o2[Di] = null, o2[un] = null, m2(Pi2(undefined, true))), o2[mo] = true;
      }), e.on("readable", wM.bind(null, o2)), o2;
    };
    Dc.exports = SM;
  });
  Oc = T9((lI, Cc) => {
    Cc.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  th = T9((cI, $c) => {
    $c.exports = Ce;
    var tf;
    Ce.ReadableState = Hc;
    var dI = ki().EventEmitter, zc = function(e, r) {
      return e.listeners(r).length;
    }, ra = W0(), go = Ut().Buffer, EM = global.Uint8Array || function() {
    };
    function AM(t) {
      return go.from(t);
    }
    function RM(t) {
      return go.isBuffer(t) || t instanceof EM;
    }
    var fh = $f(), Ne;
    fh && fh.debuglog ? Ne = fh.debuglog("stream") : Ne = function() {
    };
    var BM = pc(), dh = Z0(), qM = V02(), IM = qM.getHighWaterMark, yo = sn().codes, TM = yo.ERR_INVALID_ARG_TYPE, kM = yo.ERR_STREAM_PUSH_AFTER_EOF, LM = yo.ERR_METHOD_NOT_IMPLEMENTED, NM = yo.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, rf, ah, oh;
    Ie()(Ce, ra);
    var ta = dh.errorOrDestroy, sh = ["error", "close", "destroy", "pause", "resume"];
    function DM(t, e, r) {
      if (typeof t.prependListener == "function")
        return t.prependListener(e, r);
      !t._events || !t._events[e] ? t.on(e, r) : Array.isArray(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [r, t._events[e]];
    }
    function Hc(t, e, r) {
      tf = tf || hn(), t = t || {}, typeof r != "boolean" && (r = e instanceof tf), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = IM(this, t, "readableHighWaterMark", r), this.buffer = new BM, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = t.emitClose !== false, this.autoDestroy = !!t.autoDestroy, this.destroyed = false, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t.encoding && (rf || (rf = (Qf(), ur(Jf)).StringDecoder), this.decoder = new rf(t.encoding), this.encoding = t.encoding);
    }
    function Ce(t) {
      if (tf = tf || hn(), !(this instanceof Ce))
        return new Ce(t);
      var e = this instanceof tf;
      this._readableState = new Hc(t, this, e), this.readable = true, t && (typeof t.read == "function" && (this._read = t.read), typeof t.destroy == "function" && (this._destroy = t.destroy)), ra.call(this);
    }
    Object.defineProperty(Ce.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(e) {
      !this._readableState || (this._readableState.destroyed = e);
    } });
    Ce.prototype.destroy = dh.destroy;
    Ce.prototype._undestroy = dh.undestroy;
    Ce.prototype._destroy = function(t, e) {
      e(t);
    };
    Ce.prototype.push = function(t, e) {
      var r = this._readableState, o2;
      return r.objectMode ? o2 = true : typeof t == "string" && (e = e || r.defaultEncoding, e !== r.encoding && (t = go.from(t, e), e = ""), o2 = true), Wc(this, t, e, false, o2);
    };
    Ce.prototype.unshift = function(t) {
      return Wc(this, t, null, true, false);
    };
    function Wc(t, e, r, o2, f2) {
      Ne("readableAddChunk", e);
      var p = t._readableState;
      if (e === null)
        p.reading = false, OM(t, p);
      else {
        var m2;
        if (f2 || (m2 = PM(p, e)), m2)
          ta(t, m2);
        else if (p.objectMode || e && e.length > 0)
          if (typeof e != "string" && !p.objectMode && Object.getPrototypeOf(e) !== go.prototype && (e = AM(e)), o2)
            p.endEmitted ? ta(t, new NM) : hh(t, p, e, true);
          else if (p.ended)
            ta(t, new kM);
          else {
            if (p.destroyed)
              return false;
            p.reading = false, p.decoder && !r ? (e = p.decoder.write(e), p.objectMode || e.length !== 0 ? hh(t, p, e, false) : lh(t, p)) : hh(t, p, e, false);
          }
        else
          o2 || (p.reading = false, lh(t, p));
      }
      return !p.ended && (p.length < p.highWaterMark || p.length === 0);
    }
    function hh(t, e, r, o2) {
      e.flowing && e.length === 0 && !e.sync ? (e.awaitDrain = 0, t.emit("data", r)) : (e.length += e.objectMode ? 1 : r.length, o2 ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && wo(t)), lh(t, e);
    }
    function PM(t, e) {
      var r;
      return !RM(e) && typeof e != "string" && e !== undefined && !t.objectMode && (r = new TM("chunk", ["string", "Buffer", "Uint8Array"], e)), r;
    }
    Ce.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Ce.prototype.setEncoding = function(t) {
      rf || (rf = (Qf(), ur(Jf)).StringDecoder);
      var e = new rf(t);
      this._readableState.decoder = e, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r = this._readableState.buffer.head, o2 = "";r !== null; )
        o2 += e.write(r.data), r = r.next;
      return this._readableState.buffer.clear(), o2 !== "" && this._readableState.buffer.push(o2), this._readableState.length = o2.length, this;
    };
    var Fc = 1073741824;
    function CM2(t) {
      return t >= Fc ? t = Fc : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
    }
    function Uc(t, e) {
      return t <= 0 || e.length === 0 && e.ended ? 0 : e.objectMode ? 1 : t !== t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = CM2(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = true, 0));
    }
    Ce.prototype.read = function(t) {
      Ne("read", t), t = parseInt(t, 10);
      var e = this._readableState, r = t;
      if (t !== 0 && (e.emittedReadable = false), t === 0 && e.needReadable && ((e.highWaterMark !== 0 ? e.length >= e.highWaterMark : e.length > 0) || e.ended))
        return Ne("read: emitReadable", e.length, e.ended), e.length === 0 && e.ended ? uh(this) : wo(this), null;
      if (t = Uc(t, e), t === 0 && e.ended)
        return e.length === 0 && uh(this), null;
      var o2 = e.needReadable;
      Ne("need readable", o2), (e.length === 0 || e.length - t < e.highWaterMark) && (o2 = true, Ne("length less than watermark", o2)), e.ended || e.reading ? (o2 = false, Ne("reading or ended", o2)) : o2 && (Ne("do read"), e.reading = true, e.sync = true, e.length === 0 && (e.needReadable = true), this._read(e.highWaterMark), e.sync = false, e.reading || (t = Uc(r, e)));
      var f2;
      return t > 0 ? f2 = Zc(t, e) : f2 = null, f2 === null ? (e.needReadable = e.length <= e.highWaterMark, t = 0) : (e.length -= t, e.awaitDrain = 0), e.length === 0 && (e.ended || (e.needReadable = true), r !== t && e.ended && uh(this)), f2 !== null && this.emit("data", f2), f2;
    };
    function OM(t, e) {
      if (Ne("onEofChunk"), !e.ended) {
        if (e.decoder) {
          var r = e.decoder.end();
          r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
        }
        e.ended = true, e.sync ? wo(t) : (e.needReadable = false, e.emittedReadable || (e.emittedReadable = true, Kc(t)));
      }
    }
    function wo(t) {
      var e = t._readableState;
      Ne("emitReadable", e.needReadable, e.emittedReadable), e.needReadable = false, e.emittedReadable || (Ne("emitReadable", e.flowing), e.emittedReadable = true, process.nextTick(Kc, t));
    }
    function Kc(t) {
      var e = t._readableState;
      Ne("emitReadable_", e.destroyed, e.length, e.ended), !e.destroyed && (e.length || e.ended) && (t.emit("readable"), e.emittedReadable = false), e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark, ch(t);
    }
    function lh(t, e) {
      e.readingMore || (e.readingMore = true, process.nextTick(FM, t, e));
    }
    function FM(t, e) {
      for (;!e.reading && !e.ended && (e.length < e.highWaterMark || e.flowing && e.length === 0); ) {
        var r = e.length;
        if (Ne("maybeReadMore read 0"), t.read(0), r === e.length)
          break;
      }
      e.readingMore = false;
    }
    Ce.prototype._read = function(t) {
      ta(this, new LM("_read()"));
    };
    Ce.prototype.pipe = function(t, e) {
      var r = this, o2 = this._readableState;
      switch (o2.pipesCount) {
        case 0:
          o2.pipes = t;
          break;
        case 1:
          o2.pipes = [o2.pipes, t];
          break;
        default:
          o2.pipes.push(t);
          break;
      }
      o2.pipesCount += 1, Ne("pipe count=%d opts=%j", o2.pipesCount, e);
      var f2 = (!e || e.end !== false) && t !== process.stdout && t !== process.stderr, p = f2 ? y3 : ge;
      o2.endEmitted ? process.nextTick(p) : r.once("end", p), t.on("unpipe", m2);
      function m2(_e, N5) {
        Ne("onunpipe"), _e === r && N5 && N5.hasUnpiped === false && (N5.hasUnpiped = true, S3());
      }
      function y3() {
        Ne("onend"), t.end();
      }
      var M2 = UM(r);
      t.on("drain", M2);
      var x4 = false;
      function S3() {
        Ne("cleanup"), t.removeListener("close", q), t.removeListener("finish", L3), t.removeListener("drain", M2), t.removeListener("error", B2), t.removeListener("unpipe", m2), r.removeListener("end", y3), r.removeListener("end", ge), r.removeListener("data", E3), x4 = true, o2.awaitDrain && (!t._writableState || t._writableState.needDrain) && M2();
      }
      r.on("data", E3);
      function E3(_e) {
        Ne("ondata");
        var N5 = t.write(_e);
        Ne("dest.write", N5), N5 === false && ((o2.pipesCount === 1 && o2.pipes === t || o2.pipesCount > 1 && Vc(o2.pipes, t) !== -1) && !x4 && (Ne("false write response, pause", o2.awaitDrain), o2.awaitDrain++), r.pause());
      }
      function B2(_e) {
        Ne("onerror", _e), ge(), t.removeListener("error", B2), zc(t, "error") === 0 && ta(t, _e);
      }
      DM(t, "error", B2);
      function q() {
        t.removeListener("finish", L3), ge();
      }
      t.once("close", q);
      function L3() {
        Ne("onfinish"), t.removeListener("close", q), ge();
      }
      t.once("finish", L3);
      function ge() {
        Ne("unpipe"), r.unpipe(t);
      }
      return t.emit("pipe", r), o2.flowing || (Ne("pipe resume"), r.resume()), t;
    };
    function UM(t) {
      return function() {
        var r = t._readableState;
        Ne("pipeOnDrain", r.awaitDrain), r.awaitDrain && r.awaitDrain--, r.awaitDrain === 0 && zc(t, "data") && (r.flowing = true, ch(t));
      };
    }
    Ce.prototype.unpipe = function(t) {
      var e = this._readableState, r = { hasUnpiped: false };
      if (e.pipesCount === 0)
        return this;
      if (e.pipesCount === 1)
        return t && t !== e.pipes ? this : (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = false, t && t.emit("unpipe", this, r), this);
      if (!t) {
        var { pipes: o2, pipesCount: f2 } = e;
        e.pipes = null, e.pipesCount = 0, e.flowing = false;
        for (var p = 0;p < f2; p++)
          o2[p].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var m2 = Vc(e.pipes, t);
      return m2 === -1 ? this : (e.pipes.splice(m2, 1), e.pipesCount -= 1, e.pipesCount === 1 && (e.pipes = e.pipes[0]), t.emit("unpipe", this, r), this);
    };
    Ce.prototype.on = function(t, e) {
      var r = ra.prototype.on.call(this, t, e), o2 = this._readableState;
      return t === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, Ne("on readable", o2.length, o2.reading), o2.length ? wo(this) : o2.reading || process.nextTick(zM, this)), r;
    };
    Ce.prototype.addListener = Ce.prototype.on;
    Ce.prototype.removeListener = function(t, e) {
      var r = ra.prototype.removeListener.call(this, t, e);
      return t === "readable" && process.nextTick(jc, this), r;
    };
    Ce.prototype.removeAllListeners = function(t) {
      var e = ra.prototype.removeAllListeners.apply(this, arguments);
      return (t === "readable" || t === undefined) && process.nextTick(jc, this), e;
    };
    function jc(t) {
      var e = t._readableState;
      e.readableListening = t.listenerCount("readable") > 0, e.resumeScheduled && !e.paused ? e.flowing = true : t.listenerCount("data") > 0 && t.resume();
    }
    function zM(t) {
      Ne("readable nexttick read 0"), t.read(0);
    }
    Ce.prototype.resume = function() {
      var t = this._readableState;
      return t.flowing || (Ne("resume"), t.flowing = !t.readableListening, HM(this, t)), t.paused = false, this;
    };
    function HM(t, e) {
      e.resumeScheduled || (e.resumeScheduled = true, process.nextTick(WM, t, e));
    }
    function WM(t, e) {
      Ne("resume", e.reading), e.reading || t.read(0), e.resumeScheduled = false, t.emit("resume"), ch(t), e.flowing && !e.reading && t.read(0);
    }
    Ce.prototype.pause = function() {
      return Ne("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (Ne("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function ch(t) {
      var e = t._readableState;
      for (Ne("flow", e.flowing);e.flowing && t.read() !== null; )
        ;
    }
    Ce.prototype.wrap = function(t) {
      var e = this, r = this._readableState, o2 = false;
      t.on("end", function() {
        if (Ne("wrapped end"), r.decoder && !r.ended) {
          var m2 = r.decoder.end();
          m2 && m2.length && e.push(m2);
        }
        e.push(null);
      }), t.on("data", function(m2) {
        if (Ne("wrapped data"), r.decoder && (m2 = r.decoder.write(m2)), !(r.objectMode && m2 == null) && !(!r.objectMode && (!m2 || !m2.length))) {
          var y3 = e.push(m2);
          y3 || (o2 = true, t.pause());
        }
      });
      for (var f2 in t)
        this[f2] === undefined && typeof t[f2] == "function" && (this[f2] = function(y3) {
          return function() {
            return t[y3].apply(t, arguments);
          };
        }(f2));
      for (var p = 0;p < sh.length; p++)
        t.on(sh[p], this.emit.bind(this, sh[p]));
      return this._read = function(m2) {
        Ne("wrapped _read", m2), o2 && (o2 = false, t.resume());
      }, this;
    };
    typeof Symbol == "function" && (Ce.prototype[Symbol.asyncIterator] = function() {
      return ah === undefined && (ah = Pc()), ah(this);
    });
    Object.defineProperty(Ce.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(Ce.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(Ce.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(e) {
      this._readableState && (this._readableState.flowing = e);
    } });
    Ce._fromList = Zc;
    Object.defineProperty(Ce.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Zc(t, e) {
      if (e.length === 0)
        return null;
      var r;
      return e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (e.decoder ? r = e.buffer.join("") : e.buffer.length === 1 ? r = e.buffer.first() : r = e.buffer.concat(e.length), e.buffer.clear()) : r = e.buffer.consume(t, e.decoder), r;
    }
    function uh(t) {
      var e = t._readableState;
      Ne("endReadable", e.endEmitted), e.endEmitted || (e.ended = true, process.nextTick(KM, e, t));
    }
    function KM(t, e) {
      if (Ne("endReadableNT", t.endEmitted, t.length), !t.endEmitted && t.length === 0 && (t.endEmitted = true, e.readable = false, e.emit("end"), t.autoDestroy)) {
        var r = e._writableState;
        (!r || r.autoDestroy && r.finished) && e.destroy();
      }
    }
    typeof Symbol == "function" && (Ce.from = function(t, e) {
      return oh === undefined && (oh = Oc()), oh(Ce, t, e);
    });
    function Vc(t, e) {
      for (var r = 0, o2 = t.length;r < o2; r++)
        if (t[r] === e)
          return r;
      return -1;
    }
  });
  ph = T9((pI, Yc) => {
    Yc.exports = di;
    var Mo = sn().codes, jM = Mo.ERR_METHOD_NOT_IMPLEMENTED, ZM = Mo.ERR_MULTIPLE_CALLBACK, VM = Mo.ERR_TRANSFORM_ALREADY_TRANSFORMING, $M = Mo.ERR_TRANSFORM_WITH_LENGTH_0, _o = hn();
    Ie()(di, _o);
    function GM(t, e) {
      var r = this._transformState;
      r.transforming = false;
      var o2 = r.writecb;
      if (o2 === null)
        return this.emit("error", new ZM);
      r.writechunk = null, r.writecb = null, e != null && this.push(e), o2(t);
      var f2 = this._readableState;
      f2.reading = false, (f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
    }
    function di(t) {
      if (!(this instanceof di))
        return new di(t);
      _o.call(this, t), this._transformState = { afterTransform: GM.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.on("prefinish", YM);
    }
    function YM() {
      var t = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e, r) {
        Gc(t, e, r);
      }) : Gc(this, null, null);
    }
    di.prototype.push = function(t, e) {
      return this._transformState.needTransform = false, _o.prototype.push.call(this, t, e);
    };
    di.prototype._transform = function(t, e, r) {
      r(new jM("_transform()"));
    };
    di.prototype._write = function(t, e, r) {
      var o2 = this._transformState;
      if (o2.writecb = r, o2.writechunk = t, o2.writeencoding = e, !o2.transforming) {
        var f2 = this._readableState;
        (o2.needTransform || f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
      }
    };
    di.prototype._read = function(t) {
      var e = this._transformState;
      e.writechunk !== null && !e.transforming ? (e.transforming = true, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = true;
    };
    di.prototype._destroy = function(t, e) {
      _o.prototype._destroy.call(this, t, function(r) {
        e(r);
      });
    };
    function Gc(t, e, r) {
      if (e)
        return t.emit("error", e);
      if (r != null && t.push(r), t._writableState.length)
        throw new $M;
      if (t._transformState.transforming)
        throw new VM;
      return t.push(null);
    }
  });
  Qc = T9((vI, Jc) => {
    Jc.exports = ia;
    var Xc = ph();
    Ie()(ia, Xc);
    function ia(t) {
      if (!(this instanceof ia))
        return new ia(t);
      Xc.call(this, t);
    }
    ia.prototype._transform = function(t, e, r) {
      r(null, t);
    };
  });
  np = T9((bI, ip) => {
    var vh;
    function XM(t) {
      var e = false;
      return function() {
        e || (e = true, t.apply(undefined, arguments));
      };
    }
    var rp = sn().codes, JM = rp.ERR_MISSING_ARGS, QM = rp.ERR_STREAM_DESTROYED;
    function ep(t) {
      if (t)
        throw t;
    }
    function e4(t) {
      return t.setHeader && typeof t.abort == "function";
    }
    function t4(t, e, r, o2) {
      o2 = XM(o2);
      var f2 = false;
      t.on("close", function() {
        f2 = true;
      }), vh === undefined && (vh = vo()), vh(t, { readable: e, writable: r }, function(m2) {
        if (m2)
          return o2(m2);
        f2 = true, o2();
      });
      var p = false;
      return function(m2) {
        if (!f2 && !p) {
          if (p = true, e4(t))
            return t.abort();
          if (typeof t.destroy == "function")
            return t.destroy();
          o2(m2 || new QM("pipe"));
        }
      };
    }
    function tp(t) {
      t();
    }
    function r4(t, e) {
      return t.pipe(e);
    }
    function i4(t) {
      return !t.length || typeof t[t.length - 1] != "function" ? ep : t.pop();
    }
    function n4() {
      for (var t = arguments.length, e = new Array(t), r = 0;r < t; r++)
        e[r] = arguments[r];
      var o2 = i4(e);
      if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
        throw new JM("streams");
      var f2, p = e.map(function(m2, y3) {
        var M2 = y3 < e.length - 1, x4 = y3 > 0;
        return t4(m2, M2, x4, function(S3) {
          f2 || (f2 = S3), S3 && p.forEach(tp), !M2 && (p.forEach(tp), o2(f2));
        });
      });
      return e.reduce(r4);
    }
    ip.exports = n4;
  });
  ap = T9((cr, fp) => {
    cr = fp.exports = th();
    cr.Stream = cr;
    cr.Readable = cr;
    cr.Writable = J0();
    cr.Duplex = hn();
    cr.Transform = ph();
    cr.PassThrough = Qc();
    cr.finished = vo();
    cr.pipeline = np();
  });
  bh = T9((mI, sp) => {
    var xo = Te().Buffer, op = ap().Transform, f4 = Ie();
    function a4(t, e) {
      if (!xo.isBuffer(t) && typeof t != "string")
        throw new TypeError(e + " must be a string or a buffer");
    }
    function Ci(t) {
      op.call(this), this._block = xo.allocUnsafe(t), this._blockSize = t, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = false;
    }
    f4(Ci, op);
    Ci.prototype._transform = function(t, e, r) {
      var o2 = null;
      try {
        this.update(t, e);
      } catch (f2) {
        o2 = f2;
      }
      r(o2);
    };
    Ci.prototype._flush = function(t) {
      var e = null;
      try {
        this.push(this.digest());
      } catch (r) {
        e = r;
      }
      t(e);
    };
    Ci.prototype.update = function(t, e) {
      if (a4(t, "Data"), this._finalized)
        throw new Error("Digest already called");
      xo.isBuffer(t) || (t = xo.from(t, e));
      for (var r = this._block, o2 = 0;this._blockOffset + t.length - o2 >= this._blockSize; ) {
        for (var f2 = this._blockOffset;f2 < this._blockSize; )
          r[f2++] = t[o2++];
        this._update(), this._blockOffset = 0;
      }
      for (;o2 < t.length; )
        r[this._blockOffset++] = t[o2++];
      for (var p = 0, m2 = t.length * 8;m2 > 0; ++p)
        this._length[p] += m2, m2 = this._length[p] / 4294967296 | 0, m2 > 0 && (this._length[p] -= 4294967296 * m2);
      return this;
    };
    Ci.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    Ci.prototype.digest = function(t) {
      if (this._finalized)
        throw new Error("Digest already called");
      this._finalized = true;
      var e = this._digest();
      t !== undefined && (e = e.toString(t)), this._block.fill(0), this._blockOffset = 0;
      for (var r = 0;r < 4; ++r)
        this._length[r] = 0;
      return e;
    };
    Ci.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    sp.exports = Ci;
  });
  Ao = T9((gI, up) => {
    var o4 = Ie(), hp = bh(), s4 = Te().Buffer, h4 = new Array(16);
    function So() {
      hp.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
    }
    o4(So, hp);
    So.prototype._update = function() {
      for (var t = h4, e = 0;e < 16; ++e)
        t[e] = this._block.readInt32LE(e * 4);
      var r = this._a, o2 = this._b, f2 = this._c, p = this._d;
      r = jt(r, o2, f2, p, t[0], 3614090360, 7), p = jt(p, r, o2, f2, t[1], 3905402710, 12), f2 = jt(f2, p, r, o2, t[2], 606105819, 17), o2 = jt(o2, f2, p, r, t[3], 3250441966, 22), r = jt(r, o2, f2, p, t[4], 4118548399, 7), p = jt(p, r, o2, f2, t[5], 1200080426, 12), f2 = jt(f2, p, r, o2, t[6], 2821735955, 17), o2 = jt(o2, f2, p, r, t[7], 4249261313, 22), r = jt(r, o2, f2, p, t[8], 1770035416, 7), p = jt(p, r, o2, f2, t[9], 2336552879, 12), f2 = jt(f2, p, r, o2, t[10], 4294925233, 17), o2 = jt(o2, f2, p, r, t[11], 2304563134, 22), r = jt(r, o2, f2, p, t[12], 1804603682, 7), p = jt(p, r, o2, f2, t[13], 4254626195, 12), f2 = jt(f2, p, r, o2, t[14], 2792965006, 17), o2 = jt(o2, f2, p, r, t[15], 1236535329, 22), r = Zt(r, o2, f2, p, t[1], 4129170786, 5), p = Zt(p, r, o2, f2, t[6], 3225465664, 9), f2 = Zt(f2, p, r, o2, t[11], 643717713, 14), o2 = Zt(o2, f2, p, r, t[0], 3921069994, 20), r = Zt(r, o2, f2, p, t[5], 3593408605, 5), p = Zt(p, r, o2, f2, t[10], 38016083, 9), f2 = Zt(f2, p, r, o2, t[15], 3634488961, 14), o2 = Zt(o2, f2, p, r, t[4], 3889429448, 20), r = Zt(r, o2, f2, p, t[9], 568446438, 5), p = Zt(p, r, o2, f2, t[14], 3275163606, 9), f2 = Zt(f2, p, r, o2, t[3], 4107603335, 14), o2 = Zt(o2, f2, p, r, t[8], 1163531501, 20), r = Zt(r, o2, f2, p, t[13], 2850285829, 5), p = Zt(p, r, o2, f2, t[2], 4243563512, 9), f2 = Zt(f2, p, r, o2, t[7], 1735328473, 14), o2 = Zt(o2, f2, p, r, t[12], 2368359562, 20), r = Vt(r, o2, f2, p, t[5], 4294588738, 4), p = Vt(p, r, o2, f2, t[8], 2272392833, 11), f2 = Vt(f2, p, r, o2, t[11], 1839030562, 16), o2 = Vt(o2, f2, p, r, t[14], 4259657740, 23), r = Vt(r, o2, f2, p, t[1], 2763975236, 4), p = Vt(p, r, o2, f2, t[4], 1272893353, 11), f2 = Vt(f2, p, r, o2, t[7], 4139469664, 16), o2 = Vt(o2, f2, p, r, t[10], 3200236656, 23), r = Vt(r, o2, f2, p, t[13], 681279174, 4), p = Vt(p, r, o2, f2, t[0], 3936430074, 11), f2 = Vt(f2, p, r, o2, t[3], 3572445317, 16), o2 = Vt(o2, f2, p, r, t[6], 76029189, 23), r = Vt(r, o2, f2, p, t[9], 3654602809, 4), p = Vt(p, r, o2, f2, t[12], 3873151461, 11), f2 = Vt(f2, p, r, o2, t[15], 530742520, 16), o2 = Vt(o2, f2, p, r, t[2], 3299628645, 23), r = $t(r, o2, f2, p, t[0], 4096336452, 6), p = $t(p, r, o2, f2, t[7], 1126891415, 10), f2 = $t(f2, p, r, o2, t[14], 2878612391, 15), o2 = $t(o2, f2, p, r, t[5], 4237533241, 21), r = $t(r, o2, f2, p, t[12], 1700485571, 6), p = $t(p, r, o2, f2, t[3], 2399980690, 10), f2 = $t(f2, p, r, o2, t[10], 4293915773, 15), o2 = $t(o2, f2, p, r, t[1], 2240044497, 21), r = $t(r, o2, f2, p, t[8], 1873313359, 6), p = $t(p, r, o2, f2, t[15], 4264355552, 10), f2 = $t(f2, p, r, o2, t[6], 2734768916, 15), o2 = $t(o2, f2, p, r, t[13], 1309151649, 21), r = $t(r, o2, f2, p, t[4], 4149444226, 6), p = $t(p, r, o2, f2, t[11], 3174756917, 10), f2 = $t(f2, p, r, o2, t[2], 718787259, 15), o2 = $t(o2, f2, p, r, t[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + o2 | 0, this._c = this._c + f2 | 0, this._d = this._d + p | 0;
    };
    So.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t = s4.allocUnsafe(16);
      return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t;
    };
    function Eo(t, e) {
      return t << e | t >>> 32 - e;
    }
    function jt(t, e, r, o2, f2, p, m2) {
      return Eo(t + (e & r | ~e & o2) + f2 + p | 0, m2) + e | 0;
    }
    function Zt(t, e, r, o2, f2, p, m2) {
      return Eo(t + (e & o2 | r & ~o2) + f2 + p | 0, m2) + e | 0;
    }
    function Vt(t, e, r, o2, f2, p, m2) {
      return Eo(t + (e ^ r ^ o2) + f2 + p | 0, m2) + e | 0;
    }
    function $t(t, e, r, o2, f2, p, m2) {
      return Eo(t + (r ^ (e | ~o2)) + f2 + p | 0, m2) + e | 0;
    }
    up.exports = So;
  });
  Bo = T9((yI, mp) => {
    var mh = Ut().Buffer, u4 = Ie(), bp = bh(), l4 = new Array(16), na = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], fa = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], aa = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], oa = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11], sa = [0, 1518500249, 1859775393, 2400959708, 2840853838], ha = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function Ro() {
      bp.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
    }
    u4(Ro, bp);
    Ro.prototype._update = function() {
      for (var t = l4, e = 0;e < 16; ++e)
        t[e] = this._block.readInt32LE(e * 4);
      for (var r = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p = this._d | 0, m2 = this._e | 0, y3 = this._a | 0, M2 = this._b | 0, x4 = this._c | 0, S3 = this._d | 0, E3 = this._e | 0, B2 = 0;B2 < 80; B2 += 1) {
        var q, L3;
        B2 < 16 ? (q = lp(r, o2, f2, p, m2, t[na[B2]], sa[0], aa[B2]), L3 = vp(y3, M2, x4, S3, E3, t[fa[B2]], ha[0], oa[B2])) : B2 < 32 ? (q = dp(r, o2, f2, p, m2, t[na[B2]], sa[1], aa[B2]), L3 = pp(y3, M2, x4, S3, E3, t[fa[B2]], ha[1], oa[B2])) : B2 < 48 ? (q = cp(r, o2, f2, p, m2, t[na[B2]], sa[2], aa[B2]), L3 = cp(y3, M2, x4, S3, E3, t[fa[B2]], ha[2], oa[B2])) : B2 < 64 ? (q = pp(r, o2, f2, p, m2, t[na[B2]], sa[3], aa[B2]), L3 = dp(y3, M2, x4, S3, E3, t[fa[B2]], ha[3], oa[B2])) : (q = vp(r, o2, f2, p, m2, t[na[B2]], sa[4], aa[B2]), L3 = lp(y3, M2, x4, S3, E3, t[fa[B2]], ha[4], oa[B2])), r = m2, m2 = p, p = cn(f2, 10), f2 = o2, o2 = q, y3 = E3, E3 = S3, S3 = cn(x4, 10), x4 = M2, M2 = L3;
      }
      var ge = this._b + f2 + S3 | 0;
      this._b = this._c + p + E3 | 0, this._c = this._d + m2 + y3 | 0, this._d = this._e + r + M2 | 0, this._e = this._a + o2 + x4 | 0, this._a = ge;
    };
    Ro.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t = mh.alloc ? mh.alloc(20) : new mh(20);
      return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t.writeInt32LE(this._e, 16), t;
    };
    function cn(t, e) {
      return t << e | t >>> 32 - e;
    }
    function lp(t, e, r, o2, f2, p, m2, y3) {
      return cn(t + (e ^ r ^ o2) + p + m2 | 0, y3) + f2 | 0;
    }
    function dp(t, e, r, o2, f2, p, m2, y3) {
      return cn(t + (e & r | ~e & o2) + p + m2 | 0, y3) + f2 | 0;
    }
    function cp(t, e, r, o2, f2, p, m2, y3) {
      return cn(t + ((e | ~r) ^ o2) + p + m2 | 0, y3) + f2 | 0;
    }
    function pp(t, e, r, o2, f2, p, m2, y3) {
      return cn(t + (e & o2 | r & ~o2) + p + m2 | 0, y3) + f2 | 0;
    }
    function vp(t, e, r, o2, f2, p, m2, y3) {
      return cn(t + (e ^ (r | ~o2)) + p + m2 | 0, y3) + f2 | 0;
    }
    mp.exports = Ro;
  });
  pn = T9((wI, yp) => {
    var gp = Te().Buffer;
    function qo(t, e) {
      this._block = gp.alloc(t), this._finalSize = e, this._blockSize = t, this._len = 0;
    }
    qo.prototype.update = function(t, e) {
      typeof t == "string" && (e = e || "utf8", t = gp.from(t, e));
      for (var r = this._block, o2 = this._blockSize, f2 = t.length, p = this._len, m2 = 0;m2 < f2; ) {
        for (var y3 = p % o2, M2 = Math.min(f2 - m2, o2 - y3), x4 = 0;x4 < M2; x4++)
          r[y3 + x4] = t[m2 + x4];
        p += M2, m2 += M2, p % o2 === 0 && this._update(r);
      }
      return this._len += f2, this;
    };
    qo.prototype.digest = function(t) {
      var e = this._len % this._blockSize;
      this._block[e] = 128, this._block.fill(0, e + 1), e >= this._finalSize && (this._update(this._block), this._block.fill(0));
      var r = this._len * 8;
      if (r <= 4294967295)
        this._block.writeUInt32BE(r, this._blockSize - 4);
      else {
        var o2 = (r & 4294967295) >>> 0, f2 = (r - o2) / 4294967296;
        this._block.writeUInt32BE(f2, this._blockSize - 8), this._block.writeUInt32BE(o2, this._blockSize - 4);
      }
      this._update(this._block);
      var p = this._hash();
      return t ? p.toString(t) : p;
    };
    qo.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    yp.exports = qo;
  });
  _p = T9((MI, Mp) => {
    var d4 = Ie(), wp = pn(), c4 = Te().Buffer, p4 = [1518500249, 1859775393, -1894007588, -899497514], v4 = new Array(80);
    function ua() {
      this.init(), this._w = v4, wp.call(this, 64, 56);
    }
    d4(ua, wp);
    ua.prototype.init = function() {
      return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function b4(t) {
      return t << 5 | t >>> 27;
    }
    function m4(t) {
      return t << 30 | t >>> 2;
    }
    function g4(t, e, r, o2) {
      return t === 0 ? e & r | ~e & o2 : t === 2 ? e & r | e & o2 | r & o2 : e ^ r ^ o2;
    }
    ua.prototype._update = function(t) {
      for (var e = this._w, r = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p = this._d | 0, m2 = this._e | 0, y3 = 0;y3 < 16; ++y3)
        e[y3] = t.readInt32BE(y3 * 4);
      for (;y3 < 80; ++y3)
        e[y3] = e[y3 - 3] ^ e[y3 - 8] ^ e[y3 - 14] ^ e[y3 - 16];
      for (var M2 = 0;M2 < 80; ++M2) {
        var x4 = ~~(M2 / 20), S3 = b4(r) + g4(x4, o2, f2, p) + m2 + e[M2] + p4[x4] | 0;
        m2 = p, p = f2, f2 = m4(o2), o2 = r, r = S3;
      }
      this._a = r + this._a | 0, this._b = o2 + this._b | 0, this._c = f2 + this._c | 0, this._d = p + this._d | 0, this._e = m2 + this._e | 0;
    };
    ua.prototype._hash = function() {
      var t = c4.allocUnsafe(20);
      return t.writeInt32BE(this._a | 0, 0), t.writeInt32BE(this._b | 0, 4), t.writeInt32BE(this._c | 0, 8), t.writeInt32BE(this._d | 0, 12), t.writeInt32BE(this._e | 0, 16), t;
    };
    Mp.exports = ua;
  });
  Ep = T9((_I, Sp) => {
    var y4 = Ie(), xp = pn(), w4 = Te().Buffer, M4 = [1518500249, 1859775393, -1894007588, -899497514], _4 = new Array(80);
    function la() {
      this.init(), this._w = _4, xp.call(this, 64, 56);
    }
    y4(la, xp);
    la.prototype.init = function() {
      return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function x4(t) {
      return t << 1 | t >>> 31;
    }
    function S4(t) {
      return t << 5 | t >>> 27;
    }
    function E4(t) {
      return t << 30 | t >>> 2;
    }
    function A4(t, e, r, o2) {
      return t === 0 ? e & r | ~e & o2 : t === 2 ? e & r | e & o2 | r & o2 : e ^ r ^ o2;
    }
    la.prototype._update = function(t) {
      for (var e = this._w, r = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p = this._d | 0, m2 = this._e | 0, y3 = 0;y3 < 16; ++y3)
        e[y3] = t.readInt32BE(y3 * 4);
      for (;y3 < 80; ++y3)
        e[y3] = x4(e[y3 - 3] ^ e[y3 - 8] ^ e[y3 - 14] ^ e[y3 - 16]);
      for (var M2 = 0;M2 < 80; ++M2) {
        var x5 = ~~(M2 / 20), S3 = S4(r) + A4(x5, o2, f2, p) + m2 + e[M2] + M4[x5] | 0;
        m2 = p, p = f2, f2 = E4(o2), o2 = r, r = S3;
      }
      this._a = r + this._a | 0, this._b = o2 + this._b | 0, this._c = f2 + this._c | 0, this._d = p + this._d | 0, this._e = m2 + this._e | 0;
    };
    la.prototype._hash = function() {
      var t = w4.allocUnsafe(20);
      return t.writeInt32BE(this._a | 0, 0), t.writeInt32BE(this._b | 0, 4), t.writeInt32BE(this._c | 0, 8), t.writeInt32BE(this._d | 0, 12), t.writeInt32BE(this._e | 0, 16), t;
    };
    Sp.exports = la;
  });
  gh = T9((xI, Rp) => {
    var R4 = Ie(), Ap = pn(), B4 = Te().Buffer, q4 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], I4 = new Array(64);
    function da() {
      this.init(), this._w = I4, Ap.call(this, 64, 56);
    }
    R4(da, Ap);
    da.prototype.init = function() {
      return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
    };
    function T42(t, e, r) {
      return r ^ t & (e ^ r);
    }
    function k4(t, e, r) {
      return t & e | r & (t | e);
    }
    function L4(t) {
      return (t >>> 2 | t << 30) ^ (t >>> 13 | t << 19) ^ (t >>> 22 | t << 10);
    }
    function N42(t) {
      return (t >>> 6 | t << 26) ^ (t >>> 11 | t << 21) ^ (t >>> 25 | t << 7);
    }
    function D4(t) {
      return (t >>> 7 | t << 25) ^ (t >>> 18 | t << 14) ^ t >>> 3;
    }
    function P4(t) {
      return (t >>> 17 | t << 15) ^ (t >>> 19 | t << 13) ^ t >>> 10;
    }
    da.prototype._update = function(t) {
      for (var e = this._w, r = this._a | 0, o2 = this._b | 0, f2 = this._c | 0, p = this._d | 0, m2 = this._e | 0, y3 = this._f | 0, M2 = this._g | 0, x4 = this._h | 0, S3 = 0;S3 < 16; ++S3)
        e[S3] = t.readInt32BE(S3 * 4);
      for (;S3 < 64; ++S3)
        e[S3] = P4(e[S3 - 2]) + e[S3 - 7] + D4(e[S3 - 15]) + e[S3 - 16] | 0;
      for (var E3 = 0;E3 < 64; ++E3) {
        var B2 = x4 + N42(m2) + T42(m2, y3, M2) + q4[E3] + e[E3] | 0, q = L4(r) + k4(r, o2, f2) | 0;
        x4 = M2, M2 = y3, y3 = m2, m2 = p + B2 | 0, p = f2, f2 = o2, o2 = r, r = B2 + q | 0;
      }
      this._a = r + this._a | 0, this._b = o2 + this._b | 0, this._c = f2 + this._c | 0, this._d = p + this._d | 0, this._e = m2 + this._e | 0, this._f = y3 + this._f | 0, this._g = M2 + this._g | 0, this._h = x4 + this._h | 0;
    };
    da.prototype._hash = function() {
      var t = B4.allocUnsafe(32);
      return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t.writeInt32BE(this._h, 28), t;
    };
    Rp.exports = da;
  });
  qp = T9((SI, Bp) => {
    var C4 = Ie(), O4 = gh(), F4 = pn(), U42 = Te().Buffer, z4 = new Array(64);
    function Io() {
      this.init(), this._w = z4, F4.call(this, 64, 56);
    }
    C4(Io, O4);
    Io.prototype.init = function() {
      return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
    };
    Io.prototype._hash = function() {
      var t = U42.allocUnsafe(28);
      return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t;
    };
    Bp.exports = Io;
  });
  yh = T9((EI, Pp) => {
    var H4 = Ie(), Dp = pn(), W4 = Te().Buffer, Ip = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591], K4 = new Array(160);
    function ca() {
      this.init(), this._w = K4, Dp.call(this, 128, 112);
    }
    H4(ca, Dp);
    ca.prototype.init = function() {
      return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
    };
    function Tp(t, e, r) {
      return r ^ t & (e ^ r);
    }
    function kp(t, e, r) {
      return t & e | r & (t | e);
    }
    function Lp(t, e) {
      return (t >>> 28 | e << 4) ^ (e >>> 2 | t << 30) ^ (e >>> 7 | t << 25);
    }
    function Np(t, e) {
      return (t >>> 14 | e << 18) ^ (t >>> 18 | e << 14) ^ (e >>> 9 | t << 23);
    }
    function j4(t, e) {
      return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ t >>> 7;
    }
    function Z4(t, e) {
      return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ (t >>> 7 | e << 25);
    }
    function V4(t, e) {
      return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ t >>> 6;
    }
    function $4(t, e) {
      return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ (t >>> 6 | e << 26);
    }
    function Pt(t, e) {
      return t >>> 0 < e >>> 0 ? 1 : 0;
    }
    ca.prototype._update = function(t) {
      for (var e = this._w, r = this._ah | 0, o2 = this._bh | 0, f2 = this._ch | 0, p = this._dh | 0, m2 = this._eh | 0, y3 = this._fh | 0, M2 = this._gh | 0, x4 = this._hh | 0, S3 = this._al | 0, E3 = this._bl | 0, B2 = this._cl | 0, q = this._dl | 0, L3 = this._el | 0, ge = this._fl | 0, _e = this._gl | 0, N5 = this._hl | 0, we = 0;we < 32; we += 2)
        e[we] = t.readInt32BE(we * 4), e[we + 1] = t.readInt32BE(we * 4 + 4);
      for (;we < 160; we += 2) {
        var ye = e[we - 30], xe = e[we - 15 * 2 + 1], Re = j4(ye, xe), Ee = Z4(xe, ye);
        ye = e[we - 2 * 2], xe = e[we - 2 * 2 + 1];
        var Ae = V4(ye, xe), P4 = $4(xe, ye), Se = e[we - 7 * 2], v3 = e[we - 7 * 2 + 1], i = e[we - 16 * 2], a2 = e[we - 16 * 2 + 1], h3 = Ee + v3 | 0, s = Re + Se + Pt(h3, Ee) | 0;
        h3 = h3 + P4 | 0, s = s + Ae + Pt(h3, P4) | 0, h3 = h3 + a2 | 0, s = s + i + Pt(h3, a2) | 0, e[we] = s, e[we + 1] = h3;
      }
      for (var u2 = 0;u2 < 160; u2 += 2) {
        s = e[u2], h3 = e[u2 + 1];
        var c = kp(r, o2, f2), b4 = kp(S3, E3, B2), l2 = Lp(r, S3), n2 = Lp(S3, r), d2 = Np(m2, L3), w3 = Np(L3, m2), g3 = Ip[u2], _3 = Ip[u2 + 1], A2 = Tp(m2, y3, M2), R3 = Tp(L3, ge, _e), I2 = N5 + w3 | 0, Me = x4 + d2 + Pt(I2, N5) | 0;
        I2 = I2 + R3 | 0, Me = Me + A2 + Pt(I2, R3) | 0, I2 = I2 + _3 | 0, Me = Me + g3 + Pt(I2, _3) | 0, I2 = I2 + h3 | 0, Me = Me + s + Pt(I2, h3) | 0;
        var k2 = n2 + b4 | 0, D3 = l2 + c + Pt(k2, n2) | 0;
        x4 = M2, N5 = _e, M2 = y3, _e = ge, y3 = m2, ge = L3, L3 = q + I2 | 0, m2 = p + Me + Pt(L3, q) | 0, p = f2, q = B2, f2 = o2, B2 = E3, o2 = r, E3 = S3, S3 = I2 + k2 | 0, r = Me + D3 + Pt(S3, I2) | 0;
      }
      this._al = this._al + S3 | 0, this._bl = this._bl + E3 | 0, this._cl = this._cl + B2 | 0, this._dl = this._dl + q | 0, this._el = this._el + L3 | 0, this._fl = this._fl + ge | 0, this._gl = this._gl + _e | 0, this._hl = this._hl + N5 | 0, this._ah = this._ah + r + Pt(this._al, S3) | 0, this._bh = this._bh + o2 + Pt(this._bl, E3) | 0, this._ch = this._ch + f2 + Pt(this._cl, B2) | 0, this._dh = this._dh + p + Pt(this._dl, q) | 0, this._eh = this._eh + m2 + Pt(this._el, L3) | 0, this._fh = this._fh + y3 + Pt(this._fl, ge) | 0, this._gh = this._gh + M2 + Pt(this._gl, _e) | 0, this._hh = this._hh + x4 + Pt(this._hl, N5) | 0;
    };
    ca.prototype._hash = function() {
      var t = W4.allocUnsafe(64);
      function e(r, o2, f2) {
        t.writeInt32BE(r, f2), t.writeInt32BE(o2, f2 + 4);
      }
      return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), e(this._gh, this._gl, 48), e(this._hh, this._hl, 56), t;
    };
    Pp.exports = ca;
  });
  Op = T9((AI, Cp) => {
    var G4 = Ie(), Y4 = yh(), X4 = pn(), J4 = Te().Buffer, Q4 = new Array(160);
    function To() {
      this.init(), this._w = Q4, X4.call(this, 128, 112);
    }
    G4(To, Y4);
    To.prototype.init = function() {
      return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
    };
    To.prototype._hash = function() {
      var t = J4.allocUnsafe(48);
      function e(r, o2, f2) {
        t.writeInt32BE(r, f2), t.writeInt32BE(o2, f2 + 4);
      }
      return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), t;
    };
    Cp.exports = To;
  });
  ko = T9((ci, Fp2) => {
    var ci = Fp2.exports = function(e) {
      e = e.toLowerCase();
      var r = ci[e];
      if (!r)
        throw new Error(e + " is not supported (we accept pull requests)");
      return new r;
    };
    ci.sha = _p();
    ci.sha1 = Ep();
    ci.sha224 = qp();
    ci.sha256 = gh();
    ci.sha384 = Op();
    ci.sha512 = yh();
  });
  Tt = T9((RI, Up) => {
    Up.exports = { ArrayIsArray(t) {
      return Array.isArray(t);
    }, ArrayPrototypeIncludes(t, e) {
      return t.includes(e);
    }, ArrayPrototypeIndexOf(t, e) {
      return t.indexOf(e);
    }, ArrayPrototypeJoin(t, e) {
      return t.join(e);
    }, ArrayPrototypeMap(t, e) {
      return t.map(e);
    }, ArrayPrototypePop(t, e) {
      return t.pop(e);
    }, ArrayPrototypePush(t, e) {
      return t.push(e);
    }, ArrayPrototypeSlice(t, e, r) {
      return t.slice(e, r);
    }, Error, FunctionPrototypeCall(t, e, ...r) {
      return t.call(e, ...r);
    }, FunctionPrototypeSymbolHasInstance(t, e) {
      return Function.prototype[Symbol.hasInstance].call(t, e);
    }, MathFloor: Math.floor, Number, NumberIsInteger: Number.isInteger, NumberIsNaN: Number.isNaN, NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER, NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER, NumberParseInt: Number.parseInt, ObjectDefineProperties(t, e) {
      return Object.defineProperties(t, e);
    }, ObjectDefineProperty(t, e, r) {
      return Object.defineProperty(t, e, r);
    }, ObjectGetOwnPropertyDescriptor(t, e) {
      return Object.getOwnPropertyDescriptor(t, e);
    }, ObjectKeys(t) {
      return Object.keys(t);
    }, ObjectSetPrototypeOf(t, e) {
      return Object.setPrototypeOf(t, e);
    }, Promise, PromisePrototypeCatch(t, e) {
      return t.catch(e);
    }, PromisePrototypeThen(t, e, r) {
      return t.then(e, r);
    }, PromiseReject(t) {
      return Promise.reject(t);
    }, ReflectApply: Reflect.apply, RegExpPrototypeTest(t, e) {
      return t.test(e);
    }, SafeSet: Set, String, StringPrototypeSlice(t, e, r) {
      return t.slice(e, r);
    }, StringPrototypeToLowerCase(t) {
      return t.toLowerCase();
    }, StringPrototypeToUpperCase(t) {
      return t.toUpperCase();
    }, StringPrototypeTrim(t) {
      return t.trim();
    }, Symbol, SymbolAsyncIterator: Symbol.asyncIterator, SymbolHasInstance: Symbol.hasInstance, SymbolIterator: Symbol.iterator, TypedArrayPrototypeSet(t, e, r) {
      return t.set(e, r);
    }, Uint8Array };
  });
  Gr = T9((BI, Mh) => {
    var e_ = Ut(), t_ = Object.getPrototypeOf(async function() {
    }).constructor, zp = globalThis.Blob || e_.Blob, r_ = typeof zp < "u" ? function(e) {
      return e instanceof zp;
    } : function(e) {
      return false;
    }, wh = class extends Error {
      constructor(e) {
        if (!Array.isArray(e))
          throw new TypeError(`Expected input to be an Array, got ${typeof e}`);
        let r = "";
        for (let o2 = 0;o2 < e.length; o2++)
          r += `    ${e[o2].stack}
`;
        super(r), this.name = "AggregateError", this.errors = e;
      }
    };
    Mh.exports = { AggregateError: wh, kEmptyObject: Object.freeze({}), once(t) {
      let e = false;
      return function(...r) {
        e || (e = true, t.apply(this, r));
      };
    }, createDeferredPromise: function() {
      let t, e;
      return { promise: new Promise((o2, f2) => {
        t = o2, e = f2;
      }), resolve: t, reject: e };
    }, promisify(t) {
      return new Promise((e, r) => {
        t((o2, ...f2) => o2 ? r(o2) : e(...f2));
      });
    }, debuglog() {
      return function() {
      };
    }, format(t, ...e) {
      return t.replace(/%([sdifj])/g, function(...[r, o2]) {
        let f2 = e.shift();
        return o2 === "f" ? f2.toFixed(6) : o2 === "j" ? JSON.stringify(f2) : o2 === "s" && typeof f2 == "object" ? `${f2.constructor !== Object ? f2.constructor.name : ""} {}`.trim() : f2.toString();
      });
    }, inspect(t) {
      switch (typeof t) {
        case "string":
          if (t.includes("'"))
            if (t.includes('"')) {
              if (!t.includes("`") && !t.includes("${"))
                return `\`${t}\``;
            } else
              return `"${t}"`;
          return `'${t}'`;
        case "number":
          return isNaN(t) ? "NaN" : Object.is(t, -0) ? String(t) : t;
        case "bigint":
          return `${String(t)}n`;
        case "boolean":
        case "undefined":
          return String(t);
        case "object":
          return "{}";
      }
    }, types: { isAsyncFunction(t) {
      return t instanceof t_;
    }, isArrayBufferView(t) {
      return ArrayBuffer.isView(t);
    } }, isBlob: r_ };
    Mh.exports.promisify.custom = Symbol.for("nodejs.util.promisify.custom");
  });
  No = T9((qI, Lo) => {
    var { AbortController: Hp, AbortSignal: i_ } = typeof self < "u" ? self : typeof window < "u" ? window : undefined;
    Lo.exports = Hp;
    Lo.exports.AbortSignal = i_;
    Lo.exports.default = Hp;
  });
  Jt = T9((II, jp) => {
    var { format: n_, inspect: Do, AggregateError: f_ } = Gr(), a_ = globalThis.AggregateError || f_, o_ = Symbol("kIsNodeError"), s_ = ["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"], h_ = /^([A-Z][a-z0-9]*)+$/, u_ = "__node_internal_", Po = {};
    function vn(t, e) {
      if (!t)
        throw new Po.ERR_INTERNAL_ASSERTION(e);
    }
    function Wp(t) {
      let e = "", r = t.length, o2 = t[0] === "-" ? 1 : 0;
      for (;r >= o2 + 4; r -= 3)
        e = `_${t.slice(r - 3, r)}${e}`;
      return `${t.slice(0, r)}${e}`;
    }
    function l_(t, e, r) {
      if (typeof e == "function")
        return vn(e.length <= r.length, `Code: ${t}; The provided arguments length (${r.length}) does not match the required ones (${e.length}).`), e(...r);
      let o2 = (e.match(/%[dfijoOs]/g) || []).length;
      return vn(o2 === r.length, `Code: ${t}; The provided arguments length (${r.length}) does not match the required ones (${o2}).`), r.length === 0 ? e : n_(e, ...r);
    }
    function zt(t, e, r) {
      r || (r = Error);

      class o2 extends r {
        constructor(...p) {
          super(l_(t, e, p));
        }
        toString() {
          return `${this.name} [${t}]: ${this.message}`;
        }
      }
      Object.defineProperties(o2.prototype, { name: { value: r.name, writable: true, enumerable: false, configurable: true }, toString: { value() {
        return `${this.name} [${t}]: ${this.message}`;
      }, writable: true, enumerable: false, configurable: true } }), o2.prototype.code = t, o2.prototype[o_] = true, Po[t] = o2;
    }
    function Kp(t) {
      let e = u_ + t.name;
      return Object.defineProperty(t, "name", { value: e }), t;
    }
    function d_(t, e) {
      if (t && e && t !== e) {
        if (Array.isArray(e.errors))
          return e.errors.push(t), e;
        let r = new a_([e, t], e.message);
        return r.code = e.code, r;
      }
      return t || e;
    }
    var _h = class extends Error {
      constructor(e = "The operation was aborted", r = undefined) {
        if (r !== undefined && typeof r != "object")
          throw new Po.ERR_INVALID_ARG_TYPE("options", "Object", r);
        super(e, r), this.code = "ABORT_ERR", this.name = "AbortError";
      }
    };
    zt("ERR_ASSERTION", "%s", Error);
    zt("ERR_INVALID_ARG_TYPE", (t, e, r) => {
      vn(typeof t == "string", "'name' must be a string"), Array.isArray(e) || (e = [e]);
      let o2 = "The ";
      t.endsWith(" argument") ? o2 += `${t} ` : o2 += `"${t}" ${t.includes(".") ? "property" : "argument"} `, o2 += "must be ";
      let f2 = [], p = [], m2 = [];
      for (let M2 of e)
        vn(typeof M2 == "string", "All expected entries have to be of type string"), s_.includes(M2) ? f2.push(M2.toLowerCase()) : h_.test(M2) ? p.push(M2) : (vn(M2 !== "object", 'The value "object" should be written as "Object"'), m2.push(M2));
      if (p.length > 0) {
        let M2 = f2.indexOf("object");
        M2 !== -1 && (f2.splice(f2, M2, 1), p.push("Object"));
      }
      if (f2.length > 0) {
        switch (f2.length) {
          case 1:
            o2 += `of type ${f2[0]}`;
            break;
          case 2:
            o2 += `one of type ${f2[0]} or ${f2[1]}`;
            break;
          default: {
            let M2 = f2.pop();
            o2 += `one of type ${f2.join(", ")}, or ${M2}`;
          }
        }
        (p.length > 0 || m2.length > 0) && (o2 += " or ");
      }
      if (p.length > 0) {
        switch (p.length) {
          case 1:
            o2 += `an instance of ${p[0]}`;
            break;
          case 2:
            o2 += `an instance of ${p[0]} or ${p[1]}`;
            break;
          default: {
            let M2 = p.pop();
            o2 += `an instance of ${p.join(", ")}, or ${M2}`;
          }
        }
        m2.length > 0 && (o2 += " or ");
      }
      switch (m2.length) {
        case 0:
          break;
        case 1:
          m2[0].toLowerCase() !== m2[0] && (o2 += "an "), o2 += `${m2[0]}`;
          break;
        case 2:
          o2 += `one of ${m2[0]} or ${m2[1]}`;
          break;
        default: {
          let M2 = m2.pop();
          o2 += `one of ${m2.join(", ")}, or ${M2}`;
        }
      }
      if (r == null)
        o2 += `. Received ${r}`;
      else if (typeof r == "function" && r.name)
        o2 += `. Received function ${r.name}`;
      else if (typeof r == "object") {
        var y3;
        (y3 = r.constructor) !== null && y3 !== undefined && y3.name ? o2 += `. Received an instance of ${r.constructor.name}` : o2 += `. Received ${Do(r, { depth: -1 })}`;
      } else {
        let M2 = Do(r, { colors: false });
        M2.length > 25 && (M2 = `${M2.slice(0, 25)}...`), o2 += `. Received type ${typeof r} (${M2})`;
      }
      return o2;
    }, TypeError);
    zt("ERR_INVALID_ARG_VALUE", (t, e, r = "is invalid") => {
      let o2 = Do(e);
      return o2.length > 128 && (o2 = o2.slice(0, 128) + "..."), `The ${t.includes(".") ? "property" : "argument"} '${t}' ${r}. Received ${o2}`;
    }, TypeError);
    zt("ERR_INVALID_RETURN_VALUE", (t, e, r) => {
      var o2;
      let f2 = r != null && (o2 = r.constructor) !== null && o2 !== undefined && o2.name ? `instance of ${r.constructor.name}` : `type ${typeof r}`;
      return `Expected ${t} to be returned from the "${e}" function but got ${f2}.`;
    }, TypeError);
    zt("ERR_MISSING_ARGS", (...t) => {
      vn(t.length > 0, "At least one arg needs to be specified");
      let e, r = t.length;
      switch (t = (Array.isArray(t) ? t : [t]).map((o2) => `"${o2}"`).join(" or "), r) {
        case 1:
          e += `The ${t[0]} argument`;
          break;
        case 2:
          e += `The ${t[0]} and ${t[1]} arguments`;
          break;
        default:
          {
            let o2 = t.pop();
            e += `The ${t.join(", ")}, and ${o2} arguments`;
          }
          break;
      }
      return `${e} must be specified`;
    }, TypeError);
    zt("ERR_OUT_OF_RANGE", (t, e, r) => {
      vn(e, 'Missing "range" argument');
      let o2;
      return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? o2 = Wp(String(r)) : typeof r == "bigint" ? (o2 = String(r), (r > 2n ** 32n || r < -(2n ** 32n)) && (o2 = Wp(o2)), o2 += "n") : o2 = Do(r), `The value of "${t}" is out of range. It must be ${e}. Received ${o2}`;
    }, RangeError);
    zt("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
    zt("ERR_METHOD_NOT_IMPLEMENTED", "The %s method is not implemented", Error);
    zt("ERR_STREAM_ALREADY_FINISHED", "Cannot call %s after a stream was finished", Error);
    zt("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
    zt("ERR_STREAM_DESTROYED", "Cannot call %s after a stream was destroyed", Error);
    zt("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    zt("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
    zt("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
    zt("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event", Error);
    zt("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
    zt("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
    jp.exports = { AbortError: _h, aggregateTwoErrors: Kp(d_), hideStackFrames: Kp, codes: Po };
  });
  pa = T9((TI, Qp) => {
    var { ArrayIsArray: $p, ArrayPrototypeIncludes: Gp, ArrayPrototypeJoin: Yp, ArrayPrototypeMap: c_, NumberIsInteger: Sh, NumberIsNaN: p_, NumberMAX_SAFE_INTEGER: v_, NumberMIN_SAFE_INTEGER: b_, NumberParseInt: m_, ObjectPrototypeHasOwnProperty: g_, RegExpPrototypeExec: y_, String: w_, StringPrototypeToUpperCase: M_, StringPrototypeTrim: __ } = Tt(), { hideStackFrames: Ir2, codes: { ERR_SOCKET_BAD_PORT: x_, ERR_INVALID_ARG_TYPE: tr, ERR_INVALID_ARG_VALUE: Co, ERR_OUT_OF_RANGE: bn, ERR_UNKNOWN_SIGNAL: Zp } } = Jt(), { normalizeEncoding: S_ } = Gr(), { isAsyncFunction: E_, isArrayBufferView: A_ } = Gr().types, Vp = {};
    function R_(t) {
      return t === (t | 0);
    }
    function B_(t) {
      return t === t >>> 0;
    }
    var q_ = /^[0-7]+$/, I_ = "must be a 32-bit unsigned integer or an octal string";
    function T_(t, e, r) {
      if (typeof t > "u" && (t = r), typeof t == "string") {
        if (y_(q_, t) === null)
          throw new Co(e, t, I_);
        t = m_(t, 8);
      }
      return Xp(t, e), t;
    }
    var k_ = Ir2((t, e, r = b_, o2 = v_) => {
      if (typeof t != "number")
        throw new tr(e, "number", t);
      if (!Sh(t))
        throw new bn(e, "an integer", t);
      if (t < r || t > o2)
        throw new bn(e, `>= ${r} && <= ${o2}`, t);
    }), L_ = Ir2((t, e, r = -2147483648, o2 = 2147483647) => {
      if (typeof t != "number")
        throw new tr(e, "number", t);
      if (!Sh(t))
        throw new bn(e, "an integer", t);
      if (t < r || t > o2)
        throw new bn(e, `>= ${r} && <= ${o2}`, t);
    }), Xp = Ir2((t, e, r = false) => {
      if (typeof t != "number")
        throw new tr(e, "number", t);
      if (!Sh(t))
        throw new bn(e, "an integer", t);
      let o2 = r ? 1 : 0, f2 = 4294967295;
      if (t < o2 || t > f2)
        throw new bn(e, `>= ${o2} && <= ${f2}`, t);
    });
    function Jp(t, e) {
      if (typeof t != "string")
        throw new tr(e, "string", t);
    }
    function N_(t, e, r = undefined, o2) {
      if (typeof t != "number")
        throw new tr(e, "number", t);
      if (r != null && t < r || o2 != null && t > o2 || (r != null || o2 != null) && p_(t))
        throw new bn(e, `${r != null ? `>= ${r}` : ""}${r != null && o2 != null ? " && " : ""}${o2 != null ? `<= ${o2}` : ""}`, t);
    }
    var D_ = Ir2((t, e, r) => {
      if (!Gp(r, t)) {
        let o2 = Yp(c_(r, (p) => typeof p == "string" ? `'${p}'` : w_(p)), ", "), f2 = "must be one of: " + o2;
        throw new Co(e, t, f2);
      }
    });
    function P_(t, e) {
      if (typeof t != "boolean")
        throw new tr(e, "boolean", t);
    }
    function xh(t, e, r) {
      return t == null || !g_(t, e) ? r : t[e];
    }
    var C_ = Ir2((t, e, r = null) => {
      let o2 = xh(r, "allowArray", false), f2 = xh(r, "allowFunction", false);
      if (!xh(r, "nullable", false) && t === null || !o2 && $p(t) || typeof t != "object" && (!f2 || typeof t != "function"))
        throw new tr(e, "Object", t);
    }), O_ = Ir2((t, e, r = 0) => {
      if (!$p(t))
        throw new tr(e, "Array", t);
      if (t.length < r) {
        let o2 = `must be longer than ${r}`;
        throw new Co(e, t, o2);
      }
    });
    function F_(t, e = "signal") {
      if (Jp(t, e), Vp[t] === undefined)
        throw Vp[M_(t)] !== undefined ? new Zp(t + " (signals must use all capital letters)") : new Zp(t);
    }
    var U_ = Ir2((t, e = "buffer") => {
      if (!A_(t))
        throw new tr(e, ["Buffer", "TypedArray", "DataView"], t);
    });
    function z_(t, e) {
      let r = S_(e), o2 = t.length;
      if (r === "hex" && o2 % 2 !== 0)
        throw new Co("encoding", e, `is invalid for data of length ${o2}`);
    }
    function H_(t, e = "Port", r = true) {
      if (typeof t != "number" && typeof t != "string" || typeof t == "string" && __(t).length === 0 || +t !== +t >>> 0 || t > 65535 || t === 0 && !r)
        throw new x_(e, t, r);
      return t | 0;
    }
    var W_ = Ir2((t, e) => {
      if (t !== undefined && (t === null || typeof t != "object" || !("aborted" in t)))
        throw new tr(e, "AbortSignal", t);
    }), K_ = Ir2((t, e) => {
      if (typeof t != "function")
        throw new tr(e, "Function", t);
    }), j_ = Ir2((t, e) => {
      if (typeof t != "function" || E_(t))
        throw new tr(e, "Function", t);
    }), Z_ = Ir2((t, e) => {
      if (t !== undefined)
        throw new tr(e, "undefined", t);
    });
    function V_(t, e, r) {
      if (!Gp(r, t))
        throw new tr(e, `('${Yp(r, "|")}')`, t);
    }
    Qp.exports = { isInt32: R_, isUint32: B_, parseFileMode: T_, validateArray: O_, validateBoolean: P_, validateBuffer: U_, validateEncoding: z_, validateFunction: K_, validateInt32: L_, validateInteger: k_, validateNumber: N_, validateObject: C_, validateOneOf: D_, validatePlainFunction: j_, validatePort: H_, validateSignalName: F_, validateString: Jp, validateUint32: Xp, validateUndefined: Z_, validateUnion: V_, validateAbortSignal: W_ };
  });
  Rh = T9((kI, i1) => {
    var dt = i1.exports = {}, Yr, Xr;
    function Eh() {
      throw new Error("setTimeout has not been defined");
    }
    function Ah() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        typeof setTimeout == "function" ? Yr = setTimeout : Yr = Eh;
      } catch {
        Yr = Eh;
      }
      try {
        typeof clearTimeout == "function" ? Xr = clearTimeout : Xr = Ah;
      } catch {
        Xr = Ah;
      }
    })();
    function e1(t) {
      if (Yr === setTimeout)
        return setTimeout(t, 0);
      if ((Yr === Eh || !Yr) && setTimeout)
        return Yr = setTimeout, setTimeout(t, 0);
      try {
        return Yr(t, 0);
      } catch {
        try {
          return Yr.call(null, t, 0);
        } catch {
          return Yr.call(this, t, 0);
        }
      }
    }
    function $_(t) {
      if (Xr === clearTimeout)
        return clearTimeout(t);
      if ((Xr === Ah || !Xr) && clearTimeout)
        return Xr = clearTimeout, clearTimeout(t);
      try {
        return Xr(t);
      } catch {
        try {
          return Xr.call(null, t);
        } catch {
          return Xr.call(this, t);
        }
      }
    }
    var pi = [], nf = false, mn, Oo = -1;
    function G_() {
      !nf || !mn || (nf = false, mn.length ? pi = mn.concat(pi) : Oo = -1, pi.length && t1());
    }
    function t1() {
      if (!nf) {
        var t = e1(G_);
        nf = true;
        for (var e = pi.length;e; ) {
          for (mn = pi, pi = [];++Oo < e; )
            mn && mn[Oo].run();
          Oo = -1, e = pi.length;
        }
        mn = null, nf = false, $_(t);
      }
    }
    dt.nextTick = function(t) {
      var e = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var r = 1;r < arguments.length; r++)
          e[r - 1] = arguments[r];
      pi.push(new r1(t, e)), pi.length === 1 && !nf && e1(t1);
    };
    function r1(t, e) {
      this.fun = t, this.array = e;
    }
    r1.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    dt.title = "browser";
    dt.browser = true;
    dt.env = {};
    dt.argv = [];
    dt.version = "";
    dt.versions = {};
    function vi() {
    }
    dt.on = vi;
    dt.addListener = vi;
    dt.once = vi;
    dt.off = vi;
    dt.removeListener = vi;
    dt.removeAllListeners = vi;
    dt.emit = vi;
    dt.prependListener = vi;
    dt.prependOnceListener = vi;
    dt.listeners = function(t) {
      return [];
    };
    dt.binding = function(t) {
      throw new Error("process.binding is not supported");
    };
    dt.cwd = function() {
      return "/";
    };
    dt.chdir = function(t) {
      throw new Error("process.chdir is not supported");
    };
    dt.umask = function() {
      return 0;
    };
  });
  pr = {};
  Ja(pr, { default: () => Y_ });
  Oi = R0(() => {
    ot2(pr, rn(Rh()));
    Y_ = rn(Rh());
  });
  Fi = T9((NI, v1) => {
    var { Symbol: Fo, SymbolAsyncIterator: n1, SymbolIterator: f1 } = Tt(), a1 = Fo("kDestroyed"), o1 = Fo("kIsErrored"), Bh = Fo("kIsReadable"), s1 = Fo("kIsDisturbed");
    function Uo(t, e = false) {
      var r;
      return !!(t && typeof t.pipe == "function" && typeof t.on == "function" && (!e || typeof t.pause == "function" && typeof t.resume == "function") && (!t._writableState || ((r = t._readableState) === null || r === undefined ? undefined : r.readable) !== false) && (!t._writableState || t._readableState));
    }
    function zo(t) {
      var e;
      return !!(t && typeof t.write == "function" && typeof t.on == "function" && (!t._readableState || ((e = t._writableState) === null || e === undefined ? undefined : e.writable) !== false));
    }
    function X_(t) {
      return !!(t && typeof t.pipe == "function" && t._readableState && typeof t.on == "function" && typeof t.write == "function");
    }
    function gn(t) {
      return t && (t._readableState || t._writableState || typeof t.write == "function" && typeof t.on == "function" || typeof t.pipe == "function" && typeof t.on == "function");
    }
    function J_(t, e) {
      return t == null ? false : e === true ? typeof t[n1] == "function" : e === false ? typeof t[f1] == "function" : typeof t[n1] == "function" || typeof t[f1] == "function";
    }
    function Ho(t) {
      if (!gn(t))
        return null;
      let { _writableState: e, _readableState: r } = t, o2 = e || r;
      return !!(t.destroyed || t[a1] || o2 != null && o2.destroyed);
    }
    function h1(t) {
      if (!zo(t))
        return null;
      if (t.writableEnded === true)
        return true;
      let e = t._writableState;
      return e != null && e.errored ? false : typeof e?.ended != "boolean" ? null : e.ended;
    }
    function Q_(t, e) {
      if (!zo(t))
        return null;
      if (t.writableFinished === true)
        return true;
      let r = t._writableState;
      return r != null && r.errored ? false : typeof r?.finished != "boolean" ? null : !!(r.finished || e === false && r.ended === true && r.length === 0);
    }
    function e8(t) {
      if (!Uo(t))
        return null;
      if (t.readableEnded === true)
        return true;
      let e = t._readableState;
      return !e || e.errored ? false : typeof e?.ended != "boolean" ? null : e.ended;
    }
    function u1(t, e) {
      if (!Uo(t))
        return null;
      let r = t._readableState;
      return r != null && r.errored ? false : typeof r?.endEmitted != "boolean" ? null : !!(r.endEmitted || e === false && r.ended === true && r.length === 0);
    }
    function l1(t) {
      return t && t[Bh] != null ? t[Bh] : typeof t?.readable != "boolean" ? null : Ho(t) ? false : Uo(t) && t.readable && !u1(t);
    }
    function d1(t) {
      return typeof t?.writable != "boolean" ? null : Ho(t) ? false : zo(t) && t.writable && !h1(t);
    }
    function t8(t, e) {
      return gn(t) ? Ho(t) ? true : !(e?.readable !== false && l1(t) || e?.writable !== false && d1(t)) : null;
    }
    function r8(t) {
      var e, r;
      return gn(t) ? t.writableErrored ? t.writableErrored : (e = (r = t._writableState) === null || r === undefined ? undefined : r.errored) !== null && e !== undefined ? e : null : null;
    }
    function i8(t) {
      var e, r;
      return gn(t) ? t.readableErrored ? t.readableErrored : (e = (r = t._readableState) === null || r === undefined ? undefined : r.errored) !== null && e !== undefined ? e : null : null;
    }
    function n8(t) {
      if (!gn(t))
        return null;
      if (typeof t.closed == "boolean")
        return t.closed;
      let { _writableState: e, _readableState: r } = t;
      return typeof e?.closed == "boolean" || typeof r?.closed == "boolean" ? e?.closed || r?.closed : typeof t._closed == "boolean" && c1(t) ? t._closed : null;
    }
    function c1(t) {
      return typeof t._closed == "boolean" && typeof t._defaultKeepAlive == "boolean" && typeof t._removedConnection == "boolean" && typeof t._removedContLen == "boolean";
    }
    function p1(t) {
      return typeof t._sent100 == "boolean" && c1(t);
    }
    function f8(t) {
      var e;
      return typeof t._consuming == "boolean" && typeof t._dumped == "boolean" && ((e = t.req) === null || e === undefined ? undefined : e.upgradeOrConnect) === undefined;
    }
    function a8(t) {
      if (!gn(t))
        return null;
      let { _writableState: e, _readableState: r } = t, o2 = e || r;
      return !o2 && p1(t) || !!(o2 && o2.autoDestroy && o2.emitClose && o2.closed === false);
    }
    function o8(t) {
      var e;
      return !!(t && ((e = t[s1]) !== null && e !== undefined ? e : t.readableDidRead || t.readableAborted));
    }
    function s8(t) {
      var e, r, o2, f2, p, m2, y3, M2, x4, S3;
      return !!(t && ((e = (r = (o2 = (f2 = (p = (m2 = t[o1]) !== null && m2 !== undefined ? m2 : t.readableErrored) !== null && p !== undefined ? p : t.writableErrored) !== null && f2 !== undefined ? f2 : (y3 = t._readableState) === null || y3 === undefined ? undefined : y3.errorEmitted) !== null && o2 !== undefined ? o2 : (M2 = t._writableState) === null || M2 === undefined ? undefined : M2.errorEmitted) !== null && r !== undefined ? r : (x4 = t._readableState) === null || x4 === undefined ? undefined : x4.errored) !== null && e !== undefined ? e : (S3 = t._writableState) === null || S3 === undefined ? undefined : S3.errored));
    }
    v1.exports = { kDestroyed: a1, isDisturbed: o8, kIsDisturbed: s1, isErrored: s8, kIsErrored: o1, isReadable: l1, kIsReadable: Bh, isClosed: n8, isDestroyed: Ho, isDuplexNodeStream: X_, isFinished: t8, isIterable: J_, isReadableNodeStream: Uo, isReadableEnded: e8, isReadableFinished: u1, isReadableErrored: i8, isNodeStream: gn, isWritable: d1, isWritableNodeStream: zo, isWritableEnded: h1, isWritableFinished: Q_, isWritableErrored: r8, isServerRequest: f8, isServerResponse: p1, willEmitClose: a8 };
  });
  Ui = T9((DI, Ih) => {
    var ff = (Oi(), ur(pr)), { AbortError: h8, codes: u8 } = Jt(), { ERR_INVALID_ARG_TYPE: l8, ERR_STREAM_PREMATURE_CLOSE: b1 } = u8, { kEmptyObject: m1, once: g1 } = Gr(), { validateAbortSignal: d8, validateFunction: c8, validateObject: p8 } = pa(), { Promise: v8 } = Tt(), { isClosed: b8, isReadable: y1, isReadableNodeStream: qh, isReadableFinished: w1, isReadableErrored: m8, isWritable: M1, isWritableNodeStream: _1, isWritableFinished: x1, isWritableErrored: g8, isNodeStream: y8, willEmitClose: w8 } = Fi();
    function M8(t) {
      return t.setHeader && typeof t.abort == "function";
    }
    var _8 = () => {
    };
    function S12(t, e, r) {
      var o2, f2;
      arguments.length === 2 ? (r = e, e = m1) : e == null ? e = m1 : p8(e, "options"), c8(r, "callback"), d8(e.signal, "options.signal"), r = g1(r);
      let p = (o2 = e.readable) !== null && o2 !== undefined ? o2 : qh(t), m2 = (f2 = e.writable) !== null && f2 !== undefined ? f2 : _1(t);
      if (!y8(t))
        throw new l8("stream", "Stream", t);
      let { _writableState: y3, _readableState: M2 } = t, x4 = () => {
        t.writable || B2();
      }, S3 = w8(t) && qh(t) === p && _1(t) === m2, E3 = x1(t, false), B2 = () => {
        E3 = true, t.destroyed && (S3 = false), !(S3 && (!t.readable || p)) && (!p || q) && r.call(t);
      }, q = w1(t, false), L3 = () => {
        q = true, t.destroyed && (S3 = false), !(S3 && (!t.writable || m2)) && (!m2 || E3) && r.call(t);
      }, ge = (xe) => {
        r.call(t, xe);
      }, _e = b8(t), N5 = () => {
        _e = true;
        let xe = g8(t) || m8(t);
        if (xe && typeof xe != "boolean")
          return r.call(t, xe);
        if (p && !q && qh(t, true) && !w1(t, false))
          return r.call(t, new b1);
        if (m2 && !E3 && !x1(t, false))
          return r.call(t, new b1);
        r.call(t);
      }, we = () => {
        t.req.on("finish", B2);
      };
      M8(t) ? (t.on("complete", B2), S3 || t.on("abort", N5), t.req ? we() : t.on("request", we)) : m2 && !y3 && (t.on("end", x4), t.on("close", x4)), !S3 && typeof t.aborted == "boolean" && t.on("aborted", N5), t.on("end", L3), t.on("finish", B2), e.error !== false && t.on("error", ge), t.on("close", N5), _e ? ff.nextTick(N5) : y3 != null && y3.errorEmitted || M2 != null && M2.errorEmitted ? S3 || ff.nextTick(N5) : (!p && (!S3 || y1(t)) && (E3 || M1(t) === false) || !m2 && (!S3 || M1(t)) && (q || y1(t) === false) || M2 && t.req && t.aborted) && ff.nextTick(N5);
      let ye = () => {
        r = _8, t.removeListener("aborted", N5), t.removeListener("complete", B2), t.removeListener("abort", N5), t.removeListener("request", we), t.req && t.req.removeListener("finish", B2), t.removeListener("end", x4), t.removeListener("close", x4), t.removeListener("finish", B2), t.removeListener("end", L3), t.removeListener("error", ge), t.removeListener("close", N5);
      };
      if (e.signal && !_e) {
        let xe = () => {
          let Re = r;
          ye(), Re.call(t, new h8(undefined, { cause: e.signal.reason }));
        };
        if (e.signal.aborted)
          ff.nextTick(xe);
        else {
          let Re = r;
          r = g1((...Ee) => {
            e.signal.removeEventListener("abort", xe), Re.apply(t, Ee);
          }), e.signal.addEventListener("abort", xe);
        }
      }
      return ye;
    }
    function x8(t, e) {
      return new v8((r, o2) => {
        S12(t, e, (f2) => {
          f2 ? o2(f2) : r();
        });
      });
    }
    Ih.exports = S12;
    Ih.exports.finished = x8;
  });
  k1 = T9((PI, Lh) => {
    var B1 = globalThis.AbortController || No().AbortController, { codes: { ERR_INVALID_ARG_TYPE: va, ERR_MISSING_ARGS: S8, ERR_OUT_OF_RANGE: E8 }, AbortError: Jr } = Jt(), { validateAbortSignal: af, validateInteger: A8, validateObject: of } = pa(), R8 = Tt().Symbol("kWeak"), { finished: B8 } = Ui(), { ArrayPrototypePush: q8, MathFloor: I8, Number: T82, NumberIsNaN: k8, Promise: E1, PromiseReject: A1, PromisePrototypeThen: L8, Symbol: q1 } = Tt(), Wo = q1("kEmpty"), R1 = q1("kEof");
    function Ko(t, e) {
      if (typeof t != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t);
      e != null && of(e, "options"), e?.signal != null && af(e.signal, "options.signal");
      let r = 1;
      return e?.concurrency != null && (r = I8(e.concurrency)), A8(r, "concurrency", 1), async function* () {
        var f2, p;
        let m2 = new B1, y3 = this, M2 = [], x4 = m2.signal, S3 = { signal: x4 }, E3 = () => m2.abort();
        e != null && (f2 = e.signal) !== null && f2 !== undefined && f2.aborted && E3(), e == null || (p = e.signal) === null || p === undefined || p.addEventListener("abort", E3);
        let B2, q, L3 = false;
        function ge() {
          L3 = true;
        }
        async function _e() {
          try {
            for await (let ye of y3) {
              var N5;
              if (L3)
                return;
              if (x4.aborted)
                throw new Jr;
              try {
                ye = t(ye, S3);
              } catch (xe) {
                ye = A1(xe);
              }
              ye !== Wo && (typeof ((N5 = ye) === null || N5 === undefined ? undefined : N5.catch) == "function" && ye.catch(ge), M2.push(ye), B2 && (B2(), B2 = null), !L3 && M2.length && M2.length >= r && await new E1((xe) => {
                q = xe;
              }));
            }
            M2.push(R1);
          } catch (ye) {
            let xe = A1(ye);
            L8(xe, undefined, ge), M2.push(xe);
          } finally {
            var we;
            L3 = true, B2 && (B2(), B2 = null), e == null || (we = e.signal) === null || we === undefined || we.removeEventListener("abort", E3);
          }
        }
        _e();
        try {
          for (;; ) {
            for (;M2.length > 0; ) {
              let N5 = await M2[0];
              if (N5 === R1)
                return;
              if (x4.aborted)
                throw new Jr;
              N5 !== Wo && (yield N5), M2.shift(), q && (q(), q = null);
            }
            await new E1((N5) => {
              B2 = N5;
            });
          }
        } finally {
          m2.abort(), L3 = true, q && (q(), q = null);
        }
      }.call(this);
    }
    function N8(t = undefined) {
      return t != null && of(t, "options"), t?.signal != null && af(t.signal, "options.signal"), async function* () {
        let r = 0;
        for await (let f2 of this) {
          var o2;
          if (t != null && (o2 = t.signal) !== null && o2 !== undefined && o2.aborted)
            throw new Jr({ cause: t.signal.reason });
          yield [r++, f2];
        }
      }.call(this);
    }
    async function I1(t, e = undefined) {
      for await (let r of kh.call(this, t, e))
        return true;
      return false;
    }
    async function D8(t, e = undefined) {
      if (typeof t != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t);
      return !await I1.call(this, async (...r) => !await t(...r), e);
    }
    async function P8(t, e) {
      for await (let r of kh.call(this, t, e))
        return r;
    }
    async function C8(t, e) {
      if (typeof t != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t);
      async function r(o2, f2) {
        return await t(o2, f2), Wo;
      }
      for await (let o2 of Ko.call(this, r, e))
        ;
    }
    function kh(t, e) {
      if (typeof t != "function")
        throw new va("fn", ["Function", "AsyncFunction"], t);
      async function r(o2, f2) {
        return await t(o2, f2) ? o2 : Wo;
      }
      return Ko.call(this, r, e);
    }
    var Th = class extends S8 {
      constructor() {
        super("reduce"), this.message = "Reduce of an empty stream requires an initial value";
      }
    };
    async function O8(t, e, r) {
      var o2;
      if (typeof t != "function")
        throw new va("reducer", ["Function", "AsyncFunction"], t);
      r != null && of(r, "options"), r?.signal != null && af(r.signal, "options.signal");
      let f2 = arguments.length > 1;
      if (r != null && (o2 = r.signal) !== null && o2 !== undefined && o2.aborted) {
        let x4 = new Jr(undefined, { cause: r.signal.reason });
        throw this.once("error", () => {
        }), await B8(this.destroy(x4)), x4;
      }
      let p = new B1, m2 = p.signal;
      if (r != null && r.signal) {
        let x4 = { once: true, [R8]: this };
        r.signal.addEventListener("abort", () => p.abort(), x4);
      }
      let y3 = false;
      try {
        for await (let x4 of this) {
          var M2;
          if (y3 = true, r != null && (M2 = r.signal) !== null && M2 !== undefined && M2.aborted)
            throw new Jr;
          f2 ? e = await t(e, x4, { signal: m2 }) : (e = x4, f2 = true);
        }
        if (!y3 && !f2)
          throw new Th;
      } finally {
        p.abort();
      }
      return e;
    }
    async function F8(t) {
      t != null && of(t, "options"), t?.signal != null && af(t.signal, "options.signal");
      let e = [];
      for await (let o2 of this) {
        var r;
        if (t != null && (r = t.signal) !== null && r !== undefined && r.aborted)
          throw new Jr(undefined, { cause: t.signal.reason });
        q8(e, o2);
      }
      return e;
    }
    function U8(t, e) {
      let r = Ko.call(this, t, e);
      return async function* () {
        for await (let f2 of r)
          yield* f2;
      }.call(this);
    }
    function T13(t) {
      if (t = T82(t), k8(t))
        return 0;
      if (t < 0)
        throw new E8("number", ">= 0", t);
      return t;
    }
    function z8(t, e = undefined) {
      return e != null && of(e, "options"), e?.signal != null && af(e.signal, "options.signal"), t = T13(t), async function* () {
        var o2;
        if (e != null && (o2 = e.signal) !== null && o2 !== undefined && o2.aborted)
          throw new Jr;
        for await (let p of this) {
          var f2;
          if (e != null && (f2 = e.signal) !== null && f2 !== undefined && f2.aborted)
            throw new Jr;
          t-- <= 0 && (yield p);
        }
      }.call(this);
    }
    function H8(t, e = undefined) {
      return e != null && of(e, "options"), e?.signal != null && af(e.signal, "options.signal"), t = T13(t), async function* () {
        var o2;
        if (e != null && (o2 = e.signal) !== null && o2 !== undefined && o2.aborted)
          throw new Jr;
        for await (let p of this) {
          var f2;
          if (e != null && (f2 = e.signal) !== null && f2 !== undefined && f2.aborted)
            throw new Jr;
          if (t-- > 0)
            yield p;
          else
            return;
        }
      }.call(this);
    }
    Lh.exports.streamReturningOperators = { asIndexedPairs: N8, drop: z8, filter: kh, flatMap: U8, map: Ko, take: H8 };
    Lh.exports.promiseReturningOperators = { every: D8, forEach: C8, reduce: O8, toArray: F8, some: I1, find: P8 };
  });
  yn = T9((CI, U12) => {
    var zi = (Oi(), ur(pr)), { aggregateTwoErrors: W8, codes: { ERR_MULTIPLE_CALLBACK: K8 }, AbortError: j8 } = Jt(), { Symbol: D1 } = Tt(), { kDestroyed: Z8, isDestroyed: V8, isFinished: $8, isServerRequest: G8 } = Fi(), P1 = D1("kDestroy"), Nh = D1("kConstruct");
    function C1(t, e, r) {
      t && (t.stack, e && !e.errored && (e.errored = t), r && !r.errored && (r.errored = t));
    }
    function Y8(t, e) {
      let r = this._readableState, o2 = this._writableState, f2 = o2 || r;
      return o2 && o2.destroyed || r && r.destroyed ? (typeof e == "function" && e(), this) : (C1(t, o2, r), o2 && (o2.destroyed = true), r && (r.destroyed = true), f2.constructed ? L12(this, t, e) : this.once(P1, function(p) {
        L12(this, W8(p, t), e);
      }), this);
    }
    function L12(t, e, r) {
      let o2 = false;
      function f2(p) {
        if (o2)
          return;
        o2 = true;
        let { _readableState: m2, _writableState: y3 } = t;
        C1(p, y3, m2), y3 && (y3.closed = true), m2 && (m2.closed = true), typeof r == "function" && r(p), p ? zi.nextTick(X8, t, p) : zi.nextTick(O1, t);
      }
      try {
        t._destroy(e || null, f2);
      } catch (p) {
        f2(p);
      }
    }
    function X8(t, e) {
      Dh(t, e), O1(t);
    }
    function O1(t) {
      let { _readableState: e, _writableState: r } = t;
      r && (r.closeEmitted = true), e && (e.closeEmitted = true), (r && r.emitClose || e && e.emitClose) && t.emit("close");
    }
    function Dh(t, e) {
      let { _readableState: r, _writableState: o2 } = t;
      o2 && o2.errorEmitted || r && r.errorEmitted || (o2 && (o2.errorEmitted = true), r && (r.errorEmitted = true), t.emit("error", e));
    }
    function J8() {
      let t = this._readableState, e = this._writableState;
      t && (t.constructed = true, t.closed = false, t.closeEmitted = false, t.destroyed = false, t.errored = null, t.errorEmitted = false, t.reading = false, t.ended = t.readable === false, t.endEmitted = t.readable === false), e && (e.constructed = true, e.destroyed = false, e.closed = false, e.closeEmitted = false, e.errored = null, e.errorEmitted = false, e.finalCalled = false, e.prefinished = false, e.ended = e.writable === false, e.ending = e.writable === false, e.finished = e.writable === false);
    }
    function Ph(t, e, r) {
      let { _readableState: o2, _writableState: f2 } = t;
      if (f2 && f2.destroyed || o2 && o2.destroyed)
        return this;
      o2 && o2.autoDestroy || f2 && f2.autoDestroy ? t.destroy(e) : e && (e.stack, f2 && !f2.errored && (f2.errored = e), o2 && !o2.errored && (o2.errored = e), r ? zi.nextTick(Dh, t, e) : Dh(t, e));
    }
    function Q8(t, e) {
      if (typeof t._construct != "function")
        return;
      let { _readableState: r, _writableState: o2 } = t;
      r && (r.constructed = false), o2 && (o2.constructed = false), t.once(Nh, e), !(t.listenerCount(Nh) > 1) && zi.nextTick(e5, t);
    }
    function e5(t) {
      let e = false;
      function r(o2) {
        if (e) {
          Ph(t, o2 ?? new K8);
          return;
        }
        e = true;
        let { _readableState: f2, _writableState: p } = t, m2 = p || f2;
        f2 && (f2.constructed = true), p && (p.constructed = true), m2.destroyed ? t.emit(P1, o2) : o2 ? Ph(t, o2, true) : zi.nextTick(t5, t);
      }
      try {
        t._construct(r);
      } catch (o2) {
        r(o2);
      }
    }
    function t5(t) {
      t.emit(Nh);
    }
    function N1(t) {
      return t && t.setHeader && typeof t.abort == "function";
    }
    function F1(t) {
      t.emit("close");
    }
    function r5(t, e) {
      t.emit("error", e), zi.nextTick(F1, t);
    }
    function i5(t, e) {
      !t || V8(t) || (!e && !$8(t) && (e = new j8), G8(t) ? (t.socket = null, t.destroy(e)) : N1(t) ? t.abort() : N1(t.req) ? t.req.abort() : typeof t.destroy == "function" ? t.destroy(e) : typeof t.close == "function" ? t.close() : e ? zi.nextTick(r5, t, e) : zi.nextTick(F1, t), t.destroyed || (t[Z8] = true));
    }
    U12.exports = { construct: Q8, destroyer: i5, destroy: Y8, undestroy: J8, errorOrDestroy: Ph };
  });
  Vo = T9((OI, H1) => {
    var { ArrayIsArray: n5, ObjectSetPrototypeOf: z1 } = Tt(), { EventEmitter: jo } = ki();
    function Zo(t) {
      jo.call(this, t);
    }
    z1(Zo.prototype, jo.prototype);
    z1(Zo, jo);
    Zo.prototype.pipe = function(t, e) {
      let r = this;
      function o2(S3) {
        t.writable && t.write(S3) === false && r.pause && r.pause();
      }
      r.on("data", o2);
      function f2() {
        r.readable && r.resume && r.resume();
      }
      t.on("drain", f2), !t._isStdio && (!e || e.end !== false) && (r.on("end", m2), r.on("close", y3));
      let p = false;
      function m2() {
        p || (p = true, t.end());
      }
      function y3() {
        p || (p = true, typeof t.destroy == "function" && t.destroy());
      }
      function M2(S3) {
        x4(), jo.listenerCount(this, "error") === 0 && this.emit("error", S3);
      }
      Ch(r, "error", M2), Ch(t, "error", M2);
      function x4() {
        r.removeListener("data", o2), t.removeListener("drain", f2), r.removeListener("end", m2), r.removeListener("close", y3), r.removeListener("error", M2), t.removeListener("error", M2), r.removeListener("end", x4), r.removeListener("close", x4), t.removeListener("close", x4);
      }
      return r.on("end", x4), r.on("close", x4), t.on("close", x4), t.emit("pipe", r), t;
    };
    function Ch(t, e, r) {
      if (typeof t.prependListener == "function")
        return t.prependListener(e, r);
      !t._events || !t._events[e] ? t.on(e, r) : n5(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [r, t._events[e]];
    }
    H1.exports = { Stream: Zo, prependListener: Ch };
  });
  Go = T9((FI, $o) => {
    var { AbortError: f5, codes: a5 } = Jt(), o5 = Ui(), { ERR_INVALID_ARG_TYPE: W1 } = a5, s5 = (t, e) => {
      if (typeof t != "object" || !("aborted" in t))
        throw new W1(e, "AbortSignal", t);
    };
    function h5(t) {
      return !!(t && typeof t.pipe == "function");
    }
    $o.exports.addAbortSignal = function(e, r) {
      if (s5(e, "signal"), !h5(r))
        throw new W1("stream", "stream.Stream", r);
      return $o.exports.addAbortSignalNoValidate(e, r);
    };
    $o.exports.addAbortSignalNoValidate = function(t, e) {
      if (typeof t != "object" || !("aborted" in t))
        return e;
      let r = () => {
        e.destroy(new f5(undefined, { cause: t.reason }));
      };
      return t.aborted ? r() : (t.addEventListener("abort", r), o5(e, () => t.removeEventListener("abort", r))), e;
    };
  });
  Z1 = T9((zI, j1) => {
    var { StringPrototypeSlice: K1, SymbolIterator: u5, TypedArrayPrototypeSet: Yo, Uint8Array: l5 } = Tt(), { Buffer: Oh } = Ut(), { inspect: d5 } = Gr();
    j1.exports = class {
      constructor() {
        this.head = null, this.tail = null, this.length = 0;
      }
      push(e) {
        let r = { data: e, next: null };
        this.length > 0 ? this.tail.next = r : this.head = r, this.tail = r, ++this.length;
      }
      unshift(e) {
        let r = { data: e, next: this.head };
        this.length === 0 && (this.tail = r), this.head = r, ++this.length;
      }
      shift() {
        if (this.length === 0)
          return;
        let e = this.head.data;
        return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
      }
      clear() {
        this.head = this.tail = null, this.length = 0;
      }
      join(e) {
        if (this.length === 0)
          return "";
        let r = this.head, o2 = "" + r.data;
        for (;(r = r.next) !== null; )
          o2 += e + r.data;
        return o2;
      }
      concat(e) {
        if (this.length === 0)
          return Oh.alloc(0);
        let r = Oh.allocUnsafe(e >>> 0), o2 = this.head, f2 = 0;
        for (;o2; )
          Yo(r, o2.data, f2), f2 += o2.data.length, o2 = o2.next;
        return r;
      }
      consume(e, r) {
        let o2 = this.head.data;
        if (e < o2.length) {
          let f2 = o2.slice(0, e);
          return this.head.data = o2.slice(e), f2;
        }
        return e === o2.length ? this.shift() : r ? this._getString(e) : this._getBuffer(e);
      }
      first() {
        return this.head.data;
      }
      *[u5]() {
        for (let e = this.head;e; e = e.next)
          yield e.data;
      }
      _getString(e) {
        let r = "", o2 = this.head, f2 = 0;
        do {
          let p = o2.data;
          if (e > p.length)
            r += p, e -= p.length;
          else {
            e === p.length ? (r += p, ++f2, o2.next ? this.head = o2.next : this.head = this.tail = null) : (r += K1(p, 0, e), this.head = o2, o2.data = K1(p, e));
            break;
          }
          ++f2;
        } while ((o2 = o2.next) !== null);
        return this.length -= f2, r;
      }
      _getBuffer(e) {
        let r = Oh.allocUnsafe(e), o2 = e, f2 = this.head, p = 0;
        do {
          let m2 = f2.data;
          if (e > m2.length)
            Yo(r, m2, o2 - e), e -= m2.length;
          else {
            e === m2.length ? (Yo(r, m2, o2 - e), ++p, f2.next ? this.head = f2.next : this.head = this.tail = null) : (Yo(r, new l5(m2.buffer, m2.byteOffset, e), o2 - e), this.head = f2, f2.data = m2.slice(e));
            break;
          }
          ++p;
        } while ((f2 = f2.next) !== null);
        return this.length -= p, r;
      }
      [Symbol.for("nodejs.util.inspect.custom")](e, r) {
        return d5(this, { ...r, depth: 0, customInspect: false });
      }
    };
  });
  Xo = T9((HI, $1) => {
    var { MathFloor: c5, NumberIsInteger: p5 } = Tt(), { ERR_INVALID_ARG_VALUE: v5 } = Jt().codes;
    function b5(t, e, r) {
      return t.highWaterMark != null ? t.highWaterMark : e ? t[r] : null;
    }
    function V12(t) {
      return t ? 16 : 16 * 1024;
    }
    function m5(t, e, r, o2) {
      let f2 = b5(e, o2, r);
      if (f2 != null) {
        if (!p5(f2) || f2 < 0) {
          let p = o2 ? `options.${r}` : "options.highWaterMark";
          throw new v5(p, f2);
        }
        return c5(f2);
      }
      return V12(t.objectMode);
    }
    $1.exports = { getHighWaterMark: m5, getDefaultHighWaterMark: V12 };
  });
  Fh = T9((WI, J1) => {
    var G1 = (Oi(), ur(pr)), { PromisePrototypeThen: g5, SymbolAsyncIterator: Y1, SymbolIterator: X1 } = Tt(), { Buffer: y5 } = Ut(), { ERR_INVALID_ARG_TYPE: w5, ERR_STREAM_NULL_VALUES: M5 } = Jt().codes;
    function _5(t, e, r) {
      let o2;
      if (typeof e == "string" || e instanceof y5)
        return new t({ objectMode: true, ...r, read() {
          this.push(e), this.push(null);
        } });
      let f2;
      if (e && e[Y1])
        f2 = true, o2 = e[Y1]();
      else if (e && e[X1])
        f2 = false, o2 = e[X1]();
      else
        throw new w5("iterable", ["Iterable"], e);
      let p = new t({ objectMode: true, highWaterMark: 1, ...r }), m2 = false;
      p._read = function() {
        m2 || (m2 = true, M2());
      }, p._destroy = function(x4, S3) {
        g5(y3(x4), () => G1.nextTick(S3, x4), (E3) => G1.nextTick(S3, E3 || x4));
      };
      async function y3(x4) {
        let S3 = x4 != null, E3 = typeof o2.throw == "function";
        if (S3 && E3) {
          let { value: B2, done: q } = await o2.throw(x4);
          if (await B2, q)
            return;
        }
        if (typeof o2.return == "function") {
          let { value: B2 } = await o2.return();
          await B2;
        }
      }
      async function M2() {
        for (;; ) {
          try {
            let { value: x4, done: S3 } = f2 ? await o2.next() : o2.next();
            if (S3)
              p.push(null);
            else {
              let E3 = x4 && typeof x4.then == "function" ? await x4 : x4;
              if (E3 === null)
                throw m2 = false, new M5;
              if (p.push(E3))
                continue;
              m2 = false;
            }
          } catch (x4) {
            p.destroy(x4);
          }
          break;
        }
      }
      return p;
    }
    J1.exports = _5;
  });
  ba = T9((KI, lv) => {
    var Tr = (Oi(), ur(pr)), { ArrayPrototypeIndexOf: x5, NumberIsInteger: S5, NumberIsNaN: E5, NumberParseInt: A5, ObjectDefineProperties: tv, ObjectKeys: R5, ObjectSetPrototypeOf: rv, Promise: B5, SafeSet: q5, SymbolAsyncIterator: I5, Symbol: T52 } = Tt();
    lv.exports = Le;
    Le.ReadableState = jh;
    var { EventEmitter: k5 } = ki(), { Stream: Hi, prependListener: L5 } = Vo(), { Buffer: Uh } = Ut(), { addAbortSignal: N5 } = Go(), D5 = Ui(), Pe = Gr().debuglog("stream", (t) => {
      Pe = t;
    }), P5 = Z1(), hf = yn(), { getHighWaterMark: C5, getDefaultHighWaterMark: O5 } = Xo(), { aggregateTwoErrors: Q1, codes: { ERR_INVALID_ARG_TYPE: F5, ERR_METHOD_NOT_IMPLEMENTED: U5, ERR_OUT_OF_RANGE: z5, ERR_STREAM_PUSH_AFTER_EOF: H5, ERR_STREAM_UNSHIFT_AFTER_END_EVENT: W5 } } = Jt(), { validateObject: K5 } = pa(), wn = T52("kPaused"), { StringDecoder: iv } = co(), j5 = Fh();
    rv(Le.prototype, Hi.prototype);
    rv(Le, Hi);
    var zh = () => {
    }, { errorOrDestroy: sf } = hf;
    function jh(t, e, r) {
      typeof r != "boolean" && (r = e instanceof Qr()), this.objectMode = !!(t && t.objectMode), r && (this.objectMode = this.objectMode || !!(t && t.readableObjectMode)), this.highWaterMark = t ? C5(this, t, "readableHighWaterMark", r) : O5(false), this.buffer = new P5, this.length = 0, this.pipes = [], this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.constructed = true, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this[wn] = null, this.errorEmitted = false, this.emitClose = !t || t.emitClose !== false, this.autoDestroy = !t || t.autoDestroy !== false, this.destroyed = false, this.errored = null, this.closed = false, this.closeEmitted = false, this.defaultEncoding = t && t.defaultEncoding || "utf8", this.awaitDrainWriters = null, this.multiAwaitDrain = false, this.readingMore = false, this.dataEmitted = false, this.decoder = null, this.encoding = null, t && t.encoding && (this.decoder = new iv(t.encoding), this.encoding = t.encoding);
    }
    function Le(t) {
      if (!(this instanceof Le))
        return new Le(t);
      let e = this instanceof Qr();
      this._readableState = new jh(t, this, e), t && (typeof t.read == "function" && (this._read = t.read), typeof t.destroy == "function" && (this._destroy = t.destroy), typeof t.construct == "function" && (this._construct = t.construct), t.signal && !e && N5(t.signal, this)), Hi.call(this, t), hf.construct(this, () => {
        this._readableState.needReadable && Jo(this, this._readableState);
      });
    }
    Le.prototype.destroy = hf.destroy;
    Le.prototype._undestroy = hf.undestroy;
    Le.prototype._destroy = function(t, e) {
      e(t);
    };
    Le.prototype[k5.captureRejectionSymbol] = function(t) {
      this.destroy(t);
    };
    Le.prototype.push = function(t, e) {
      return nv(this, t, e, false);
    };
    Le.prototype.unshift = function(t, e) {
      return nv(this, t, e, true);
    };
    function nv(t, e, r, o2) {
      Pe("readableAddChunk", e);
      let f2 = t._readableState, p;
      if (f2.objectMode || (typeof e == "string" ? (r = r || f2.defaultEncoding, f2.encoding !== r && (o2 && f2.encoding ? e = Uh.from(e, r).toString(f2.encoding) : (e = Uh.from(e, r), r = ""))) : e instanceof Uh ? r = "" : Hi._isUint8Array(e) ? (e = Hi._uint8ArrayToBuffer(e), r = "") : e != null && (p = new F5("chunk", ["string", "Buffer", "Uint8Array"], e))), p)
        sf(t, p);
      else if (e === null)
        f2.reading = false, $5(t, f2);
      else if (f2.objectMode || e && e.length > 0)
        if (o2)
          if (f2.endEmitted)
            sf(t, new W5);
          else {
            if (f2.destroyed || f2.errored)
              return false;
            Hh(t, f2, e, true);
          }
        else if (f2.ended)
          sf(t, new H5);
        else {
          if (f2.destroyed || f2.errored)
            return false;
          f2.reading = false, f2.decoder && !r ? (e = f2.decoder.write(e), f2.objectMode || e.length !== 0 ? Hh(t, f2, e, false) : Jo(t, f2)) : Hh(t, f2, e, false);
        }
      else
        o2 || (f2.reading = false, Jo(t, f2));
      return !f2.ended && (f2.length < f2.highWaterMark || f2.length === 0);
    }
    function Hh(t, e, r, o2) {
      e.flowing && e.length === 0 && !e.sync && t.listenerCount("data") > 0 ? (e.multiAwaitDrain ? e.awaitDrainWriters.clear() : e.awaitDrainWriters = null, e.dataEmitted = true, t.emit("data", r)) : (e.length += e.objectMode ? 1 : r.length, o2 ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && Qo(t)), Jo(t, e);
    }
    Le.prototype.isPaused = function() {
      let t = this._readableState;
      return t[wn] === true || t.flowing === false;
    };
    Le.prototype.setEncoding = function(t) {
      let e = new iv(t);
      this._readableState.decoder = e, this._readableState.encoding = this._readableState.decoder.encoding;
      let r = this._readableState.buffer, o2 = "";
      for (let f2 of r)
        o2 += e.write(f2);
      return r.clear(), o2 !== "" && r.push(o2), this._readableState.length = o2.length, this;
    };
    var Z5 = 1073741824;
    function V5(t) {
      if (t > Z5)
        throw new z5("size", "<= 1GiB", t);
      return t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++, t;
    }
    function ev(t, e) {
      return t <= 0 || e.length === 0 && e.ended ? 0 : e.objectMode ? 1 : E5(t) ? e.flowing && e.length ? e.buffer.first().length : e.length : t <= e.length ? t : e.ended ? e.length : 0;
    }
    Le.prototype.read = function(t) {
      Pe("read", t), t === undefined ? t = NaN : S5(t) || (t = A5(t, 10));
      let e = this._readableState, r = t;
      if (t > e.highWaterMark && (e.highWaterMark = V5(t)), t !== 0 && (e.emittedReadable = false), t === 0 && e.needReadable && ((e.highWaterMark !== 0 ? e.length >= e.highWaterMark : e.length > 0) || e.ended))
        return Pe("read: emitReadable", e.length, e.ended), e.length === 0 && e.ended ? Wh(this) : Qo(this), null;
      if (t = ev(t, e), t === 0 && e.ended)
        return e.length === 0 && Wh(this), null;
      let o2 = e.needReadable;
      if (Pe("need readable", o2), (e.length === 0 || e.length - t < e.highWaterMark) && (o2 = true, Pe("length less than watermark", o2)), e.ended || e.reading || e.destroyed || e.errored || !e.constructed)
        o2 = false, Pe("reading, ended or constructing", o2);
      else if (o2) {
        Pe("do read"), e.reading = true, e.sync = true, e.length === 0 && (e.needReadable = true);
        try {
          this._read(e.highWaterMark);
        } catch (p) {
          sf(this, p);
        }
        e.sync = false, e.reading || (t = ev(r, e));
      }
      let f2;
      return t > 0 ? f2 = hv(t, e) : f2 = null, f2 === null ? (e.needReadable = e.length <= e.highWaterMark, t = 0) : (e.length -= t, e.multiAwaitDrain ? e.awaitDrainWriters.clear() : e.awaitDrainWriters = null), e.length === 0 && (e.ended || (e.needReadable = true), r !== t && e.ended && Wh(this)), f2 !== null && !e.errorEmitted && !e.closeEmitted && (e.dataEmitted = true, this.emit("data", f2)), f2;
    };
    function $5(t, e) {
      if (Pe("onEofChunk"), !e.ended) {
        if (e.decoder) {
          let r = e.decoder.end();
          r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
        }
        e.ended = true, e.sync ? Qo(t) : (e.needReadable = false, e.emittedReadable = true, fv(t));
      }
    }
    function Qo(t) {
      let e = t._readableState;
      Pe("emitReadable", e.needReadable, e.emittedReadable), e.needReadable = false, e.emittedReadable || (Pe("emitReadable", e.flowing), e.emittedReadable = true, Tr.nextTick(fv, t));
    }
    function fv(t) {
      let e = t._readableState;
      Pe("emitReadable_", e.destroyed, e.length, e.ended), !e.destroyed && !e.errored && (e.length || e.ended) && (t.emit("readable"), e.emittedReadable = false), e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark, ov(t);
    }
    function Jo(t, e) {
      !e.readingMore && e.constructed && (e.readingMore = true, Tr.nextTick(G5, t, e));
    }
    function G5(t, e) {
      for (;!e.reading && !e.ended && (e.length < e.highWaterMark || e.flowing && e.length === 0); ) {
        let r = e.length;
        if (Pe("maybeReadMore read 0"), t.read(0), r === e.length)
          break;
      }
      e.readingMore = false;
    }
    Le.prototype._read = function(t) {
      throw new U5("_read()");
    };
    Le.prototype.pipe = function(t, e) {
      let r = this, o2 = this._readableState;
      o2.pipes.length === 1 && (o2.multiAwaitDrain || (o2.multiAwaitDrain = true, o2.awaitDrainWriters = new q5(o2.awaitDrainWriters ? [o2.awaitDrainWriters] : []))), o2.pipes.push(t), Pe("pipe count=%d opts=%j", o2.pipes.length, e);
      let p = (!e || e.end !== false) && t !== Tr.stdout && t !== Tr.stderr ? y3 : _e;
      o2.endEmitted ? Tr.nextTick(p) : r.once("end", p), t.on("unpipe", m2);
      function m2(N6, we) {
        Pe("onunpipe"), N6 === r && we && we.hasUnpiped === false && (we.hasUnpiped = true, S3());
      }
      function y3() {
        Pe("onend"), t.end();
      }
      let M2, x4 = false;
      function S3() {
        Pe("cleanup"), t.removeListener("close", L3), t.removeListener("finish", ge), M2 && t.removeListener("drain", M2), t.removeListener("error", q), t.removeListener("unpipe", m2), r.removeListener("end", y3), r.removeListener("end", _e), r.removeListener("data", B2), x4 = true, M2 && o2.awaitDrainWriters && (!t._writableState || t._writableState.needDrain) && M2();
      }
      function E3() {
        x4 || (o2.pipes.length === 1 && o2.pipes[0] === t ? (Pe("false write response, pause", 0), o2.awaitDrainWriters = t, o2.multiAwaitDrain = false) : o2.pipes.length > 1 && o2.pipes.includes(t) && (Pe("false write response, pause", o2.awaitDrainWriters.size), o2.awaitDrainWriters.add(t)), r.pause()), M2 || (M2 = Y5(r, t), t.on("drain", M2));
      }
      r.on("data", B2);
      function B2(N6) {
        Pe("ondata");
        let we = t.write(N6);
        Pe("dest.write", we), we === false && E3();
      }
      function q(N6) {
        if (Pe("onerror", N6), _e(), t.removeListener("error", q), t.listenerCount("error") === 0) {
          let we = t._writableState || t._readableState;
          we && !we.errorEmitted ? sf(t, N6) : t.emit("error", N6);
        }
      }
      L5(t, "error", q);
      function L3() {
        t.removeListener("finish", ge), _e();
      }
      t.once("close", L3);
      function ge() {
        Pe("onfinish"), t.removeListener("close", L3), _e();
      }
      t.once("finish", ge);
      function _e() {
        Pe("unpipe"), r.unpipe(t);
      }
      return t.emit("pipe", r), t.writableNeedDrain === true ? o2.flowing && E3() : o2.flowing || (Pe("pipe resume"), r.resume()), t;
    };
    function Y5(t, e) {
      return function() {
        let o2 = t._readableState;
        o2.awaitDrainWriters === e ? (Pe("pipeOnDrain", 1), o2.awaitDrainWriters = null) : o2.multiAwaitDrain && (Pe("pipeOnDrain", o2.awaitDrainWriters.size), o2.awaitDrainWriters.delete(e)), (!o2.awaitDrainWriters || o2.awaitDrainWriters.size === 0) && t.listenerCount("data") && t.resume();
      };
    }
    Le.prototype.unpipe = function(t) {
      let e = this._readableState, r = { hasUnpiped: false };
      if (e.pipes.length === 0)
        return this;
      if (!t) {
        let f2 = e.pipes;
        e.pipes = [], this.pause();
        for (let p = 0;p < f2.length; p++)
          f2[p].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      let o2 = x5(e.pipes, t);
      return o2 === -1 ? this : (e.pipes.splice(o2, 1), e.pipes.length === 0 && this.pause(), t.emit("unpipe", this, r), this);
    };
    Le.prototype.on = function(t, e) {
      let r = Hi.prototype.on.call(this, t, e), o2 = this._readableState;
      return t === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, Pe("on readable", o2.length, o2.reading), o2.length ? Qo(this) : o2.reading || Tr.nextTick(X5, this)), r;
    };
    Le.prototype.addListener = Le.prototype.on;
    Le.prototype.removeListener = function(t, e) {
      let r = Hi.prototype.removeListener.call(this, t, e);
      return t === "readable" && Tr.nextTick(av, this), r;
    };
    Le.prototype.off = Le.prototype.removeListener;
    Le.prototype.removeAllListeners = function(t) {
      let e = Hi.prototype.removeAllListeners.apply(this, arguments);
      return (t === "readable" || t === undefined) && Tr.nextTick(av, this), e;
    };
    function av(t) {
      let e = t._readableState;
      e.readableListening = t.listenerCount("readable") > 0, e.resumeScheduled && e[wn] === false ? e.flowing = true : t.listenerCount("data") > 0 ? t.resume() : e.readableListening || (e.flowing = null);
    }
    function X5(t) {
      Pe("readable nexttick read 0"), t.read(0);
    }
    Le.prototype.resume = function() {
      let t = this._readableState;
      return t.flowing || (Pe("resume"), t.flowing = !t.readableListening, J5(this, t)), t[wn] = false, this;
    };
    function J5(t, e) {
      e.resumeScheduled || (e.resumeScheduled = true, Tr.nextTick(Q5, t, e));
    }
    function Q5(t, e) {
      Pe("resume", e.reading), e.reading || t.read(0), e.resumeScheduled = false, t.emit("resume"), ov(t), e.flowing && !e.reading && t.read(0);
    }
    Le.prototype.pause = function() {
      return Pe("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (Pe("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState[wn] = true, this;
    };
    function ov(t) {
      let e = t._readableState;
      for (Pe("flow", e.flowing);e.flowing && t.read() !== null; )
        ;
    }
    Le.prototype.wrap = function(t) {
      let e = false;
      t.on("data", (o2) => {
        !this.push(o2) && t.pause && (e = true, t.pause());
      }), t.on("end", () => {
        this.push(null);
      }), t.on("error", (o2) => {
        sf(this, o2);
      }), t.on("close", () => {
        this.destroy();
      }), t.on("destroy", () => {
        this.destroy();
      }), this._read = () => {
        e && t.resume && (e = false, t.resume());
      };
      let r = R5(t);
      for (let o2 = 1;o2 < r.length; o2++) {
        let f2 = r[o2];
        this[f2] === undefined && typeof t[f2] == "function" && (this[f2] = t[f2].bind(t));
      }
      return this;
    };
    Le.prototype[I5] = function() {
      return sv(this);
    };
    Le.prototype.iterator = function(t) {
      return t !== undefined && K5(t, "options"), sv(this, t);
    };
    function sv(t, e) {
      typeof t.read != "function" && (t = Le.wrap(t, { objectMode: true }));
      let r = ex(t, e);
      return r.stream = t, r;
    }
    async function* ex(t, e) {
      let r = zh;
      function o2(m2) {
        this === t ? (r(), r = zh) : r = m2;
      }
      t.on("readable", o2);
      let f2, p = D5(t, { writable: false }, (m2) => {
        f2 = m2 ? Q1(f2, m2) : null, r(), r = zh;
      });
      try {
        for (;; ) {
          let m2 = t.destroyed ? null : t.read();
          if (m2 !== null)
            yield m2;
          else {
            if (f2)
              throw f2;
            if (f2 === null)
              return;
            await new B5(o2);
          }
        }
      } catch (m2) {
        throw f2 = Q1(f2, m2), f2;
      } finally {
        (f2 || e?.destroyOnReturn !== false) && (f2 === undefined || t._readableState.autoDestroy) ? hf.destroyer(t, null) : (t.off("readable", o2), p());
      }
    }
    tv(Le.prototype, { readable: { __proto__: null, get() {
      let t = this._readableState;
      return !!t && t.readable !== false && !t.destroyed && !t.errorEmitted && !t.endEmitted;
    }, set(t) {
      this._readableState && (this._readableState.readable = !!t);
    } }, readableDidRead: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.dataEmitted;
    } }, readableAborted: { __proto__: null, enumerable: false, get: function() {
      return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);
    } }, readableHighWaterMark: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } }, readableBuffer: { __proto__: null, enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } }, readableFlowing: { __proto__: null, enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(t) {
      this._readableState && (this._readableState.flowing = t);
    } }, readableLength: { __proto__: null, enumerable: false, get() {
      return this._readableState.length;
    } }, readableObjectMode: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.objectMode : false;
    } }, readableEncoding: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.encoding : null;
    } }, errored: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.errored : null;
    } }, closed: { __proto__: null, get() {
      return this._readableState ? this._readableState.closed : false;
    } }, destroyed: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.destroyed : false;
    }, set(t) {
      !this._readableState || (this._readableState.destroyed = t);
    } }, readableEnded: { __proto__: null, enumerable: false, get() {
      return this._readableState ? this._readableState.endEmitted : false;
    } } });
    tv(jh.prototype, { pipesCount: { __proto__: null, get() {
      return this.pipes.length;
    } }, paused: { __proto__: null, get() {
      return this[wn] !== false;
    }, set(t) {
      this[wn] = !!t;
    } } });
    Le._fromList = hv;
    function hv(t, e) {
      if (e.length === 0)
        return null;
      let r;
      return e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (e.decoder ? r = e.buffer.join("") : e.buffer.length === 1 ? r = e.buffer.first() : r = e.buffer.concat(e.length), e.buffer.clear()) : r = e.buffer.consume(t, e.decoder), r;
    }
    function Wh(t) {
      let e = t._readableState;
      Pe("endReadable", e.endEmitted), e.endEmitted || (e.ended = true, Tr.nextTick(tx, e, t));
    }
    function tx(t, e) {
      if (Pe("endReadableNT", t.endEmitted, t.length), !t.errored && !t.closeEmitted && !t.endEmitted && t.length === 0) {
        if (t.endEmitted = true, e.emit("end"), e.writable && e.allowHalfOpen === false)
          Tr.nextTick(rx, e);
        else if (t.autoDestroy) {
          let r = e._writableState;
          (!r || r.autoDestroy && (r.finished || r.writable === false)) && e.destroy();
        }
      }
    }
    function rx(t) {
      t.writable && !t.writableEnded && !t.destroyed && t.end();
    }
    Le.from = function(t, e) {
      return j5(Le, t, e);
    };
    var Kh;
    function uv() {
      return Kh === undefined && (Kh = {}), Kh;
    }
    Le.fromWeb = function(t, e) {
      return uv().newStreamReadableFromReadableStream(t, e);
    };
    Le.toWeb = function(t, e) {
      return uv().newReadableStreamFromStreamReadable(t, e);
    };
    Le.wrap = function(t, e) {
      var r, o2;
      return new Le({ objectMode: (r = (o2 = t.readableObjectMode) !== null && o2 !== undefined ? o2 : t.objectMode) !== null && r !== undefined ? r : true, ...e, destroy(f2, p) {
        hf.destroyer(t, f2), p(f2);
      } }).wrap(t);
    };
  });
  Jh = T9((jI, xv) => {
    var Mn = (Oi(), ur(pr)), { ArrayPrototypeSlice: pv, Error: ix, FunctionPrototypeSymbolHasInstance: vv, ObjectDefineProperty: bv, ObjectDefineProperties: nx, ObjectSetPrototypeOf: mv, StringPrototypeToLowerCase: fx, Symbol: ax, SymbolHasInstance: ox } = Tt();
    xv.exports = st2;
    st2.WritableState = ya;
    var { EventEmitter: sx } = ki(), ma = Vo().Stream, { Buffer: es } = Ut(), is = yn(), { addAbortSignal: hx } = Go(), { getHighWaterMark: ux, getDefaultHighWaterMark: lx } = Xo(), { ERR_INVALID_ARG_TYPE: dx, ERR_METHOD_NOT_IMPLEMENTED: cx, ERR_MULTIPLE_CALLBACK: gv, ERR_STREAM_CANNOT_PIPE: px, ERR_STREAM_DESTROYED: ga, ERR_STREAM_ALREADY_FINISHED: vx, ERR_STREAM_NULL_VALUES: bx, ERR_STREAM_WRITE_AFTER_END: mx, ERR_UNKNOWN_ENCODING: yv } = Jt().codes, { errorOrDestroy: uf } = is;
    mv(st2.prototype, ma.prototype);
    mv(st2, ma);
    function $h() {
    }
    var lf = ax("kOnFinished");
    function ya(t, e, r) {
      typeof r != "boolean" && (r = e instanceof Qr()), this.objectMode = !!(t && t.objectMode), r && (this.objectMode = this.objectMode || !!(t && t.writableObjectMode)), this.highWaterMark = t ? ux(this, t, "writableHighWaterMark", r) : lx(false), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      let o2 = !!(t && t.decodeStrings === false);
      this.decodeStrings = !o2, this.defaultEncoding = t && t.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = yx.bind(undefined, e), this.writecb = null, this.writelen = 0, this.afterWriteTickInfo = null, rs(this), this.pendingcb = 0, this.constructed = true, this.prefinished = false, this.errorEmitted = false, this.emitClose = !t || t.emitClose !== false, this.autoDestroy = !t || t.autoDestroy !== false, this.errored = null, this.closed = false, this.closeEmitted = false, this[lf] = [];
    }
    function rs(t) {
      t.buffered = [], t.bufferedIndex = 0, t.allBuffers = true, t.allNoop = true;
    }
    ya.prototype.getBuffer = function() {
      return pv(this.buffered, this.bufferedIndex);
    };
    bv(ya.prototype, "bufferedRequestCount", { __proto__: null, get() {
      return this.buffered.length - this.bufferedIndex;
    } });
    function st2(t) {
      let e = this instanceof Qr();
      if (!e && !vv(st2, this))
        return new st2(t);
      this._writableState = new ya(t, this, e), t && (typeof t.write == "function" && (this._write = t.write), typeof t.writev == "function" && (this._writev = t.writev), typeof t.destroy == "function" && (this._destroy = t.destroy), typeof t.final == "function" && (this._final = t.final), typeof t.construct == "function" && (this._construct = t.construct), t.signal && hx(t.signal, this)), ma.call(this, t), is.construct(this, () => {
        let r = this._writableState;
        r.writing || Yh(this, r), Xh(this, r);
      });
    }
    bv(st2, ox, { __proto__: null, value: function(t) {
      return vv(this, t) ? true : this !== st2 ? false : t && t._writableState instanceof ya;
    } });
    st2.prototype.pipe = function() {
      uf(this, new px);
    };
    function wv(t, e, r, o2) {
      let f2 = t._writableState;
      if (typeof r == "function")
        o2 = r, r = f2.defaultEncoding;
      else {
        if (!r)
          r = f2.defaultEncoding;
        else if (r !== "buffer" && !es.isEncoding(r))
          throw new yv(r);
        typeof o2 != "function" && (o2 = $h);
      }
      if (e === null)
        throw new bx;
      if (!f2.objectMode)
        if (typeof e == "string")
          f2.decodeStrings !== false && (e = es.from(e, r), r = "buffer");
        else if (e instanceof es)
          r = "buffer";
        else if (ma._isUint8Array(e))
          e = ma._uint8ArrayToBuffer(e), r = "buffer";
        else
          throw new dx("chunk", ["string", "Buffer", "Uint8Array"], e);
      let p;
      return f2.ending ? p = new mx : f2.destroyed && (p = new ga("write")), p ? (Mn.nextTick(o2, p), uf(t, p, true), p) : (f2.pendingcb++, gx(t, f2, e, r, o2));
    }
    st2.prototype.write = function(t, e, r) {
      return wv(this, t, e, r) === true;
    };
    st2.prototype.cork = function() {
      this._writableState.corked++;
    };
    st2.prototype.uncork = function() {
      let t = this._writableState;
      t.corked && (t.corked--, t.writing || Yh(this, t));
    };
    st2.prototype.setDefaultEncoding = function(e) {
      if (typeof e == "string" && (e = fx(e)), !es.isEncoding(e))
        throw new yv(e);
      return this._writableState.defaultEncoding = e, this;
    };
    function gx(t, e, r, o2, f2) {
      let p = e.objectMode ? 1 : r.length;
      e.length += p;
      let m2 = e.length < e.highWaterMark;
      return m2 || (e.needDrain = true), e.writing || e.corked || e.errored || !e.constructed ? (e.buffered.push({ chunk: r, encoding: o2, callback: f2 }), e.allBuffers && o2 !== "buffer" && (e.allBuffers = false), e.allNoop && f2 !== $h && (e.allNoop = false)) : (e.writelen = p, e.writecb = f2, e.writing = true, e.sync = true, t._write(r, o2, e.onwrite), e.sync = false), m2 && !e.errored && !e.destroyed;
    }
    function dv(t, e, r, o2, f2, p, m2) {
      e.writelen = o2, e.writecb = m2, e.writing = true, e.sync = true, e.destroyed ? e.onwrite(new ga("write")) : r ? t._writev(f2, e.onwrite) : t._write(f2, p, e.onwrite), e.sync = false;
    }
    function cv(t, e, r, o2) {
      --e.pendingcb, o2(r), Gh(e), uf(t, r);
    }
    function yx(t, e) {
      let r = t._writableState, o2 = r.sync, f2 = r.writecb;
      if (typeof f2 != "function") {
        uf(t, new gv);
        return;
      }
      r.writing = false, r.writecb = null, r.length -= r.writelen, r.writelen = 0, e ? (e.stack, r.errored || (r.errored = e), t._readableState && !t._readableState.errored && (t._readableState.errored = e), o2 ? Mn.nextTick(cv, t, r, e, f2) : cv(t, r, e, f2)) : (r.buffered.length > r.bufferedIndex && Yh(t, r), o2 ? r.afterWriteTickInfo !== null && r.afterWriteTickInfo.cb === f2 ? r.afterWriteTickInfo.count++ : (r.afterWriteTickInfo = { count: 1, cb: f2, stream: t, state: r }, Mn.nextTick(wx, r.afterWriteTickInfo)) : Mv(t, r, 1, f2));
    }
    function wx({ stream: t, state: e, count: r, cb: o2 }) {
      return e.afterWriteTickInfo = null, Mv(t, e, r, o2);
    }
    function Mv(t, e, r, o2) {
      for (!e.ending && !t.destroyed && e.length === 0 && e.needDrain && (e.needDrain = false, t.emit("drain"));r-- > 0; )
        e.pendingcb--, o2();
      e.destroyed && Gh(e), Xh(t, e);
    }
    function Gh(t) {
      if (t.writing)
        return;
      for (let f2 = t.bufferedIndex;f2 < t.buffered.length; ++f2) {
        var e;
        let { chunk: p, callback: m2 } = t.buffered[f2], y3 = t.objectMode ? 1 : p.length;
        t.length -= y3, m2((e = t.errored) !== null && e !== undefined ? e : new ga("write"));
      }
      let r = t[lf].splice(0);
      for (let f2 = 0;f2 < r.length; f2++) {
        var o2;
        r[f2]((o2 = t.errored) !== null && o2 !== undefined ? o2 : new ga("end"));
      }
      rs(t);
    }
    function Yh(t, e) {
      if (e.corked || e.bufferProcessing || e.destroyed || !e.constructed)
        return;
      let { buffered: r, bufferedIndex: o2, objectMode: f2 } = e, p = r.length - o2;
      if (!p)
        return;
      let m2 = o2;
      if (e.bufferProcessing = true, p > 1 && t._writev) {
        e.pendingcb -= p - 1;
        let y3 = e.allNoop ? $h : (x4) => {
          for (let S3 = m2;S3 < r.length; ++S3)
            r[S3].callback(x4);
        }, M2 = e.allNoop && m2 === 0 ? r : pv(r, m2);
        M2.allBuffers = e.allBuffers, dv(t, e, true, e.length, M2, "", y3), rs(e);
      } else {
        do {
          let { chunk: y3, encoding: M2, callback: x4 } = r[m2];
          r[m2++] = null;
          let S3 = f2 ? 1 : y3.length;
          dv(t, e, false, S3, y3, M2, x4);
        } while (m2 < r.length && !e.writing);
        m2 === r.length ? rs(e) : m2 > 256 ? (r.splice(0, m2), e.bufferedIndex = 0) : e.bufferedIndex = m2;
      }
      e.bufferProcessing = false;
    }
    st2.prototype._write = function(t, e, r) {
      if (this._writev)
        this._writev([{ chunk: t, encoding: e }], r);
      else
        throw new cx("_write()");
    };
    st2.prototype._writev = null;
    st2.prototype.end = function(t, e, r) {
      let o2 = this._writableState;
      typeof t == "function" ? (r = t, t = null, e = null) : typeof e == "function" && (r = e, e = null);
      let f2;
      if (t != null) {
        let p = wv(this, t, e);
        p instanceof ix && (f2 = p);
      }
      return o2.corked && (o2.corked = 1, this.uncork()), f2 || (!o2.errored && !o2.ending ? (o2.ending = true, Xh(this, o2, true), o2.ended = true) : o2.finished ? f2 = new vx("end") : o2.destroyed && (f2 = new ga("end"))), typeof r == "function" && (f2 || o2.finished ? Mn.nextTick(r, f2) : o2[lf].push(r)), this;
    };
    function ts(t) {
      return t.ending && !t.destroyed && t.constructed && t.length === 0 && !t.errored && t.buffered.length === 0 && !t.finished && !t.writing && !t.errorEmitted && !t.closeEmitted;
    }
    function Mx(t, e) {
      let r = false;
      function o2(f2) {
        if (r) {
          uf(t, f2 ?? gv());
          return;
        }
        if (r = true, e.pendingcb--, f2) {
          let p = e[lf].splice(0);
          for (let m2 = 0;m2 < p.length; m2++)
            p[m2](f2);
          uf(t, f2, e.sync);
        } else
          ts(e) && (e.prefinished = true, t.emit("prefinish"), e.pendingcb++, Mn.nextTick(Vh, t, e));
      }
      e.sync = true, e.pendingcb++;
      try {
        t._final(o2);
      } catch (f2) {
        o2(f2);
      }
      e.sync = false;
    }
    function _x(t, e) {
      !e.prefinished && !e.finalCalled && (typeof t._final == "function" && !e.destroyed ? (e.finalCalled = true, Mx(t, e)) : (e.prefinished = true, t.emit("prefinish")));
    }
    function Xh(t, e, r) {
      ts(e) && (_x(t, e), e.pendingcb === 0 && (r ? (e.pendingcb++, Mn.nextTick((o2, f2) => {
        ts(f2) ? Vh(o2, f2) : f2.pendingcb--;
      }, t, e)) : ts(e) && (e.pendingcb++, Vh(t, e))));
    }
    function Vh(t, e) {
      e.pendingcb--, e.finished = true;
      let r = e[lf].splice(0);
      for (let o2 = 0;o2 < r.length; o2++)
        r[o2]();
      if (t.emit("finish"), e.autoDestroy) {
        let o2 = t._readableState;
        (!o2 || o2.autoDestroy && (o2.endEmitted || o2.readable === false)) && t.destroy();
      }
    }
    nx(st2.prototype, { closed: { __proto__: null, get() {
      return this._writableState ? this._writableState.closed : false;
    } }, destroyed: { __proto__: null, get() {
      return this._writableState ? this._writableState.destroyed : false;
    }, set(t) {
      this._writableState && (this._writableState.destroyed = t);
    } }, writable: { __proto__: null, get() {
      let t = this._writableState;
      return !!t && t.writable !== false && !t.destroyed && !t.errored && !t.ending && !t.ended;
    }, set(t) {
      this._writableState && (this._writableState.writable = !!t);
    } }, writableFinished: { __proto__: null, get() {
      return this._writableState ? this._writableState.finished : false;
    } }, writableObjectMode: { __proto__: null, get() {
      return this._writableState ? this._writableState.objectMode : false;
    } }, writableBuffer: { __proto__: null, get() {
      return this._writableState && this._writableState.getBuffer();
    } }, writableEnded: { __proto__: null, get() {
      return this._writableState ? this._writableState.ending : false;
    } }, writableNeedDrain: { __proto__: null, get() {
      let t = this._writableState;
      return t ? !t.destroyed && !t.ending && t.needDrain : false;
    } }, writableHighWaterMark: { __proto__: null, get() {
      return this._writableState && this._writableState.highWaterMark;
    } }, writableCorked: { __proto__: null, get() {
      return this._writableState ? this._writableState.corked : 0;
    } }, writableLength: { __proto__: null, get() {
      return this._writableState && this._writableState.length;
    } }, errored: { __proto__: null, enumerable: false, get() {
      return this._writableState ? this._writableState.errored : null;
    } }, writableAborted: { __proto__: null, enumerable: false, get: function() {
      return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);
    } } });
    var xx = is.destroy;
    st2.prototype.destroy = function(t, e) {
      let r = this._writableState;
      return !r.destroyed && (r.bufferedIndex < r.buffered.length || r[lf].length) && Mn.nextTick(Gh, r), xx.call(this, t, e), this;
    };
    st2.prototype._undestroy = is.undestroy;
    st2.prototype._destroy = function(t, e) {
      e(t);
    };
    st2.prototype[sx.captureRejectionSymbol] = function(t) {
      this.destroy(t);
    };
    var Zh;
    function _v() {
      return Zh === undefined && (Zh = {}), Zh;
    }
    st2.fromWeb = function(t, e) {
      return _v().newStreamWritableFromWritableStream(t, e);
    };
    st2.toWeb = function(t) {
      return _v().newWritableStreamFromStreamWritable(t);
    };
  });
  Dv = T9((ZI, Nv) => {
    var Qh = (Oi(), ur(pr)), Sx = Ut(), { isReadable: Ex, isWritable: Ax, isIterable: Sv, isNodeStream: Rx, isReadableNodeStream: Ev, isWritableNodeStream: Av, isDuplexNodeStream: Bx } = Fi(), Rv = Ui(), { AbortError: Lv, codes: { ERR_INVALID_ARG_TYPE: qx, ERR_INVALID_RETURN_VALUE: Bv } } = Jt(), { destroyer: df } = yn(), Ix = Qr(), Tx = ba(), { createDeferredPromise: qv } = Gr(), Iv = Fh(), Tv = globalThis.Blob || Sx.Blob, kx = typeof Tv < "u" ? function(e) {
      return e instanceof Tv;
    } : function(e) {
      return false;
    }, Lx = globalThis.AbortController || No().AbortController, { FunctionPrototypeCall: kv } = Tt(), _n = class extends Ix {
      constructor(e) {
        super(e), e?.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), e?.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true);
      }
    };
    Nv.exports = function t(e, r) {
      if (Bx(e))
        return e;
      if (Ev(e))
        return ns({ readable: e });
      if (Av(e))
        return ns({ writable: e });
      if (Rx(e))
        return ns({ writable: false, readable: false });
      if (typeof e == "function") {
        let { value: f2, write: p, final: m2, destroy: y3 } = Nx(e);
        if (Sv(f2))
          return Iv(_n, f2, { objectMode: true, write: p, final: m2, destroy: y3 });
        let M2 = f2?.then;
        if (typeof M2 == "function") {
          let x4, S3 = kv(M2, f2, (E3) => {
            if (E3 != null)
              throw new Bv("nully", "body", E3);
          }, (E3) => {
            df(x4, E3);
          });
          return x4 = new _n({ objectMode: true, readable: false, write: p, final(E3) {
            m2(async () => {
              try {
                await S3, Qh.nextTick(E3, null);
              } catch (B2) {
                Qh.nextTick(E3, B2);
              }
            });
          }, destroy: y3 });
        }
        throw new Bv("Iterable, AsyncIterable or AsyncFunction", r, f2);
      }
      if (kx(e))
        return t(e.arrayBuffer());
      if (Sv(e))
        return Iv(_n, e, { objectMode: true, writable: false });
      if (typeof e?.writable == "object" || typeof e?.readable == "object") {
        let f2 = e != null && e.readable ? Ev(e?.readable) ? e?.readable : t(e.readable) : undefined, p = e != null && e.writable ? Av(e?.writable) ? e?.writable : t(e.writable) : undefined;
        return ns({ readable: f2, writable: p });
      }
      let o2 = e?.then;
      if (typeof o2 == "function") {
        let f2;
        return kv(o2, e, (p) => {
          p != null && f2.push(p), f2.push(null);
        }, (p) => {
          df(f2, p);
        }), f2 = new _n({ objectMode: true, writable: false, read() {
        } });
      }
      throw new qx(r, ["Blob", "ReadableStream", "WritableStream", "Stream", "Iterable", "AsyncIterable", "Function", "{ readable, writable } pair", "Promise"], e);
    };
    function Nx(t) {
      let { promise: e, resolve: r } = qv(), o2 = new Lx, f2 = o2.signal;
      return { value: t(async function* () {
        for (;; ) {
          let m2 = e;
          e = null;
          let { chunk: y3, done: M2, cb: x4 } = await m2;
          if (Qh.nextTick(x4), M2)
            return;
          if (f2.aborted)
            throw new Lv(undefined, { cause: f2.reason });
          ({ promise: e, resolve: r } = qv()), yield y3;
        }
      }(), { signal: f2 }), write(m2, y3, M2) {
        let x4 = r;
        r = null, x4({ chunk: m2, done: false, cb: M2 });
      }, final(m2) {
        let y3 = r;
        r = null, y3({ done: true, cb: m2 });
      }, destroy(m2, y3) {
        o2.abort(), y3(m2);
      } };
    }
    function ns(t) {
      let e = t.readable && typeof t.readable.read != "function" ? Tx.wrap(t.readable) : t.readable, r = t.writable, o2 = !!Ex(e), f2 = !!Ax(r), p, m2, y3, M2, x4;
      function S3(E3) {
        let B2 = M2;
        M2 = null, B2 ? B2(E3) : E3 ? x4.destroy(E3) : !o2 && !f2 && x4.destroy();
      }
      return x4 = new _n({ readableObjectMode: !!(e != null && e.readableObjectMode), writableObjectMode: !!(r != null && r.writableObjectMode), readable: o2, writable: f2 }), f2 && (Rv(r, (E3) => {
        f2 = false, E3 && df(e, E3), S3(E3);
      }), x4._write = function(E3, B2, q) {
        r.write(E3, B2) ? q() : p = q;
      }, x4._final = function(E3) {
        r.end(), m2 = E3;
      }, r.on("drain", function() {
        if (p) {
          let E3 = p;
          p = null, E3();
        }
      }), r.on("finish", function() {
        if (m2) {
          let E3 = m2;
          m2 = null, E3();
        }
      })), o2 && (Rv(e, (E3) => {
        o2 = false, E3 && df(e, E3), S3(E3);
      }), e.on("readable", function() {
        if (y3) {
          let E3 = y3;
          y3 = null, E3();
        }
      }), e.on("end", function() {
        x4.push(null);
      }), x4._read = function() {
        for (;; ) {
          let E3 = e.read();
          if (E3 === null) {
            y3 = x4._read;
            return;
          }
          if (!x4.push(E3))
            return;
        }
      }), x4._destroy = function(E3, B2) {
        !E3 && M2 !== null && (E3 = new Lv), y3 = null, p = null, m2 = null, M2 === null ? B2(E3) : (M2 = B2, df(r, E3), df(e, E3));
      }, x4;
    }
  });
  Qr = T9((VI, Ov) => {
    var { ObjectDefineProperties: Dx, ObjectGetOwnPropertyDescriptor: bi, ObjectKeys: Px, ObjectSetPrototypeOf: Pv } = Tt();
    Ov.exports = kr;
    var ru = ba(), vr = Jh();
    Pv(kr.prototype, ru.prototype);
    Pv(kr, ru);
    {
      let t = Px(vr.prototype);
      for (let e = 0;e < t.length; e++) {
        let r = t[e];
        kr.prototype[r] || (kr.prototype[r] = vr.prototype[r]);
      }
    }
    function kr(t) {
      if (!(this instanceof kr))
        return new kr(t);
      ru.call(this, t), vr.call(this, t), t ? (this.allowHalfOpen = t.allowHalfOpen !== false, t.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), t.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true)) : this.allowHalfOpen = true;
    }
    Dx(kr.prototype, { writable: { __proto__: null, ...bi(vr.prototype, "writable") }, writableHighWaterMark: { __proto__: null, ...bi(vr.prototype, "writableHighWaterMark") }, writableObjectMode: { __proto__: null, ...bi(vr.prototype, "writableObjectMode") }, writableBuffer: { __proto__: null, ...bi(vr.prototype, "writableBuffer") }, writableLength: { __proto__: null, ...bi(vr.prototype, "writableLength") }, writableFinished: { __proto__: null, ...bi(vr.prototype, "writableFinished") }, writableCorked: { __proto__: null, ...bi(vr.prototype, "writableCorked") }, writableEnded: { __proto__: null, ...bi(vr.prototype, "writableEnded") }, writableNeedDrain: { __proto__: null, ...bi(vr.prototype, "writableNeedDrain") }, destroyed: { __proto__: null, get() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set(t) {
      this._readableState && this._writableState && (this._readableState.destroyed = t, this._writableState.destroyed = t);
    } } });
    var eu;
    function Cv() {
      return eu === undefined && (eu = {}), eu;
    }
    kr.fromWeb = function(t, e) {
      return Cv().newStreamDuplexFromReadableWritablePair(t, e);
    };
    kr.toWeb = function(t) {
      return Cv().newReadableWritablePairFromDuplex(t);
    };
    var tu;
    kr.from = function(t) {
      return tu || (tu = Dv()), tu(t, "body");
    };
  });
  fu = T9(($I, Uv) => {
    var { ObjectSetPrototypeOf: Fv, Symbol: Cx } = Tt();
    Uv.exports = mi;
    var { ERR_METHOD_NOT_IMPLEMENTED: Ox } = Jt().codes, nu = Qr(), { getHighWaterMark: Fx } = Xo();
    Fv(mi.prototype, nu.prototype);
    Fv(mi, nu);
    var wa = Cx("kCallback");
    function mi(t) {
      if (!(this instanceof mi))
        return new mi(t);
      let e = t ? Fx(this, t, "readableHighWaterMark", true) : null;
      e === 0 && (t = { ...t, highWaterMark: null, readableHighWaterMark: e, writableHighWaterMark: t.writableHighWaterMark || 0 }), nu.call(this, t), this._readableState.sync = false, this[wa] = null, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.on("prefinish", Ux);
    }
    function iu(t) {
      typeof this._flush == "function" && !this.destroyed ? this._flush((e, r) => {
        if (e) {
          t ? t(e) : this.destroy(e);
          return;
        }
        r != null && this.push(r), this.push(null), t && t();
      }) : (this.push(null), t && t());
    }
    function Ux() {
      this._final !== iu && iu.call(this);
    }
    mi.prototype._final = iu;
    mi.prototype._transform = function(t, e, r) {
      throw new Ox("_transform()");
    };
    mi.prototype._write = function(t, e, r) {
      let o2 = this._readableState, f2 = this._writableState, p = o2.length;
      this._transform(t, e, (m2, y3) => {
        if (m2) {
          r(m2);
          return;
        }
        y3 != null && this.push(y3), f2.ended || p === o2.length || o2.length < o2.highWaterMark ? r() : this[wa] = r;
      });
    };
    mi.prototype._read = function() {
      if (this[wa]) {
        let t = this[wa];
        this[wa] = null, t();
      }
    };
  });
  ou = T9((GI, Hv) => {
    var { ObjectSetPrototypeOf: zv } = Tt();
    Hv.exports = cf;
    var au = fu();
    zv(cf.prototype, au.prototype);
    zv(cf, au);
    function cf(t) {
      if (!(this instanceof cf))
        return new cf(t);
      au.call(this, t);
    }
    cf.prototype._transform = function(t, e, r) {
      r(null, t);
    };
  });
  os = T9((YI, Gv) => {
    var fs = (Oi(), ur(pr)), { ArrayIsArray: zx, Promise: Hx, SymbolAsyncIterator: Wx } = Tt(), as = Ui(), { once: Kx } = Gr(), jx = yn(), Wv = Qr(), { aggregateTwoErrors: Zx, codes: { ERR_INVALID_ARG_TYPE: Vv, ERR_INVALID_RETURN_VALUE: su, ERR_MISSING_ARGS: Vx, ERR_STREAM_DESTROYED: $x, ERR_STREAM_PREMATURE_CLOSE: Gx }, AbortError: Yx } = Jt(), { validateFunction: Xx, validateAbortSignal: Jx } = pa(), { isIterable: pf, isReadable: hu, isReadableNodeStream: du, isNodeStream: Kv } = Fi(), Qx = globalThis.AbortController || No().AbortController, uu, lu;
    function jv(t, e, r) {
      let o2 = false;
      t.on("close", () => {
        o2 = true;
      });
      let f2 = as(t, { readable: e, writable: r }, (p) => {
        o2 = !p;
      });
      return { destroy: (p) => {
        o2 || (o2 = true, jx.destroyer(t, p || new $x("pipe")));
      }, cleanup: f2 };
    }
    function e7(t) {
      return Xx(t[t.length - 1], "streams[stream.length - 1]"), t.pop();
    }
    function t7(t) {
      if (pf(t))
        return t;
      if (du(t))
        return r7(t);
      throw new Vv("val", ["Readable", "Iterable", "AsyncIterable"], t);
    }
    async function* r7(t) {
      lu || (lu = ba()), yield* lu.prototype[Wx].call(t);
    }
    async function Zv(t, e, r, { end: o2 }) {
      let f2, p = null, m2 = (x4) => {
        if (x4 && (f2 = x4), p) {
          let S3 = p;
          p = null, S3();
        }
      }, y3 = () => new Hx((x4, S3) => {
        f2 ? S3(f2) : p = () => {
          f2 ? S3(f2) : x4();
        };
      });
      e.on("drain", m2);
      let M2 = as(e, { readable: false }, m2);
      try {
        e.writableNeedDrain && await y3();
        for await (let x4 of t)
          e.write(x4) || await y3();
        o2 && e.end(), await y3(), r();
      } catch (x4) {
        r(f2 !== x4 ? Zx(f2, x4) : x4);
      } finally {
        M2(), e.off("drain", m2);
      }
    }
    function i7(...t) {
      return $v(t, Kx(e7(t)));
    }
    function $v(t, e, r) {
      if (t.length === 1 && zx(t[0]) && (t = t[0]), t.length < 2)
        throw new Vx("streams");
      let o2 = new Qx, f2 = o2.signal, p = r?.signal, m2 = [];
      Jx(p, "options.signal");
      function y3() {
        q(new Yx);
      }
      p?.addEventListener("abort", y3);
      let M2, x4, S3 = [], E3 = 0;
      function B2(N5) {
        q(N5, --E3 === 0);
      }
      function q(N5, we) {
        if (N5 && (!M2 || M2.code === "ERR_STREAM_PREMATURE_CLOSE") && (M2 = N5), !(!M2 && !we)) {
          for (;S3.length; )
            S3.shift()(M2);
          p?.removeEventListener("abort", y3), o2.abort(), we && (M2 || m2.forEach((ye) => ye()), fs.nextTick(e, M2, x4));
        }
      }
      let L3;
      for (let N5 = 0;N5 < t.length; N5++) {
        let we = t[N5], ye = N5 < t.length - 1, xe = N5 > 0, Re = ye || r?.end !== false, Ee = N5 === t.length - 1;
        if (Kv(we)) {
          let Ae = function(P4) {
            P4 && P4.name !== "AbortError" && P4.code !== "ERR_STREAM_PREMATURE_CLOSE" && B2(P4);
          };
          var _e = Ae;
          if (Re) {
            let { destroy: P4, cleanup: Se } = jv(we, ye, xe);
            S3.push(P4), hu(we) && Ee && m2.push(Se);
          }
          we.on("error", Ae), hu(we) && Ee && m2.push(() => {
            we.removeListener("error", Ae);
          });
        }
        if (N5 === 0)
          if (typeof we == "function") {
            if (L3 = we({ signal: f2 }), !pf(L3))
              throw new su("Iterable, AsyncIterable or Stream", "source", L3);
          } else
            pf(we) || du(we) ? L3 = we : L3 = Wv.from(we);
        else if (typeof we == "function")
          if (L3 = t7(L3), L3 = we(L3, { signal: f2 }), ye) {
            if (!pf(L3, true))
              throw new su("AsyncIterable", `transform[${N5 - 1}]`, L3);
          } else {
            var ge;
            uu || (uu = ou());
            let Ae = new uu({ objectMode: true }), P4 = (ge = L3) === null || ge === undefined ? undefined : ge.then;
            if (typeof P4 == "function")
              E3++, P4.call(L3, (i) => {
                x4 = i, i != null && Ae.write(i), Re && Ae.end(), fs.nextTick(B2);
              }, (i) => {
                Ae.destroy(i), fs.nextTick(B2, i);
              });
            else if (pf(L3, true))
              E3++, Zv(L3, Ae, B2, { end: Re });
            else
              throw new su("AsyncIterable or Promise", "destination", L3);
            L3 = Ae;
            let { destroy: Se, cleanup: v3 } = jv(L3, false, true);
            S3.push(Se), Ee && m2.push(v3);
          }
        else if (Kv(we)) {
          if (du(L3)) {
            E3 += 2;
            let Ae = n7(L3, we, B2, { end: Re });
            hu(we) && Ee && m2.push(Ae);
          } else if (pf(L3))
            E3++, Zv(L3, we, B2, { end: Re });
          else
            throw new Vv("val", ["Readable", "Iterable", "AsyncIterable"], L3);
          L3 = we;
        } else
          L3 = Wv.from(we);
      }
      return (f2 != null && f2.aborted || p != null && p.aborted) && fs.nextTick(y3), L3;
    }
    function n7(t, e, r, { end: o2 }) {
      let f2 = false;
      return e.on("close", () => {
        f2 || r(new Gx);
      }), t.pipe(e, { end: o2 }), o2 ? t.once("end", () => {
        f2 = true, e.end();
      }) : r(), as(t, { readable: true, writable: false }, (p) => {
        let m2 = t._readableState;
        p && p.code === "ERR_STREAM_PREMATURE_CLOSE" && m2 && m2.ended && !m2.errored && !m2.errorEmitted ? t.once("end", r).once("error", r) : r(p);
      }), as(e, { readable: false, writable: true }, r);
    }
    Gv.exports = { pipelineImpl: $v, pipeline: i7 };
  });
  eb = T9((XI, Qv) => {
    var { pipeline: f7 } = os(), ss = Qr(), { destroyer: a7 } = yn(), { isNodeStream: o7, isReadable: Yv, isWritable: Xv } = Fi(), { AbortError: s7, codes: { ERR_INVALID_ARG_VALUE: Jv, ERR_MISSING_ARGS: h7 } } = Jt();
    Qv.exports = function(...e) {
      if (e.length === 0)
        throw new h7("streams");
      if (e.length === 1)
        return ss.from(e[0]);
      let r = [...e];
      if (typeof e[0] == "function" && (e[0] = ss.from(e[0])), typeof e[e.length - 1] == "function") {
        let q = e.length - 1;
        e[q] = ss.from(e[q]);
      }
      for (let q = 0;q < e.length; ++q)
        if (!!o7(e[q])) {
          if (q < e.length - 1 && !Yv(e[q]))
            throw new Jv(`streams[${q}]`, r[q], "must be readable");
          if (q > 0 && !Xv(e[q]))
            throw new Jv(`streams[${q}]`, r[q], "must be writable");
        }
      let o2, f2, p, m2, y3;
      function M2(q) {
        let L3 = m2;
        m2 = null, L3 ? L3(q) : q ? y3.destroy(q) : !B2 && !E3 && y3.destroy();
      }
      let x4 = e[0], S3 = f7(e, M2), E3 = !!Xv(x4), B2 = !!Yv(S3);
      return y3 = new ss({ writableObjectMode: !!(x4 != null && x4.writableObjectMode), readableObjectMode: !!(S3 != null && S3.writableObjectMode), writable: E3, readable: B2 }), E3 && (y3._write = function(q, L3, ge) {
        x4.write(q, L3) ? ge() : o2 = ge;
      }, y3._final = function(q) {
        x4.end(), f2 = q;
      }, x4.on("drain", function() {
        if (o2) {
          let q = o2;
          o2 = null, q();
        }
      }), S3.on("finish", function() {
        if (f2) {
          let q = f2;
          f2 = null, q();
        }
      })), B2 && (S3.on("readable", function() {
        if (p) {
          let q = p;
          p = null, q();
        }
      }), S3.on("end", function() {
        y3.push(null);
      }), y3._read = function() {
        for (;; ) {
          let q = S3.read();
          if (q === null) {
            p = y3._read;
            return;
          }
          if (!y3.push(q))
            return;
        }
      }), y3._destroy = function(q, L3) {
        !q && m2 !== null && (q = new s7), p = null, o2 = null, f2 = null, m2 === null ? L3(q) : (m2 = L3, a7(S3, q));
      }, y3;
    };
  });
  cu = T9((JI, tb) => {
    var { ArrayPrototypePop: u7, Promise: l7 } = Tt(), { isIterable: d7, isNodeStream: c7 } = Fi(), { pipelineImpl: p7 } = os(), { finished: v7 } = Ui();
    function b7(...t) {
      return new l7((e, r) => {
        let o2, f2, p = t[t.length - 1];
        if (p && typeof p == "object" && !c7(p) && !d7(p)) {
          let m2 = u7(t);
          o2 = m2.signal, f2 = m2.end;
        }
        p7(t, (m2, y3) => {
          m2 ? r(m2) : e(y3);
        }, { signal: o2, end: f2 });
      });
    }
    tb.exports = { finished: v7, pipeline: b7 };
  });
  lb = T9((QI, ub) => {
    var { Buffer: m7 } = Ut(), { ObjectDefineProperty: gi, ObjectKeys: nb, ReflectApply: fb } = Tt(), { promisify: { custom: ab } } = Gr(), { streamReturningOperators: rb, promiseReturningOperators: ib } = k1(), { codes: { ERR_ILLEGAL_CONSTRUCTOR: ob } } = Jt(), g7 = eb(), { pipeline: sb } = os(), { destroyer: y7 } = yn(), hb = Ui(), pu = cu(), vu = Fi(), ct2 = ub.exports = Vo().Stream;
    ct2.isDisturbed = vu.isDisturbed;
    ct2.isErrored = vu.isErrored;
    ct2.isReadable = vu.isReadable;
    ct2.Readable = ba();
    for (let t of nb(rb)) {
      let r = function(...o2) {
        if (new.target)
          throw ob();
        return ct2.Readable.from(fb(e, this, o2));
      };
      M7 = r;
      let e = rb[t];
      gi(r, "name", { __proto__: null, value: e.name }), gi(r, "length", { __proto__: null, value: e.length }), gi(ct2.Readable.prototype, t, { __proto__: null, value: r, enumerable: false, configurable: true, writable: true });
    }
    var M7;
    for (let t of nb(ib)) {
      let r = function(...f2) {
        if (new.target)
          throw ob();
        return fb(e, this, f2);
      };
      M7 = r;
      let e = ib[t];
      gi(r, "name", { __proto__: null, value: e.name }), gi(r, "length", { __proto__: null, value: e.length }), gi(ct2.Readable.prototype, t, { __proto__: null, value: r, enumerable: false, configurable: true, writable: true });
    }
    var M7;
    ct2.Writable = Jh();
    ct2.Duplex = Qr();
    ct2.Transform = fu();
    ct2.PassThrough = ou();
    ct2.pipeline = sb;
    var { addAbortSignal: w7 } = Go();
    ct2.addAbortSignal = w7;
    ct2.finished = hb;
    ct2.destroy = y7;
    ct2.compose = g7;
    gi(ct2, "promises", { __proto__: null, configurable: true, enumerable: true, get() {
      return pu;
    } });
    gi(sb, ab, { __proto__: null, enumerable: true, get() {
      return pu.pipeline;
    } });
    gi(hb, ab, { __proto__: null, enumerable: true, get() {
      return pu.finished;
    } });
    ct2.Stream = ct2;
    ct2._isUint8Array = function(e) {
      return e instanceof Uint8Array;
    };
    ct2._uint8ArrayToBuffer = function(e) {
      return m7.from(e.buffer, e.byteOffset, e.byteLength);
    };
  });
  bu = T9((eT, pt2) => {
    var Lt = lb(), _7 = cu(), x7 = Lt.Readable.destroy;
    pt2.exports = Lt.Readable;
    pt2.exports._uint8ArrayToBuffer = Lt._uint8ArrayToBuffer;
    pt2.exports._isUint8Array = Lt._isUint8Array;
    pt2.exports.isDisturbed = Lt.isDisturbed;
    pt2.exports.isErrored = Lt.isErrored;
    pt2.exports.isReadable = Lt.isReadable;
    pt2.exports.Readable = Lt.Readable;
    pt2.exports.Writable = Lt.Writable;
    pt2.exports.Duplex = Lt.Duplex;
    pt2.exports.Transform = Lt.Transform;
    pt2.exports.PassThrough = Lt.PassThrough;
    pt2.exports.addAbortSignal = Lt.addAbortSignal;
    pt2.exports.finished = Lt.finished;
    pt2.exports.destroy = Lt.destroy;
    pt2.exports.destroy = x7;
    pt2.exports.pipeline = Lt.pipeline;
    pt2.exports.compose = Lt.compose;
    Object.defineProperty(Lt, "promises", { configurable: true, enumerable: true, get() {
      return _7;
    } });
    pt2.exports.Stream = Lt.Stream;
    pt2.exports.default = pt2.exports;
  });
  vf = {};
  Ja(vf, { default: () => S7 });
  db = R0(() => {
    ot2(vf, rn(bu()));
    S7 = rn(bu());
  });
  yi = T9((rT, vb) => {
    var cb = Te().Buffer, pb = (db(), ur(vf)).Transform, E7 = co().StringDecoder, A7 = Ie();
    function Lr(t) {
      pb.call(this), this.hashMode = typeof t == "string", this.hashMode ? this[t] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
    }
    A7(Lr, pb);
    Lr.prototype.update = function(t, e, r) {
      typeof t == "string" && (t = cb.from(t, e));
      var o2 = this._update(t);
      return this.hashMode ? this : (r && (o2 = this._toString(o2, r)), o2);
    };
    Lr.prototype.setAutoPadding = function() {
    };
    Lr.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    Lr.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    Lr.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    Lr.prototype._transform = function(t, e, r) {
      var o2;
      try {
        this.hashMode ? this._update(t) : this.push(this._update(t));
      } catch (f2) {
        o2 = f2;
      } finally {
        r(o2);
      }
    };
    Lr.prototype._flush = function(t) {
      var e;
      try {
        this.push(this.__final());
      } catch (r) {
        e = r;
      }
      t(e);
    };
    Lr.prototype._finalOrDigest = function(t) {
      var e = this.__final() || cb.alloc(0);
      return t && (e = this._toString(e, t, true)), e;
    };
    Lr.prototype._toString = function(t, e, r) {
      if (this._decoder || (this._decoder = new E7(e), this._encoding = e), this._encoding !== e)
        throw new Error("can't switch encodings");
      var o2 = this._decoder.write(t);
      return r && (o2 += this._decoder.end()), o2;
    };
    vb.exports = Lr;
  });
  bf = T9((iT, mb) => {
    var R7 = Ie(), B7 = Ao(), q7 = Bo(), I7 = ko(), bb = yi();
    function hs(t) {
      bb.call(this, "digest"), this._hash = t;
    }
    R7(hs, bb);
    hs.prototype._update = function(t) {
      this._hash.update(t);
    };
    hs.prototype._final = function() {
      return this._hash.digest();
    };
    mb.exports = function(e) {
      return e = e.toLowerCase(), e === "md5" ? new B7 : e === "rmd160" || e === "ripemd160" ? new q7 : new hs(I7(e));
    };
  });
  wb = T9((nT, yb) => {
    var T72 = Ie(), xn = Te().Buffer, gb = yi(), k7 = xn.alloc(128), mf = 64;
    function us(t, e) {
      gb.call(this, "digest"), typeof e == "string" && (e = xn.from(e)), this._alg = t, this._key = e, e.length > mf ? e = t(e) : e.length < mf && (e = xn.concat([e, k7], mf));
      for (var r = this._ipad = xn.allocUnsafe(mf), o2 = this._opad = xn.allocUnsafe(mf), f2 = 0;f2 < mf; f2++)
        r[f2] = e[f2] ^ 54, o2[f2] = e[f2] ^ 92;
      this._hash = [r];
    }
    T72(us, gb);
    us.prototype._update = function(t) {
      this._hash.push(t);
    };
    us.prototype._final = function() {
      var t = this._alg(xn.concat(this._hash));
      return this._alg(xn.concat([this._opad, t]));
    };
    yb.exports = us;
  });
  mu = T9((fT, Mb) => {
    var L7 = Ao();
    Mb.exports = function(t) {
      return new L7().update(t).digest();
    };
  });
  wu = T9((aT, xb) => {
    var N7 = Ie(), D7 = wb(), _b = yi(), Ma = Te().Buffer, P7 = mu(), gu = Bo(), yu = ko(), C7 = Ma.alloc(128);
    function _a(t, e) {
      _b.call(this, "digest"), typeof e == "string" && (e = Ma.from(e));
      var r = t === "sha512" || t === "sha384" ? 128 : 64;
      if (this._alg = t, this._key = e, e.length > r) {
        var o2 = t === "rmd160" ? new gu : yu(t);
        e = o2.update(e).digest();
      } else
        e.length < r && (e = Ma.concat([e, C7], r));
      for (var f2 = this._ipad = Ma.allocUnsafe(r), p = this._opad = Ma.allocUnsafe(r), m2 = 0;m2 < r; m2++)
        f2[m2] = e[m2] ^ 54, p[m2] = e[m2] ^ 92;
      this._hash = t === "rmd160" ? new gu : yu(t), this._hash.update(f2);
    }
    N7(_a, _b);
    _a.prototype._update = function(t) {
      this._hash.update(t);
    };
    _a.prototype._final = function() {
      var t = this._hash.digest(), e = this._alg === "rmd160" ? new gu : yu(this._alg);
      return e.update(this._opad).update(t).digest();
    };
    xb.exports = function(e, r) {
      return e = e.toLowerCase(), e === "rmd160" || e === "ripemd160" ? new _a("rmd160", r) : e === "md5" ? new D7(P7, r) : new _a(e, r);
    };
  });
  Mu = T9((oT, O7) => {
    O7.exports = { sha224WithRSAEncryption: { sign: "rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, "RSA-SHA224": { sign: "ecdsa/rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, sha256WithRSAEncryption: { sign: "rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, "RSA-SHA256": { sign: "ecdsa/rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, sha384WithRSAEncryption: { sign: "rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, "RSA-SHA384": { sign: "ecdsa/rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, sha512WithRSAEncryption: { sign: "rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA512": { sign: "ecdsa/rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA1": { sign: "rsa", hash: "sha1", id: "3021300906052b0e03021a05000414" }, "ecdsa-with-SHA1": { sign: "ecdsa", hash: "sha1", id: "" }, sha256: { sign: "ecdsa", hash: "sha256", id: "" }, sha224: { sign: "ecdsa", hash: "sha224", id: "" }, sha384: { sign: "ecdsa", hash: "sha384", id: "" }, sha512: { sign: "ecdsa", hash: "sha512", id: "" }, "DSA-SHA": { sign: "dsa", hash: "sha1", id: "" }, "DSA-SHA1": { sign: "dsa", hash: "sha1", id: "" }, DSA: { sign: "dsa", hash: "sha1", id: "" }, "DSA-WITH-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-WITH-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-WITH-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-WITH-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-RIPEMD160": { sign: "dsa", hash: "rmd160", id: "" }, ripemd160WithRSA: { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, "RSA-RIPEMD160": { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, md5WithRSAEncryption: { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" }, "RSA-MD5": { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" } };
  });
  Eb = T9((sT, Sb) => {
    Sb.exports = Mu();
  });
  _u = T9((hT, Ab) => {
    var F7 = Math.pow(2, 30) - 1;
    Ab.exports = function(t, e) {
      if (typeof t != "number")
        throw new TypeError("Iterations not a number");
      if (t < 0)
        throw new TypeError("Bad iterations");
      if (typeof e != "number")
        throw new TypeError("Key length not a number");
      if (e < 0 || e > F7 || e !== e)
        throw new TypeError("Bad key length");
    };
  });
  xu = T9((uT, Bb) => {
    var ls;
    global.process && global.process.browser ? ls = "utf-8" : global.process && global.process.version ? (Rb = parseInt(process.version.split(".")[0].slice(1), 10), ls = Rb >= 6 ? "utf-8" : "binary") : ls = "utf-8";
    var Rb;
    Bb.exports = ls;
  });
  Eu = T9((lT, qb) => {
    var Su = Te().Buffer;
    qb.exports = function(t, e, r) {
      if (Su.isBuffer(t))
        return t;
      if (typeof t == "string")
        return Su.from(t, e);
      if (ArrayBuffer.isView(t))
        return Su.from(t.buffer);
      throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView");
    };
  });
  Au = T9((dT, Lb) => {
    var U7 = mu(), z7 = Bo(), H7 = ko(), Sn = Te().Buffer, W7 = _u(), Ib = xu(), Tb = Eu(), K7 = Sn.alloc(128), ds = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, rmd160: 20, ripemd160: 20 };
    function kb(t, e, r) {
      var o2 = j7(t), f2 = t === "sha512" || t === "sha384" ? 128 : 64;
      e.length > f2 ? e = o2(e) : e.length < f2 && (e = Sn.concat([e, K7], f2));
      for (var p = Sn.allocUnsafe(f2 + ds[t]), m2 = Sn.allocUnsafe(f2 + ds[t]), y3 = 0;y3 < f2; y3++)
        p[y3] = e[y3] ^ 54, m2[y3] = e[y3] ^ 92;
      var M2 = Sn.allocUnsafe(f2 + r + 4);
      p.copy(M2, 0, 0, f2), this.ipad1 = M2, this.ipad2 = p, this.opad = m2, this.alg = t, this.blocksize = f2, this.hash = o2, this.size = ds[t];
    }
    kb.prototype.run = function(t, e) {
      t.copy(e, this.blocksize);
      var r = this.hash(e);
      return r.copy(this.opad, this.blocksize), this.hash(this.opad);
    };
    function j7(t) {
      function e(o2) {
        return H7(t).update(o2).digest();
      }
      function r(o2) {
        return new z7().update(o2).digest();
      }
      return t === "rmd160" || t === "ripemd160" ? r : t === "md5" ? U7 : e;
    }
    function Z7(t, e, r, o2, f2) {
      W7(r, o2), t = Tb(t, Ib, "Password"), e = Tb(e, Ib, "Salt"), f2 = f2 || "sha1";
      var p = new kb(f2, t, e.length), m2 = Sn.allocUnsafe(o2), y3 = Sn.allocUnsafe(e.length + 4);
      e.copy(y3, 0, 0, e.length);
      for (var M2 = 0, x4 = ds[f2], S3 = Math.ceil(o2 / x4), E3 = 1;E3 <= S3; E3++) {
        y3.writeUInt32BE(E3, e.length);
        for (var B2 = p.run(y3, p.ipad1), q = B2, L3 = 1;L3 < r; L3++) {
          q = p.run(q, p.ipad2);
          for (var ge = 0;ge < x4; ge++)
            B2[ge] ^= q[ge];
        }
        B2.copy(m2, M2), M2 += x4;
      }
      return m2;
    }
    Lb.exports = Z7;
  });
  Ub = T9((cT, Fb) => {
    var Cb = Te().Buffer, V7 = _u(), Nb = xu(), Db = Au(), Pb = Eu(), cs, xa = global.crypto && global.crypto.subtle, $7 = { sha: "SHA-1", "sha-1": "SHA-1", sha1: "SHA-1", sha256: "SHA-256", "sha-256": "SHA-256", sha384: "SHA-384", "sha-384": "SHA-384", "sha-512": "SHA-512", sha512: "SHA-512" }, Ru = [];
    function G7(t) {
      if (global.process && !global.process.browser || !xa || !xa.importKey || !xa.deriveBits)
        return Promise.resolve(false);
      if (Ru[t] !== undefined)
        return Ru[t];
      cs = cs || Cb.alloc(8);
      var e = Ob(cs, cs, 10, 128, t).then(function() {
        return true;
      }).catch(function() {
        return false;
      });
      return Ru[t] = e, e;
    }
    var En;
    function Bu() {
      return En || (global.process && global.process.nextTick ? En = global.process.nextTick : global.queueMicrotask ? En = global.queueMicrotask : global.setImmediate ? En = global.setImmediate : En = global.setTimeout, En);
    }
    function Ob(t, e, r, o2, f2) {
      return xa.importKey("raw", t, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(p) {
        return xa.deriveBits({ name: "PBKDF2", salt: e, iterations: r, hash: { name: f2 } }, p, o2 << 3);
      }).then(function(p) {
        return Cb.from(p);
      });
    }
    function Y7(t, e) {
      t.then(function(r) {
        Bu()(function() {
          e(null, r);
        });
      }, function(r) {
        Bu()(function() {
          e(r);
        });
      });
    }
    Fb.exports = function(t, e, r, o2, f2, p) {
      typeof f2 == "function" && (p = f2, f2 = undefined), f2 = f2 || "sha1";
      var m2 = $7[f2.toLowerCase()];
      if (!m2 || typeof global.Promise != "function") {
        Bu()(function() {
          var y3;
          try {
            y3 = Db(t, e, r, o2, f2);
          } catch (M2) {
            return p(M2);
          }
          p(null, y3);
        });
        return;
      }
      if (V7(r, o2), t = Pb(t, Nb, "Password"), e = Pb(e, Nb, "Salt"), typeof p != "function")
        throw new Error("No callback provided to pbkdf2");
      Y7(G7(m2).then(function(y3) {
        return y3 ? Ob(t, e, r, o2, m2) : Db(t, e, r, o2, f2);
      }), p);
    };
  });
  Iu = T9((qu) => {
    qu.pbkdf2 = Ub();
    qu.pbkdf2Sync = Au();
  });
  Tu = T9((br) => {
    br.readUInt32BE = function(e, r) {
      var o2 = e[0 + r] << 24 | e[1 + r] << 16 | e[2 + r] << 8 | e[3 + r];
      return o2 >>> 0;
    };
    br.writeUInt32BE = function(e, r, o2) {
      e[0 + o2] = r >>> 24, e[1 + o2] = r >>> 16 & 255, e[2 + o2] = r >>> 8 & 255, e[3 + o2] = r & 255;
    };
    br.ip = function(e, r, o2, f2) {
      for (var p = 0, m2 = 0, y3 = 6;y3 >= 0; y3 -= 2) {
        for (var M2 = 0;M2 <= 24; M2 += 8)
          p <<= 1, p |= r >>> M2 + y3 & 1;
        for (var M2 = 0;M2 <= 24; M2 += 8)
          p <<= 1, p |= e >>> M2 + y3 & 1;
      }
      for (var y3 = 6;y3 >= 0; y3 -= 2) {
        for (var M2 = 1;M2 <= 25; M2 += 8)
          m2 <<= 1, m2 |= r >>> M2 + y3 & 1;
        for (var M2 = 1;M2 <= 25; M2 += 8)
          m2 <<= 1, m2 |= e >>> M2 + y3 & 1;
      }
      o2[f2 + 0] = p >>> 0, o2[f2 + 1] = m2 >>> 0;
    };
    br.rip = function(e, r, o2, f2) {
      for (var p = 0, m2 = 0, y3 = 0;y3 < 4; y3++)
        for (var M2 = 24;M2 >= 0; M2 -= 8)
          p <<= 1, p |= r >>> M2 + y3 & 1, p <<= 1, p |= e >>> M2 + y3 & 1;
      for (var y3 = 4;y3 < 8; y3++)
        for (var M2 = 24;M2 >= 0; M2 -= 8)
          m2 <<= 1, m2 |= r >>> M2 + y3 & 1, m2 <<= 1, m2 |= e >>> M2 + y3 & 1;
      o2[f2 + 0] = p >>> 0, o2[f2 + 1] = m2 >>> 0;
    };
    br.pc1 = function(e, r, o2, f2) {
      for (var p = 0, m2 = 0, y3 = 7;y3 >= 5; y3--) {
        for (var M2 = 0;M2 <= 24; M2 += 8)
          p <<= 1, p |= r >> M2 + y3 & 1;
        for (var M2 = 0;M2 <= 24; M2 += 8)
          p <<= 1, p |= e >> M2 + y3 & 1;
      }
      for (var M2 = 0;M2 <= 24; M2 += 8)
        p <<= 1, p |= r >> M2 + y3 & 1;
      for (var y3 = 1;y3 <= 3; y3++) {
        for (var M2 = 0;M2 <= 24; M2 += 8)
          m2 <<= 1, m2 |= r >> M2 + y3 & 1;
        for (var M2 = 0;M2 <= 24; M2 += 8)
          m2 <<= 1, m2 |= e >> M2 + y3 & 1;
      }
      for (var M2 = 0;M2 <= 24; M2 += 8)
        m2 <<= 1, m2 |= e >> M2 + y3 & 1;
      o2[f2 + 0] = p >>> 0, o2[f2 + 1] = m2 >>> 0;
    };
    br.r28shl = function(e, r) {
      return e << r & 268435455 | e >>> 28 - r;
    };
    var ps = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
    br.pc2 = function(e, r, o2, f2) {
      for (var p = 0, m2 = 0, y3 = ps.length >>> 1, M2 = 0;M2 < y3; M2++)
        p <<= 1, p |= e >>> ps[M2] & 1;
      for (var M2 = y3;M2 < ps.length; M2++)
        m2 <<= 1, m2 |= r >>> ps[M2] & 1;
      o2[f2 + 0] = p >>> 0, o2[f2 + 1] = m2 >>> 0;
    };
    br.expand = function(e, r, o2) {
      var f2 = 0, p = 0;
      f2 = (e & 1) << 5 | e >>> 27;
      for (var m2 = 23;m2 >= 15; m2 -= 4)
        f2 <<= 6, f2 |= e >>> m2 & 63;
      for (var m2 = 11;m2 >= 3; m2 -= 4)
        p |= e >>> m2 & 63, p <<= 6;
      p |= (e & 31) << 1 | e >>> 31, r[o2 + 0] = f2 >>> 0, r[o2 + 1] = p >>> 0;
    };
    var zb = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
    br.substitute = function(e, r) {
      for (var o2 = 0, f2 = 0;f2 < 4; f2++) {
        var p = e >>> 18 - f2 * 6 & 63, m2 = zb[f2 * 64 + p];
        o2 <<= 4, o2 |= m2;
      }
      for (var f2 = 0;f2 < 4; f2++) {
        var p = r >>> 18 - f2 * 6 & 63, m2 = zb[4 * 64 + f2 * 64 + p];
        o2 <<= 4, o2 |= m2;
      }
      return o2 >>> 0;
    };
    var Hb = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
    br.permute = function(e) {
      for (var r = 0, o2 = 0;o2 < Hb.length; o2++)
        r <<= 1, r |= e >>> Hb[o2] & 1;
      return r >>> 0;
    };
    br.padSplit = function(e, r, o2) {
      for (var f2 = e.toString(2);f2.length < r; )
        f2 = "0" + f2;
      for (var p = [], m2 = 0;m2 < r; m2 += o2)
        p.push(f2.slice(m2, m2 + o2));
      return p.join(" ");
    };
  });
  ar = T9((bT, Kb) => {
    Kb.exports = Wb;
    function Wb(t, e) {
      if (!t)
        throw new Error(e || "Assertion failed");
    }
    Wb.equal = function(e, r, o2) {
      if (e != r)
        throw new Error(o2 || "Assertion failed: " + e + " != " + r);
    };
  });
  vs = T9((mT, jb) => {
    var X7 = ar();
    function mr2(t) {
      this.options = t, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
    }
    jb.exports = mr2;
    mr2.prototype._init = function() {
    };
    mr2.prototype.update = function(e) {
      return e.length === 0 ? [] : this.type === "decrypt" ? this._updateDecrypt(e) : this._updateEncrypt(e);
    };
    mr2.prototype._buffer = function(e, r) {
      for (var o2 = Math.min(this.buffer.length - this.bufferOff, e.length - r), f2 = 0;f2 < o2; f2++)
        this.buffer[this.bufferOff + f2] = e[r + f2];
      return this.bufferOff += o2, o2;
    };
    mr2.prototype._flushBuffer = function(e, r) {
      return this._update(this.buffer, 0, e, r), this.bufferOff = 0, this.blockSize;
    };
    mr2.prototype._updateEncrypt = function(e) {
      var r = 0, o2 = 0, f2 = (this.bufferOff + e.length) / this.blockSize | 0, p = new Array(f2 * this.blockSize);
      this.bufferOff !== 0 && (r += this._buffer(e, r), this.bufferOff === this.buffer.length && (o2 += this._flushBuffer(p, o2)));
      for (var m2 = e.length - (e.length - r) % this.blockSize;r < m2; r += this.blockSize)
        this._update(e, r, p, o2), o2 += this.blockSize;
      for (;r < e.length; r++, this.bufferOff++)
        this.buffer[this.bufferOff] = e[r];
      return p;
    };
    mr2.prototype._updateDecrypt = function(e) {
      for (var r = 0, o2 = 0, f2 = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, p = new Array(f2 * this.blockSize);f2 > 0; f2--)
        r += this._buffer(e, r), o2 += this._flushBuffer(p, o2);
      return r += this._buffer(e, r), p;
    };
    mr2.prototype.final = function(e) {
      var r;
      e && (r = this.update(e));
      var o2;
      return this.type === "encrypt" ? o2 = this._finalEncrypt() : o2 = this._finalDecrypt(), r ? r.concat(o2) : o2;
    };
    mr2.prototype._pad = function(e, r) {
      if (r === 0)
        return false;
      for (;r < e.length; )
        e[r++] = 0;
      return true;
    };
    mr2.prototype._finalEncrypt = function() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var e = new Array(this.blockSize);
      return this._update(this.buffer, 0, e, 0), e;
    };
    mr2.prototype._unpad = function(e) {
      return e;
    };
    mr2.prototype._finalDecrypt = function() {
      X7.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var e = new Array(this.blockSize);
      return this._flushBuffer(e, 0), this._unpad(e);
    };
  });
  ku = T9((gT, $b) => {
    var Zb = ar(), J7 = Ie(), Nt = Tu(), Vb = vs();
    function Q7() {
      this.tmp = new Array(2), this.keys = null;
    }
    function ei(t) {
      Vb.call(this, t);
      var e = new Q7;
      this._desState = e, this.deriveKeys(e, t.key);
    }
    J7(ei, Vb);
    $b.exports = ei;
    ei.create = function(e) {
      return new ei(e);
    };
    var e9 = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
    ei.prototype.deriveKeys = function(e, r) {
      e.keys = new Array(16 * 2), Zb.equal(r.length, this.blockSize, "Invalid key length");
      var o2 = Nt.readUInt32BE(r, 0), f2 = Nt.readUInt32BE(r, 4);
      Nt.pc1(o2, f2, e.tmp, 0), o2 = e.tmp[0], f2 = e.tmp[1];
      for (var p = 0;p < e.keys.length; p += 2) {
        var m2 = e9[p >>> 1];
        o2 = Nt.r28shl(o2, m2), f2 = Nt.r28shl(f2, m2), Nt.pc2(o2, f2, e.keys, p);
      }
    };
    ei.prototype._update = function(e, r, o2, f2) {
      var p = this._desState, m2 = Nt.readUInt32BE(e, r), y3 = Nt.readUInt32BE(e, r + 4);
      Nt.ip(m2, y3, p.tmp, 0), m2 = p.tmp[0], y3 = p.tmp[1], this.type === "encrypt" ? this._encrypt(p, m2, y3, p.tmp, 0) : this._decrypt(p, m2, y3, p.tmp, 0), m2 = p.tmp[0], y3 = p.tmp[1], Nt.writeUInt32BE(o2, m2, f2), Nt.writeUInt32BE(o2, y3, f2 + 4);
    };
    ei.prototype._pad = function(e, r) {
      for (var o2 = e.length - r, f2 = r;f2 < e.length; f2++)
        e[f2] = o2;
      return true;
    };
    ei.prototype._unpad = function(e) {
      for (var r = e[e.length - 1], o2 = e.length - r;o2 < e.length; o2++)
        Zb.equal(e[o2], r);
      return e.slice(0, e.length - r);
    };
    ei.prototype._encrypt = function(e, r, o2, f2, p) {
      for (var m2 = r, y3 = o2, M2 = 0;M2 < e.keys.length; M2 += 2) {
        var x4 = e.keys[M2], S3 = e.keys[M2 + 1];
        Nt.expand(y3, e.tmp, 0), x4 ^= e.tmp[0], S3 ^= e.tmp[1];
        var E3 = Nt.substitute(x4, S3), B2 = Nt.permute(E3), q = y3;
        y3 = (m2 ^ B2) >>> 0, m2 = q;
      }
      Nt.rip(y3, m2, f2, p);
    };
    ei.prototype._decrypt = function(e, r, o2, f2, p) {
      for (var m2 = o2, y3 = r, M2 = e.keys.length - 2;M2 >= 0; M2 -= 2) {
        var x4 = e.keys[M2], S3 = e.keys[M2 + 1];
        Nt.expand(m2, e.tmp, 0), x4 ^= e.tmp[0], S3 ^= e.tmp[1];
        var E3 = Nt.substitute(x4, S3), B2 = Nt.permute(E3), q = m2;
        m2 = (y3 ^ B2) >>> 0, y3 = q;
      }
      Nt.rip(m2, y3, f2, p);
    };
  });
  Yb = T9((Gb) => {
    var t9 = ar(), r9 = Ie(), bs = {};
    function i9(t) {
      t9.equal(t.length, 8, "Invalid IV length"), this.iv = new Array(8);
      for (var e = 0;e < this.iv.length; e++)
        this.iv[e] = t[e];
    }
    function n9(t) {
      function e(p) {
        t.call(this, p), this._cbcInit();
      }
      r9(e, t);
      for (var r = Object.keys(bs), o2 = 0;o2 < r.length; o2++) {
        var f2 = r[o2];
        e.prototype[f2] = bs[f2];
      }
      return e.create = function(m2) {
        return new e(m2);
      }, e;
    }
    Gb.instantiate = n9;
    bs._cbcInit = function() {
      var e = new i9(this.options.iv);
      this._cbcState = e;
    };
    bs._update = function(e, r, o2, f2) {
      var p = this._cbcState, m2 = this.constructor.super_.prototype, y3 = p.iv;
      if (this.type === "encrypt") {
        for (var M2 = 0;M2 < this.blockSize; M2++)
          y3[M2] ^= e[r + M2];
        m2._update.call(this, y3, 0, o2, f2);
        for (var M2 = 0;M2 < this.blockSize; M2++)
          y3[M2] = o2[f2 + M2];
      } else {
        m2._update.call(this, e, r, o2, f2);
        for (var M2 = 0;M2 < this.blockSize; M2++)
          o2[f2 + M2] ^= y3[M2];
        for (var M2 = 0;M2 < this.blockSize; M2++)
          y3[M2] = e[r + M2];
      }
    };
  });
  Qb = T9((wT, Jb) => {
    var f9 = ar(), a9 = Ie(), Xb = vs(), Wi = ku();
    function o9(t, e) {
      f9.equal(e.length, 24, "Invalid key length");
      var r = e.slice(0, 8), o2 = e.slice(8, 16), f2 = e.slice(16, 24);
      t === "encrypt" ? this.ciphers = [Wi.create({ type: "encrypt", key: r }), Wi.create({ type: "decrypt", key: o2 }), Wi.create({ type: "encrypt", key: f2 })] : this.ciphers = [Wi.create({ type: "decrypt", key: f2 }), Wi.create({ type: "encrypt", key: o2 }), Wi.create({ type: "decrypt", key: r })];
    }
    function An(t) {
      Xb.call(this, t);
      var e = new o9(this.type, this.options.key);
      this._edeState = e;
    }
    a9(An, Xb);
    Jb.exports = An;
    An.create = function(e) {
      return new An(e);
    };
    An.prototype._update = function(e, r, o2, f2) {
      var p = this._edeState;
      p.ciphers[0]._update(e, r, o2, f2), p.ciphers[1]._update(o2, f2, o2, f2), p.ciphers[2]._update(o2, f2, o2, f2);
    };
    An.prototype._pad = Wi.prototype._pad;
    An.prototype._unpad = Wi.prototype._unpad;
  });
  em = T9((gf) => {
    gf.utils = Tu();
    gf.Cipher = vs();
    gf.DES = ku();
    gf.CBC = Yb();
    gf.EDE = Qb();
  });
  im = T9((_T, rm) => {
    var tm = yi(), wi = em(), s9 = Ie(), Rn = Te().Buffer, Sa = { "des-ede3-cbc": wi.CBC.instantiate(wi.EDE), "des-ede3": wi.EDE, "des-ede-cbc": wi.CBC.instantiate(wi.EDE), "des-ede": wi.EDE, "des-cbc": wi.CBC.instantiate(wi.DES), "des-ecb": wi.DES };
    Sa.des = Sa["des-cbc"];
    Sa.des3 = Sa["des-ede3-cbc"];
    rm.exports = ms;
    s9(ms, tm);
    function ms(t) {
      tm.call(this);
      var e = t.mode.toLowerCase(), r = Sa[e], o2;
      t.decrypt ? o2 = "decrypt" : o2 = "encrypt";
      var f2 = t.key;
      Rn.isBuffer(f2) || (f2 = Rn.from(f2)), (e === "des-ede" || e === "des-ede-cbc") && (f2 = Rn.concat([f2, f2.slice(0, 8)]));
      var p = t.iv;
      Rn.isBuffer(p) || (p = Rn.from(p)), this._des = r.create({ key: f2, iv: p, type: o2 });
    }
    ms.prototype._update = function(t) {
      return Rn.from(this._des.update(t));
    };
    ms.prototype._final = function() {
      return Rn.from(this._des.final());
    };
  });
  nm = T9((Lu) => {
    Lu.encrypt = function(t, e) {
      return t._cipher.encryptBlock(e);
    };
    Lu.decrypt = function(t, e) {
      return t._cipher.decryptBlock(e);
    };
  });
  yf = T9((ST, fm) => {
    fm.exports = function(e, r) {
      for (var o2 = Math.min(e.length, r.length), f2 = new Buffer(o2), p = 0;p < o2; ++p)
        f2[p] = e[p] ^ r[p];
      return f2;
    };
  });
  om = T9((Nu) => {
    var am = yf();
    Nu.encrypt = function(t, e) {
      var r = am(e, t._prev);
      return t._prev = t._cipher.encryptBlock(r), t._prev;
    };
    Nu.decrypt = function(t, e) {
      var r = t._prev;
      t._prev = e;
      var o2 = t._cipher.decryptBlock(e);
      return am(o2, r);
    };
  });
  um = T9((hm) => {
    var Ea = Te().Buffer, h9 = yf();
    function sm(t, e, r) {
      var o2 = e.length, f2 = h9(e, t._cache);
      return t._cache = t._cache.slice(o2), t._prev = Ea.concat([t._prev, r ? e : f2]), f2;
    }
    hm.encrypt = function(t, e, r) {
      for (var o2 = Ea.allocUnsafe(0), f2;e.length; )
        if (t._cache.length === 0 && (t._cache = t._cipher.encryptBlock(t._prev), t._prev = Ea.allocUnsafe(0)), t._cache.length <= e.length)
          f2 = t._cache.length, o2 = Ea.concat([o2, sm(t, e.slice(0, f2), r)]), e = e.slice(f2);
        else {
          o2 = Ea.concat([o2, sm(t, e, r)]);
          break;
        }
      return o2;
    };
  });
  dm = T9((lm) => {
    var Du = Te().Buffer;
    function u9(t, e, r) {
      var o2 = t._cipher.encryptBlock(t._prev), f2 = o2[0] ^ e;
      return t._prev = Du.concat([t._prev.slice(1), Du.from([r ? e : f2])]), f2;
    }
    lm.encrypt = function(t, e, r) {
      for (var o2 = e.length, f2 = Du.allocUnsafe(o2), p = -1;++p < o2; )
        f2[p] = u9(t, e[p], r);
      return f2;
    };
  });
  pm = T9((cm) => {
    var gs = Te().Buffer;
    function l9(t, e, r) {
      for (var o2, f2 = -1, p = 8, m2 = 0, y3, M2;++f2 < p; )
        o2 = t._cipher.encryptBlock(t._prev), y3 = e & 1 << 7 - f2 ? 128 : 0, M2 = o2[0] ^ y3, m2 += (M2 & 128) >> f2 % 8, t._prev = d9(t._prev, r ? y3 : M2);
      return m2;
    }
    function d9(t, e) {
      var r = t.length, o2 = -1, f2 = gs.allocUnsafe(t.length);
      for (t = gs.concat([t, gs.from([e])]);++o2 < r; )
        f2[o2] = t[o2] << 1 | t[o2 + 1] >> 7;
      return f2;
    }
    cm.encrypt = function(t, e, r) {
      for (var o2 = e.length, f2 = gs.allocUnsafe(o2), p = -1;++p < o2; )
        f2[p] = l9(t, e[p], r);
      return f2;
    };
  });
  bm = T9((vm) => {
    var c9 = yf();
    function p9(t) {
      return t._prev = t._cipher.encryptBlock(t._prev), t._prev;
    }
    vm.encrypt = function(t, e) {
      for (;t._cache.length < e.length; )
        t._cache = Buffer.concat([t._cache, p9(t)]);
      var r = t._cache.slice(0, e.length);
      return t._cache = t._cache.slice(e.length), c9(e, r);
    };
  });
  Pu = T9((IT, mm) => {
    function v9(t) {
      for (var e = t.length, r;e--; )
        if (r = t.readUInt8(e), r === 255)
          t.writeUInt8(0, e);
        else {
          r++, t.writeUInt8(r, e);
          break;
        }
    }
    mm.exports = v9;
  });
  Ou = T9((ym) => {
    var b9 = yf(), gm = Te().Buffer, m9 = Pu();
    function g9(t) {
      var e = t._cipher.encryptBlockRaw(t._prev);
      return m9(t._prev), e;
    }
    var Cu = 16;
    ym.encrypt = function(t, e) {
      var r = Math.ceil(e.length / Cu), o2 = t._cache.length;
      t._cache = gm.concat([t._cache, gm.allocUnsafe(r * Cu)]);
      for (var f2 = 0;f2 < r; f2++) {
        var p = g9(t), m2 = o2 + f2 * Cu;
        t._cache.writeUInt32BE(p[0], m2 + 0), t._cache.writeUInt32BE(p[1], m2 + 4), t._cache.writeUInt32BE(p[2], m2 + 8), t._cache.writeUInt32BE(p[3], m2 + 12);
      }
      var y3 = t._cache.slice(0, e.length);
      return t._cache = t._cache.slice(e.length), b9(e, y3);
    };
  });
  Fu = T9((kT, y9) => {
    y9.exports = { "aes-128-ecb": { cipher: "AES", key: 128, iv: 0, mode: "ECB", type: "block" }, "aes-192-ecb": { cipher: "AES", key: 192, iv: 0, mode: "ECB", type: "block" }, "aes-256-ecb": { cipher: "AES", key: 256, iv: 0, mode: "ECB", type: "block" }, "aes-128-cbc": { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, "aes-192-cbc": { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, "aes-256-cbc": { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, aes128: { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, aes192: { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, aes256: { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, "aes-128-cfb": { cipher: "AES", key: 128, iv: 16, mode: "CFB", type: "stream" }, "aes-192-cfb": { cipher: "AES", key: 192, iv: 16, mode: "CFB", type: "stream" }, "aes-256-cfb": { cipher: "AES", key: 256, iv: 16, mode: "CFB", type: "stream" }, "aes-128-cfb8": { cipher: "AES", key: 128, iv: 16, mode: "CFB8", type: "stream" }, "aes-192-cfb8": { cipher: "AES", key: 192, iv: 16, mode: "CFB8", type: "stream" }, "aes-256-cfb8": { cipher: "AES", key: 256, iv: 16, mode: "CFB8", type: "stream" }, "aes-128-cfb1": { cipher: "AES", key: 128, iv: 16, mode: "CFB1", type: "stream" }, "aes-192-cfb1": { cipher: "AES", key: 192, iv: 16, mode: "CFB1", type: "stream" }, "aes-256-cfb1": { cipher: "AES", key: 256, iv: 16, mode: "CFB1", type: "stream" }, "aes-128-ofb": { cipher: "AES", key: 128, iv: 16, mode: "OFB", type: "stream" }, "aes-192-ofb": { cipher: "AES", key: 192, iv: 16, mode: "OFB", type: "stream" }, "aes-256-ofb": { cipher: "AES", key: 256, iv: 16, mode: "OFB", type: "stream" }, "aes-128-ctr": { cipher: "AES", key: 128, iv: 16, mode: "CTR", type: "stream" }, "aes-192-ctr": { cipher: "AES", key: 192, iv: 16, mode: "CTR", type: "stream" }, "aes-256-ctr": { cipher: "AES", key: 256, iv: 16, mode: "CTR", type: "stream" }, "aes-128-gcm": { cipher: "AES", key: 128, iv: 12, mode: "GCM", type: "auth" }, "aes-192-gcm": { cipher: "AES", key: 192, iv: 12, mode: "GCM", type: "auth" }, "aes-256-gcm": { cipher: "AES", key: 256, iv: 12, mode: "GCM", type: "auth" } };
  });
  ws = T9((LT, wm) => {
    var w9 = { ECB: nm(), CBC: om(), CFB: um(), CFB8: dm(), CFB1: pm(), OFB: bm(), CTR: Ou(), GCM: Ou() }, ys = Fu();
    for (Uu in ys)
      ys[Uu].module = w9[ys[Uu].mode];
    var Uu;
    wm.exports = ys;
  });
  Aa = T9((NT, _m) => {
    var Ms = Te().Buffer;
    function Hu(t) {
      Ms.isBuffer(t) || (t = Ms.from(t));
      for (var e = t.length / 4 | 0, r = new Array(e), o2 = 0;o2 < e; o2++)
        r[o2] = t.readUInt32BE(o2 * 4);
      return r;
    }
    function zu(t) {
      for (var e = 0;e < t.length; t++)
        t[e] = 0;
    }
    function Mm(t, e, r, o2, f2) {
      for (var p = r[0], m2 = r[1], y3 = r[2], M2 = r[3], x4 = t[0] ^ e[0], S3 = t[1] ^ e[1], E3 = t[2] ^ e[2], B2 = t[3] ^ e[3], q, L3, ge, _e, N5 = 4, we = 1;we < f2; we++)
        q = p[x4 >>> 24] ^ m2[S3 >>> 16 & 255] ^ y3[E3 >>> 8 & 255] ^ M2[B2 & 255] ^ e[N5++], L3 = p[S3 >>> 24] ^ m2[E3 >>> 16 & 255] ^ y3[B2 >>> 8 & 255] ^ M2[x4 & 255] ^ e[N5++], ge = p[E3 >>> 24] ^ m2[B2 >>> 16 & 255] ^ y3[x4 >>> 8 & 255] ^ M2[S3 & 255] ^ e[N5++], _e = p[B2 >>> 24] ^ m2[x4 >>> 16 & 255] ^ y3[S3 >>> 8 & 255] ^ M2[E3 & 255] ^ e[N5++], x4 = q, S3 = L3, E3 = ge, B2 = _e;
      return q = (o2[x4 >>> 24] << 24 | o2[S3 >>> 16 & 255] << 16 | o2[E3 >>> 8 & 255] << 8 | o2[B2 & 255]) ^ e[N5++], L3 = (o2[S3 >>> 24] << 24 | o2[E3 >>> 16 & 255] << 16 | o2[B2 >>> 8 & 255] << 8 | o2[x4 & 255]) ^ e[N5++], ge = (o2[E3 >>> 24] << 24 | o2[B2 >>> 16 & 255] << 16 | o2[x4 >>> 8 & 255] << 8 | o2[S3 & 255]) ^ e[N5++], _e = (o2[B2 >>> 24] << 24 | o2[x4 >>> 16 & 255] << 16 | o2[S3 >>> 8 & 255] << 8 | o2[E3 & 255]) ^ e[N5++], q = q >>> 0, L3 = L3 >>> 0, ge = ge >>> 0, _e = _e >>> 0, [q, L3, ge, _e];
    }
    var M9 = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], kt = function() {
      for (var t = new Array(256), e = 0;e < 256; e++)
        e < 128 ? t[e] = e << 1 : t[e] = e << 1 ^ 283;
      for (var r = [], o2 = [], f2 = [[], [], [], []], p = [[], [], [], []], m2 = 0, y3 = 0, M2 = 0;M2 < 256; ++M2) {
        var x4 = y3 ^ y3 << 1 ^ y3 << 2 ^ y3 << 3 ^ y3 << 4;
        x4 = x4 >>> 8 ^ x4 & 255 ^ 99, r[m2] = x4, o2[x4] = m2;
        var S3 = t[m2], E3 = t[S3], B2 = t[E3], q = t[x4] * 257 ^ x4 * 16843008;
        f2[0][m2] = q << 24 | q >>> 8, f2[1][m2] = q << 16 | q >>> 16, f2[2][m2] = q << 8 | q >>> 24, f2[3][m2] = q, q = B2 * 16843009 ^ E3 * 65537 ^ S3 * 257 ^ m2 * 16843008, p[0][x4] = q << 24 | q >>> 8, p[1][x4] = q << 16 | q >>> 16, p[2][x4] = q << 8 | q >>> 24, p[3][x4] = q, m2 === 0 ? m2 = y3 = 1 : (m2 = S3 ^ t[t[t[B2 ^ S3]]], y3 ^= t[t[y3]]);
      }
      return { SBOX: r, INV_SBOX: o2, SUB_MIX: f2, INV_SUB_MIX: p };
    }();
    function gr2(t) {
      this._key = Hu(t), this._reset();
    }
    gr2.blockSize = 4 * 4;
    gr2.keySize = 256 / 8;
    gr2.prototype.blockSize = gr2.blockSize;
    gr2.prototype.keySize = gr2.keySize;
    gr2.prototype._reset = function() {
      for (var t = this._key, e = t.length, r = e + 6, o2 = (r + 1) * 4, f2 = [], p = 0;p < e; p++)
        f2[p] = t[p];
      for (p = e;p < o2; p++) {
        var m2 = f2[p - 1];
        p % e === 0 ? (m2 = m2 << 8 | m2 >>> 24, m2 = kt.SBOX[m2 >>> 24] << 24 | kt.SBOX[m2 >>> 16 & 255] << 16 | kt.SBOX[m2 >>> 8 & 255] << 8 | kt.SBOX[m2 & 255], m2 ^= M9[p / e | 0] << 24) : e > 6 && p % e === 4 && (m2 = kt.SBOX[m2 >>> 24] << 24 | kt.SBOX[m2 >>> 16 & 255] << 16 | kt.SBOX[m2 >>> 8 & 255] << 8 | kt.SBOX[m2 & 255]), f2[p] = f2[p - e] ^ m2;
      }
      for (var y3 = [], M2 = 0;M2 < o2; M2++) {
        var x4 = o2 - M2, S3 = f2[x4 - (M2 % 4 ? 0 : 4)];
        M2 < 4 || x4 <= 4 ? y3[M2] = S3 : y3[M2] = kt.INV_SUB_MIX[0][kt.SBOX[S3 >>> 24]] ^ kt.INV_SUB_MIX[1][kt.SBOX[S3 >>> 16 & 255]] ^ kt.INV_SUB_MIX[2][kt.SBOX[S3 >>> 8 & 255]] ^ kt.INV_SUB_MIX[3][kt.SBOX[S3 & 255]];
      }
      this._nRounds = r, this._keySchedule = f2, this._invKeySchedule = y3;
    };
    gr2.prototype.encryptBlockRaw = function(t) {
      return t = Hu(t), Mm(t, this._keySchedule, kt.SUB_MIX, kt.SBOX, this._nRounds);
    };
    gr2.prototype.encryptBlock = function(t) {
      var e = this.encryptBlockRaw(t), r = Ms.allocUnsafe(16);
      return r.writeUInt32BE(e[0], 0), r.writeUInt32BE(e[1], 4), r.writeUInt32BE(e[2], 8), r.writeUInt32BE(e[3], 12), r;
    };
    gr2.prototype.decryptBlock = function(t) {
      t = Hu(t);
      var e = t[1];
      t[1] = t[3], t[3] = e;
      var r = Mm(t, this._invKeySchedule, kt.INV_SUB_MIX, kt.INV_SBOX, this._nRounds), o2 = Ms.allocUnsafe(16);
      return o2.writeUInt32BE(r[0], 0), o2.writeUInt32BE(r[3], 4), o2.writeUInt32BE(r[2], 8), o2.writeUInt32BE(r[1], 12), o2;
    };
    gr2.prototype.scrub = function() {
      zu(this._keySchedule), zu(this._invKeySchedule), zu(this._key);
    };
    _m.exports.AES = gr2;
  });
  Em = T9((DT, Sm) => {
    var wf = Te().Buffer, _9 = wf.alloc(16, 0);
    function x9(t) {
      return [t.readUInt32BE(0), t.readUInt32BE(4), t.readUInt32BE(8), t.readUInt32BE(12)];
    }
    function xm(t) {
      var e = wf.allocUnsafe(16);
      return e.writeUInt32BE(t[0] >>> 0, 0), e.writeUInt32BE(t[1] >>> 0, 4), e.writeUInt32BE(t[2] >>> 0, 8), e.writeUInt32BE(t[3] >>> 0, 12), e;
    }
    function Ra(t) {
      this.h = t, this.state = wf.alloc(16, 0), this.cache = wf.allocUnsafe(0);
    }
    Ra.prototype.ghash = function(t) {
      for (var e = -1;++e < t.length; )
        this.state[e] ^= t[e];
      this._multiply();
    };
    Ra.prototype._multiply = function() {
      for (var t = x9(this.h), e = [0, 0, 0, 0], r, o2, f2, p = -1;++p < 128; ) {
        for (o2 = (this.state[~~(p / 8)] & 1 << 7 - p % 8) !== 0, o2 && (e[0] ^= t[0], e[1] ^= t[1], e[2] ^= t[2], e[3] ^= t[3]), f2 = (t[3] & 1) !== 0, r = 3;r > 0; r--)
          t[r] = t[r] >>> 1 | (t[r - 1] & 1) << 31;
        t[0] = t[0] >>> 1, f2 && (t[0] = t[0] ^ 225 << 24);
      }
      this.state = xm(e);
    };
    Ra.prototype.update = function(t) {
      this.cache = wf.concat([this.cache, t]);
      for (var e;this.cache.length >= 16; )
        e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(e);
    };
    Ra.prototype.final = function(t, e) {
      return this.cache.length && this.ghash(wf.concat([this.cache, _9], 16)), this.ghash(xm([0, t, 0, e])), this.state;
    };
    Sm.exports = Ra;
  });
  Wu = T9((PT, Bm) => {
    var S9 = Aa(), rr2 = Te().Buffer, Am = yi(), E9 = Ie(), Rm = Em(), A9 = yf(), R9 = Pu();
    function B9(t, e) {
      var r = 0;
      t.length !== e.length && r++;
      for (var o2 = Math.min(t.length, e.length), f2 = 0;f2 < o2; ++f2)
        r += t[f2] ^ e[f2];
      return r;
    }
    function q9(t, e, r) {
      if (e.length === 12)
        return t._finID = rr2.concat([e, rr2.from([0, 0, 0, 1])]), rr2.concat([e, rr2.from([0, 0, 0, 2])]);
      var o2 = new Rm(r), f2 = e.length, p = f2 % 16;
      o2.update(e), p && (p = 16 - p, o2.update(rr2.alloc(p, 0))), o2.update(rr2.alloc(8, 0));
      var m2 = f2 * 8, y3 = rr2.alloc(8);
      y3.writeUIntBE(m2, 0, 8), o2.update(y3), t._finID = o2.state;
      var M2 = rr2.from(t._finID);
      return R9(M2), M2;
    }
    function Bn(t, e, r, o2) {
      Am.call(this);
      var f2 = rr2.alloc(4, 0);
      this._cipher = new S9.AES(e);
      var p = this._cipher.encryptBlock(f2);
      this._ghash = new Rm(p), r = q9(this, r, p), this._prev = rr2.from(r), this._cache = rr2.allocUnsafe(0), this._secCache = rr2.allocUnsafe(0), this._decrypt = o2, this._alen = 0, this._len = 0, this._mode = t, this._authTag = null, this._called = false;
    }
    E9(Bn, Am);
    Bn.prototype._update = function(t) {
      if (!this._called && this._alen) {
        var e = 16 - this._alen % 16;
        e < 16 && (e = rr2.alloc(e, 0), this._ghash.update(e));
      }
      this._called = true;
      var r = this._mode.encrypt(this, t);
      return this._decrypt ? this._ghash.update(t) : this._ghash.update(r), this._len += t.length, r;
    };
    Bn.prototype._final = function() {
      if (this._decrypt && !this._authTag)
        throw new Error("Unsupported state or unable to authenticate data");
      var t = A9(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && B9(t, this._authTag))
        throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = t, this._cipher.scrub();
    };
    Bn.prototype.getAuthTag = function() {
      if (this._decrypt || !rr2.isBuffer(this._authTag))
        throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    Bn.prototype.setAuthTag = function(e) {
      if (!this._decrypt)
        throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = e;
    };
    Bn.prototype.setAAD = function(e) {
      if (this._called)
        throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(e), this._alen += e.length;
    };
    Bm.exports = Bn;
  });
  ju = T9((CT, Im) => {
    var I9 = Aa(), Ku = Te().Buffer, qm = yi(), T92 = Ie();
    function _s(t, e, r, o2) {
      qm.call(this), this._cipher = new I9.AES(e), this._prev = Ku.from(r), this._cache = Ku.allocUnsafe(0), this._secCache = Ku.allocUnsafe(0), this._decrypt = o2, this._mode = t;
    }
    T92(_s, qm);
    _s.prototype._update = function(t) {
      return this._mode.encrypt(this, t, this._decrypt);
    };
    _s.prototype._final = function() {
      this._cipher.scrub();
    };
    Im.exports = _s;
  });
  Ba = T9((OT, Tm) => {
    var qn = Te().Buffer, k9 = Ao();
    function L9(t, e, r, o2) {
      if (qn.isBuffer(t) || (t = qn.from(t, "binary")), e && (qn.isBuffer(e) || (e = qn.from(e, "binary")), e.length !== 8))
        throw new RangeError("salt should be Buffer with 8 byte length");
      for (var f2 = r / 8, p = qn.alloc(f2), m2 = qn.alloc(o2 || 0), y3 = qn.alloc(0);f2 > 0 || o2 > 0; ) {
        var M2 = new k9;
        M2.update(y3), M2.update(t), e && M2.update(e), y3 = M2.digest();
        var x4 = 0;
        if (f2 > 0) {
          var S3 = p.length - f2;
          x4 = Math.min(f2, y3.length), y3.copy(p, S3, 0, x4), f2 -= x4;
        }
        if (x4 < y3.length && o2 > 0) {
          var E3 = m2.length - o2, B2 = Math.min(o2, y3.length - x4);
          y3.copy(m2, E3, x4, x4 + B2), o2 -= B2;
        }
      }
      return y3.fill(0), { key: p, iv: m2 };
    }
    Tm.exports = L9;
  });
  Dm = T9((Zu) => {
    var km = ws(), N9 = Wu(), Mi = Te().Buffer, D9 = ju(), Lm = yi(), P9 = Aa(), C9 = Ba(), O9 = Ie();
    function qa(t, e, r) {
      Lm.call(this), this._cache = new xs, this._cipher = new P9.AES(e), this._prev = Mi.from(r), this._mode = t, this._autopadding = true;
    }
    O9(qa, Lm);
    qa.prototype._update = function(t) {
      this._cache.add(t);
      for (var e, r, o2 = [];e = this._cache.get(); )
        r = this._mode.encrypt(this, e), o2.push(r);
      return Mi.concat(o2);
    };
    var F9 = Mi.alloc(16, 16);
    qa.prototype._final = function() {
      var t = this._cache.flush();
      if (this._autopadding)
        return t = this._mode.encrypt(this, t), this._cipher.scrub(), t;
      if (!t.equals(F9))
        throw this._cipher.scrub(), new Error("data not multiple of block length");
    };
    qa.prototype.setAutoPadding = function(t) {
      return this._autopadding = !!t, this;
    };
    function xs() {
      this.cache = Mi.allocUnsafe(0);
    }
    xs.prototype.add = function(t) {
      this.cache = Mi.concat([this.cache, t]);
    };
    xs.prototype.get = function() {
      if (this.cache.length > 15) {
        var t = this.cache.slice(0, 16);
        return this.cache = this.cache.slice(16), t;
      }
      return null;
    };
    xs.prototype.flush = function() {
      for (var t = 16 - this.cache.length, e = Mi.allocUnsafe(t), r = -1;++r < t; )
        e.writeUInt8(t, r);
      return Mi.concat([this.cache, e]);
    };
    function Nm(t, e, r) {
      var o2 = km[t.toLowerCase()];
      if (!o2)
        throw new TypeError("invalid suite type");
      if (typeof e == "string" && (e = Mi.from(e)), e.length !== o2.key / 8)
        throw new TypeError("invalid key length " + e.length);
      if (typeof r == "string" && (r = Mi.from(r)), o2.mode !== "GCM" && r.length !== o2.iv)
        throw new TypeError("invalid iv length " + r.length);
      return o2.type === "stream" ? new D9(o2.module, e, r) : o2.type === "auth" ? new N9(o2.module, e, r) : new qa(o2.module, e, r);
    }
    function U9(t, e) {
      var r = km[t.toLowerCase()];
      if (!r)
        throw new TypeError("invalid suite type");
      var o2 = C9(e, false, r.key, r.iv);
      return Nm(t, o2.key, o2.iv);
    }
    Zu.createCipheriv = Nm;
    Zu.createCipher = U9;
  });
  Fm = T9((Vu) => {
    var z9 = Wu(), Mf = Te().Buffer, Pm = ws(), H9 = ju(), Cm = yi(), W9 = Aa(), K9 = Ba(), j9 = Ie();
    function Ia(t, e, r) {
      Cm.call(this), this._cache = new Ss, this._last = undefined, this._cipher = new W9.AES(e), this._prev = Mf.from(r), this._mode = t, this._autopadding = true;
    }
    j9(Ia, Cm);
    Ia.prototype._update = function(t) {
      this._cache.add(t);
      for (var e, r, o2 = [];e = this._cache.get(this._autopadding); )
        r = this._mode.decrypt(this, e), o2.push(r);
      return Mf.concat(o2);
    };
    Ia.prototype._final = function() {
      var t = this._cache.flush();
      if (this._autopadding)
        return Z9(this._mode.decrypt(this, t));
      if (t)
        throw new Error("data not multiple of block length");
    };
    Ia.prototype.setAutoPadding = function(t) {
      return this._autopadding = !!t, this;
    };
    function Ss() {
      this.cache = Mf.allocUnsafe(0);
    }
    Ss.prototype.add = function(t) {
      this.cache = Mf.concat([this.cache, t]);
    };
    Ss.prototype.get = function(t) {
      var e;
      if (t) {
        if (this.cache.length > 16)
          return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
      } else if (this.cache.length >= 16)
        return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
      return null;
    };
    Ss.prototype.flush = function() {
      if (this.cache.length)
        return this.cache;
    };
    function Z9(t) {
      var e = t[15];
      if (e < 1 || e > 16)
        throw new Error("unable to decrypt data");
      for (var r = -1;++r < e; )
        if (t[r + (16 - e)] !== e)
          throw new Error("unable to decrypt data");
      if (e !== 16)
        return t.slice(0, 16 - e);
    }
    function Om(t, e, r) {
      var o2 = Pm[t.toLowerCase()];
      if (!o2)
        throw new TypeError("invalid suite type");
      if (typeof r == "string" && (r = Mf.from(r)), o2.mode !== "GCM" && r.length !== o2.iv)
        throw new TypeError("invalid iv length " + r.length);
      if (typeof e == "string" && (e = Mf.from(e)), e.length !== o2.key / 8)
        throw new TypeError("invalid key length " + e.length);
      return o2.type === "stream" ? new H9(o2.module, e, r, true) : o2.type === "auth" ? new z9(o2.module, e, r, true) : new Ia(o2.module, e, r);
    }
    function V9(t, e) {
      var r = Pm[t.toLowerCase()];
      if (!r)
        throw new TypeError("invalid suite type");
      var o2 = K9(e, false, r.key, r.iv);
      return Om(t, o2.key, o2.iv);
    }
    Vu.createDecipher = V9;
    Vu.createDecipheriv = Om;
  });
  Es = T9((Nr) => {
    var Um = Dm(), zm = Fm(), $9 = Fu();
    function G9() {
      return Object.keys($9);
    }
    Nr.createCipher = Nr.Cipher = Um.createCipher;
    Nr.createCipheriv = Nr.Cipheriv = Um.createCipheriv;
    Nr.createDecipher = Nr.Decipher = zm.createDecipher;
    Nr.createDecipheriv = Nr.Decipheriv = zm.createDecipheriv;
    Nr.listCiphers = Nr.getCiphers = G9;
  });
  Hm = T9((_i) => {
    _i["des-ecb"] = { key: 8, iv: 0 };
    _i["des-cbc"] = _i.des = { key: 8, iv: 8 };
    _i["des-ede3-cbc"] = _i.des3 = { key: 24, iv: 8 };
    _i["des-ede3"] = { key: 24, iv: 0 };
    _i["des-ede-cbc"] = { key: 16, iv: 8 };
    _i["des-ede"] = { key: 16, iv: 0 };
  });
  Vm = T9((Dr) => {
    var Wm = im(), $u = Es(), Ki = ws(), xi = Hm(), Km = Ba();
    function Y9(t, e) {
      t = t.toLowerCase();
      var r, o2;
      if (Ki[t])
        r = Ki[t].key, o2 = Ki[t].iv;
      else if (xi[t])
        r = xi[t].key * 8, o2 = xi[t].iv;
      else
        throw new TypeError("invalid suite type");
      var f2 = Km(e, false, r, o2);
      return jm(t, f2.key, f2.iv);
    }
    function X9(t, e) {
      t = t.toLowerCase();
      var r, o2;
      if (Ki[t])
        r = Ki[t].key, o2 = Ki[t].iv;
      else if (xi[t])
        r = xi[t].key * 8, o2 = xi[t].iv;
      else
        throw new TypeError("invalid suite type");
      var f2 = Km(e, false, r, o2);
      return Zm(t, f2.key, f2.iv);
    }
    function jm(t, e, r) {
      if (t = t.toLowerCase(), Ki[t])
        return $u.createCipheriv(t, e, r);
      if (xi[t])
        return new Wm({ key: e, iv: r, mode: t });
      throw new TypeError("invalid suite type");
    }
    function Zm(t, e, r) {
      if (t = t.toLowerCase(), Ki[t])
        return $u.createDecipheriv(t, e, r);
      if (xi[t])
        return new Wm({ key: e, iv: r, mode: t, decrypt: true });
      throw new TypeError("invalid suite type");
    }
    function J9() {
      return Object.keys(xi).concat($u.getCiphers());
    }
    Dr.createCipher = Dr.Cipher = Y9;
    Dr.createCipheriv = Dr.Cipheriv = jm;
    Dr.createDecipher = Dr.Decipher = X9;
    Dr.createDecipheriv = Dr.Decipheriv = Zm;
    Dr.listCiphers = Dr.getCiphers = J9;
  });
  ji = T9(() => {
  });
  Yu = T9(($m, Gu) => {
    (function(t, e) {
      function r(v3, i) {
        if (!v3)
          throw new Error(i || "Assertion failed");
      }
      function o2(v3, i) {
        v3.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v3.prototype = new a2, v3.prototype.constructor = v3;
      }
      function f2(v3, i, a2) {
        if (f2.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v3 || 0, i || 10, a2 || "be"));
      }
      typeof t == "object" ? t.exports = f2 : e.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p = window.Buffer : p = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s = 0;
        i[0] === "-" && (s++, this.negative = 1), s < i.length && (a2 === 16 ? this._parseHex(i, s, h3) : (this._parseBase(i, a2, s), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2, c, b4 = 0;
        if (h3 === "be")
          for (s = i.length - 1, u2 = 0;s >= 0; s -= 3)
            c = i[s] | i[s - 1] << 8 | i[s - 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        else if (h3 === "le")
          for (s = 0, u2 = 0;s < i.length; s += 3)
            c = i[s] | i[s + 1] << 8 | i[s + 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        return this.strip();
      };
      function m2(v3, i) {
        var a2 = v3.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v3, i, a2) {
        var h3 = m2(v3, a2);
        return a2 - 1 >= i && (h3 |= m2(v3, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2 = 0, c = 0, b4;
        if (h3 === "be")
          for (s = i.length - 1;s >= a2; s -= 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        else {
          var l2 = i.length - a2;
          for (s = l2 % 2 === 0 ? a2 + 1 : a2;s < i.length; s += 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        }
        this.strip();
      };
      function M2(v3, i, a2, h3) {
        for (var s = 0, u2 = Math.min(v3.length, a2), c = i;c < u2; c++) {
          var b4 = v3.charCodeAt(c) - 48;
          s *= h3, b4 >= 49 ? s += b4 - 49 + 10 : b4 >= 17 ? s += b4 - 17 + 10 : s += b4;
        }
        return s;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s = 0, u2 = 1;u2 <= 67108863; u2 *= a2)
          s++;
        s--, u2 = u2 / a2 | 0;
        for (var c = i.length - h3, b4 = c % s, l2 = Math.min(c, c - b4) + h3, n2 = 0, d2 = h3;d2 < l2; d2 += s)
          n2 = M2(i, d2, d2 + s, a2), this.imuln(u2), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        if (b4 !== 0) {
          var w3 = 1;
          for (n2 = M2(i, d2, i.length, a2), d2 = 0;d2 < b4; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s = 0, u2 = 0, c = 0;c < this.length; c++) {
            var b4 = this.words[c], l2 = ((b4 << s | u2) & 16777215).toString(16);
            u2 = b4 >>> 24 - s & 16777215, u2 !== 0 || c !== this.length - 1 ? h3 = x4[6 - l2.length] + l2 + h3 : h3 = l2 + h3, s += 2, s >= 26 && (s -= 26, c--);
          }
          for (u2 !== 0 && (h3 = u2.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n2 = S3[i], d2 = E3[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g3 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g3 + h3 : h3 = x4[n2 - g3.length] + g3 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r(typeof p < "u"), this.toArrayLike(p, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s = this.byteLength(), u2 = h3 || Math.max(1, s);
        r(s <= u2, "byte array longer than desired length"), r(u2 > 0, "Requested array length <= 0"), this.strip();
        var c = a2 === "le", b4 = new i(u2), l2, n2, d2 = this.clone();
        if (c) {
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[n2] = l2;
          for (;n2 < u2; n2++)
            b4[n2] = 0;
        } else {
          for (n2 = 0;n2 < u2 - s; n2++)
            b4[n2] = 0;
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[u2 - n2 - 1] = l2;
        }
        return b4;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B2(v3) {
        for (var i = new Array(v3.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s = a2 % 26;
          i[a2] = (v3.words[h3] & 1 << s) >>> s;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s = 0;s < h3.length; s++)
          this.words[s] = a2.words[s] ^ h3.words[s];
        if (this !== a2)
          for (;s < a2.length; s++)
            this.words[s] = a2.words[s];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s = 0;s < a2; s++)
          this.words[s] = ~this.words[s] & 67108863;
        return h3 > 0 && (this.words[s] = ~this.words[s] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s : this.words[h3] = this.words[h3] & ~(1 << s), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s;
        this.length > i.length ? (h3 = this, s = i) : (h3 = i, s = this);
        for (var u2 = 0, c = 0;c < s.length; c++)
          a2 = (h3.words[c] | 0) + (s.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        for (;u2 !== 0 && c < h3.length; c++)
          a2 = (h3.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        if (this.length = h3.length, u2 !== 0)
          this.words[this.length] = u2, this.length++;
        else if (h3 !== this)
          for (;c < h3.length; c++)
            this.words[c] = h3.words[c];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s, u2;
        h3 > 0 ? (s = this, u2 = i) : (s = i, u2 = this);
        for (var c = 0, b4 = 0;b4 < u2.length; b4++)
          a2 = (s.words[b4] | 0) - (u2.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        for (;c !== 0 && b4 < s.length; b4++)
          a2 = (s.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        if (c === 0 && b4 < s.length && s !== this)
          for (;b4 < s.length; b4++)
            this.words[b4] = s.words[b4];
        return this.length = Math.max(this.length, b4), s !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative;
        var h3 = v3.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s = v3.words[0] | 0, u2 = i.words[0] | 0, c = s * u2, b4 = c & 67108863, l2 = c / 67108864 | 0;
        a2.words[0] = b4;
        for (var n2 = 1;n2 < h3; n2++) {
          for (var d2 = l2 >>> 26, w3 = l2 & 67108863, g3 = Math.min(n2, i.length - 1), _3 = Math.max(0, n2 - v3.length + 1);_3 <= g3; _3++) {
            var A2 = n2 - _3 | 0;
            s = v3.words[A2] | 0, u2 = i.words[_3] | 0, c = s * u2 + w3, d2 += c / 67108864 | 0, w3 = c & 67108863;
          }
          a2.words[n2] = w3 | 0, l2 = d2 | 0;
        }
        return l2 !== 0 ? a2.words[n2] = l2 | 0 : a2.length--, a2.strip();
      }
      var L3 = function(i, a2, h3) {
        var s = i.words, u2 = a2.words, c = h3.words, b4 = 0, l2, n2, d2, w3 = s[0] | 0, g3 = w3 & 8191, _3 = w3 >>> 13, A2 = s[1] | 0, R3 = A2 & 8191, I2 = A2 >>> 13, Me = s[2] | 0, k2 = Me & 8191, D3 = Me >>> 13, nt2 = s[3] | 0, C2 = nt2 & 8191, O3 = nt2 >>> 13, vt = s[4] | 0, F = vt & 8191, U5 = vt >>> 13, bt = s[5] | 0, z = bt & 8191, H2 = bt >>> 13, mt = s[6] | 0, W = mt & 8191, K3 = mt >>> 13, gt = s[7] | 0, j3 = gt & 8191, Z2 = gt >>> 13, yt = s[8] | 0, V2 = yt & 8191, $3 = yt >>> 13, wt = s[9] | 0, G2 = wt & 8191, Y2 = wt >>> 13, Mt = u2[0] | 0, X2 = Mt & 8191, J2 = Mt >>> 13, _t = u2[1] | 0, Q2 = _t & 8191, ee = _t >>> 13, xt = u2[2] | 0, te = xt & 8191, re = xt >>> 13, St = u2[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u2[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u2[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u2[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u2[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u2[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u2[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l2 = Math.imul(g3, X2), n2 = Math.imul(g3, J2), n2 = n2 + Math.imul(_3, X2) | 0, d2 = Math.imul(_3, J2);
        var ft2 = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ft2 >>> 26) | 0, ft2 &= 67108863, l2 = Math.imul(R3, X2), n2 = Math.imul(R3, J2), n2 = n2 + Math.imul(I2, X2) | 0, d2 = Math.imul(I2, J2), l2 = l2 + Math.imul(g3, Q2) | 0, n2 = n2 + Math.imul(g3, ee) | 0, n2 = n2 + Math.imul(_3, Q2) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l2 = Math.imul(k2, X2), n2 = Math.imul(k2, J2), n2 = n2 + Math.imul(D3, X2) | 0, d2 = Math.imul(D3, J2), l2 = l2 + Math.imul(R3, Q2) | 0, n2 = n2 + Math.imul(R3, ee) | 0, n2 = n2 + Math.imul(I2, Q2) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l2 = l2 + Math.imul(g3, te) | 0, n2 = n2 + Math.imul(g3, re) | 0, n2 = n2 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l2 = Math.imul(C2, X2), n2 = Math.imul(C2, J2), n2 = n2 + Math.imul(O3, X2) | 0, d2 = Math.imul(O3, J2), l2 = l2 + Math.imul(k2, Q2) | 0, n2 = n2 + Math.imul(k2, ee) | 0, n2 = n2 + Math.imul(D3, Q2) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l2 = l2 + Math.imul(R3, te) | 0, n2 = n2 + Math.imul(R3, re) | 0, n2 = n2 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l2 = l2 + Math.imul(g3, ie) | 0, n2 = n2 + Math.imul(g3, ne) | 0, n2 = n2 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l2 = Math.imul(F, X2), n2 = Math.imul(F, J2), n2 = n2 + Math.imul(U5, X2) | 0, d2 = Math.imul(U5, J2), l2 = l2 + Math.imul(C2, Q2) | 0, n2 = n2 + Math.imul(C2, ee) | 0, n2 = n2 + Math.imul(O3, Q2) | 0, d2 = d2 + Math.imul(O3, ee) | 0, l2 = l2 + Math.imul(k2, te) | 0, n2 = n2 + Math.imul(k2, re) | 0, n2 = n2 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l2 = l2 + Math.imul(R3, ie) | 0, n2 = n2 + Math.imul(R3, ne) | 0, n2 = n2 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l2 = l2 + Math.imul(g3, fe) | 0, n2 = n2 + Math.imul(g3, ae) | 0, n2 = n2 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l2 = Math.imul(z, X2), n2 = Math.imul(z, J2), n2 = n2 + Math.imul(H2, X2) | 0, d2 = Math.imul(H2, J2), l2 = l2 + Math.imul(F, Q2) | 0, n2 = n2 + Math.imul(F, ee) | 0, n2 = n2 + Math.imul(U5, Q2) | 0, d2 = d2 + Math.imul(U5, ee) | 0, l2 = l2 + Math.imul(C2, te) | 0, n2 = n2 + Math.imul(C2, re) | 0, n2 = n2 + Math.imul(O3, te) | 0, d2 = d2 + Math.imul(O3, re) | 0, l2 = l2 + Math.imul(k2, ie) | 0, n2 = n2 + Math.imul(k2, ne) | 0, n2 = n2 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l2 = l2 + Math.imul(R3, fe) | 0, n2 = n2 + Math.imul(R3, ae) | 0, n2 = n2 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l2 = l2 + Math.imul(g3, oe) | 0, n2 = n2 + Math.imul(g3, se) | 0, n2 = n2 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l2 = Math.imul(W, X2), n2 = Math.imul(W, J2), n2 = n2 + Math.imul(K3, X2) | 0, d2 = Math.imul(K3, J2), l2 = l2 + Math.imul(z, Q2) | 0, n2 = n2 + Math.imul(z, ee) | 0, n2 = n2 + Math.imul(H2, Q2) | 0, d2 = d2 + Math.imul(H2, ee) | 0, l2 = l2 + Math.imul(F, te) | 0, n2 = n2 + Math.imul(F, re) | 0, n2 = n2 + Math.imul(U5, te) | 0, d2 = d2 + Math.imul(U5, re) | 0, l2 = l2 + Math.imul(C2, ie) | 0, n2 = n2 + Math.imul(C2, ne) | 0, n2 = n2 + Math.imul(O3, ie) | 0, d2 = d2 + Math.imul(O3, ne) | 0, l2 = l2 + Math.imul(k2, fe) | 0, n2 = n2 + Math.imul(k2, ae) | 0, n2 = n2 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l2 = l2 + Math.imul(R3, oe) | 0, n2 = n2 + Math.imul(R3, se) | 0, n2 = n2 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l2 = l2 + Math.imul(g3, he) | 0, n2 = n2 + Math.imul(g3, ue) | 0, n2 = n2 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l2 = Math.imul(j3, X2), n2 = Math.imul(j3, J2), n2 = n2 + Math.imul(Z2, X2) | 0, d2 = Math.imul(Z2, J2), l2 = l2 + Math.imul(W, Q2) | 0, n2 = n2 + Math.imul(W, ee) | 0, n2 = n2 + Math.imul(K3, Q2) | 0, d2 = d2 + Math.imul(K3, ee) | 0, l2 = l2 + Math.imul(z, te) | 0, n2 = n2 + Math.imul(z, re) | 0, n2 = n2 + Math.imul(H2, te) | 0, d2 = d2 + Math.imul(H2, re) | 0, l2 = l2 + Math.imul(F, ie) | 0, n2 = n2 + Math.imul(F, ne) | 0, n2 = n2 + Math.imul(U5, ie) | 0, d2 = d2 + Math.imul(U5, ne) | 0, l2 = l2 + Math.imul(C2, fe) | 0, n2 = n2 + Math.imul(C2, ae) | 0, n2 = n2 + Math.imul(O3, fe) | 0, d2 = d2 + Math.imul(O3, ae) | 0, l2 = l2 + Math.imul(k2, oe) | 0, n2 = n2 + Math.imul(k2, se) | 0, n2 = n2 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l2 = l2 + Math.imul(R3, he) | 0, n2 = n2 + Math.imul(R3, ue) | 0, n2 = n2 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l2 = l2 + Math.imul(g3, le) | 0, n2 = n2 + Math.imul(g3, de) | 0, n2 = n2 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l2 = Math.imul(V2, X2), n2 = Math.imul(V2, J2), n2 = n2 + Math.imul($3, X2) | 0, d2 = Math.imul($3, J2), l2 = l2 + Math.imul(j3, Q2) | 0, n2 = n2 + Math.imul(j3, ee) | 0, n2 = n2 + Math.imul(Z2, Q2) | 0, d2 = d2 + Math.imul(Z2, ee) | 0, l2 = l2 + Math.imul(W, te) | 0, n2 = n2 + Math.imul(W, re) | 0, n2 = n2 + Math.imul(K3, te) | 0, d2 = d2 + Math.imul(K3, re) | 0, l2 = l2 + Math.imul(z, ie) | 0, n2 = n2 + Math.imul(z, ne) | 0, n2 = n2 + Math.imul(H2, ie) | 0, d2 = d2 + Math.imul(H2, ne) | 0, l2 = l2 + Math.imul(F, fe) | 0, n2 = n2 + Math.imul(F, ae) | 0, n2 = n2 + Math.imul(U5, fe) | 0, d2 = d2 + Math.imul(U5, ae) | 0, l2 = l2 + Math.imul(C2, oe) | 0, n2 = n2 + Math.imul(C2, se) | 0, n2 = n2 + Math.imul(O3, oe) | 0, d2 = d2 + Math.imul(O3, se) | 0, l2 = l2 + Math.imul(k2, he) | 0, n2 = n2 + Math.imul(k2, ue) | 0, n2 = n2 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l2 = l2 + Math.imul(R3, le) | 0, n2 = n2 + Math.imul(R3, de) | 0, n2 = n2 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l2 = l2 + Math.imul(g3, ce) | 0, n2 = n2 + Math.imul(g3, pe) | 0, n2 = n2 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l2 = Math.imul(G2, X2), n2 = Math.imul(G2, J2), n2 = n2 + Math.imul(Y2, X2) | 0, d2 = Math.imul(Y2, J2), l2 = l2 + Math.imul(V2, Q2) | 0, n2 = n2 + Math.imul(V2, ee) | 0, n2 = n2 + Math.imul($3, Q2) | 0, d2 = d2 + Math.imul($3, ee) | 0, l2 = l2 + Math.imul(j3, te) | 0, n2 = n2 + Math.imul(j3, re) | 0, n2 = n2 + Math.imul(Z2, te) | 0, d2 = d2 + Math.imul(Z2, re) | 0, l2 = l2 + Math.imul(W, ie) | 0, n2 = n2 + Math.imul(W, ne) | 0, n2 = n2 + Math.imul(K3, ie) | 0, d2 = d2 + Math.imul(K3, ne) | 0, l2 = l2 + Math.imul(z, fe) | 0, n2 = n2 + Math.imul(z, ae) | 0, n2 = n2 + Math.imul(H2, fe) | 0, d2 = d2 + Math.imul(H2, ae) | 0, l2 = l2 + Math.imul(F, oe) | 0, n2 = n2 + Math.imul(F, se) | 0, n2 = n2 + Math.imul(U5, oe) | 0, d2 = d2 + Math.imul(U5, se) | 0, l2 = l2 + Math.imul(C2, he) | 0, n2 = n2 + Math.imul(C2, ue) | 0, n2 = n2 + Math.imul(O3, he) | 0, d2 = d2 + Math.imul(O3, ue) | 0, l2 = l2 + Math.imul(k2, le) | 0, n2 = n2 + Math.imul(k2, de) | 0, n2 = n2 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l2 = l2 + Math.imul(R3, ce) | 0, n2 = n2 + Math.imul(R3, pe) | 0, n2 = n2 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l2 = l2 + Math.imul(g3, ve) | 0, n2 = n2 + Math.imul(g3, be) | 0, n2 = n2 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l2 = Math.imul(G2, Q2), n2 = Math.imul(G2, ee), n2 = n2 + Math.imul(Y2, Q2) | 0, d2 = Math.imul(Y2, ee), l2 = l2 + Math.imul(V2, te) | 0, n2 = n2 + Math.imul(V2, re) | 0, n2 = n2 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l2 = l2 + Math.imul(j3, ie) | 0, n2 = n2 + Math.imul(j3, ne) | 0, n2 = n2 + Math.imul(Z2, ie) | 0, d2 = d2 + Math.imul(Z2, ne) | 0, l2 = l2 + Math.imul(W, fe) | 0, n2 = n2 + Math.imul(W, ae) | 0, n2 = n2 + Math.imul(K3, fe) | 0, d2 = d2 + Math.imul(K3, ae) | 0, l2 = l2 + Math.imul(z, oe) | 0, n2 = n2 + Math.imul(z, se) | 0, n2 = n2 + Math.imul(H2, oe) | 0, d2 = d2 + Math.imul(H2, se) | 0, l2 = l2 + Math.imul(F, he) | 0, n2 = n2 + Math.imul(F, ue) | 0, n2 = n2 + Math.imul(U5, he) | 0, d2 = d2 + Math.imul(U5, ue) | 0, l2 = l2 + Math.imul(C2, le) | 0, n2 = n2 + Math.imul(C2, de) | 0, n2 = n2 + Math.imul(O3, le) | 0, d2 = d2 + Math.imul(O3, de) | 0, l2 = l2 + Math.imul(k2, ce) | 0, n2 = n2 + Math.imul(k2, pe) | 0, n2 = n2 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l2 = l2 + Math.imul(R3, ve) | 0, n2 = n2 + Math.imul(R3, be) | 0, n2 = n2 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l2 = Math.imul(G2, te), n2 = Math.imul(G2, re), n2 = n2 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l2 = l2 + Math.imul(V2, ie) | 0, n2 = n2 + Math.imul(V2, ne) | 0, n2 = n2 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l2 = l2 + Math.imul(j3, fe) | 0, n2 = n2 + Math.imul(j3, ae) | 0, n2 = n2 + Math.imul(Z2, fe) | 0, d2 = d2 + Math.imul(Z2, ae) | 0, l2 = l2 + Math.imul(W, oe) | 0, n2 = n2 + Math.imul(W, se) | 0, n2 = n2 + Math.imul(K3, oe) | 0, d2 = d2 + Math.imul(K3, se) | 0, l2 = l2 + Math.imul(z, he) | 0, n2 = n2 + Math.imul(z, ue) | 0, n2 = n2 + Math.imul(H2, he) | 0, d2 = d2 + Math.imul(H2, ue) | 0, l2 = l2 + Math.imul(F, le) | 0, n2 = n2 + Math.imul(F, de) | 0, n2 = n2 + Math.imul(U5, le) | 0, d2 = d2 + Math.imul(U5, de) | 0, l2 = l2 + Math.imul(C2, ce) | 0, n2 = n2 + Math.imul(C2, pe) | 0, n2 = n2 + Math.imul(O3, ce) | 0, d2 = d2 + Math.imul(O3, pe) | 0, l2 = l2 + Math.imul(k2, ve) | 0, n2 = n2 + Math.imul(k2, be) | 0, n2 = n2 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l2 = Math.imul(G2, ie), n2 = Math.imul(G2, ne), n2 = n2 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l2 = l2 + Math.imul(V2, fe) | 0, n2 = n2 + Math.imul(V2, ae) | 0, n2 = n2 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l2 = l2 + Math.imul(j3, oe) | 0, n2 = n2 + Math.imul(j3, se) | 0, n2 = n2 + Math.imul(Z2, oe) | 0, d2 = d2 + Math.imul(Z2, se) | 0, l2 = l2 + Math.imul(W, he) | 0, n2 = n2 + Math.imul(W, ue) | 0, n2 = n2 + Math.imul(K3, he) | 0, d2 = d2 + Math.imul(K3, ue) | 0, l2 = l2 + Math.imul(z, le) | 0, n2 = n2 + Math.imul(z, de) | 0, n2 = n2 + Math.imul(H2, le) | 0, d2 = d2 + Math.imul(H2, de) | 0, l2 = l2 + Math.imul(F, ce) | 0, n2 = n2 + Math.imul(F, pe) | 0, n2 = n2 + Math.imul(U5, ce) | 0, d2 = d2 + Math.imul(U5, pe) | 0, l2 = l2 + Math.imul(C2, ve) | 0, n2 = n2 + Math.imul(C2, be) | 0, n2 = n2 + Math.imul(O3, ve) | 0, d2 = d2 + Math.imul(O3, be) | 0;
        var Ye = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l2 = Math.imul(G2, fe), n2 = Math.imul(G2, ae), n2 = n2 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l2 = l2 + Math.imul(V2, oe) | 0, n2 = n2 + Math.imul(V2, se) | 0, n2 = n2 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l2 = l2 + Math.imul(j3, he) | 0, n2 = n2 + Math.imul(j3, ue) | 0, n2 = n2 + Math.imul(Z2, he) | 0, d2 = d2 + Math.imul(Z2, ue) | 0, l2 = l2 + Math.imul(W, le) | 0, n2 = n2 + Math.imul(W, de) | 0, n2 = n2 + Math.imul(K3, le) | 0, d2 = d2 + Math.imul(K3, de) | 0, l2 = l2 + Math.imul(z, ce) | 0, n2 = n2 + Math.imul(z, pe) | 0, n2 = n2 + Math.imul(H2, ce) | 0, d2 = d2 + Math.imul(H2, pe) | 0, l2 = l2 + Math.imul(F, ve) | 0, n2 = n2 + Math.imul(F, be) | 0, n2 = n2 + Math.imul(U5, ve) | 0, d2 = d2 + Math.imul(U5, be) | 0;
        var Xe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l2 = Math.imul(G2, oe), n2 = Math.imul(G2, se), n2 = n2 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l2 = l2 + Math.imul(V2, he) | 0, n2 = n2 + Math.imul(V2, ue) | 0, n2 = n2 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l2 = l2 + Math.imul(j3, le) | 0, n2 = n2 + Math.imul(j3, de) | 0, n2 = n2 + Math.imul(Z2, le) | 0, d2 = d2 + Math.imul(Z2, de) | 0, l2 = l2 + Math.imul(W, ce) | 0, n2 = n2 + Math.imul(W, pe) | 0, n2 = n2 + Math.imul(K3, ce) | 0, d2 = d2 + Math.imul(K3, pe) | 0, l2 = l2 + Math.imul(z, ve) | 0, n2 = n2 + Math.imul(z, be) | 0, n2 = n2 + Math.imul(H2, ve) | 0, d2 = d2 + Math.imul(H2, be) | 0;
        var Je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l2 = Math.imul(G2, he), n2 = Math.imul(G2, ue), n2 = n2 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l2 = l2 + Math.imul(V2, le) | 0, n2 = n2 + Math.imul(V2, de) | 0, n2 = n2 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l2 = l2 + Math.imul(j3, ce) | 0, n2 = n2 + Math.imul(j3, pe) | 0, n2 = n2 + Math.imul(Z2, ce) | 0, d2 = d2 + Math.imul(Z2, pe) | 0, l2 = l2 + Math.imul(W, ve) | 0, n2 = n2 + Math.imul(W, be) | 0, n2 = n2 + Math.imul(K3, ve) | 0, d2 = d2 + Math.imul(K3, be) | 0;
        var Qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l2 = Math.imul(G2, le), n2 = Math.imul(G2, de), n2 = n2 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l2 = l2 + Math.imul(V2, ce) | 0, n2 = n2 + Math.imul(V2, pe) | 0, n2 = n2 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l2 = l2 + Math.imul(j3, ve) | 0, n2 = n2 + Math.imul(j3, be) | 0, n2 = n2 + Math.imul(Z2, ve) | 0, d2 = d2 + Math.imul(Z2, be) | 0;
        var et = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l2 = Math.imul(G2, ce), n2 = Math.imul(G2, pe), n2 = n2 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l2 = l2 + Math.imul(V2, ve) | 0, n2 = n2 + Math.imul(V2, be) | 0, n2 = n2 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l2 = Math.imul(G2, ve), n2 = Math.imul(G2, be), n2 = n2 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        return b4 = (d2 + (n2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft2, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b4 !== 0 && (c[19] = b4, h3.length++), h3;
      };
      Math.imul || (L3 = q);
      function ge(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative, a2.length = v3.length + i.length;
        for (var h3 = 0, s = 0, u2 = 0;u2 < a2.length - 1; u2++) {
          var c = s;
          s = 0;
          for (var b4 = h3 & 67108863, l2 = Math.min(u2, i.length - 1), n2 = Math.max(0, u2 - v3.length + 1);n2 <= l2; n2++) {
            var d2 = u2 - n2, w3 = v3.words[d2] | 0, g3 = i.words[n2] | 0, _3 = w3 * g3, A2 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A2 = A2 + b4 | 0, b4 = A2 & 67108863, c = c + (A2 >>> 26) | 0, s += c >>> 26, c &= 67108863;
          }
          a2.words[u2] = b4, h3 = c, c = s;
        }
        return h3 !== 0 ? a2.words[u2] = h3 : a2.length--, a2.strip();
      }
      function _e(v3, i, a2) {
        var h3 = new N5;
        return h3.mulp(v3, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L3(this, i, a2) : s < 63 ? h3 = q(this, i, a2) : s < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N5(v3, i) {
        this.x = v3, this.y = i;
      }
      N5.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s = 0;s < i; s++)
          a2[s] = this.revBin(s, h3, i);
        return a2;
      }, N5.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s = 0, u2 = 0;u2 < a2; u2++)
          s |= (i & 1) << a2 - u2 - 1, i >>= 1;
        return s;
      }, N5.prototype.permute = function(i, a2, h3, s, u2, c) {
        for (var b4 = 0;b4 < c; b4++)
          s[b4] = a2[i[b4]], u2[b4] = h3[i[b4]];
      }, N5.prototype.transform = function(i, a2, h3, s, u2, c) {
        this.permute(c, i, a2, h3, s, u2);
        for (var b4 = 1;b4 < u2; b4 <<= 1)
          for (var l2 = b4 << 1, n2 = Math.cos(2 * Math.PI / l2), d2 = Math.sin(2 * Math.PI / l2), w3 = 0;w3 < u2; w3 += l2)
            for (var g3 = n2, _3 = d2, A2 = 0;A2 < b4; A2++) {
              var R3 = h3[w3 + A2], I2 = s[w3 + A2], Me = h3[w3 + A2 + b4], k2 = s[w3 + A2 + b4], D3 = g3 * Me - _3 * k2;
              k2 = g3 * k2 + _3 * Me, Me = D3, h3[w3 + A2] = R3 + Me, s[w3 + A2] = I2 + k2, h3[w3 + A2 + b4] = R3 - Me, s[w3 + A2 + b4] = I2 - k2, A2 !== l2 && (D3 = n2 * g3 - d2 * _3, _3 = n2 * _3 + d2 * g3, g3 = D3);
            }
      }, N5.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s = h3 & 1, u2 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u2++;
        return 1 << u2 + 1 + s;
      }, N5.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s = 0;s < h3 / 2; s++) {
            var u2 = i[s];
            i[s] = i[h3 - s - 1], i[h3 - s - 1] = u2, u2 = a2[s], a2[s] = -a2[h3 - s - 1], a2[h3 - s - 1] = -u2;
          }
      }, N5.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s = 0;s < a2 / 2; s++) {
          var u2 = Math.round(i[2 * s + 1] / a2) * 8192 + Math.round(i[2 * s] / a2) + h3;
          i[s] = u2 & 67108863, u2 < 67108864 ? h3 = 0 : h3 = u2 / 67108864 | 0;
        }
        return i;
      }, N5.prototype.convert13b = function(i, a2, h3, s) {
        for (var u2 = 0, c = 0;c < a2; c++)
          u2 = u2 + (i[c] | 0), h3[2 * c] = u2 & 8191, u2 = u2 >>> 13, h3[2 * c + 1] = u2 & 8191, u2 = u2 >>> 13;
        for (c = 2 * a2;c < s; ++c)
          h3[c] = 0;
        r(u2 === 0), r((u2 & -8192) === 0);
      }, N5.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N5.prototype.mulp = function(i, a2, h3) {
        var s = 2 * this.guessLen13b(i.length, a2.length), u2 = this.makeRBT(s), c = this.stub(s), b4 = new Array(s), l2 = new Array(s), n2 = new Array(s), d2 = new Array(s), w3 = new Array(s), g3 = new Array(s), _3 = h3.words;
        _3.length = s, this.convert13b(i.words, i.length, b4, s), this.convert13b(a2.words, a2.length, d2, s), this.transform(b4, c, l2, n2, s, u2), this.transform(d2, c, w3, g3, s, u2);
        for (var A2 = 0;A2 < s; A2++) {
          var R3 = l2[A2] * w3[A2] - n2[A2] * g3[A2];
          n2[A2] = l2[A2] * g3[A2] + n2[A2] * w3[A2], l2[A2] = R3;
        }
        return this.conjugate(l2, n2, s), this.transform(l2, n2, _3, c, s, u2), this.conjugate(_3, c, s), this.normalize13b(_3, s), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r(typeof i == "number"), r(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s = (this.words[h3] | 0) * i, u2 = (s & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s / 67108864 | 0, a2 += u2 >>> 26, this.words[h3] = u2 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B2(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s = 0;s < a2.length && a2[s] === 0; s++, h3 = h3.sqr())
          ;
        if (++s < a2.length)
          for (var u2 = h3.sqr();s < a2.length; s++, u2 = u2.sqr())
            a2[s] !== 0 && (h3 = h3.mul(u2));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 67108863 >>> 26 - a2 << 26 - a2, u2;
        if (a2 !== 0) {
          var c = 0;
          for (u2 = 0;u2 < this.length; u2++) {
            var b4 = this.words[u2] & s, l2 = (this.words[u2] | 0) - b4 << a2;
            this.words[u2] = l2 | c, c = b4 >>> 26 - a2;
          }
          c && (this.words[u2] = c, this.length++);
        }
        if (h3 !== 0) {
          for (u2 = this.length - 1;u2 >= 0; u2--)
            this.words[u2 + h3] = this.words[u2];
          for (u2 = 0;u2 < h3; u2++)
            this.words[u2] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r(typeof i == "number" && i >= 0);
        var s;
        a2 ? s = (a2 - a2 % 26) / 26 : s = 0;
        var u2 = i % 26, c = Math.min((i - u2) / 26, this.length), b4 = 67108863 ^ 67108863 >>> u2 << u2, l2 = h3;
        if (s -= c, s = Math.max(0, s), l2) {
          for (var n2 = 0;n2 < c; n2++)
            l2.words[n2] = this.words[n2];
          l2.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n2 = 0;n2 < this.length; n2++)
              this.words[n2] = this.words[n2 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n2 = this.length - 1;n2 >= 0 && (d2 !== 0 || n2 >= s); n2--) {
          var w3 = this.words[n2] | 0;
          this.words[n2] = d2 << 26 - u2 | w3 >>> u2, d2 = w3 & b4;
        }
        return l2 && d2 !== 0 && (l2.words[l2.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return false;
        var u2 = this.words[h3];
        return !!(u2 & s);
      }, f2.prototype.imaskn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r(typeof i == "number"), r(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r(typeof i == "number"), r(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s = i.length + h3, u2;
        this._expand(s);
        var c, b4 = 0;
        for (u2 = 0;u2 < i.length; u2++) {
          c = (this.words[u2 + h3] | 0) + b4;
          var l2 = (i.words[u2] | 0) * a2;
          c -= l2 & 67108863, b4 = (c >> 26) - (l2 / 67108864 | 0), this.words[u2 + h3] = c & 67108863;
        }
        for (;u2 < this.length - h3; u2++)
          c = (this.words[u2 + h3] | 0) + b4, b4 = c >> 26, this.words[u2 + h3] = c & 67108863;
        if (b4 === 0)
          return this.strip();
        for (r(b4 === -1), b4 = 0, u2 = 0;u2 < this.length; u2++)
          c = -(this.words[u2] | 0) + b4, b4 = c >> 26, this.words[u2] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s = this.clone(), u2 = i, c = u2.words[u2.length - 1] | 0, b4 = this._countBits(c);
        h3 = 26 - b4, h3 !== 0 && (u2 = u2.ushln(h3), s.iushln(h3), c = u2.words[u2.length - 1] | 0);
        var l2 = s.length - u2.length, n2;
        if (a2 !== "mod") {
          n2 = new f2(null), n2.length = l2 + 1, n2.words = new Array(n2.length);
          for (var d2 = 0;d2 < n2.length; d2++)
            n2.words[d2] = 0;
        }
        var w3 = s.clone()._ishlnsubmul(u2, 1, l2);
        w3.negative === 0 && (s = w3, n2 && (n2.words[l2] = 1));
        for (var g3 = l2 - 1;g3 >= 0; g3--) {
          var _3 = (s.words[u2.length + g3] | 0) * 67108864 + (s.words[u2.length + g3 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s._ishlnsubmul(u2, _3, g3);s.negative !== 0; )
            _3--, s.negative = 0, s._ishlnsubmul(u2, 1, g3), s.isZero() || (s.negative ^= 1);
          n2 && (n2.words[g3] = _3);
        }
        return n2 && n2.strip(), s.strip(), a2 !== "div" && h3 !== 0 && s.iushrn(h3), { div: n2 || null, mod: s };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s, u2, c;
        return this.negative !== 0 && i.negative === 0 ? (c = this.neg().divmod(i, a2), a2 !== "mod" && (s = c.div.neg()), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.iadd(i)), { div: s, mod: u2 }) : this.negative === 0 && i.negative !== 0 ? (c = this.divmod(i.neg(), a2), a2 !== "mod" && (s = c.div.neg()), { div: s, mod: c.mod }) : (this.negative & i.negative) !== 0 ? (c = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.isub(i)), { div: c.div, mod: u2 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s = i.ushrn(1), u2 = i.andln(1), c = h3.cmp(s);
        return c < 0 || u2 === 1 && c === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s = this.length - 1;s >= 0; s--)
          h3 = (a2 * h3 + (this.words[s] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s / i | 0, a2 = s % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = new f2(0), b4 = new f2(1), l2 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l2;
        for (var n2 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g3 = 1;(a2.words[0] & g3) === 0 && w3 < 26; ++w3, g3 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s.isOdd() || u2.isOdd()) && (s.iadd(n2), u2.isub(d2)), s.iushrn(1), u2.iushrn(1);
          for (var _3 = 0, A2 = 1;(h3.words[0] & A2) === 0 && _3 < 26; ++_3, A2 <<= 1)
            ;
          if (_3 > 0)
            for (h3.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b4.isOdd()) && (c.iadd(n2), b4.isub(d2)), c.iushrn(1), b4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(c), u2.isub(b4)) : (h3.isub(a2), c.isub(s), b4.isub(u2));
        }
        return { a: c, b: b4, gcd: h3.iushln(l2) };
      }, f2.prototype._invmp = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b4 = 0, l2 = 1;(a2.words[0] & l2) === 0 && b4 < 26; ++b4, l2 <<= 1)
            ;
          if (b4 > 0)
            for (a2.iushrn(b4);b4-- > 0; )
              s.isOdd() && s.iadd(c), s.iushrn(1);
          for (var n2 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n2 < 26; ++n2, d2 <<= 1)
            ;
          if (n2 > 0)
            for (h3.iushrn(n2);n2-- > 0; )
              u2.isOdd() && u2.iadd(c), u2.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(u2)) : (h3.isub(a2), u2.isub(s));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s : w3 = u2, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s = 0;a2.isEven() && h3.isEven(); s++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u2 = a2.cmp(h3);
          if (u2 < 0) {
            var c = a2;
            a2 = h3, h3 = c;
          } else if (u2 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s, this;
        for (var u2 = s, c = h3;u2 !== 0 && c < this.length; c++) {
          var b4 = this.words[c] | 0;
          b4 += u2, u2 = b4 >>> 26, b4 &= 67108863, this.words[c] = b4;
        }
        return u2 !== 0 && (this.words[c] = u2, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r(i <= 67108863, "Number is too big");
          var s = this.words[0] | 0;
          h3 = s === i ? 0 : s < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = this.words[h3] | 0, u2 = i.words[h3] | 0;
          if (s !== u2) {
            s < u2 ? a2 = -1 : s > u2 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P4(i);
      }, f2.prototype.toRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i) {
        this.name = v3, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s === 0 ? (a2.words[0] = 0, a2.length = 1) : s > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s = Math.min(i.length, 9), u2 = 0;u2 < s; u2++)
          a2.words[u2] = i.words[u2];
        if (a2.length = s, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c = i.words[9];
        for (a2.words[a2.length++] = c & h3, u2 = 10;u2 < i.length; u2++) {
          var b4 = i.words[u2] | 0;
          i.words[u2 - 10] = (b4 & h3) << 4 | c >>> 22, c = b4;
        }
        c >>>= 22, i.words[u2 - 10] = c, c === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = i.words[h3] | 0;
          a2 += s * 977, i.words[h3] = a2 & 67108863, a2 = s * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = (i.words[h3] | 0) * 19 + a2, u2 = s & 67108863;
          s >>>= 26, i.words[h3] = u2, a2 = s;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P4(v3) {
        if (typeof v3 == "string") {
          var i = f2._prime(v3);
          this.m = i.p, this.prime = i;
        } else
          r(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P4.prototype._verify1 = function(i) {
        r(i.negative === 0, "red works only with positives"), r(i.red, "red works only with red numbers");
      }, P4.prototype._verify2 = function(i, a2) {
        r((i.negative | a2.negative) === 0, "red works only with positives"), r(i.red && i.red === a2.red, "red works only with red numbers");
      }, P4.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P4.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P4.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P4.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P4.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P4.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P4.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P4.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P4.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P4.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P4.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P4.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s = this.m.subn(1), u2 = 0;!s.isZero() && s.andln(1) === 0; )
          u2++, s.iushrn(1);
        r(!s.isZero());
        var c = new f2(1).toRed(this), b4 = c.redNeg(), l2 = this.m.subn(1).iushrn(1), n2 = this.m.bitLength();
        for (n2 = new f2(2 * n2 * n2).toRed(this);this.pow(n2, l2).cmp(b4) !== 0; )
          n2.redIAdd(b4);
        for (var d2 = this.pow(n2, s), w3 = this.pow(i, s.addn(1).iushrn(1)), g3 = this.pow(i, s), _3 = u2;g3.cmp(c) !== 0; ) {
          for (var A2 = g3, R3 = 0;A2.cmp(c) !== 0; R3++)
            A2 = A2.redSqr();
          r(R3 < _3);
          var I2 = this.pow(d2, new f2(1).iushln(_3 - R3 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g3 = g3.redMul(d2), _3 = R3;
        }
        return w3;
      }, P4.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P4.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s = new Array(1 << h3);
        s[0] = new f2(1).toRed(this), s[1] = i;
        for (var u2 = 2;u2 < s.length; u2++)
          s[u2] = this.mul(s[u2 - 1], i);
        var c = s[0], b4 = 0, l2 = 0, n2 = a2.bitLength() % 26;
        for (n2 === 0 && (n2 = 26), u2 = a2.length - 1;u2 >= 0; u2--) {
          for (var d2 = a2.words[u2], w3 = n2 - 1;w3 >= 0; w3--) {
            var g3 = d2 >> w3 & 1;
            if (c !== s[0] && (c = this.sqr(c)), g3 === 0 && b4 === 0) {
              l2 = 0;
              continue;
            }
            b4 <<= 1, b4 |= g3, l2++, !(l2 !== h3 && (u2 !== 0 || w3 !== 0)) && (c = this.mul(c, s[b4]), l2 = 0, b4 = 0);
          }
          n2 = 26;
        }
        return c;
      }, P4.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P4.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v3) {
        P4.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P4), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Gu > "u" || Gu, $m);
  });
  Ym = T9((Gm, Xu) => {
    (function(t, e) {
      function r(v3, i) {
        if (!v3)
          throw new Error(i || "Assertion failed");
      }
      function o2(v3, i) {
        v3.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v3.prototype = new a2, v3.prototype.constructor = v3;
      }
      function f2(v3, i, a2) {
        if (f2.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v3 || 0, i || 10, a2 || "be"));
      }
      typeof t == "object" ? t.exports = f2 : e.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p = window.Buffer : p = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s = 0;
        i[0] === "-" && (s++, this.negative = 1), s < i.length && (a2 === 16 ? this._parseHex(i, s, h3) : (this._parseBase(i, a2, s), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2, c, b4 = 0;
        if (h3 === "be")
          for (s = i.length - 1, u2 = 0;s >= 0; s -= 3)
            c = i[s] | i[s - 1] << 8 | i[s - 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        else if (h3 === "le")
          for (s = 0, u2 = 0;s < i.length; s += 3)
            c = i[s] | i[s + 1] << 8 | i[s + 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        return this.strip();
      };
      function m2(v3, i) {
        var a2 = v3.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v3, i, a2) {
        var h3 = m2(v3, a2);
        return a2 - 1 >= i && (h3 |= m2(v3, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2 = 0, c = 0, b4;
        if (h3 === "be")
          for (s = i.length - 1;s >= a2; s -= 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        else {
          var l2 = i.length - a2;
          for (s = l2 % 2 === 0 ? a2 + 1 : a2;s < i.length; s += 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        }
        this.strip();
      };
      function M2(v3, i, a2, h3) {
        for (var s = 0, u2 = Math.min(v3.length, a2), c = i;c < u2; c++) {
          var b4 = v3.charCodeAt(c) - 48;
          s *= h3, b4 >= 49 ? s += b4 - 49 + 10 : b4 >= 17 ? s += b4 - 17 + 10 : s += b4;
        }
        return s;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s = 0, u2 = 1;u2 <= 67108863; u2 *= a2)
          s++;
        s--, u2 = u2 / a2 | 0;
        for (var c = i.length - h3, b4 = c % s, l2 = Math.min(c, c - b4) + h3, n2 = 0, d2 = h3;d2 < l2; d2 += s)
          n2 = M2(i, d2, d2 + s, a2), this.imuln(u2), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        if (b4 !== 0) {
          var w3 = 1;
          for (n2 = M2(i, d2, i.length, a2), d2 = 0;d2 < b4; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s = 0, u2 = 0, c = 0;c < this.length; c++) {
            var b4 = this.words[c], l2 = ((b4 << s | u2) & 16777215).toString(16);
            u2 = b4 >>> 24 - s & 16777215, u2 !== 0 || c !== this.length - 1 ? h3 = x4[6 - l2.length] + l2 + h3 : h3 = l2 + h3, s += 2, s >= 26 && (s -= 26, c--);
          }
          for (u2 !== 0 && (h3 = u2.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n2 = S3[i], d2 = E3[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g3 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g3 + h3 : h3 = x4[n2 - g3.length] + g3 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r(typeof p < "u"), this.toArrayLike(p, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s = this.byteLength(), u2 = h3 || Math.max(1, s);
        r(s <= u2, "byte array longer than desired length"), r(u2 > 0, "Requested array length <= 0"), this.strip();
        var c = a2 === "le", b4 = new i(u2), l2, n2, d2 = this.clone();
        if (c) {
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[n2] = l2;
          for (;n2 < u2; n2++)
            b4[n2] = 0;
        } else {
          for (n2 = 0;n2 < u2 - s; n2++)
            b4[n2] = 0;
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[u2 - n2 - 1] = l2;
        }
        return b4;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B2(v3) {
        for (var i = new Array(v3.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s = a2 % 26;
          i[a2] = (v3.words[h3] & 1 << s) >>> s;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s = 0;s < h3.length; s++)
          this.words[s] = a2.words[s] ^ h3.words[s];
        if (this !== a2)
          for (;s < a2.length; s++)
            this.words[s] = a2.words[s];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s = 0;s < a2; s++)
          this.words[s] = ~this.words[s] & 67108863;
        return h3 > 0 && (this.words[s] = ~this.words[s] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s : this.words[h3] = this.words[h3] & ~(1 << s), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s;
        this.length > i.length ? (h3 = this, s = i) : (h3 = i, s = this);
        for (var u2 = 0, c = 0;c < s.length; c++)
          a2 = (h3.words[c] | 0) + (s.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        for (;u2 !== 0 && c < h3.length; c++)
          a2 = (h3.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        if (this.length = h3.length, u2 !== 0)
          this.words[this.length] = u2, this.length++;
        else if (h3 !== this)
          for (;c < h3.length; c++)
            this.words[c] = h3.words[c];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s, u2;
        h3 > 0 ? (s = this, u2 = i) : (s = i, u2 = this);
        for (var c = 0, b4 = 0;b4 < u2.length; b4++)
          a2 = (s.words[b4] | 0) - (u2.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        for (;c !== 0 && b4 < s.length; b4++)
          a2 = (s.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        if (c === 0 && b4 < s.length && s !== this)
          for (;b4 < s.length; b4++)
            this.words[b4] = s.words[b4];
        return this.length = Math.max(this.length, b4), s !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative;
        var h3 = v3.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s = v3.words[0] | 0, u2 = i.words[0] | 0, c = s * u2, b4 = c & 67108863, l2 = c / 67108864 | 0;
        a2.words[0] = b4;
        for (var n2 = 1;n2 < h3; n2++) {
          for (var d2 = l2 >>> 26, w3 = l2 & 67108863, g3 = Math.min(n2, i.length - 1), _3 = Math.max(0, n2 - v3.length + 1);_3 <= g3; _3++) {
            var A2 = n2 - _3 | 0;
            s = v3.words[A2] | 0, u2 = i.words[_3] | 0, c = s * u2 + w3, d2 += c / 67108864 | 0, w3 = c & 67108863;
          }
          a2.words[n2] = w3 | 0, l2 = d2 | 0;
        }
        return l2 !== 0 ? a2.words[n2] = l2 | 0 : a2.length--, a2.strip();
      }
      var L3 = function(i, a2, h3) {
        var s = i.words, u2 = a2.words, c = h3.words, b4 = 0, l2, n2, d2, w3 = s[0] | 0, g3 = w3 & 8191, _3 = w3 >>> 13, A2 = s[1] | 0, R3 = A2 & 8191, I2 = A2 >>> 13, Me = s[2] | 0, k2 = Me & 8191, D3 = Me >>> 13, nt2 = s[3] | 0, C2 = nt2 & 8191, O3 = nt2 >>> 13, vt = s[4] | 0, F = vt & 8191, U5 = vt >>> 13, bt = s[5] | 0, z = bt & 8191, H2 = bt >>> 13, mt = s[6] | 0, W = mt & 8191, K3 = mt >>> 13, gt = s[7] | 0, j3 = gt & 8191, Z2 = gt >>> 13, yt = s[8] | 0, V2 = yt & 8191, $3 = yt >>> 13, wt = s[9] | 0, G2 = wt & 8191, Y2 = wt >>> 13, Mt = u2[0] | 0, X2 = Mt & 8191, J2 = Mt >>> 13, _t = u2[1] | 0, Q2 = _t & 8191, ee = _t >>> 13, xt = u2[2] | 0, te = xt & 8191, re = xt >>> 13, St = u2[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u2[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u2[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u2[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u2[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u2[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u2[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l2 = Math.imul(g3, X2), n2 = Math.imul(g3, J2), n2 = n2 + Math.imul(_3, X2) | 0, d2 = Math.imul(_3, J2);
        var ft2 = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ft2 >>> 26) | 0, ft2 &= 67108863, l2 = Math.imul(R3, X2), n2 = Math.imul(R3, J2), n2 = n2 + Math.imul(I2, X2) | 0, d2 = Math.imul(I2, J2), l2 = l2 + Math.imul(g3, Q2) | 0, n2 = n2 + Math.imul(g3, ee) | 0, n2 = n2 + Math.imul(_3, Q2) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l2 = Math.imul(k2, X2), n2 = Math.imul(k2, J2), n2 = n2 + Math.imul(D3, X2) | 0, d2 = Math.imul(D3, J2), l2 = l2 + Math.imul(R3, Q2) | 0, n2 = n2 + Math.imul(R3, ee) | 0, n2 = n2 + Math.imul(I2, Q2) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l2 = l2 + Math.imul(g3, te) | 0, n2 = n2 + Math.imul(g3, re) | 0, n2 = n2 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l2 = Math.imul(C2, X2), n2 = Math.imul(C2, J2), n2 = n2 + Math.imul(O3, X2) | 0, d2 = Math.imul(O3, J2), l2 = l2 + Math.imul(k2, Q2) | 0, n2 = n2 + Math.imul(k2, ee) | 0, n2 = n2 + Math.imul(D3, Q2) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l2 = l2 + Math.imul(R3, te) | 0, n2 = n2 + Math.imul(R3, re) | 0, n2 = n2 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l2 = l2 + Math.imul(g3, ie) | 0, n2 = n2 + Math.imul(g3, ne) | 0, n2 = n2 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l2 = Math.imul(F, X2), n2 = Math.imul(F, J2), n2 = n2 + Math.imul(U5, X2) | 0, d2 = Math.imul(U5, J2), l2 = l2 + Math.imul(C2, Q2) | 0, n2 = n2 + Math.imul(C2, ee) | 0, n2 = n2 + Math.imul(O3, Q2) | 0, d2 = d2 + Math.imul(O3, ee) | 0, l2 = l2 + Math.imul(k2, te) | 0, n2 = n2 + Math.imul(k2, re) | 0, n2 = n2 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l2 = l2 + Math.imul(R3, ie) | 0, n2 = n2 + Math.imul(R3, ne) | 0, n2 = n2 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l2 = l2 + Math.imul(g3, fe) | 0, n2 = n2 + Math.imul(g3, ae) | 0, n2 = n2 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l2 = Math.imul(z, X2), n2 = Math.imul(z, J2), n2 = n2 + Math.imul(H2, X2) | 0, d2 = Math.imul(H2, J2), l2 = l2 + Math.imul(F, Q2) | 0, n2 = n2 + Math.imul(F, ee) | 0, n2 = n2 + Math.imul(U5, Q2) | 0, d2 = d2 + Math.imul(U5, ee) | 0, l2 = l2 + Math.imul(C2, te) | 0, n2 = n2 + Math.imul(C2, re) | 0, n2 = n2 + Math.imul(O3, te) | 0, d2 = d2 + Math.imul(O3, re) | 0, l2 = l2 + Math.imul(k2, ie) | 0, n2 = n2 + Math.imul(k2, ne) | 0, n2 = n2 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l2 = l2 + Math.imul(R3, fe) | 0, n2 = n2 + Math.imul(R3, ae) | 0, n2 = n2 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l2 = l2 + Math.imul(g3, oe) | 0, n2 = n2 + Math.imul(g3, se) | 0, n2 = n2 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l2 = Math.imul(W, X2), n2 = Math.imul(W, J2), n2 = n2 + Math.imul(K3, X2) | 0, d2 = Math.imul(K3, J2), l2 = l2 + Math.imul(z, Q2) | 0, n2 = n2 + Math.imul(z, ee) | 0, n2 = n2 + Math.imul(H2, Q2) | 0, d2 = d2 + Math.imul(H2, ee) | 0, l2 = l2 + Math.imul(F, te) | 0, n2 = n2 + Math.imul(F, re) | 0, n2 = n2 + Math.imul(U5, te) | 0, d2 = d2 + Math.imul(U5, re) | 0, l2 = l2 + Math.imul(C2, ie) | 0, n2 = n2 + Math.imul(C2, ne) | 0, n2 = n2 + Math.imul(O3, ie) | 0, d2 = d2 + Math.imul(O3, ne) | 0, l2 = l2 + Math.imul(k2, fe) | 0, n2 = n2 + Math.imul(k2, ae) | 0, n2 = n2 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l2 = l2 + Math.imul(R3, oe) | 0, n2 = n2 + Math.imul(R3, se) | 0, n2 = n2 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l2 = l2 + Math.imul(g3, he) | 0, n2 = n2 + Math.imul(g3, ue) | 0, n2 = n2 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l2 = Math.imul(j3, X2), n2 = Math.imul(j3, J2), n2 = n2 + Math.imul(Z2, X2) | 0, d2 = Math.imul(Z2, J2), l2 = l2 + Math.imul(W, Q2) | 0, n2 = n2 + Math.imul(W, ee) | 0, n2 = n2 + Math.imul(K3, Q2) | 0, d2 = d2 + Math.imul(K3, ee) | 0, l2 = l2 + Math.imul(z, te) | 0, n2 = n2 + Math.imul(z, re) | 0, n2 = n2 + Math.imul(H2, te) | 0, d2 = d2 + Math.imul(H2, re) | 0, l2 = l2 + Math.imul(F, ie) | 0, n2 = n2 + Math.imul(F, ne) | 0, n2 = n2 + Math.imul(U5, ie) | 0, d2 = d2 + Math.imul(U5, ne) | 0, l2 = l2 + Math.imul(C2, fe) | 0, n2 = n2 + Math.imul(C2, ae) | 0, n2 = n2 + Math.imul(O3, fe) | 0, d2 = d2 + Math.imul(O3, ae) | 0, l2 = l2 + Math.imul(k2, oe) | 0, n2 = n2 + Math.imul(k2, se) | 0, n2 = n2 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l2 = l2 + Math.imul(R3, he) | 0, n2 = n2 + Math.imul(R3, ue) | 0, n2 = n2 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l2 = l2 + Math.imul(g3, le) | 0, n2 = n2 + Math.imul(g3, de) | 0, n2 = n2 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l2 = Math.imul(V2, X2), n2 = Math.imul(V2, J2), n2 = n2 + Math.imul($3, X2) | 0, d2 = Math.imul($3, J2), l2 = l2 + Math.imul(j3, Q2) | 0, n2 = n2 + Math.imul(j3, ee) | 0, n2 = n2 + Math.imul(Z2, Q2) | 0, d2 = d2 + Math.imul(Z2, ee) | 0, l2 = l2 + Math.imul(W, te) | 0, n2 = n2 + Math.imul(W, re) | 0, n2 = n2 + Math.imul(K3, te) | 0, d2 = d2 + Math.imul(K3, re) | 0, l2 = l2 + Math.imul(z, ie) | 0, n2 = n2 + Math.imul(z, ne) | 0, n2 = n2 + Math.imul(H2, ie) | 0, d2 = d2 + Math.imul(H2, ne) | 0, l2 = l2 + Math.imul(F, fe) | 0, n2 = n2 + Math.imul(F, ae) | 0, n2 = n2 + Math.imul(U5, fe) | 0, d2 = d2 + Math.imul(U5, ae) | 0, l2 = l2 + Math.imul(C2, oe) | 0, n2 = n2 + Math.imul(C2, se) | 0, n2 = n2 + Math.imul(O3, oe) | 0, d2 = d2 + Math.imul(O3, se) | 0, l2 = l2 + Math.imul(k2, he) | 0, n2 = n2 + Math.imul(k2, ue) | 0, n2 = n2 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l2 = l2 + Math.imul(R3, le) | 0, n2 = n2 + Math.imul(R3, de) | 0, n2 = n2 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l2 = l2 + Math.imul(g3, ce) | 0, n2 = n2 + Math.imul(g3, pe) | 0, n2 = n2 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l2 = Math.imul(G2, X2), n2 = Math.imul(G2, J2), n2 = n2 + Math.imul(Y2, X2) | 0, d2 = Math.imul(Y2, J2), l2 = l2 + Math.imul(V2, Q2) | 0, n2 = n2 + Math.imul(V2, ee) | 0, n2 = n2 + Math.imul($3, Q2) | 0, d2 = d2 + Math.imul($3, ee) | 0, l2 = l2 + Math.imul(j3, te) | 0, n2 = n2 + Math.imul(j3, re) | 0, n2 = n2 + Math.imul(Z2, te) | 0, d2 = d2 + Math.imul(Z2, re) | 0, l2 = l2 + Math.imul(W, ie) | 0, n2 = n2 + Math.imul(W, ne) | 0, n2 = n2 + Math.imul(K3, ie) | 0, d2 = d2 + Math.imul(K3, ne) | 0, l2 = l2 + Math.imul(z, fe) | 0, n2 = n2 + Math.imul(z, ae) | 0, n2 = n2 + Math.imul(H2, fe) | 0, d2 = d2 + Math.imul(H2, ae) | 0, l2 = l2 + Math.imul(F, oe) | 0, n2 = n2 + Math.imul(F, se) | 0, n2 = n2 + Math.imul(U5, oe) | 0, d2 = d2 + Math.imul(U5, se) | 0, l2 = l2 + Math.imul(C2, he) | 0, n2 = n2 + Math.imul(C2, ue) | 0, n2 = n2 + Math.imul(O3, he) | 0, d2 = d2 + Math.imul(O3, ue) | 0, l2 = l2 + Math.imul(k2, le) | 0, n2 = n2 + Math.imul(k2, de) | 0, n2 = n2 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l2 = l2 + Math.imul(R3, ce) | 0, n2 = n2 + Math.imul(R3, pe) | 0, n2 = n2 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l2 = l2 + Math.imul(g3, ve) | 0, n2 = n2 + Math.imul(g3, be) | 0, n2 = n2 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l2 = Math.imul(G2, Q2), n2 = Math.imul(G2, ee), n2 = n2 + Math.imul(Y2, Q2) | 0, d2 = Math.imul(Y2, ee), l2 = l2 + Math.imul(V2, te) | 0, n2 = n2 + Math.imul(V2, re) | 0, n2 = n2 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l2 = l2 + Math.imul(j3, ie) | 0, n2 = n2 + Math.imul(j3, ne) | 0, n2 = n2 + Math.imul(Z2, ie) | 0, d2 = d2 + Math.imul(Z2, ne) | 0, l2 = l2 + Math.imul(W, fe) | 0, n2 = n2 + Math.imul(W, ae) | 0, n2 = n2 + Math.imul(K3, fe) | 0, d2 = d2 + Math.imul(K3, ae) | 0, l2 = l2 + Math.imul(z, oe) | 0, n2 = n2 + Math.imul(z, se) | 0, n2 = n2 + Math.imul(H2, oe) | 0, d2 = d2 + Math.imul(H2, se) | 0, l2 = l2 + Math.imul(F, he) | 0, n2 = n2 + Math.imul(F, ue) | 0, n2 = n2 + Math.imul(U5, he) | 0, d2 = d2 + Math.imul(U5, ue) | 0, l2 = l2 + Math.imul(C2, le) | 0, n2 = n2 + Math.imul(C2, de) | 0, n2 = n2 + Math.imul(O3, le) | 0, d2 = d2 + Math.imul(O3, de) | 0, l2 = l2 + Math.imul(k2, ce) | 0, n2 = n2 + Math.imul(k2, pe) | 0, n2 = n2 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l2 = l2 + Math.imul(R3, ve) | 0, n2 = n2 + Math.imul(R3, be) | 0, n2 = n2 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l2 = Math.imul(G2, te), n2 = Math.imul(G2, re), n2 = n2 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l2 = l2 + Math.imul(V2, ie) | 0, n2 = n2 + Math.imul(V2, ne) | 0, n2 = n2 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l2 = l2 + Math.imul(j3, fe) | 0, n2 = n2 + Math.imul(j3, ae) | 0, n2 = n2 + Math.imul(Z2, fe) | 0, d2 = d2 + Math.imul(Z2, ae) | 0, l2 = l2 + Math.imul(W, oe) | 0, n2 = n2 + Math.imul(W, se) | 0, n2 = n2 + Math.imul(K3, oe) | 0, d2 = d2 + Math.imul(K3, se) | 0, l2 = l2 + Math.imul(z, he) | 0, n2 = n2 + Math.imul(z, ue) | 0, n2 = n2 + Math.imul(H2, he) | 0, d2 = d2 + Math.imul(H2, ue) | 0, l2 = l2 + Math.imul(F, le) | 0, n2 = n2 + Math.imul(F, de) | 0, n2 = n2 + Math.imul(U5, le) | 0, d2 = d2 + Math.imul(U5, de) | 0, l2 = l2 + Math.imul(C2, ce) | 0, n2 = n2 + Math.imul(C2, pe) | 0, n2 = n2 + Math.imul(O3, ce) | 0, d2 = d2 + Math.imul(O3, pe) | 0, l2 = l2 + Math.imul(k2, ve) | 0, n2 = n2 + Math.imul(k2, be) | 0, n2 = n2 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l2 = Math.imul(G2, ie), n2 = Math.imul(G2, ne), n2 = n2 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l2 = l2 + Math.imul(V2, fe) | 0, n2 = n2 + Math.imul(V2, ae) | 0, n2 = n2 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l2 = l2 + Math.imul(j3, oe) | 0, n2 = n2 + Math.imul(j3, se) | 0, n2 = n2 + Math.imul(Z2, oe) | 0, d2 = d2 + Math.imul(Z2, se) | 0, l2 = l2 + Math.imul(W, he) | 0, n2 = n2 + Math.imul(W, ue) | 0, n2 = n2 + Math.imul(K3, he) | 0, d2 = d2 + Math.imul(K3, ue) | 0, l2 = l2 + Math.imul(z, le) | 0, n2 = n2 + Math.imul(z, de) | 0, n2 = n2 + Math.imul(H2, le) | 0, d2 = d2 + Math.imul(H2, de) | 0, l2 = l2 + Math.imul(F, ce) | 0, n2 = n2 + Math.imul(F, pe) | 0, n2 = n2 + Math.imul(U5, ce) | 0, d2 = d2 + Math.imul(U5, pe) | 0, l2 = l2 + Math.imul(C2, ve) | 0, n2 = n2 + Math.imul(C2, be) | 0, n2 = n2 + Math.imul(O3, ve) | 0, d2 = d2 + Math.imul(O3, be) | 0;
        var Ye = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l2 = Math.imul(G2, fe), n2 = Math.imul(G2, ae), n2 = n2 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l2 = l2 + Math.imul(V2, oe) | 0, n2 = n2 + Math.imul(V2, se) | 0, n2 = n2 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l2 = l2 + Math.imul(j3, he) | 0, n2 = n2 + Math.imul(j3, ue) | 0, n2 = n2 + Math.imul(Z2, he) | 0, d2 = d2 + Math.imul(Z2, ue) | 0, l2 = l2 + Math.imul(W, le) | 0, n2 = n2 + Math.imul(W, de) | 0, n2 = n2 + Math.imul(K3, le) | 0, d2 = d2 + Math.imul(K3, de) | 0, l2 = l2 + Math.imul(z, ce) | 0, n2 = n2 + Math.imul(z, pe) | 0, n2 = n2 + Math.imul(H2, ce) | 0, d2 = d2 + Math.imul(H2, pe) | 0, l2 = l2 + Math.imul(F, ve) | 0, n2 = n2 + Math.imul(F, be) | 0, n2 = n2 + Math.imul(U5, ve) | 0, d2 = d2 + Math.imul(U5, be) | 0;
        var Xe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l2 = Math.imul(G2, oe), n2 = Math.imul(G2, se), n2 = n2 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l2 = l2 + Math.imul(V2, he) | 0, n2 = n2 + Math.imul(V2, ue) | 0, n2 = n2 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l2 = l2 + Math.imul(j3, le) | 0, n2 = n2 + Math.imul(j3, de) | 0, n2 = n2 + Math.imul(Z2, le) | 0, d2 = d2 + Math.imul(Z2, de) | 0, l2 = l2 + Math.imul(W, ce) | 0, n2 = n2 + Math.imul(W, pe) | 0, n2 = n2 + Math.imul(K3, ce) | 0, d2 = d2 + Math.imul(K3, pe) | 0, l2 = l2 + Math.imul(z, ve) | 0, n2 = n2 + Math.imul(z, be) | 0, n2 = n2 + Math.imul(H2, ve) | 0, d2 = d2 + Math.imul(H2, be) | 0;
        var Je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l2 = Math.imul(G2, he), n2 = Math.imul(G2, ue), n2 = n2 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l2 = l2 + Math.imul(V2, le) | 0, n2 = n2 + Math.imul(V2, de) | 0, n2 = n2 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l2 = l2 + Math.imul(j3, ce) | 0, n2 = n2 + Math.imul(j3, pe) | 0, n2 = n2 + Math.imul(Z2, ce) | 0, d2 = d2 + Math.imul(Z2, pe) | 0, l2 = l2 + Math.imul(W, ve) | 0, n2 = n2 + Math.imul(W, be) | 0, n2 = n2 + Math.imul(K3, ve) | 0, d2 = d2 + Math.imul(K3, be) | 0;
        var Qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l2 = Math.imul(G2, le), n2 = Math.imul(G2, de), n2 = n2 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l2 = l2 + Math.imul(V2, ce) | 0, n2 = n2 + Math.imul(V2, pe) | 0, n2 = n2 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l2 = l2 + Math.imul(j3, ve) | 0, n2 = n2 + Math.imul(j3, be) | 0, n2 = n2 + Math.imul(Z2, ve) | 0, d2 = d2 + Math.imul(Z2, be) | 0;
        var et = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l2 = Math.imul(G2, ce), n2 = Math.imul(G2, pe), n2 = n2 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l2 = l2 + Math.imul(V2, ve) | 0, n2 = n2 + Math.imul(V2, be) | 0, n2 = n2 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l2 = Math.imul(G2, ve), n2 = Math.imul(G2, be), n2 = n2 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        return b4 = (d2 + (n2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft2, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b4 !== 0 && (c[19] = b4, h3.length++), h3;
      };
      Math.imul || (L3 = q);
      function ge(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative, a2.length = v3.length + i.length;
        for (var h3 = 0, s = 0, u2 = 0;u2 < a2.length - 1; u2++) {
          var c = s;
          s = 0;
          for (var b4 = h3 & 67108863, l2 = Math.min(u2, i.length - 1), n2 = Math.max(0, u2 - v3.length + 1);n2 <= l2; n2++) {
            var d2 = u2 - n2, w3 = v3.words[d2] | 0, g3 = i.words[n2] | 0, _3 = w3 * g3, A2 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A2 = A2 + b4 | 0, b4 = A2 & 67108863, c = c + (A2 >>> 26) | 0, s += c >>> 26, c &= 67108863;
          }
          a2.words[u2] = b4, h3 = c, c = s;
        }
        return h3 !== 0 ? a2.words[u2] = h3 : a2.length--, a2.strip();
      }
      function _e(v3, i, a2) {
        var h3 = new N5;
        return h3.mulp(v3, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L3(this, i, a2) : s < 63 ? h3 = q(this, i, a2) : s < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N5(v3, i) {
        this.x = v3, this.y = i;
      }
      N5.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s = 0;s < i; s++)
          a2[s] = this.revBin(s, h3, i);
        return a2;
      }, N5.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s = 0, u2 = 0;u2 < a2; u2++)
          s |= (i & 1) << a2 - u2 - 1, i >>= 1;
        return s;
      }, N5.prototype.permute = function(i, a2, h3, s, u2, c) {
        for (var b4 = 0;b4 < c; b4++)
          s[b4] = a2[i[b4]], u2[b4] = h3[i[b4]];
      }, N5.prototype.transform = function(i, a2, h3, s, u2, c) {
        this.permute(c, i, a2, h3, s, u2);
        for (var b4 = 1;b4 < u2; b4 <<= 1)
          for (var l2 = b4 << 1, n2 = Math.cos(2 * Math.PI / l2), d2 = Math.sin(2 * Math.PI / l2), w3 = 0;w3 < u2; w3 += l2)
            for (var g3 = n2, _3 = d2, A2 = 0;A2 < b4; A2++) {
              var R3 = h3[w3 + A2], I2 = s[w3 + A2], Me = h3[w3 + A2 + b4], k2 = s[w3 + A2 + b4], D3 = g3 * Me - _3 * k2;
              k2 = g3 * k2 + _3 * Me, Me = D3, h3[w3 + A2] = R3 + Me, s[w3 + A2] = I2 + k2, h3[w3 + A2 + b4] = R3 - Me, s[w3 + A2 + b4] = I2 - k2, A2 !== l2 && (D3 = n2 * g3 - d2 * _3, _3 = n2 * _3 + d2 * g3, g3 = D3);
            }
      }, N5.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s = h3 & 1, u2 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u2++;
        return 1 << u2 + 1 + s;
      }, N5.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s = 0;s < h3 / 2; s++) {
            var u2 = i[s];
            i[s] = i[h3 - s - 1], i[h3 - s - 1] = u2, u2 = a2[s], a2[s] = -a2[h3 - s - 1], a2[h3 - s - 1] = -u2;
          }
      }, N5.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s = 0;s < a2 / 2; s++) {
          var u2 = Math.round(i[2 * s + 1] / a2) * 8192 + Math.round(i[2 * s] / a2) + h3;
          i[s] = u2 & 67108863, u2 < 67108864 ? h3 = 0 : h3 = u2 / 67108864 | 0;
        }
        return i;
      }, N5.prototype.convert13b = function(i, a2, h3, s) {
        for (var u2 = 0, c = 0;c < a2; c++)
          u2 = u2 + (i[c] | 0), h3[2 * c] = u2 & 8191, u2 = u2 >>> 13, h3[2 * c + 1] = u2 & 8191, u2 = u2 >>> 13;
        for (c = 2 * a2;c < s; ++c)
          h3[c] = 0;
        r(u2 === 0), r((u2 & -8192) === 0);
      }, N5.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N5.prototype.mulp = function(i, a2, h3) {
        var s = 2 * this.guessLen13b(i.length, a2.length), u2 = this.makeRBT(s), c = this.stub(s), b4 = new Array(s), l2 = new Array(s), n2 = new Array(s), d2 = new Array(s), w3 = new Array(s), g3 = new Array(s), _3 = h3.words;
        _3.length = s, this.convert13b(i.words, i.length, b4, s), this.convert13b(a2.words, a2.length, d2, s), this.transform(b4, c, l2, n2, s, u2), this.transform(d2, c, w3, g3, s, u2);
        for (var A2 = 0;A2 < s; A2++) {
          var R3 = l2[A2] * w3[A2] - n2[A2] * g3[A2];
          n2[A2] = l2[A2] * g3[A2] + n2[A2] * w3[A2], l2[A2] = R3;
        }
        return this.conjugate(l2, n2, s), this.transform(l2, n2, _3, c, s, u2), this.conjugate(_3, c, s), this.normalize13b(_3, s), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r(typeof i == "number"), r(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s = (this.words[h3] | 0) * i, u2 = (s & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s / 67108864 | 0, a2 += u2 >>> 26, this.words[h3] = u2 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B2(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s = 0;s < a2.length && a2[s] === 0; s++, h3 = h3.sqr())
          ;
        if (++s < a2.length)
          for (var u2 = h3.sqr();s < a2.length; s++, u2 = u2.sqr())
            a2[s] !== 0 && (h3 = h3.mul(u2));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 67108863 >>> 26 - a2 << 26 - a2, u2;
        if (a2 !== 0) {
          var c = 0;
          for (u2 = 0;u2 < this.length; u2++) {
            var b4 = this.words[u2] & s, l2 = (this.words[u2] | 0) - b4 << a2;
            this.words[u2] = l2 | c, c = b4 >>> 26 - a2;
          }
          c && (this.words[u2] = c, this.length++);
        }
        if (h3 !== 0) {
          for (u2 = this.length - 1;u2 >= 0; u2--)
            this.words[u2 + h3] = this.words[u2];
          for (u2 = 0;u2 < h3; u2++)
            this.words[u2] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r(typeof i == "number" && i >= 0);
        var s;
        a2 ? s = (a2 - a2 % 26) / 26 : s = 0;
        var u2 = i % 26, c = Math.min((i - u2) / 26, this.length), b4 = 67108863 ^ 67108863 >>> u2 << u2, l2 = h3;
        if (s -= c, s = Math.max(0, s), l2) {
          for (var n2 = 0;n2 < c; n2++)
            l2.words[n2] = this.words[n2];
          l2.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n2 = 0;n2 < this.length; n2++)
              this.words[n2] = this.words[n2 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n2 = this.length - 1;n2 >= 0 && (d2 !== 0 || n2 >= s); n2--) {
          var w3 = this.words[n2] | 0;
          this.words[n2] = d2 << 26 - u2 | w3 >>> u2, d2 = w3 & b4;
        }
        return l2 && d2 !== 0 && (l2.words[l2.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return false;
        var u2 = this.words[h3];
        return !!(u2 & s);
      }, f2.prototype.imaskn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r(typeof i == "number"), r(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r(typeof i == "number"), r(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s = i.length + h3, u2;
        this._expand(s);
        var c, b4 = 0;
        for (u2 = 0;u2 < i.length; u2++) {
          c = (this.words[u2 + h3] | 0) + b4;
          var l2 = (i.words[u2] | 0) * a2;
          c -= l2 & 67108863, b4 = (c >> 26) - (l2 / 67108864 | 0), this.words[u2 + h3] = c & 67108863;
        }
        for (;u2 < this.length - h3; u2++)
          c = (this.words[u2 + h3] | 0) + b4, b4 = c >> 26, this.words[u2 + h3] = c & 67108863;
        if (b4 === 0)
          return this.strip();
        for (r(b4 === -1), b4 = 0, u2 = 0;u2 < this.length; u2++)
          c = -(this.words[u2] | 0) + b4, b4 = c >> 26, this.words[u2] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s = this.clone(), u2 = i, c = u2.words[u2.length - 1] | 0, b4 = this._countBits(c);
        h3 = 26 - b4, h3 !== 0 && (u2 = u2.ushln(h3), s.iushln(h3), c = u2.words[u2.length - 1] | 0);
        var l2 = s.length - u2.length, n2;
        if (a2 !== "mod") {
          n2 = new f2(null), n2.length = l2 + 1, n2.words = new Array(n2.length);
          for (var d2 = 0;d2 < n2.length; d2++)
            n2.words[d2] = 0;
        }
        var w3 = s.clone()._ishlnsubmul(u2, 1, l2);
        w3.negative === 0 && (s = w3, n2 && (n2.words[l2] = 1));
        for (var g3 = l2 - 1;g3 >= 0; g3--) {
          var _3 = (s.words[u2.length + g3] | 0) * 67108864 + (s.words[u2.length + g3 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s._ishlnsubmul(u2, _3, g3);s.negative !== 0; )
            _3--, s.negative = 0, s._ishlnsubmul(u2, 1, g3), s.isZero() || (s.negative ^= 1);
          n2 && (n2.words[g3] = _3);
        }
        return n2 && n2.strip(), s.strip(), a2 !== "div" && h3 !== 0 && s.iushrn(h3), { div: n2 || null, mod: s };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s, u2, c;
        return this.negative !== 0 && i.negative === 0 ? (c = this.neg().divmod(i, a2), a2 !== "mod" && (s = c.div.neg()), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.iadd(i)), { div: s, mod: u2 }) : this.negative === 0 && i.negative !== 0 ? (c = this.divmod(i.neg(), a2), a2 !== "mod" && (s = c.div.neg()), { div: s, mod: c.mod }) : (this.negative & i.negative) !== 0 ? (c = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.isub(i)), { div: c.div, mod: u2 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s = i.ushrn(1), u2 = i.andln(1), c = h3.cmp(s);
        return c < 0 || u2 === 1 && c === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s = this.length - 1;s >= 0; s--)
          h3 = (a2 * h3 + (this.words[s] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s / i | 0, a2 = s % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = new f2(0), b4 = new f2(1), l2 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l2;
        for (var n2 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g3 = 1;(a2.words[0] & g3) === 0 && w3 < 26; ++w3, g3 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s.isOdd() || u2.isOdd()) && (s.iadd(n2), u2.isub(d2)), s.iushrn(1), u2.iushrn(1);
          for (var _3 = 0, A2 = 1;(h3.words[0] & A2) === 0 && _3 < 26; ++_3, A2 <<= 1)
            ;
          if (_3 > 0)
            for (h3.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b4.isOdd()) && (c.iadd(n2), b4.isub(d2)), c.iushrn(1), b4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(c), u2.isub(b4)) : (h3.isub(a2), c.isub(s), b4.isub(u2));
        }
        return { a: c, b: b4, gcd: h3.iushln(l2) };
      }, f2.prototype._invmp = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b4 = 0, l2 = 1;(a2.words[0] & l2) === 0 && b4 < 26; ++b4, l2 <<= 1)
            ;
          if (b4 > 0)
            for (a2.iushrn(b4);b4-- > 0; )
              s.isOdd() && s.iadd(c), s.iushrn(1);
          for (var n2 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n2 < 26; ++n2, d2 <<= 1)
            ;
          if (n2 > 0)
            for (h3.iushrn(n2);n2-- > 0; )
              u2.isOdd() && u2.iadd(c), u2.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(u2)) : (h3.isub(a2), u2.isub(s));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s : w3 = u2, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s = 0;a2.isEven() && h3.isEven(); s++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u2 = a2.cmp(h3);
          if (u2 < 0) {
            var c = a2;
            a2 = h3, h3 = c;
          } else if (u2 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s, this;
        for (var u2 = s, c = h3;u2 !== 0 && c < this.length; c++) {
          var b4 = this.words[c] | 0;
          b4 += u2, u2 = b4 >>> 26, b4 &= 67108863, this.words[c] = b4;
        }
        return u2 !== 0 && (this.words[c] = u2, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r(i <= 67108863, "Number is too big");
          var s = this.words[0] | 0;
          h3 = s === i ? 0 : s < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = this.words[h3] | 0, u2 = i.words[h3] | 0;
          if (s !== u2) {
            s < u2 ? a2 = -1 : s > u2 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P4(i);
      }, f2.prototype.toRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i) {
        this.name = v3, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s === 0 ? (a2.words[0] = 0, a2.length = 1) : s > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s = Math.min(i.length, 9), u2 = 0;u2 < s; u2++)
          a2.words[u2] = i.words[u2];
        if (a2.length = s, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c = i.words[9];
        for (a2.words[a2.length++] = c & h3, u2 = 10;u2 < i.length; u2++) {
          var b4 = i.words[u2] | 0;
          i.words[u2 - 10] = (b4 & h3) << 4 | c >>> 22, c = b4;
        }
        c >>>= 22, i.words[u2 - 10] = c, c === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = i.words[h3] | 0;
          a2 += s * 977, i.words[h3] = a2 & 67108863, a2 = s * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = (i.words[h3] | 0) * 19 + a2, u2 = s & 67108863;
          s >>>= 26, i.words[h3] = u2, a2 = s;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P4(v3) {
        if (typeof v3 == "string") {
          var i = f2._prime(v3);
          this.m = i.p, this.prime = i;
        } else
          r(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P4.prototype._verify1 = function(i) {
        r(i.negative === 0, "red works only with positives"), r(i.red, "red works only with red numbers");
      }, P4.prototype._verify2 = function(i, a2) {
        r((i.negative | a2.negative) === 0, "red works only with positives"), r(i.red && i.red === a2.red, "red works only with red numbers");
      }, P4.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P4.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P4.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P4.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P4.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P4.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P4.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P4.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P4.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P4.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P4.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P4.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s = this.m.subn(1), u2 = 0;!s.isZero() && s.andln(1) === 0; )
          u2++, s.iushrn(1);
        r(!s.isZero());
        var c = new f2(1).toRed(this), b4 = c.redNeg(), l2 = this.m.subn(1).iushrn(1), n2 = this.m.bitLength();
        for (n2 = new f2(2 * n2 * n2).toRed(this);this.pow(n2, l2).cmp(b4) !== 0; )
          n2.redIAdd(b4);
        for (var d2 = this.pow(n2, s), w3 = this.pow(i, s.addn(1).iushrn(1)), g3 = this.pow(i, s), _3 = u2;g3.cmp(c) !== 0; ) {
          for (var A2 = g3, R3 = 0;A2.cmp(c) !== 0; R3++)
            A2 = A2.redSqr();
          r(R3 < _3);
          var I2 = this.pow(d2, new f2(1).iushln(_3 - R3 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g3 = g3.redMul(d2), _3 = R3;
        }
        return w3;
      }, P4.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P4.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s = new Array(1 << h3);
        s[0] = new f2(1).toRed(this), s[1] = i;
        for (var u2 = 2;u2 < s.length; u2++)
          s[u2] = this.mul(s[u2 - 1], i);
        var c = s[0], b4 = 0, l2 = 0, n2 = a2.bitLength() % 26;
        for (n2 === 0 && (n2 = 26), u2 = a2.length - 1;u2 >= 0; u2--) {
          for (var d2 = a2.words[u2], w3 = n2 - 1;w3 >= 0; w3--) {
            var g3 = d2 >> w3 & 1;
            if (c !== s[0] && (c = this.sqr(c)), g3 === 0 && b4 === 0) {
              l2 = 0;
              continue;
            }
            b4 <<= 1, b4 |= g3, l2++, !(l2 !== h3 && (u2 !== 0 || w3 !== 0)) && (c = this.mul(c, s[b4]), l2 = 0, b4 = 0);
          }
          n2 = 26;
        }
        return c;
      }, P4.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P4.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v3) {
        P4.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P4), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Xu > "u" || Xu, Gm);
  });
  Xm = T9(() => {
  });
  As = T9(($T, el) => {
    var Ju;
    el.exports = function(e) {
      return Ju || (Ju = new Zi(null)), Ju.generate(e);
    };
    function Zi(t) {
      this.rand = t;
    }
    el.exports.Rand = Zi;
    Zi.prototype.generate = function(e) {
      return this._rand(e);
    };
    Zi.prototype._rand = function(e) {
      if (this.rand.getBytes)
        return this.rand.getBytes(e);
      for (var r = new Uint8Array(e), o2 = 0;o2 < r.length; o2++)
        r[o2] = this.rand.getByte();
      return r;
    };
    if (typeof self == "object")
      self.crypto && self.crypto.getRandomValues ? Zi.prototype._rand = function(e) {
        var r = new Uint8Array(e);
        return self.crypto.getRandomValues(r), r;
      } : self.msCrypto && self.msCrypto.getRandomValues ? Zi.prototype._rand = function(e) {
        var r = new Uint8Array(e);
        return self.msCrypto.getRandomValues(r), r;
      } : typeof window == "object" && (Zi.prototype._rand = function() {
        throw new Error("Not implemented yet");
      });
    else
      try {
        if (Qu = Xm(), typeof Qu.randomBytes != "function")
          throw new Error("Not supported");
        Zi.prototype._rand = function(e) {
          return Qu.randomBytes(e);
        };
      } catch {
      }
    var Qu;
  });
  tl = T9((GT, Jm) => {
    var In = Ym(), Q9 = As();
    function Tn(t) {
      this.rand = t || new Q9.Rand;
    }
    Jm.exports = Tn;
    Tn.create = function(e) {
      return new Tn(e);
    };
    Tn.prototype._randbelow = function(e) {
      var r = e.bitLength(), o2 = Math.ceil(r / 8);
      do
        var f2 = new In(this.rand.generate(o2));
      while (f2.cmp(e) >= 0);
      return f2;
    };
    Tn.prototype._randrange = function(e, r) {
      var o2 = r.sub(e);
      return e.add(this._randbelow(o2));
    };
    Tn.prototype.test = function(e, r, o2) {
      var f2 = e.bitLength(), p = In.mont(e), m2 = new In(1).toRed(p);
      r || (r = Math.max(1, f2 / 48 | 0));
      for (var y3 = e.subn(1), M2 = 0;!y3.testn(M2); M2++)
        ;
      for (var x4 = e.shrn(M2), S3 = y3.toRed(p), E3 = true;r > 0; r--) {
        var B2 = this._randrange(new In(2), y3);
        o2 && o2(B2);
        var q = B2.toRed(p).redPow(x4);
        if (!(q.cmp(m2) === 0 || q.cmp(S3) === 0)) {
          for (var L3 = 1;L3 < M2; L3++) {
            if (q = q.redSqr(), q.cmp(m2) === 0)
              return false;
            if (q.cmp(S3) === 0)
              break;
          }
          if (L3 === M2)
            return false;
        }
      }
      return E3;
    };
    Tn.prototype.getDivisor = function(e, r) {
      var o2 = e.bitLength(), f2 = In.mont(e), p = new In(1).toRed(f2);
      r || (r = Math.max(1, o2 / 48 | 0));
      for (var m2 = e.subn(1), y3 = 0;!m2.testn(y3); y3++)
        ;
      for (var M2 = e.shrn(y3), x4 = m2.toRed(f2);r > 0; r--) {
        var S3 = this._randrange(new In(2), m2), E3 = e.gcd(S3);
        if (E3.cmpn(1) !== 0)
          return E3;
        var B2 = S3.toRed(f2).redPow(M2);
        if (!(B2.cmp(p) === 0 || B2.cmp(x4) === 0)) {
          for (var q = 1;q < y3; q++) {
            if (B2 = B2.redSqr(), B2.cmp(p) === 0)
              return B2.fromRed().subn(1).gcd(e);
            if (B2.cmp(x4) === 0)
              break;
          }
          if (q === y3)
            return B2 = B2.redSqr(), B2.fromRed().subn(1).gcd(e);
        }
      }
      return false;
    };
  });
  ol = T9((ek, tg) => {
    var eS = on();
    tg.exports = al;
    al.simpleSieve = nl;
    al.fermatTest = fl;
    var Ht = Yu(), tS = new Ht(24), rS = tl(), Qm = new rS, iS = new Ht(1), il = new Ht(2), nS = new Ht(5), YT = new Ht(16), XT = new Ht(8), fS = new Ht(10), aS = new Ht(3), JT = new Ht(7), oS = new Ht(11), eg = new Ht(4), QT = new Ht(12), rl = null;
    function sS() {
      if (rl !== null)
        return rl;
      var t = 1048576, e = [];
      e[0] = 2;
      for (var r = 1, o2 = 3;o2 < t; o2 += 2) {
        for (var f2 = Math.ceil(Math.sqrt(o2)), p = 0;p < r && e[p] <= f2 && o2 % e[p] !== 0; p++)
          ;
        r !== p && e[p] <= f2 || (e[r++] = o2);
      }
      return rl = e, e;
    }
    function nl(t) {
      for (var e = sS(), r = 0;r < e.length; r++)
        if (t.modn(e[r]) === 0)
          return t.cmpn(e[r]) === 0;
      return true;
    }
    function fl(t) {
      var e = Ht.mont(t);
      return il.toRed(e).redPow(t.subn(1)).fromRed().cmpn(1) === 0;
    }
    function al(t, e) {
      if (t < 16)
        return e === 2 || e === 5 ? new Ht([140, 123]) : new Ht([140, 39]);
      e = new Ht(e);
      for (var r, o2;; ) {
        for (r = new Ht(eS(Math.ceil(t / 8)));r.bitLength() > t; )
          r.ishrn(1);
        if (r.isEven() && r.iadd(iS), r.testn(1) || r.iadd(il), e.cmp(il)) {
          if (!e.cmp(nS))
            for (;r.mod(fS).cmp(aS); )
              r.iadd(eg);
        } else
          for (;r.mod(tS).cmp(oS); )
            r.iadd(eg);
        if (o2 = r.shrn(1), nl(o2) && nl(r) && fl(o2) && fl(r) && Qm.test(o2) && Qm.test(r))
          return r;
      }
    }
  });
  rg = T9((tk, hS) => {
    hS.exports = { modp1: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff" }, modp2: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff" }, modp5: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff" }, modp14: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff" }, modp15: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff" }, modp16: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff" }, modp17: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff" }, modp18: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff" } };
  });
  ag = T9((rk, fg) => {
    var yr = Yu(), uS = tl(), ig = new uS, lS = new yr(24), dS = new yr(11), cS = new yr(10), pS = new yr(3), vS = new yr(7), ng = ol(), bS = on();
    fg.exports = Si2;
    function mS(t, e) {
      return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this._pub = new yr(t), this;
    }
    function gS(t, e) {
      return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this._priv = new yr(t), this;
    }
    var Rs = {};
    function yS(t, e) {
      var r = e.toString("hex"), o2 = [r, t.toString(16)].join("_");
      if (o2 in Rs)
        return Rs[o2];
      var f2 = 0;
      if (t.isEven() || !ng.simpleSieve || !ng.fermatTest(t) || !ig.test(t))
        return f2 += 1, r === "02" || r === "05" ? f2 += 8 : f2 += 4, Rs[o2] = f2, f2;
      ig.test(t.shrn(1)) || (f2 += 2);
      var p;
      switch (r) {
        case "02":
          t.mod(lS).cmp(dS) && (f2 += 8);
          break;
        case "05":
          p = t.mod(cS), p.cmp(pS) && p.cmp(vS) && (f2 += 8);
          break;
        default:
          f2 += 4;
      }
      return Rs[o2] = f2, f2;
    }
    function Si2(t, e, r) {
      this.setGenerator(e), this.__prime = new yr(t), this._prime = yr.mont(this.__prime), this._primeLen = t.length, this._pub = undefined, this._priv = undefined, this._primeCode = undefined, r ? (this.setPublicKey = mS, this.setPrivateKey = gS) : this._primeCode = 8;
    }
    Object.defineProperty(Si2.prototype, "verifyError", { enumerable: true, get: function() {
      return typeof this._primeCode != "number" && (this._primeCode = yS(this.__prime, this.__gen)), this._primeCode;
    } });
    Si2.prototype.generateKeys = function() {
      return this._priv || (this._priv = new yr(bS(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
    };
    Si2.prototype.computeSecret = function(t) {
      t = new yr(t), t = t.toRed(this._prime);
      var e = t.redPow(this._priv).fromRed(), r = new Buffer(e.toArray()), o2 = this.getPrime();
      if (r.length < o2.length) {
        var f2 = new Buffer(o2.length - r.length);
        f2.fill(0), r = Buffer.concat([f2, r]);
      }
      return r;
    };
    Si2.prototype.getPublicKey = function(e) {
      return Bs(this._pub, e);
    };
    Si2.prototype.getPrivateKey = function(e) {
      return Bs(this._priv, e);
    };
    Si2.prototype.getPrime = function(t) {
      return Bs(this.__prime, t);
    };
    Si2.prototype.getGenerator = function(t) {
      return Bs(this._gen, t);
    };
    Si2.prototype.setGenerator = function(t, e) {
      return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this.__gen = t, this._gen = new yr(t), this;
    };
    function Bs(t, e) {
      var r = new Buffer(t.toArray());
      return e ? r.toString(e) : r;
    }
  });
  hg = T9((_f) => {
    var wS = ol(), og = rg(), sl = ag();
    function MS(t) {
      var e = new Buffer(og[t].prime, "hex"), r = new Buffer(og[t].gen, "hex");
      return new sl(e, r);
    }
    var _S = { binary: true, hex: true, base64: true };
    function sg(t, e, r, o2) {
      return Buffer.isBuffer(e) || _S[e] === undefined ? sg(t, "binary", e, r) : (e = e || "binary", o2 = o2 || "binary", r = r || new Buffer([2]), Buffer.isBuffer(r) || (r = new Buffer(r, o2)), typeof t == "number" ? new sl(wS(t, r), r, true) : (Buffer.isBuffer(t) || (t = new Buffer(t, e)), new sl(t, r, true)));
    }
    _f.DiffieHellmanGroup = _f.createDiffieHellmanGroup = _f.getDiffieHellman = MS;
    _f.createDiffieHellman = _f.DiffieHellman = sg;
  });
  hl = T9((nk, ug) => {
    ug.exports = ki().EventEmitter;
  });
  pg = T9((fk, cg) => {
    function lg(t, e) {
      var r = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(t);
        e && (o2 = o2.filter(function(f2) {
          return Object.getOwnPropertyDescriptor(t, f2).enumerable;
        })), r.push.apply(r, o2);
      }
      return r;
    }
    function xS(t) {
      for (var e = 1;e < arguments.length; e++) {
        var r = arguments[e] != null ? arguments[e] : {};
        e % 2 ? lg(Object(r), true).forEach(function(o2) {
          SS(t, o2, r[o2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : lg(Object(r)).forEach(function(o2) {
          Object.defineProperty(t, o2, Object.getOwnPropertyDescriptor(r, o2));
        });
      }
      return t;
    }
    function SS(t, e, r) {
      return e in t ? Object.defineProperty(t, e, { value: r, enumerable: true, configurable: true, writable: true }) : t[e] = r, t;
    }
    function ES(t, e) {
      if (!(t instanceof e))
        throw new TypeError("Cannot call a class as a function");
    }
    function dg(t, e) {
      for (var r = 0;r < e.length; r++) {
        var o2 = e[r];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(t, o2.key, o2);
      }
    }
    function AS(t, e, r) {
      return e && dg(t.prototype, e), r && dg(t, r), t;
    }
    var RS = Ut(), qs = RS.Buffer, BS = $f(), ul = BS.inspect, qS = ul && ul.custom || "inspect";
    function IS(t, e, r) {
      qs.prototype.copy.call(t, e, r);
    }
    cg.exports = function() {
      function t() {
        ES(this, t), this.head = null, this.tail = null, this.length = 0;
      }
      return AS(t, [{ key: "push", value: function(r) {
        var o2 = { data: r, next: null };
        this.length > 0 ? this.tail.next = o2 : this.head = o2, this.tail = o2, ++this.length;
      } }, { key: "unshift", value: function(r) {
        var o2 = { data: r, next: this.head };
        this.length === 0 && (this.tail = o2), this.head = o2, ++this.length;
      } }, { key: "shift", value: function() {
        if (this.length !== 0) {
          var r = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(r) {
        if (this.length === 0)
          return "";
        for (var o2 = this.head, f2 = "" + o2.data;o2 = o2.next; )
          f2 += r + o2.data;
        return f2;
      } }, { key: "concat", value: function(r) {
        if (this.length === 0)
          return qs.alloc(0);
        for (var o2 = qs.allocUnsafe(r >>> 0), f2 = this.head, p = 0;f2; )
          IS(f2.data, o2, p), p += f2.data.length, f2 = f2.next;
        return o2;
      } }, { key: "consume", value: function(r, o2) {
        var f2;
        return r < this.head.data.length ? (f2 = this.head.data.slice(0, r), this.head.data = this.head.data.slice(r)) : r === this.head.data.length ? f2 = this.shift() : f2 = o2 ? this._getString(r) : this._getBuffer(r), f2;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(r) {
        var o2 = this.head, f2 = 1, p = o2.data;
        for (r -= p.length;o2 = o2.next; ) {
          var m2 = o2.data, y3 = r > m2.length ? m2.length : r;
          if (y3 === m2.length ? p += m2 : p += m2.slice(0, r), r -= y3, r === 0) {
            y3 === m2.length ? (++f2, o2.next ? this.head = o2.next : this.head = this.tail = null) : (this.head = o2, o2.data = m2.slice(y3));
            break;
          }
          ++f2;
        }
        return this.length -= f2, p;
      } }, { key: "_getBuffer", value: function(r) {
        var o2 = qs.allocUnsafe(r), f2 = this.head, p = 1;
        for (f2.data.copy(o2), r -= f2.data.length;f2 = f2.next; ) {
          var m2 = f2.data, y3 = r > m2.length ? m2.length : r;
          if (m2.copy(o2, o2.length - r, 0, y3), r -= y3, r === 0) {
            y3 === m2.length ? (++p, f2.next ? this.head = f2.next : this.head = this.tail = null) : (this.head = f2, f2.data = m2.slice(y3));
            break;
          }
          ++p;
        }
        return this.length -= p, o2;
      } }, { key: qS, value: function(r, o2) {
        return ul(this, xS({}, o2, { depth: 0, customInspect: false }));
      } }]), t;
    }();
  });
  dl = T9((ak, bg) => {
    function TS(t, e) {
      var r = this, o2 = this._readableState && this._readableState.destroyed, f2 = this._writableState && this._writableState.destroyed;
      return o2 || f2 ? (e ? e(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, process.nextTick(ll, this, t)) : process.nextTick(ll, this, t)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t || null, function(p) {
        !e && p ? r._writableState ? r._writableState.errorEmitted ? process.nextTick(Is, r) : (r._writableState.errorEmitted = true, process.nextTick(vg, r, p)) : process.nextTick(vg, r, p) : e ? (process.nextTick(Is, r), e(p)) : process.nextTick(Is, r);
      }), this);
    }
    function vg(t, e) {
      ll(t, e), Is(t);
    }
    function Is(t) {
      t._writableState && !t._writableState.emitClose || t._readableState && !t._readableState.emitClose || t.emit("close");
    }
    function kS() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }
    function ll(t, e) {
      t.emit("error", e);
    }
    function LS(t, e) {
      var { _readableState: r, _writableState: o2 } = t;
      r && r.autoDestroy || o2 && o2.autoDestroy ? t.destroy(e) : t.emit("error", e);
    }
    bg.exports = { destroy: TS, undestroy: kS, errorOrDestroy: LS };
  });
  kn = T9((ok, yg) => {
    function NS(t, e) {
      t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    var gg = {};
    function wr(t, e, r) {
      r || (r = Error);
      function o2(p, m2, y3) {
        return typeof e == "string" ? e : e(p, m2, y3);
      }
      var f2 = function(p) {
        NS(m2, p);
        function m2(y3, M2, x4) {
          return p.call(this, o2(y3, M2, x4)) || this;
        }
        return m2;
      }(r);
      f2.prototype.name = r.name, f2.prototype.code = t, gg[t] = f2;
    }
    function mg(t, e) {
      if (Array.isArray(t)) {
        var r = t.length;
        return t = t.map(function(o2) {
          return String(o2);
        }), r > 2 ? "one of ".concat(e, " ").concat(t.slice(0, r - 1).join(", "), ", or ") + t[r - 1] : r === 2 ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
      } else
        return "of ".concat(e, " ").concat(String(t));
    }
    function DS(t, e, r) {
      return t.substr(!r || r < 0 ? 0 : +r, e.length) === e;
    }
    function PS(t, e, r) {
      return (r === undefined || r > t.length) && (r = t.length), t.substring(r - e.length, r) === e;
    }
    function CS(t, e, r) {
      return typeof r != "number" && (r = 0), r + e.length > t.length ? false : t.indexOf(e, r) !== -1;
    }
    wr("ERR_INVALID_OPT_VALUE", function(t, e) {
      return 'The value "' + e + '" is invalid for option "' + t + '"';
    }, TypeError);
    wr("ERR_INVALID_ARG_TYPE", function(t, e, r) {
      var o2;
      typeof e == "string" && DS(e, "not ") ? (o2 = "must not be", e = e.replace(/^not /, "")) : o2 = "must be";
      var f2;
      if (PS(t, " argument"))
        f2 = "The ".concat(t, " ").concat(o2, " ").concat(mg(e, "type"));
      else {
        var p = CS(t, ".") ? "property" : "argument";
        f2 = 'The "'.concat(t, '" ').concat(p, " ").concat(o2, " ").concat(mg(e, "type"));
      }
      return f2 += ". Received type ".concat(typeof r), f2;
    }, TypeError);
    wr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    wr("ERR_METHOD_NOT_IMPLEMENTED", function(t) {
      return "The " + t + " method is not implemented";
    });
    wr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    wr("ERR_STREAM_DESTROYED", function(t) {
      return "Cannot call " + t + " after a stream was destroyed";
    });
    wr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    wr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    wr("ERR_STREAM_WRITE_AFTER_END", "write after end");
    wr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    wr("ERR_UNKNOWN_ENCODING", function(t) {
      return "Unknown encoding: " + t;
    }, TypeError);
    wr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    yg.exports.codes = gg;
  });
  cl = T9((sk, wg) => {
    var OS = kn().codes.ERR_INVALID_OPT_VALUE;
    function FS(t, e, r) {
      return t.highWaterMark != null ? t.highWaterMark : e ? t[r] : null;
    }
    function US(t, e, r, o2) {
      var f2 = FS(e, o2, r);
      if (f2 != null) {
        if (!(isFinite(f2) && Math.floor(f2) === f2) || f2 < 0) {
          var p = o2 ? r : "highWaterMark";
          throw new OS(p, f2);
        }
        return Math.floor(f2);
      }
      return t.objectMode ? 16 : 16 * 1024;
    }
    wg.exports = { getHighWaterMark: US };
  });
  bl = T9((hk, Ag) => {
    Ag.exports = ut2;
    function _g(t) {
      var e = this;
      this.next = null, this.entry = null, this.finish = function() {
        cE(e, t);
      };
    }
    var xf;
    ut2.WritableState = ka;
    var zS = { deprecate: G0() }, xg = hl(), ks = Ut().Buffer, HS = global.Uint8Array || function() {
    };
    function WS(t) {
      return ks.from(t);
    }
    function KS(t) {
      return ks.isBuffer(t) || t instanceof HS;
    }
    var vl = dl(), jS = cl(), ZS = jS.getHighWaterMark, Vi = kn().codes, VS = Vi.ERR_INVALID_ARG_TYPE, $S = Vi.ERR_METHOD_NOT_IMPLEMENTED, GS = Vi.ERR_MULTIPLE_CALLBACK, YS = Vi.ERR_STREAM_CANNOT_PIPE, XS = Vi.ERR_STREAM_DESTROYED, JS = Vi.ERR_STREAM_NULL_VALUES, QS = Vi.ERR_STREAM_WRITE_AFTER_END, eE = Vi.ERR_UNKNOWN_ENCODING, Sf = vl.errorOrDestroy;
    Ie()(ut2, xg);
    function tE() {
    }
    function ka(t, e, r) {
      xf = xf || Ln(), t = t || {}, typeof r != "boolean" && (r = e instanceof xf), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = ZS(this, t, "writableHighWaterMark", r), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
      var o2 = t.decodeStrings === false;
      this.decodeStrings = !o2, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(f2) {
        sE(e, f2);
      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = t.emitClose !== false, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new _g(this);
    }
    ka.prototype.getBuffer = function() {
      for (var e = this.bufferedRequest, r = [];e; )
        r.push(e), e = e.next;
      return r;
    };
    (function() {
      try {
        Object.defineProperty(ka.prototype, "buffer", { get: zS.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
      } catch {
      }
    })();
    var Ts;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (Ts = Function.prototype[Symbol.hasInstance], Object.defineProperty(ut2, Symbol.hasInstance, { value: function(e) {
      return Ts.call(this, e) ? true : this !== ut2 ? false : e && e._writableState instanceof ka;
    } })) : Ts = function(e) {
      return e instanceof this;
    };
    function ut2(t) {
      xf = xf || Ln();
      var e = this instanceof xf;
      if (!e && !Ts.call(ut2, this))
        return new ut2(t);
      this._writableState = new ka(t, this, e), this.writable = true, t && (typeof t.write == "function" && (this._write = t.write), typeof t.writev == "function" && (this._writev = t.writev), typeof t.destroy == "function" && (this._destroy = t.destroy), typeof t.final == "function" && (this._final = t.final)), xg.call(this);
    }
    ut2.prototype.pipe = function() {
      Sf(this, new YS);
    };
    function rE(t, e) {
      var r = new QS;
      Sf(t, r), process.nextTick(e, r);
    }
    function iE(t, e, r, o2) {
      var f2;
      return r === null ? f2 = new JS : typeof r != "string" && !e.objectMode && (f2 = new VS("chunk", ["string", "Buffer"], r)), f2 ? (Sf(t, f2), process.nextTick(o2, f2), false) : true;
    }
    ut2.prototype.write = function(t, e, r) {
      var o2 = this._writableState, f2 = false, p = !o2.objectMode && KS(t);
      return p && !ks.isBuffer(t) && (t = WS(t)), typeof e == "function" && (r = e, e = null), p ? e = "buffer" : e || (e = o2.defaultEncoding), typeof r != "function" && (r = tE), o2.ending ? rE(this, r) : (p || iE(this, o2, t, r)) && (o2.pendingcb++, f2 = fE(this, o2, p, t, e, r)), f2;
    };
    ut2.prototype.cork = function() {
      this._writableState.corked++;
    };
    ut2.prototype.uncork = function() {
      var t = this._writableState;
      t.corked && (t.corked--, !t.writing && !t.corked && !t.bufferProcessing && t.bufferedRequest && Sg(this, t));
    };
    ut2.prototype.setDefaultEncoding = function(e) {
      if (typeof e == "string" && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1))
        throw new eE(e);
      return this._writableState.defaultEncoding = e, this;
    };
    Object.defineProperty(ut2.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    function nE(t, e, r) {
      return !t.objectMode && t.decodeStrings !== false && typeof e == "string" && (e = ks.from(e, r)), e;
    }
    Object.defineProperty(ut2.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    function fE(t, e, r, o2, f2, p) {
      if (!r) {
        var m2 = nE(e, o2, f2);
        o2 !== m2 && (r = true, f2 = "buffer", o2 = m2);
      }
      var y3 = e.objectMode ? 1 : o2.length;
      e.length += y3;
      var M2 = e.length < e.highWaterMark;
      if (M2 || (e.needDrain = true), e.writing || e.corked) {
        var x4 = e.lastBufferedRequest;
        e.lastBufferedRequest = { chunk: o2, encoding: f2, isBuf: r, callback: p, next: null }, x4 ? x4.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
      } else
        pl(t, e, false, y3, o2, f2, p);
      return M2;
    }
    function pl(t, e, r, o2, f2, p, m2) {
      e.writelen = o2, e.writecb = m2, e.writing = true, e.sync = true, e.destroyed ? e.onwrite(new XS("write")) : r ? t._writev(f2, e.onwrite) : t._write(f2, p, e.onwrite), e.sync = false;
    }
    function aE(t, e, r, o2, f2) {
      --e.pendingcb, r ? (process.nextTick(f2, o2), process.nextTick(Ta, t, e), t._writableState.errorEmitted = true, Sf(t, o2)) : (f2(o2), t._writableState.errorEmitted = true, Sf(t, o2), Ta(t, e));
    }
    function oE(t) {
      t.writing = false, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
    }
    function sE(t, e) {
      var r = t._writableState, o2 = r.sync, f2 = r.writecb;
      if (typeof f2 != "function")
        throw new GS;
      if (oE(r), e)
        aE(t, r, o2, e, f2);
      else {
        var p = Eg(r) || t.destroyed;
        !p && !r.corked && !r.bufferProcessing && r.bufferedRequest && Sg(t, r), o2 ? process.nextTick(Mg, t, r, p, f2) : Mg(t, r, p, f2);
      }
    }
    function Mg(t, e, r, o2) {
      r || hE(t, e), e.pendingcb--, o2(), Ta(t, e);
    }
    function hE(t, e) {
      e.length === 0 && e.needDrain && (e.needDrain = false, t.emit("drain"));
    }
    function Sg(t, e) {
      e.bufferProcessing = true;
      var r = e.bufferedRequest;
      if (t._writev && r && r.next) {
        var o2 = e.bufferedRequestCount, f2 = new Array(o2), p = e.corkedRequestsFree;
        p.entry = r;
        for (var m2 = 0, y3 = true;r; )
          f2[m2] = r, r.isBuf || (y3 = false), r = r.next, m2 += 1;
        f2.allBuffers = y3, pl(t, e, true, e.length, f2, "", p.finish), e.pendingcb++, e.lastBufferedRequest = null, p.next ? (e.corkedRequestsFree = p.next, p.next = null) : e.corkedRequestsFree = new _g(e), e.bufferedRequestCount = 0;
      } else {
        for (;r; ) {
          var { chunk: M2, encoding: x4, callback: S3 } = r, E3 = e.objectMode ? 1 : M2.length;
          if (pl(t, e, false, E3, M2, x4, S3), r = r.next, e.bufferedRequestCount--, e.writing)
            break;
        }
        r === null && (e.lastBufferedRequest = null);
      }
      e.bufferedRequest = r, e.bufferProcessing = false;
    }
    ut2.prototype._write = function(t, e, r) {
      r(new $S("_write()"));
    };
    ut2.prototype._writev = null;
    ut2.prototype.end = function(t, e, r) {
      var o2 = this._writableState;
      return typeof t == "function" ? (r = t, t = null, e = null) : typeof e == "function" && (r = e, e = null), t != null && this.write(t, e), o2.corked && (o2.corked = 1, this.uncork()), o2.ending || dE(this, o2, r), this;
    };
    Object.defineProperty(ut2.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function Eg(t) {
      return t.ending && t.length === 0 && t.bufferedRequest === null && !t.finished && !t.writing;
    }
    function uE(t, e) {
      t._final(function(r) {
        e.pendingcb--, r && Sf(t, r), e.prefinished = true, t.emit("prefinish"), Ta(t, e);
      });
    }
    function lE(t, e) {
      !e.prefinished && !e.finalCalled && (typeof t._final == "function" && !e.destroyed ? (e.pendingcb++, e.finalCalled = true, process.nextTick(uE, t, e)) : (e.prefinished = true, t.emit("prefinish")));
    }
    function Ta(t, e) {
      var r = Eg(e);
      if (r && (lE(t, e), e.pendingcb === 0 && (e.finished = true, t.emit("finish"), e.autoDestroy))) {
        var o2 = t._readableState;
        (!o2 || o2.autoDestroy && o2.endEmitted) && t.destroy();
      }
      return r;
    }
    function dE(t, e, r) {
      e.ending = true, Ta(t, e), r && (e.finished ? process.nextTick(r) : t.once("finish", r)), e.ended = true, t.writable = false;
    }
    function cE(t, e, r) {
      var o2 = t.entry;
      for (t.entry = null;o2; ) {
        var f2 = o2.callback;
        e.pendingcb--, f2(r), o2 = o2.next;
      }
      e.corkedRequestsFree.next = t;
    }
    Object.defineProperty(ut2.prototype, "destroyed", { enumerable: false, get: function() {
      return this._writableState === undefined ? false : this._writableState.destroyed;
    }, set: function(e) {
      !this._writableState || (this._writableState.destroyed = e);
    } });
    ut2.prototype.destroy = vl.destroy;
    ut2.prototype._undestroy = vl.undestroy;
    ut2.prototype._destroy = function(t, e) {
      e(t);
    };
  });
  Ln = T9((uk, Bg) => {
    var pE = Object.keys || function(t) {
      var e = [];
      for (var r in t)
        e.push(r);
      return e;
    };
    Bg.exports = ti;
    var Rg = yl(), gl = bl();
    Ie()(ti, Rg);
    for (ml = pE(gl.prototype), Ls = 0;Ls < ml.length; Ls++)
      Ns = ml[Ls], ti.prototype[Ns] || (ti.prototype[Ns] = gl.prototype[Ns]);
    var ml, Ns, Ls;
    function ti(t) {
      if (!(this instanceof ti))
        return new ti(t);
      Rg.call(this, t), gl.call(this, t), this.allowHalfOpen = true, t && (t.readable === false && (this.readable = false), t.writable === false && (this.writable = false), t.allowHalfOpen === false && (this.allowHalfOpen = false, this.once("end", vE)));
    }
    Object.defineProperty(ti.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
      return this._writableState.highWaterMark;
    } });
    Object.defineProperty(ti.prototype, "writableBuffer", { enumerable: false, get: function() {
      return this._writableState && this._writableState.getBuffer();
    } });
    Object.defineProperty(ti.prototype, "writableLength", { enumerable: false, get: function() {
      return this._writableState.length;
    } });
    function vE() {
      this._writableState.ended || process.nextTick(bE, this);
    }
    function bE(t) {
      t.end();
    }
    Object.defineProperty(ti.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined || this._writableState === undefined ? false : this._readableState.destroyed && this._writableState.destroyed;
    }, set: function(e) {
      this._readableState === undefined || this._writableState === undefined || (this._readableState.destroyed = e, this._writableState.destroyed = e);
    } });
  });
  Ds = T9((lk, Tg) => {
    var qg = kn().codes.ERR_STREAM_PREMATURE_CLOSE;
    function mE(t) {
      var e = false;
      return function() {
        if (!e) {
          e = true;
          for (var r = arguments.length, o2 = new Array(r), f2 = 0;f2 < r; f2++)
            o2[f2] = arguments[f2];
          t.apply(this, o2);
        }
      };
    }
    function gE() {
    }
    function yE(t) {
      return t.setHeader && typeof t.abort == "function";
    }
    function Ig(t, e, r) {
      if (typeof e == "function")
        return Ig(t, null, e);
      e || (e = {}), r = mE(r || gE);
      var o2 = e.readable || e.readable !== false && t.readable, f2 = e.writable || e.writable !== false && t.writable, p = function() {
        t.writable || y3();
      }, m2 = t._writableState && t._writableState.finished, y3 = function() {
        f2 = false, m2 = true, o2 || r.call(t);
      }, M2 = t._readableState && t._readableState.endEmitted, x4 = function() {
        o2 = false, M2 = true, f2 || r.call(t);
      }, S3 = function(L3) {
        r.call(t, L3);
      }, E3 = function() {
        var L3;
        if (o2 && !M2)
          return (!t._readableState || !t._readableState.ended) && (L3 = new qg), r.call(t, L3);
        if (f2 && !m2)
          return (!t._writableState || !t._writableState.ended) && (L3 = new qg), r.call(t, L3);
      }, B2 = function() {
        t.req.on("finish", y3);
      };
      return yE(t) ? (t.on("complete", y3), t.on("abort", E3), t.req ? B2() : t.on("request", B2)) : f2 && !t._writableState && (t.on("end", p), t.on("close", p)), t.on("end", x4), t.on("finish", y3), e.error !== false && t.on("error", S3), t.on("close", E3), function() {
        t.removeListener("complete", y3), t.removeListener("abort", E3), t.removeListener("request", B2), t.req && t.req.removeListener("finish", y3), t.removeListener("end", p), t.removeListener("close", p), t.removeListener("finish", y3), t.removeListener("end", x4), t.removeListener("error", S3), t.removeListener("close", E3);
      };
    }
    Tg.exports = Ig;
  });
  Lg = T9((dk, kg) => {
    var Ps;
    function $i(t, e, r) {
      return e in t ? Object.defineProperty(t, e, { value: r, enumerable: true, configurable: true, writable: true }) : t[e] = r, t;
    }
    var wE = Ds(), Gi = Symbol("lastResolve"), Nn = Symbol("lastReject"), La = Symbol("error"), Cs = Symbol("ended"), Dn = Symbol("lastPromise"), wl = Symbol("handlePromise"), Pn = Symbol("stream");
    function Yi(t, e) {
      return { value: t, done: e };
    }
    function ME(t) {
      var e = t[Gi];
      if (e !== null) {
        var r = t[Pn].read();
        r !== null && (t[Dn] = null, t[Gi] = null, t[Nn] = null, e(Yi(r, false)));
      }
    }
    function _E(t) {
      process.nextTick(ME, t);
    }
    function xE(t, e) {
      return function(r, o2) {
        t.then(function() {
          if (e[Cs]) {
            r(Yi(undefined, true));
            return;
          }
          e[wl](r, o2);
        }, o2);
      };
    }
    var SE = Object.getPrototypeOf(function() {
    }), EE = Object.setPrototypeOf((Ps = { get stream() {
      return this[Pn];
    }, next: function() {
      var e = this, r = this[La];
      if (r !== null)
        return Promise.reject(r);
      if (this[Cs])
        return Promise.resolve(Yi(undefined, true));
      if (this[Pn].destroyed)
        return new Promise(function(m2, y3) {
          process.nextTick(function() {
            e[La] ? y3(e[La]) : m2(Yi(undefined, true));
          });
        });
      var o2 = this[Dn], f2;
      if (o2)
        f2 = new Promise(xE(o2, this));
      else {
        var p = this[Pn].read();
        if (p !== null)
          return Promise.resolve(Yi(p, false));
        f2 = new Promise(this[wl]);
      }
      return this[Dn] = f2, f2;
    } }, $i(Ps, Symbol.asyncIterator, function() {
      return this;
    }), $i(Ps, "return", function() {
      var e = this;
      return new Promise(function(r, o2) {
        e[Pn].destroy(null, function(f2) {
          if (f2) {
            o2(f2);
            return;
          }
          r(Yi(undefined, true));
        });
      });
    }), Ps), SE), AE = function(e) {
      var r, o2 = Object.create(EE, (r = {}, $i(r, Pn, { value: e, writable: true }), $i(r, Gi, { value: null, writable: true }), $i(r, Nn, { value: null, writable: true }), $i(r, La, { value: null, writable: true }), $i(r, Cs, { value: e._readableState.endEmitted, writable: true }), $i(r, wl, { value: function(p, m2) {
        var y3 = o2[Pn].read();
        y3 ? (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, p(Yi(y3, false))) : (o2[Gi] = p, o2[Nn] = m2);
      }, writable: true }), r));
      return o2[Dn] = null, wE(e, function(f2) {
        if (f2 && f2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var p = o2[Nn];
          p !== null && (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, p(f2)), o2[La] = f2;
          return;
        }
        var m2 = o2[Gi];
        m2 !== null && (o2[Dn] = null, o2[Gi] = null, o2[Nn] = null, m2(Yi(undefined, true))), o2[Cs] = true;
      }), e.on("readable", _E.bind(null, o2)), o2;
    };
    kg.exports = AE;
  });
  Dg = T9((ck, Ng) => {
    Ng.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  });
  yl = T9((vk, jg) => {
    jg.exports = Oe;
    var Ef;
    Oe.ReadableState = Fg;
    var pk = ki().EventEmitter, Og = function(e, r) {
      return e.listeners(r).length;
    }, Da = hl(), Os = Ut().Buffer, RE = global.Uint8Array || function() {
    };
    function BE(t) {
      return Os.from(t);
    }
    function qE(t) {
      return Os.isBuffer(t) || t instanceof RE;
    }
    var Ml = $f(), De;
    Ml && Ml.debuglog ? De = Ml.debuglog("stream") : De = function() {
    };
    var IE = pg(), Bl = dl(), TE = cl(), kE = TE.getHighWaterMark, Fs = kn().codes, LE = Fs.ERR_INVALID_ARG_TYPE, NE = Fs.ERR_STREAM_PUSH_AFTER_EOF, DE = Fs.ERR_METHOD_NOT_IMPLEMENTED, PE = Fs.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, Af, _l, xl;
    Ie()(Oe, Da);
    var Na = Bl.errorOrDestroy, Sl = ["error", "close", "destroy", "pause", "resume"];
    function CE(t, e, r) {
      if (typeof t.prependListener == "function")
        return t.prependListener(e, r);
      !t._events || !t._events[e] ? t.on(e, r) : Array.isArray(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [r, t._events[e]];
    }
    function Fg(t, e, r) {
      Ef = Ef || Ln(), t = t || {}, typeof r != "boolean" && (r = e instanceof Ef), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = kE(this, t, "readableHighWaterMark", r), this.buffer = new IE, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = t.emitClose !== false, this.autoDestroy = !!t.autoDestroy, this.destroyed = false, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t.encoding && (Af || (Af = (Qf(), ur(Jf)).StringDecoder), this.decoder = new Af(t.encoding), this.encoding = t.encoding);
    }
    function Oe(t) {
      if (Ef = Ef || Ln(), !(this instanceof Oe))
        return new Oe(t);
      var e = this instanceof Ef;
      this._readableState = new Fg(t, this, e), this.readable = true, t && (typeof t.read == "function" && (this._read = t.read), typeof t.destroy == "function" && (this._destroy = t.destroy)), Da.call(this);
    }
    Object.defineProperty(Oe.prototype, "destroyed", { enumerable: false, get: function() {
      return this._readableState === undefined ? false : this._readableState.destroyed;
    }, set: function(e) {
      !this._readableState || (this._readableState.destroyed = e);
    } });
    Oe.prototype.destroy = Bl.destroy;
    Oe.prototype._undestroy = Bl.undestroy;
    Oe.prototype._destroy = function(t, e) {
      e(t);
    };
    Oe.prototype.push = function(t, e) {
      var r = this._readableState, o2;
      return r.objectMode ? o2 = true : typeof t == "string" && (e = e || r.defaultEncoding, e !== r.encoding && (t = Os.from(t, e), e = ""), o2 = true), Ug(this, t, e, false, o2);
    };
    Oe.prototype.unshift = function(t) {
      return Ug(this, t, null, true, false);
    };
    function Ug(t, e, r, o2, f2) {
      De("readableAddChunk", e);
      var p = t._readableState;
      if (e === null)
        p.reading = false, UE(t, p);
      else {
        var m2;
        if (f2 || (m2 = OE(p, e)), m2)
          Na(t, m2);
        else if (p.objectMode || e && e.length > 0)
          if (typeof e != "string" && !p.objectMode && Object.getPrototypeOf(e) !== Os.prototype && (e = BE(e)), o2)
            p.endEmitted ? Na(t, new PE) : El(t, p, e, true);
          else if (p.ended)
            Na(t, new NE);
          else {
            if (p.destroyed)
              return false;
            p.reading = false, p.decoder && !r ? (e = p.decoder.write(e), p.objectMode || e.length !== 0 ? El(t, p, e, false) : Rl(t, p)) : El(t, p, e, false);
          }
        else
          o2 || (p.reading = false, Rl(t, p));
      }
      return !p.ended && (p.length < p.highWaterMark || p.length === 0);
    }
    function El(t, e, r, o2) {
      e.flowing && e.length === 0 && !e.sync ? (e.awaitDrain = 0, t.emit("data", r)) : (e.length += e.objectMode ? 1 : r.length, o2 ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && Us(t)), Rl(t, e);
    }
    function OE(t, e) {
      var r;
      return !qE(e) && typeof e != "string" && e !== undefined && !t.objectMode && (r = new LE("chunk", ["string", "Buffer", "Uint8Array"], e)), r;
    }
    Oe.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Oe.prototype.setEncoding = function(t) {
      Af || (Af = (Qf(), ur(Jf)).StringDecoder);
      var e = new Af(t);
      this._readableState.decoder = e, this._readableState.encoding = this._readableState.decoder.encoding;
      for (var r = this._readableState.buffer.head, o2 = "";r !== null; )
        o2 += e.write(r.data), r = r.next;
      return this._readableState.buffer.clear(), o2 !== "" && this._readableState.buffer.push(o2), this._readableState.length = o2.length, this;
    };
    var Pg = 1073741824;
    function FE(t) {
      return t >= Pg ? t = Pg : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
    }
    function Cg(t, e) {
      return t <= 0 || e.length === 0 && e.ended ? 0 : e.objectMode ? 1 : t !== t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = FE(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = true, 0));
    }
    Oe.prototype.read = function(t) {
      De("read", t), t = parseInt(t, 10);
      var e = this._readableState, r = t;
      if (t !== 0 && (e.emittedReadable = false), t === 0 && e.needReadable && ((e.highWaterMark !== 0 ? e.length >= e.highWaterMark : e.length > 0) || e.ended))
        return De("read: emitReadable", e.length, e.ended), e.length === 0 && e.ended ? Al(this) : Us(this), null;
      if (t = Cg(t, e), t === 0 && e.ended)
        return e.length === 0 && Al(this), null;
      var o2 = e.needReadable;
      De("need readable", o2), (e.length === 0 || e.length - t < e.highWaterMark) && (o2 = true, De("length less than watermark", o2)), e.ended || e.reading ? (o2 = false, De("reading or ended", o2)) : o2 && (De("do read"), e.reading = true, e.sync = true, e.length === 0 && (e.needReadable = true), this._read(e.highWaterMark), e.sync = false, e.reading || (t = Cg(r, e)));
      var f2;
      return t > 0 ? f2 = Wg(t, e) : f2 = null, f2 === null ? (e.needReadable = e.length <= e.highWaterMark, t = 0) : (e.length -= t, e.awaitDrain = 0), e.length === 0 && (e.ended || (e.needReadable = true), r !== t && e.ended && Al(this)), f2 !== null && this.emit("data", f2), f2;
    };
    function UE(t, e) {
      if (De("onEofChunk"), !e.ended) {
        if (e.decoder) {
          var r = e.decoder.end();
          r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
        }
        e.ended = true, e.sync ? Us(t) : (e.needReadable = false, e.emittedReadable || (e.emittedReadable = true, zg(t)));
      }
    }
    function Us(t) {
      var e = t._readableState;
      De("emitReadable", e.needReadable, e.emittedReadable), e.needReadable = false, e.emittedReadable || (De("emitReadable", e.flowing), e.emittedReadable = true, process.nextTick(zg, t));
    }
    function zg(t) {
      var e = t._readableState;
      De("emitReadable_", e.destroyed, e.length, e.ended), !e.destroyed && (e.length || e.ended) && (t.emit("readable"), e.emittedReadable = false), e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark, ql(t);
    }
    function Rl(t, e) {
      e.readingMore || (e.readingMore = true, process.nextTick(zE, t, e));
    }
    function zE(t, e) {
      for (;!e.reading && !e.ended && (e.length < e.highWaterMark || e.flowing && e.length === 0); ) {
        var r = e.length;
        if (De("maybeReadMore read 0"), t.read(0), r === e.length)
          break;
      }
      e.readingMore = false;
    }
    Oe.prototype._read = function(t) {
      Na(this, new DE("_read()"));
    };
    Oe.prototype.pipe = function(t, e) {
      var r = this, o2 = this._readableState;
      switch (o2.pipesCount) {
        case 0:
          o2.pipes = t;
          break;
        case 1:
          o2.pipes = [o2.pipes, t];
          break;
        default:
          o2.pipes.push(t);
          break;
      }
      o2.pipesCount += 1, De("pipe count=%d opts=%j", o2.pipesCount, e);
      var f2 = (!e || e.end !== false) && t !== process.stdout && t !== process.stderr, p = f2 ? y3 : ge;
      o2.endEmitted ? process.nextTick(p) : r.once("end", p), t.on("unpipe", m2);
      function m2(_e, N5) {
        De("onunpipe"), _e === r && N5 && N5.hasUnpiped === false && (N5.hasUnpiped = true, S3());
      }
      function y3() {
        De("onend"), t.end();
      }
      var M2 = HE(r);
      t.on("drain", M2);
      var x4 = false;
      function S3() {
        De("cleanup"), t.removeListener("close", q), t.removeListener("finish", L3), t.removeListener("drain", M2), t.removeListener("error", B2), t.removeListener("unpipe", m2), r.removeListener("end", y3), r.removeListener("end", ge), r.removeListener("data", E3), x4 = true, o2.awaitDrain && (!t._writableState || t._writableState.needDrain) && M2();
      }
      r.on("data", E3);
      function E3(_e) {
        De("ondata");
        var N5 = t.write(_e);
        De("dest.write", N5), N5 === false && ((o2.pipesCount === 1 && o2.pipes === t || o2.pipesCount > 1 && Kg(o2.pipes, t) !== -1) && !x4 && (De("false write response, pause", o2.awaitDrain), o2.awaitDrain++), r.pause());
      }
      function B2(_e) {
        De("onerror", _e), ge(), t.removeListener("error", B2), Og(t, "error") === 0 && Na(t, _e);
      }
      CE(t, "error", B2);
      function q() {
        t.removeListener("finish", L3), ge();
      }
      t.once("close", q);
      function L3() {
        De("onfinish"), t.removeListener("close", q), ge();
      }
      t.once("finish", L3);
      function ge() {
        De("unpipe"), r.unpipe(t);
      }
      return t.emit("pipe", r), o2.flowing || (De("pipe resume"), r.resume()), t;
    };
    function HE(t) {
      return function() {
        var r = t._readableState;
        De("pipeOnDrain", r.awaitDrain), r.awaitDrain && r.awaitDrain--, r.awaitDrain === 0 && Og(t, "data") && (r.flowing = true, ql(t));
      };
    }
    Oe.prototype.unpipe = function(t) {
      var e = this._readableState, r = { hasUnpiped: false };
      if (e.pipesCount === 0)
        return this;
      if (e.pipesCount === 1)
        return t && t !== e.pipes ? this : (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = false, t && t.emit("unpipe", this, r), this);
      if (!t) {
        var { pipes: o2, pipesCount: f2 } = e;
        e.pipes = null, e.pipesCount = 0, e.flowing = false;
        for (var p = 0;p < f2; p++)
          o2[p].emit("unpipe", this, { hasUnpiped: false });
        return this;
      }
      var m2 = Kg(e.pipes, t);
      return m2 === -1 ? this : (e.pipes.splice(m2, 1), e.pipesCount -= 1, e.pipesCount === 1 && (e.pipes = e.pipes[0]), t.emit("unpipe", this, r), this);
    };
    Oe.prototype.on = function(t, e) {
      var r = Da.prototype.on.call(this, t, e), o2 = this._readableState;
      return t === "data" ? (o2.readableListening = this.listenerCount("readable") > 0, o2.flowing !== false && this.resume()) : t === "readable" && !o2.endEmitted && !o2.readableListening && (o2.readableListening = o2.needReadable = true, o2.flowing = false, o2.emittedReadable = false, De("on readable", o2.length, o2.reading), o2.length ? Us(this) : o2.reading || process.nextTick(WE, this)), r;
    };
    Oe.prototype.addListener = Oe.prototype.on;
    Oe.prototype.removeListener = function(t, e) {
      var r = Da.prototype.removeListener.call(this, t, e);
      return t === "readable" && process.nextTick(Hg, this), r;
    };
    Oe.prototype.removeAllListeners = function(t) {
      var e = Da.prototype.removeAllListeners.apply(this, arguments);
      return (t === "readable" || t === undefined) && process.nextTick(Hg, this), e;
    };
    function Hg(t) {
      var e = t._readableState;
      e.readableListening = t.listenerCount("readable") > 0, e.resumeScheduled && !e.paused ? e.flowing = true : t.listenerCount("data") > 0 && t.resume();
    }
    function WE(t) {
      De("readable nexttick read 0"), t.read(0);
    }
    Oe.prototype.resume = function() {
      var t = this._readableState;
      return t.flowing || (De("resume"), t.flowing = !t.readableListening, KE(this, t)), t.paused = false, this;
    };
    function KE(t, e) {
      e.resumeScheduled || (e.resumeScheduled = true, process.nextTick(jE, t, e));
    }
    function jE(t, e) {
      De("resume", e.reading), e.reading || t.read(0), e.resumeScheduled = false, t.emit("resume"), ql(t), e.flowing && !e.reading && t.read(0);
    }
    Oe.prototype.pause = function() {
      return De("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (De("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
    };
    function ql(t) {
      var e = t._readableState;
      for (De("flow", e.flowing);e.flowing && t.read() !== null; )
        ;
    }
    Oe.prototype.wrap = function(t) {
      var e = this, r = this._readableState, o2 = false;
      t.on("end", function() {
        if (De("wrapped end"), r.decoder && !r.ended) {
          var m2 = r.decoder.end();
          m2 && m2.length && e.push(m2);
        }
        e.push(null);
      }), t.on("data", function(m2) {
        if (De("wrapped data"), r.decoder && (m2 = r.decoder.write(m2)), !(r.objectMode && m2 == null) && !(!r.objectMode && (!m2 || !m2.length))) {
          var y3 = e.push(m2);
          y3 || (o2 = true, t.pause());
        }
      });
      for (var f2 in t)
        this[f2] === undefined && typeof t[f2] == "function" && (this[f2] = function(y3) {
          return function() {
            return t[y3].apply(t, arguments);
          };
        }(f2));
      for (var p = 0;p < Sl.length; p++)
        t.on(Sl[p], this.emit.bind(this, Sl[p]));
      return this._read = function(m2) {
        De("wrapped _read", m2), o2 && (o2 = false, t.resume());
      }, this;
    };
    typeof Symbol == "function" && (Oe.prototype[Symbol.asyncIterator] = function() {
      return _l === undefined && (_l = Lg()), _l(this);
    });
    Object.defineProperty(Oe.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
      return this._readableState.highWaterMark;
    } });
    Object.defineProperty(Oe.prototype, "readableBuffer", { enumerable: false, get: function() {
      return this._readableState && this._readableState.buffer;
    } });
    Object.defineProperty(Oe.prototype, "readableFlowing", { enumerable: false, get: function() {
      return this._readableState.flowing;
    }, set: function(e) {
      this._readableState && (this._readableState.flowing = e);
    } });
    Oe._fromList = Wg;
    Object.defineProperty(Oe.prototype, "readableLength", { enumerable: false, get: function() {
      return this._readableState.length;
    } });
    function Wg(t, e) {
      if (e.length === 0)
        return null;
      var r;
      return e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (e.decoder ? r = e.buffer.join("") : e.buffer.length === 1 ? r = e.buffer.first() : r = e.buffer.concat(e.length), e.buffer.clear()) : r = e.buffer.consume(t, e.decoder), r;
    }
    function Al(t) {
      var e = t._readableState;
      De("endReadable", e.endEmitted), e.endEmitted || (e.ended = true, process.nextTick(ZE, e, t));
    }
    function ZE(t, e) {
      if (De("endReadableNT", t.endEmitted, t.length), !t.endEmitted && t.length === 0 && (t.endEmitted = true, e.readable = false, e.emit("end"), t.autoDestroy)) {
        var r = e._writableState;
        (!r || r.autoDestroy && r.finished) && e.destroy();
      }
    }
    typeof Symbol == "function" && (Oe.from = function(t, e) {
      return xl === undefined && (xl = Dg()), xl(Oe, t, e);
    });
    function Kg(t, e) {
      for (var r = 0, o2 = t.length;r < o2; r++)
        if (t[r] === e)
          return r;
      return -1;
    }
  });
  Il = T9((bk, Vg) => {
    Vg.exports = Ei;
    var zs = kn().codes, VE = zs.ERR_METHOD_NOT_IMPLEMENTED, $E = zs.ERR_MULTIPLE_CALLBACK, GE = zs.ERR_TRANSFORM_ALREADY_TRANSFORMING, YE = zs.ERR_TRANSFORM_WITH_LENGTH_0, Hs = Ln();
    Ie()(Ei, Hs);
    function XE(t, e) {
      var r = this._transformState;
      r.transforming = false;
      var o2 = r.writecb;
      if (o2 === null)
        return this.emit("error", new $E);
      r.writechunk = null, r.writecb = null, e != null && this.push(e), o2(t);
      var f2 = this._readableState;
      f2.reading = false, (f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
    }
    function Ei(t) {
      if (!(this instanceof Ei))
        return new Ei(t);
      Hs.call(this, t), this._transformState = { afterTransform: XE.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.on("prefinish", JE);
    }
    function JE() {
      var t = this;
      typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e, r) {
        Zg(t, e, r);
      }) : Zg(this, null, null);
    }
    Ei.prototype.push = function(t, e) {
      return this._transformState.needTransform = false, Hs.prototype.push.call(this, t, e);
    };
    Ei.prototype._transform = function(t, e, r) {
      r(new VE("_transform()"));
    };
    Ei.prototype._write = function(t, e, r) {
      var o2 = this._transformState;
      if (o2.writecb = r, o2.writechunk = t, o2.writeencoding = e, !o2.transforming) {
        var f2 = this._readableState;
        (o2.needTransform || f2.needReadable || f2.length < f2.highWaterMark) && this._read(f2.highWaterMark);
      }
    };
    Ei.prototype._read = function(t) {
      var e = this._transformState;
      e.writechunk !== null && !e.transforming ? (e.transforming = true, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = true;
    };
    Ei.prototype._destroy = function(t, e) {
      Hs.prototype._destroy.call(this, t, function(r) {
        e(r);
      });
    };
    function Zg(t, e, r) {
      if (e)
        return t.emit("error", e);
      if (r != null && t.push(r), t._writableState.length)
        throw new YE;
      if (t._transformState.transforming)
        throw new GE;
      return t.push(null);
    }
  });
  Yg = T9((mk, Gg) => {
    Gg.exports = Pa;
    var $g = Il();
    Ie()(Pa, $g);
    function Pa(t) {
      if (!(this instanceof Pa))
        return new Pa(t);
      $g.call(this, t);
    }
    Pa.prototype._transform = function(t, e, r) {
      r(null, t);
    };
  });
  t2 = T9((gk, e2) => {
    var Tl;
    function QE(t) {
      var e = false;
      return function() {
        e || (e = true, t.apply(undefined, arguments));
      };
    }
    var Qg = kn().codes, eA = Qg.ERR_MISSING_ARGS, tA = Qg.ERR_STREAM_DESTROYED;
    function Xg(t) {
      if (t)
        throw t;
    }
    function rA(t) {
      return t.setHeader && typeof t.abort == "function";
    }
    function iA(t, e, r, o2) {
      o2 = QE(o2);
      var f2 = false;
      t.on("close", function() {
        f2 = true;
      }), Tl === undefined && (Tl = Ds()), Tl(t, { readable: e, writable: r }, function(m2) {
        if (m2)
          return o2(m2);
        f2 = true, o2();
      });
      var p = false;
      return function(m2) {
        if (!f2 && !p) {
          if (p = true, rA(t))
            return t.abort();
          if (typeof t.destroy == "function")
            return t.destroy();
          o2(m2 || new tA("pipe"));
        }
      };
    }
    function Jg(t) {
      t();
    }
    function nA(t, e) {
      return t.pipe(e);
    }
    function fA(t) {
      return !t.length || typeof t[t.length - 1] != "function" ? Xg : t.pop();
    }
    function aA() {
      for (var t = arguments.length, e = new Array(t), r = 0;r < t; r++)
        e[r] = arguments[r];
      var o2 = fA(e);
      if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
        throw new eA("streams");
      var f2, p = e.map(function(m2, y3) {
        var M2 = y3 < e.length - 1, x4 = y3 > 0;
        return iA(m2, M2, x4, function(S3) {
          f2 || (f2 = S3), S3 && p.forEach(Jg), !M2 && (p.forEach(Jg), o2(f2));
        });
      });
      return e.reduce(nA);
    }
    e2.exports = aA;
  });
  i2 = T9((Mr, r2) => {
    Mr = r2.exports = yl();
    Mr.Stream = Mr;
    Mr.Readable = Mr;
    Mr.Writable = bl();
    Mr.Duplex = Ln();
    Mr.Transform = Il();
    Mr.PassThrough = Yg();
    Mr.finished = Ds();
    Mr.pipeline = t2();
  });
  Ws = T9((n2, kl) => {
    (function(t, e) {
      function r(h3, s) {
        if (!h3)
          throw new Error(s || "Assertion failed");
      }
      function o2(h3, s) {
        h3.super_ = s;
        var u2 = function() {
        };
        u2.prototype = s.prototype, h3.prototype = new u2, h3.prototype.constructor = h3;
      }
      function f2(h3, s, u2) {
        if (f2.isBN(h3))
          return h3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, h3 !== null && ((s === "le" || s === "be") && (u2 = s, s = 10), this._init(h3 || 0, s || 10, u2 || "be"));
      }
      typeof t == "object" ? t.exports = f2 : e.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p = window.Buffer : p = ji().Buffer;
      } catch {
      }
      f2.isBN = function(s) {
        return s instanceof f2 ? true : s !== null && typeof s == "object" && s.constructor.wordSize === f2.wordSize && Array.isArray(s.words);
      }, f2.max = function(s, u2) {
        return s.cmp(u2) > 0 ? s : u2;
      }, f2.min = function(s, u2) {
        return s.cmp(u2) < 0 ? s : u2;
      }, f2.prototype._init = function(s, u2, c) {
        if (typeof s == "number")
          return this._initNumber(s, u2, c);
        if (typeof s == "object")
          return this._initArray(s, u2, c);
        u2 === "hex" && (u2 = 16), r(u2 === (u2 | 0) && u2 >= 2 && u2 <= 36), s = s.toString().replace(/\s+/g, "");
        var b4 = 0;
        s[0] === "-" && (b4++, this.negative = 1), b4 < s.length && (u2 === 16 ? this._parseHex(s, b4, c) : (this._parseBase(s, u2, b4), c === "le" && this._initArray(this.toArray(), u2, c)));
      }, f2.prototype._initNumber = function(s, u2, c) {
        s < 0 && (this.negative = 1, s = -s), s < 67108864 ? (this.words = [s & 67108863], this.length = 1) : s < 4503599627370496 ? (this.words = [s & 67108863, s / 67108864 & 67108863], this.length = 2) : (r(s < 9007199254740992), this.words = [s & 67108863, s / 67108864 & 67108863, 1], this.length = 3), c === "le" && this._initArray(this.toArray(), u2, c);
      }, f2.prototype._initArray = function(s, u2, c) {
        if (r(typeof s.length == "number"), s.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(s.length / 3), this.words = new Array(this.length);
        for (var b4 = 0;b4 < this.length; b4++)
          this.words[b4] = 0;
        var l2, n3, d2 = 0;
        if (c === "be")
          for (b4 = s.length - 1, l2 = 0;b4 >= 0; b4 -= 3)
            n3 = s[b4] | s[b4 - 1] << 8 | s[b4 - 2] << 16, this.words[l2] |= n3 << d2 & 67108863, this.words[l2 + 1] = n3 >>> 26 - d2 & 67108863, d2 += 24, d2 >= 26 && (d2 -= 26, l2++);
        else if (c === "le")
          for (b4 = 0, l2 = 0;b4 < s.length; b4 += 3)
            n3 = s[b4] | s[b4 + 1] << 8 | s[b4 + 2] << 16, this.words[l2] |= n3 << d2 & 67108863, this.words[l2 + 1] = n3 >>> 26 - d2 & 67108863, d2 += 24, d2 >= 26 && (d2 -= 26, l2++);
        return this._strip();
      };
      function m2(h3, s) {
        var u2 = h3.charCodeAt(s);
        if (u2 >= 48 && u2 <= 57)
          return u2 - 48;
        if (u2 >= 65 && u2 <= 70)
          return u2 - 55;
        if (u2 >= 97 && u2 <= 102)
          return u2 - 87;
        r(false, "Invalid character in " + h3);
      }
      function y3(h3, s, u2) {
        var c = m2(h3, u2);
        return u2 - 1 >= s && (c |= m2(h3, u2 - 1) << 4), c;
      }
      f2.prototype._parseHex = function(s, u2, c) {
        this.length = Math.ceil((s.length - u2) / 6), this.words = new Array(this.length);
        for (var b4 = 0;b4 < this.length; b4++)
          this.words[b4] = 0;
        var l2 = 0, n3 = 0, d2;
        if (c === "be")
          for (b4 = s.length - 1;b4 >= u2; b4 -= 2)
            d2 = y3(s, u2, b4) << l2, this.words[n3] |= d2 & 67108863, l2 >= 18 ? (l2 -= 18, n3 += 1, this.words[n3] |= d2 >>> 26) : l2 += 8;
        else {
          var w3 = s.length - u2;
          for (b4 = w3 % 2 === 0 ? u2 + 1 : u2;b4 < s.length; b4 += 2)
            d2 = y3(s, u2, b4) << l2, this.words[n3] |= d2 & 67108863, l2 >= 18 ? (l2 -= 18, n3 += 1, this.words[n3] |= d2 >>> 26) : l2 += 8;
        }
        this._strip();
      };
      function M2(h3, s, u2, c) {
        for (var b4 = 0, l2 = 0, n3 = Math.min(h3.length, u2), d2 = s;d2 < n3; d2++) {
          var w3 = h3.charCodeAt(d2) - 48;
          b4 *= c, w3 >= 49 ? l2 = w3 - 49 + 10 : w3 >= 17 ? l2 = w3 - 17 + 10 : l2 = w3, r(w3 >= 0 && l2 < c, "Invalid character"), b4 += l2;
        }
        return b4;
      }
      f2.prototype._parseBase = function(s, u2, c) {
        this.words = [0], this.length = 1;
        for (var b4 = 0, l2 = 1;l2 <= 67108863; l2 *= u2)
          b4++;
        b4--, l2 = l2 / u2 | 0;
        for (var n3 = s.length - c, d2 = n3 % b4, w3 = Math.min(n3, n3 - d2) + c, g3 = 0, _3 = c;_3 < w3; _3 += b4)
          g3 = M2(s, _3, _3 + b4, u2), this.imuln(l2), this.words[0] + g3 < 67108864 ? this.words[0] += g3 : this._iaddn(g3);
        if (d2 !== 0) {
          var A2 = 1;
          for (g3 = M2(s, _3, s.length, u2), _3 = 0;_3 < d2; _3++)
            A2 *= u2;
          this.imuln(A2), this.words[0] + g3 < 67108864 ? this.words[0] += g3 : this._iaddn(g3);
        }
        this._strip();
      }, f2.prototype.copy = function(s) {
        s.words = new Array(this.length);
        for (var u2 = 0;u2 < this.length; u2++)
          s.words[u2] = this.words[u2];
        s.length = this.length, s.negative = this.negative, s.red = this.red;
      };
      function x4(h3, s) {
        h3.words = s.words, h3.length = s.length, h3.negative = s.negative, h3.red = s.red;
      }
      if (f2.prototype._move = function(s) {
        x4(s, this);
      }, f2.prototype.clone = function() {
        var s = new f2(null);
        return this.copy(s), s;
      }, f2.prototype._expand = function(s) {
        for (;this.length < s; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype._strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, typeof Symbol < "u" && typeof Symbol.for == "function")
        try {
          f2.prototype[Symbol.for("nodejs.util.inspect.custom")] = S3;
        } catch {
          f2.prototype.inspect = S3;
        }
      else
        f2.prototype.inspect = S3;
      function S3() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var E3 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], B2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], q = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(s, u2) {
        s = s || 10, u2 = u2 | 0 || 1;
        var c;
        if (s === 16 || s === "hex") {
          c = "";
          for (var b4 = 0, l2 = 0, n3 = 0;n3 < this.length; n3++) {
            var d2 = this.words[n3], w3 = ((d2 << b4 | l2) & 16777215).toString(16);
            l2 = d2 >>> 24 - b4 & 16777215, b4 += 2, b4 >= 26 && (b4 -= 26, n3--), l2 !== 0 || n3 !== this.length - 1 ? c = E3[6 - w3.length] + w3 + c : c = w3 + c;
          }
          for (l2 !== 0 && (c = l2.toString(16) + c);c.length % u2 !== 0; )
            c = "0" + c;
          return this.negative !== 0 && (c = "-" + c), c;
        }
        if (s === (s | 0) && s >= 2 && s <= 36) {
          var g3 = B2[s], _3 = q[s];
          c = "";
          var A2 = this.clone();
          for (A2.negative = 0;!A2.isZero(); ) {
            var R3 = A2.modrn(_3).toString(s);
            A2 = A2.idivn(_3), A2.isZero() ? c = R3 + c : c = E3[g3 - R3.length] + R3 + c;
          }
          for (this.isZero() && (c = "0" + c);c.length % u2 !== 0; )
            c = "0" + c;
          return this.negative !== 0 && (c = "-" + c), c;
        }
        r(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var s = this.words[0];
        return this.length === 2 ? s += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? s += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -s : s;
      }, f2.prototype.toJSON = function() {
        return this.toString(16, 2);
      }, p && (f2.prototype.toBuffer = function(s, u2) {
        return this.toArrayLike(p, s, u2);
      }), f2.prototype.toArray = function(s, u2) {
        return this.toArrayLike(Array, s, u2);
      };
      var L3 = function(s, u2) {
        return s.allocUnsafe ? s.allocUnsafe(u2) : new s(u2);
      };
      f2.prototype.toArrayLike = function(s, u2, c) {
        this._strip();
        var b4 = this.byteLength(), l2 = c || Math.max(1, b4);
        r(b4 <= l2, "byte array longer than desired length"), r(l2 > 0, "Requested array length <= 0");
        var n3 = L3(s, l2), d2 = u2 === "le" ? "LE" : "BE";
        return this["_toArrayLike" + d2](n3, b4), n3;
      }, f2.prototype._toArrayLikeLE = function(s, u2) {
        for (var c = 0, b4 = 0, l2 = 0, n3 = 0;l2 < this.length; l2++) {
          var d2 = this.words[l2] << n3 | b4;
          s[c++] = d2 & 255, c < s.length && (s[c++] = d2 >> 8 & 255), c < s.length && (s[c++] = d2 >> 16 & 255), n3 === 6 ? (c < s.length && (s[c++] = d2 >> 24 & 255), b4 = 0, n3 = 0) : (b4 = d2 >>> 24, n3 += 2);
        }
        if (c < s.length)
          for (s[c++] = b4;c < s.length; )
            s[c++] = 0;
      }, f2.prototype._toArrayLikeBE = function(s, u2) {
        for (var c = s.length - 1, b4 = 0, l2 = 0, n3 = 0;l2 < this.length; l2++) {
          var d2 = this.words[l2] << n3 | b4;
          s[c--] = d2 & 255, c >= 0 && (s[c--] = d2 >> 8 & 255), c >= 0 && (s[c--] = d2 >> 16 & 255), n3 === 6 ? (c >= 0 && (s[c--] = d2 >> 24 & 255), b4 = 0, n3 = 0) : (b4 = d2 >>> 24, n3 += 2);
        }
        if (c >= 0)
          for (s[c--] = b4;c >= 0; )
            s[c--] = 0;
      }, Math.clz32 ? f2.prototype._countBits = function(s) {
        return 32 - Math.clz32(s);
      } : f2.prototype._countBits = function(s) {
        var u2 = s, c = 0;
        return u2 >= 4096 && (c += 13, u2 >>>= 13), u2 >= 64 && (c += 7, u2 >>>= 7), u2 >= 8 && (c += 4, u2 >>>= 4), u2 >= 2 && (c += 2, u2 >>>= 2), c + u2;
      }, f2.prototype._zeroBits = function(s) {
        if (s === 0)
          return 26;
        var u2 = s, c = 0;
        return (u2 & 8191) === 0 && (c += 13, u2 >>>= 13), (u2 & 127) === 0 && (c += 7, u2 >>>= 7), (u2 & 15) === 0 && (c += 4, u2 >>>= 4), (u2 & 3) === 0 && (c += 2, u2 >>>= 2), (u2 & 1) === 0 && c++, c;
      }, f2.prototype.bitLength = function() {
        var s = this.words[this.length - 1], u2 = this._countBits(s);
        return (this.length - 1) * 26 + u2;
      };
      function ge(h3) {
        for (var s = new Array(h3.bitLength()), u2 = 0;u2 < s.length; u2++) {
          var c = u2 / 26 | 0, b4 = u2 % 26;
          s[u2] = h3.words[c] >>> b4 & 1;
        }
        return s;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var s = 0, u2 = 0;u2 < this.length; u2++) {
          var c = this._zeroBits(this.words[u2]);
          if (s += c, c !== 26)
            break;
        }
        return s;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(s) {
        return this.negative !== 0 ? this.abs().inotn(s).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(s) {
        return this.testn(s - 1) ? this.notn(s).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(s) {
        for (;this.length < s.length; )
          this.words[this.length++] = 0;
        for (var u2 = 0;u2 < s.length; u2++)
          this.words[u2] = this.words[u2] | s.words[u2];
        return this._strip();
      }, f2.prototype.ior = function(s) {
        return r((this.negative | s.negative) === 0), this.iuor(s);
      }, f2.prototype.or = function(s) {
        return this.length > s.length ? this.clone().ior(s) : s.clone().ior(this);
      }, f2.prototype.uor = function(s) {
        return this.length > s.length ? this.clone().iuor(s) : s.clone().iuor(this);
      }, f2.prototype.iuand = function(s) {
        var u2;
        this.length > s.length ? u2 = s : u2 = this;
        for (var c = 0;c < u2.length; c++)
          this.words[c] = this.words[c] & s.words[c];
        return this.length = u2.length, this._strip();
      }, f2.prototype.iand = function(s) {
        return r((this.negative | s.negative) === 0), this.iuand(s);
      }, f2.prototype.and = function(s) {
        return this.length > s.length ? this.clone().iand(s) : s.clone().iand(this);
      }, f2.prototype.uand = function(s) {
        return this.length > s.length ? this.clone().iuand(s) : s.clone().iuand(this);
      }, f2.prototype.iuxor = function(s) {
        var u2, c;
        this.length > s.length ? (u2 = this, c = s) : (u2 = s, c = this);
        for (var b4 = 0;b4 < c.length; b4++)
          this.words[b4] = u2.words[b4] ^ c.words[b4];
        if (this !== u2)
          for (;b4 < u2.length; b4++)
            this.words[b4] = u2.words[b4];
        return this.length = u2.length, this._strip();
      }, f2.prototype.ixor = function(s) {
        return r((this.negative | s.negative) === 0), this.iuxor(s);
      }, f2.prototype.xor = function(s) {
        return this.length > s.length ? this.clone().ixor(s) : s.clone().ixor(this);
      }, f2.prototype.uxor = function(s) {
        return this.length > s.length ? this.clone().iuxor(s) : s.clone().iuxor(this);
      }, f2.prototype.inotn = function(s) {
        r(typeof s == "number" && s >= 0);
        var u2 = Math.ceil(s / 26) | 0, c = s % 26;
        this._expand(u2), c > 0 && u2--;
        for (var b4 = 0;b4 < u2; b4++)
          this.words[b4] = ~this.words[b4] & 67108863;
        return c > 0 && (this.words[b4] = ~this.words[b4] & 67108863 >> 26 - c), this._strip();
      }, f2.prototype.notn = function(s) {
        return this.clone().inotn(s);
      }, f2.prototype.setn = function(s, u2) {
        r(typeof s == "number" && s >= 0);
        var c = s / 26 | 0, b4 = s % 26;
        return this._expand(c + 1), u2 ? this.words[c] = this.words[c] | 1 << b4 : this.words[c] = this.words[c] & ~(1 << b4), this._strip();
      }, f2.prototype.iadd = function(s) {
        var u2;
        if (this.negative !== 0 && s.negative === 0)
          return this.negative = 0, u2 = this.isub(s), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && s.negative !== 0)
          return s.negative = 0, u2 = this.isub(s), s.negative = 1, u2._normSign();
        var c, b4;
        this.length > s.length ? (c = this, b4 = s) : (c = s, b4 = this);
        for (var l2 = 0, n3 = 0;n3 < b4.length; n3++)
          u2 = (c.words[n3] | 0) + (b4.words[n3] | 0) + l2, this.words[n3] = u2 & 67108863, l2 = u2 >>> 26;
        for (;l2 !== 0 && n3 < c.length; n3++)
          u2 = (c.words[n3] | 0) + l2, this.words[n3] = u2 & 67108863, l2 = u2 >>> 26;
        if (this.length = c.length, l2 !== 0)
          this.words[this.length] = l2, this.length++;
        else if (c !== this)
          for (;n3 < c.length; n3++)
            this.words[n3] = c.words[n3];
        return this;
      }, f2.prototype.add = function(s) {
        var u2;
        return s.negative !== 0 && this.negative === 0 ? (s.negative = 0, u2 = this.sub(s), s.negative ^= 1, u2) : s.negative === 0 && this.negative !== 0 ? (this.negative = 0, u2 = s.sub(this), this.negative = 1, u2) : this.length > s.length ? this.clone().iadd(s) : s.clone().iadd(this);
      }, f2.prototype.isub = function(s) {
        if (s.negative !== 0) {
          s.negative = 0;
          var u2 = this.iadd(s);
          return s.negative = 1, u2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(s), this.negative = 1, this._normSign();
        var c = this.cmp(s);
        if (c === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var b4, l2;
        c > 0 ? (b4 = this, l2 = s) : (b4 = s, l2 = this);
        for (var n3 = 0, d2 = 0;d2 < l2.length; d2++)
          u2 = (b4.words[d2] | 0) - (l2.words[d2] | 0) + n3, n3 = u2 >> 26, this.words[d2] = u2 & 67108863;
        for (;n3 !== 0 && d2 < b4.length; d2++)
          u2 = (b4.words[d2] | 0) + n3, n3 = u2 >> 26, this.words[d2] = u2 & 67108863;
        if (n3 === 0 && d2 < b4.length && b4 !== this)
          for (;d2 < b4.length; d2++)
            this.words[d2] = b4.words[d2];
        return this.length = Math.max(this.length, d2), b4 !== this && (this.negative = 1), this._strip();
      }, f2.prototype.sub = function(s) {
        return this.clone().isub(s);
      };
      function _e(h3, s, u2) {
        u2.negative = s.negative ^ h3.negative;
        var c = h3.length + s.length | 0;
        u2.length = c, c = c - 1 | 0;
        var b4 = h3.words[0] | 0, l2 = s.words[0] | 0, n3 = b4 * l2, d2 = n3 & 67108863, w3 = n3 / 67108864 | 0;
        u2.words[0] = d2;
        for (var g3 = 1;g3 < c; g3++) {
          for (var _3 = w3 >>> 26, A2 = w3 & 67108863, R3 = Math.min(g3, s.length - 1), I2 = Math.max(0, g3 - h3.length + 1);I2 <= R3; I2++) {
            var Me = g3 - I2 | 0;
            b4 = h3.words[Me] | 0, l2 = s.words[I2] | 0, n3 = b4 * l2 + A2, _3 += n3 / 67108864 | 0, A2 = n3 & 67108863;
          }
          u2.words[g3] = A2 | 0, w3 = _3 | 0;
        }
        return w3 !== 0 ? u2.words[g3] = w3 | 0 : u2.length--, u2._strip();
      }
      var N5 = function(s, u2, c) {
        var b4 = s.words, l2 = u2.words, n3 = c.words, d2 = 0, w3, g3, _3, A2 = b4[0] | 0, R3 = A2 & 8191, I2 = A2 >>> 13, Me = b4[1] | 0, k2 = Me & 8191, D3 = Me >>> 13, nt2 = b4[2] | 0, C2 = nt2 & 8191, O3 = nt2 >>> 13, vt = b4[3] | 0, F = vt & 8191, U5 = vt >>> 13, bt = b4[4] | 0, z = bt & 8191, H2 = bt >>> 13, mt = b4[5] | 0, W = mt & 8191, K3 = mt >>> 13, gt = b4[6] | 0, j3 = gt & 8191, Z2 = gt >>> 13, yt = b4[7] | 0, V2 = yt & 8191, $3 = yt >>> 13, wt = b4[8] | 0, G2 = wt & 8191, Y2 = wt >>> 13, Mt = b4[9] | 0, X2 = Mt & 8191, J2 = Mt >>> 13, _t = l2[0] | 0, Q2 = _t & 8191, ee = _t >>> 13, xt = l2[1] | 0, te = xt & 8191, re = xt >>> 13, St = l2[2] | 0, ie = St & 8191, ne = St >>> 13, Et = l2[3] | 0, fe = Et & 8191, ae = Et >>> 13, At = l2[4] | 0, oe = At & 8191, se = At >>> 13, Rt = l2[5] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = l2[6] | 0, le = Bt & 8191, de = Bt >>> 13, qt = l2[7] | 0, ce = qt & 8191, pe = qt >>> 13, It = l2[8] | 0, ve = It & 8191, be = It >>> 13, ft2 = l2[9] | 0, Be = ft2 & 8191, qe = ft2 >>> 13;
        c.negative = s.negative ^ u2.negative, c.length = 19, w3 = Math.imul(R3, Q2), g3 = Math.imul(R3, ee), g3 = g3 + Math.imul(I2, Q2) | 0, _3 = Math.imul(I2, ee);
        var ze = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, w3 = Math.imul(k2, Q2), g3 = Math.imul(k2, ee), g3 = g3 + Math.imul(D3, Q2) | 0, _3 = Math.imul(D3, ee), w3 = w3 + Math.imul(R3, te) | 0, g3 = g3 + Math.imul(R3, re) | 0, g3 = g3 + Math.imul(I2, te) | 0, _3 = _3 + Math.imul(I2, re) | 0;
        var He = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, w3 = Math.imul(C2, Q2), g3 = Math.imul(C2, ee), g3 = g3 + Math.imul(O3, Q2) | 0, _3 = Math.imul(O3, ee), w3 = w3 + Math.imul(k2, te) | 0, g3 = g3 + Math.imul(k2, re) | 0, g3 = g3 + Math.imul(D3, te) | 0, _3 = _3 + Math.imul(D3, re) | 0, w3 = w3 + Math.imul(R3, ie) | 0, g3 = g3 + Math.imul(R3, ne) | 0, g3 = g3 + Math.imul(I2, ie) | 0, _3 = _3 + Math.imul(I2, ne) | 0;
        var We = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, w3 = Math.imul(F, Q2), g3 = Math.imul(F, ee), g3 = g3 + Math.imul(U5, Q2) | 0, _3 = Math.imul(U5, ee), w3 = w3 + Math.imul(C2, te) | 0, g3 = g3 + Math.imul(C2, re) | 0, g3 = g3 + Math.imul(O3, te) | 0, _3 = _3 + Math.imul(O3, re) | 0, w3 = w3 + Math.imul(k2, ie) | 0, g3 = g3 + Math.imul(k2, ne) | 0, g3 = g3 + Math.imul(D3, ie) | 0, _3 = _3 + Math.imul(D3, ne) | 0, w3 = w3 + Math.imul(R3, fe) | 0, g3 = g3 + Math.imul(R3, ae) | 0, g3 = g3 + Math.imul(I2, fe) | 0, _3 = _3 + Math.imul(I2, ae) | 0;
        var Ke = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, w3 = Math.imul(z, Q2), g3 = Math.imul(z, ee), g3 = g3 + Math.imul(H2, Q2) | 0, _3 = Math.imul(H2, ee), w3 = w3 + Math.imul(F, te) | 0, g3 = g3 + Math.imul(F, re) | 0, g3 = g3 + Math.imul(U5, te) | 0, _3 = _3 + Math.imul(U5, re) | 0, w3 = w3 + Math.imul(C2, ie) | 0, g3 = g3 + Math.imul(C2, ne) | 0, g3 = g3 + Math.imul(O3, ie) | 0, _3 = _3 + Math.imul(O3, ne) | 0, w3 = w3 + Math.imul(k2, fe) | 0, g3 = g3 + Math.imul(k2, ae) | 0, g3 = g3 + Math.imul(D3, fe) | 0, _3 = _3 + Math.imul(D3, ae) | 0, w3 = w3 + Math.imul(R3, oe) | 0, g3 = g3 + Math.imul(R3, se) | 0, g3 = g3 + Math.imul(I2, oe) | 0, _3 = _3 + Math.imul(I2, se) | 0;
        var je = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, w3 = Math.imul(W, Q2), g3 = Math.imul(W, ee), g3 = g3 + Math.imul(K3, Q2) | 0, _3 = Math.imul(K3, ee), w3 = w3 + Math.imul(z, te) | 0, g3 = g3 + Math.imul(z, re) | 0, g3 = g3 + Math.imul(H2, te) | 0, _3 = _3 + Math.imul(H2, re) | 0, w3 = w3 + Math.imul(F, ie) | 0, g3 = g3 + Math.imul(F, ne) | 0, g3 = g3 + Math.imul(U5, ie) | 0, _3 = _3 + Math.imul(U5, ne) | 0, w3 = w3 + Math.imul(C2, fe) | 0, g3 = g3 + Math.imul(C2, ae) | 0, g3 = g3 + Math.imul(O3, fe) | 0, _3 = _3 + Math.imul(O3, ae) | 0, w3 = w3 + Math.imul(k2, oe) | 0, g3 = g3 + Math.imul(k2, se) | 0, g3 = g3 + Math.imul(D3, oe) | 0, _3 = _3 + Math.imul(D3, se) | 0, w3 = w3 + Math.imul(R3, he) | 0, g3 = g3 + Math.imul(R3, ue) | 0, g3 = g3 + Math.imul(I2, he) | 0, _3 = _3 + Math.imul(I2, ue) | 0;
        var Ze = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, w3 = Math.imul(j3, Q2), g3 = Math.imul(j3, ee), g3 = g3 + Math.imul(Z2, Q2) | 0, _3 = Math.imul(Z2, ee), w3 = w3 + Math.imul(W, te) | 0, g3 = g3 + Math.imul(W, re) | 0, g3 = g3 + Math.imul(K3, te) | 0, _3 = _3 + Math.imul(K3, re) | 0, w3 = w3 + Math.imul(z, ie) | 0, g3 = g3 + Math.imul(z, ne) | 0, g3 = g3 + Math.imul(H2, ie) | 0, _3 = _3 + Math.imul(H2, ne) | 0, w3 = w3 + Math.imul(F, fe) | 0, g3 = g3 + Math.imul(F, ae) | 0, g3 = g3 + Math.imul(U5, fe) | 0, _3 = _3 + Math.imul(U5, ae) | 0, w3 = w3 + Math.imul(C2, oe) | 0, g3 = g3 + Math.imul(C2, se) | 0, g3 = g3 + Math.imul(O3, oe) | 0, _3 = _3 + Math.imul(O3, se) | 0, w3 = w3 + Math.imul(k2, he) | 0, g3 = g3 + Math.imul(k2, ue) | 0, g3 = g3 + Math.imul(D3, he) | 0, _3 = _3 + Math.imul(D3, ue) | 0, w3 = w3 + Math.imul(R3, le) | 0, g3 = g3 + Math.imul(R3, de) | 0, g3 = g3 + Math.imul(I2, le) | 0, _3 = _3 + Math.imul(I2, de) | 0;
        var Ve = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, w3 = Math.imul(V2, Q2), g3 = Math.imul(V2, ee), g3 = g3 + Math.imul($3, Q2) | 0, _3 = Math.imul($3, ee), w3 = w3 + Math.imul(j3, te) | 0, g3 = g3 + Math.imul(j3, re) | 0, g3 = g3 + Math.imul(Z2, te) | 0, _3 = _3 + Math.imul(Z2, re) | 0, w3 = w3 + Math.imul(W, ie) | 0, g3 = g3 + Math.imul(W, ne) | 0, g3 = g3 + Math.imul(K3, ie) | 0, _3 = _3 + Math.imul(K3, ne) | 0, w3 = w3 + Math.imul(z, fe) | 0, g3 = g3 + Math.imul(z, ae) | 0, g3 = g3 + Math.imul(H2, fe) | 0, _3 = _3 + Math.imul(H2, ae) | 0, w3 = w3 + Math.imul(F, oe) | 0, g3 = g3 + Math.imul(F, se) | 0, g3 = g3 + Math.imul(U5, oe) | 0, _3 = _3 + Math.imul(U5, se) | 0, w3 = w3 + Math.imul(C2, he) | 0, g3 = g3 + Math.imul(C2, ue) | 0, g3 = g3 + Math.imul(O3, he) | 0, _3 = _3 + Math.imul(O3, ue) | 0, w3 = w3 + Math.imul(k2, le) | 0, g3 = g3 + Math.imul(k2, de) | 0, g3 = g3 + Math.imul(D3, le) | 0, _3 = _3 + Math.imul(D3, de) | 0, w3 = w3 + Math.imul(R3, ce) | 0, g3 = g3 + Math.imul(R3, pe) | 0, g3 = g3 + Math.imul(I2, ce) | 0, _3 = _3 + Math.imul(I2, pe) | 0;
        var $e = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, w3 = Math.imul(G2, Q2), g3 = Math.imul(G2, ee), g3 = g3 + Math.imul(Y2, Q2) | 0, _3 = Math.imul(Y2, ee), w3 = w3 + Math.imul(V2, te) | 0, g3 = g3 + Math.imul(V2, re) | 0, g3 = g3 + Math.imul($3, te) | 0, _3 = _3 + Math.imul($3, re) | 0, w3 = w3 + Math.imul(j3, ie) | 0, g3 = g3 + Math.imul(j3, ne) | 0, g3 = g3 + Math.imul(Z2, ie) | 0, _3 = _3 + Math.imul(Z2, ne) | 0, w3 = w3 + Math.imul(W, fe) | 0, g3 = g3 + Math.imul(W, ae) | 0, g3 = g3 + Math.imul(K3, fe) | 0, _3 = _3 + Math.imul(K3, ae) | 0, w3 = w3 + Math.imul(z, oe) | 0, g3 = g3 + Math.imul(z, se) | 0, g3 = g3 + Math.imul(H2, oe) | 0, _3 = _3 + Math.imul(H2, se) | 0, w3 = w3 + Math.imul(F, he) | 0, g3 = g3 + Math.imul(F, ue) | 0, g3 = g3 + Math.imul(U5, he) | 0, _3 = _3 + Math.imul(U5, ue) | 0, w3 = w3 + Math.imul(C2, le) | 0, g3 = g3 + Math.imul(C2, de) | 0, g3 = g3 + Math.imul(O3, le) | 0, _3 = _3 + Math.imul(O3, de) | 0, w3 = w3 + Math.imul(k2, ce) | 0, g3 = g3 + Math.imul(k2, pe) | 0, g3 = g3 + Math.imul(D3, ce) | 0, _3 = _3 + Math.imul(D3, pe) | 0, w3 = w3 + Math.imul(R3, ve) | 0, g3 = g3 + Math.imul(R3, be) | 0, g3 = g3 + Math.imul(I2, ve) | 0, _3 = _3 + Math.imul(I2, be) | 0;
        var Ge = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, w3 = Math.imul(X2, Q2), g3 = Math.imul(X2, ee), g3 = g3 + Math.imul(J2, Q2) | 0, _3 = Math.imul(J2, ee), w3 = w3 + Math.imul(G2, te) | 0, g3 = g3 + Math.imul(G2, re) | 0, g3 = g3 + Math.imul(Y2, te) | 0, _3 = _3 + Math.imul(Y2, re) | 0, w3 = w3 + Math.imul(V2, ie) | 0, g3 = g3 + Math.imul(V2, ne) | 0, g3 = g3 + Math.imul($3, ie) | 0, _3 = _3 + Math.imul($3, ne) | 0, w3 = w3 + Math.imul(j3, fe) | 0, g3 = g3 + Math.imul(j3, ae) | 0, g3 = g3 + Math.imul(Z2, fe) | 0, _3 = _3 + Math.imul(Z2, ae) | 0, w3 = w3 + Math.imul(W, oe) | 0, g3 = g3 + Math.imul(W, se) | 0, g3 = g3 + Math.imul(K3, oe) | 0, _3 = _3 + Math.imul(K3, se) | 0, w3 = w3 + Math.imul(z, he) | 0, g3 = g3 + Math.imul(z, ue) | 0, g3 = g3 + Math.imul(H2, he) | 0, _3 = _3 + Math.imul(H2, ue) | 0, w3 = w3 + Math.imul(F, le) | 0, g3 = g3 + Math.imul(F, de) | 0, g3 = g3 + Math.imul(U5, le) | 0, _3 = _3 + Math.imul(U5, de) | 0, w3 = w3 + Math.imul(C2, ce) | 0, g3 = g3 + Math.imul(C2, pe) | 0, g3 = g3 + Math.imul(O3, ce) | 0, _3 = _3 + Math.imul(O3, pe) | 0, w3 = w3 + Math.imul(k2, ve) | 0, g3 = g3 + Math.imul(k2, be) | 0, g3 = g3 + Math.imul(D3, ve) | 0, _3 = _3 + Math.imul(D3, be) | 0, w3 = w3 + Math.imul(R3, Be) | 0, g3 = g3 + Math.imul(R3, qe) | 0, g3 = g3 + Math.imul(I2, Be) | 0, _3 = _3 + Math.imul(I2, qe) | 0;
        var Ye = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, w3 = Math.imul(X2, te), g3 = Math.imul(X2, re), g3 = g3 + Math.imul(J2, te) | 0, _3 = Math.imul(J2, re), w3 = w3 + Math.imul(G2, ie) | 0, g3 = g3 + Math.imul(G2, ne) | 0, g3 = g3 + Math.imul(Y2, ie) | 0, _3 = _3 + Math.imul(Y2, ne) | 0, w3 = w3 + Math.imul(V2, fe) | 0, g3 = g3 + Math.imul(V2, ae) | 0, g3 = g3 + Math.imul($3, fe) | 0, _3 = _3 + Math.imul($3, ae) | 0, w3 = w3 + Math.imul(j3, oe) | 0, g3 = g3 + Math.imul(j3, se) | 0, g3 = g3 + Math.imul(Z2, oe) | 0, _3 = _3 + Math.imul(Z2, se) | 0, w3 = w3 + Math.imul(W, he) | 0, g3 = g3 + Math.imul(W, ue) | 0, g3 = g3 + Math.imul(K3, he) | 0, _3 = _3 + Math.imul(K3, ue) | 0, w3 = w3 + Math.imul(z, le) | 0, g3 = g3 + Math.imul(z, de) | 0, g3 = g3 + Math.imul(H2, le) | 0, _3 = _3 + Math.imul(H2, de) | 0, w3 = w3 + Math.imul(F, ce) | 0, g3 = g3 + Math.imul(F, pe) | 0, g3 = g3 + Math.imul(U5, ce) | 0, _3 = _3 + Math.imul(U5, pe) | 0, w3 = w3 + Math.imul(C2, ve) | 0, g3 = g3 + Math.imul(C2, be) | 0, g3 = g3 + Math.imul(O3, ve) | 0, _3 = _3 + Math.imul(O3, be) | 0, w3 = w3 + Math.imul(k2, Be) | 0, g3 = g3 + Math.imul(k2, qe) | 0, g3 = g3 + Math.imul(D3, Be) | 0, _3 = _3 + Math.imul(D3, qe) | 0;
        var Xe = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, w3 = Math.imul(X2, ie), g3 = Math.imul(X2, ne), g3 = g3 + Math.imul(J2, ie) | 0, _3 = Math.imul(J2, ne), w3 = w3 + Math.imul(G2, fe) | 0, g3 = g3 + Math.imul(G2, ae) | 0, g3 = g3 + Math.imul(Y2, fe) | 0, _3 = _3 + Math.imul(Y2, ae) | 0, w3 = w3 + Math.imul(V2, oe) | 0, g3 = g3 + Math.imul(V2, se) | 0, g3 = g3 + Math.imul($3, oe) | 0, _3 = _3 + Math.imul($3, se) | 0, w3 = w3 + Math.imul(j3, he) | 0, g3 = g3 + Math.imul(j3, ue) | 0, g3 = g3 + Math.imul(Z2, he) | 0, _3 = _3 + Math.imul(Z2, ue) | 0, w3 = w3 + Math.imul(W, le) | 0, g3 = g3 + Math.imul(W, de) | 0, g3 = g3 + Math.imul(K3, le) | 0, _3 = _3 + Math.imul(K3, de) | 0, w3 = w3 + Math.imul(z, ce) | 0, g3 = g3 + Math.imul(z, pe) | 0, g3 = g3 + Math.imul(H2, ce) | 0, _3 = _3 + Math.imul(H2, pe) | 0, w3 = w3 + Math.imul(F, ve) | 0, g3 = g3 + Math.imul(F, be) | 0, g3 = g3 + Math.imul(U5, ve) | 0, _3 = _3 + Math.imul(U5, be) | 0, w3 = w3 + Math.imul(C2, Be) | 0, g3 = g3 + Math.imul(C2, qe) | 0, g3 = g3 + Math.imul(O3, Be) | 0, _3 = _3 + Math.imul(O3, qe) | 0;
        var Je = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, w3 = Math.imul(X2, fe), g3 = Math.imul(X2, ae), g3 = g3 + Math.imul(J2, fe) | 0, _3 = Math.imul(J2, ae), w3 = w3 + Math.imul(G2, oe) | 0, g3 = g3 + Math.imul(G2, se) | 0, g3 = g3 + Math.imul(Y2, oe) | 0, _3 = _3 + Math.imul(Y2, se) | 0, w3 = w3 + Math.imul(V2, he) | 0, g3 = g3 + Math.imul(V2, ue) | 0, g3 = g3 + Math.imul($3, he) | 0, _3 = _3 + Math.imul($3, ue) | 0, w3 = w3 + Math.imul(j3, le) | 0, g3 = g3 + Math.imul(j3, de) | 0, g3 = g3 + Math.imul(Z2, le) | 0, _3 = _3 + Math.imul(Z2, de) | 0, w3 = w3 + Math.imul(W, ce) | 0, g3 = g3 + Math.imul(W, pe) | 0, g3 = g3 + Math.imul(K3, ce) | 0, _3 = _3 + Math.imul(K3, pe) | 0, w3 = w3 + Math.imul(z, ve) | 0, g3 = g3 + Math.imul(z, be) | 0, g3 = g3 + Math.imul(H2, ve) | 0, _3 = _3 + Math.imul(H2, be) | 0, w3 = w3 + Math.imul(F, Be) | 0, g3 = g3 + Math.imul(F, qe) | 0, g3 = g3 + Math.imul(U5, Be) | 0, _3 = _3 + Math.imul(U5, qe) | 0;
        var Qe = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, w3 = Math.imul(X2, oe), g3 = Math.imul(X2, se), g3 = g3 + Math.imul(J2, oe) | 0, _3 = Math.imul(J2, se), w3 = w3 + Math.imul(G2, he) | 0, g3 = g3 + Math.imul(G2, ue) | 0, g3 = g3 + Math.imul(Y2, he) | 0, _3 = _3 + Math.imul(Y2, ue) | 0, w3 = w3 + Math.imul(V2, le) | 0, g3 = g3 + Math.imul(V2, de) | 0, g3 = g3 + Math.imul($3, le) | 0, _3 = _3 + Math.imul($3, de) | 0, w3 = w3 + Math.imul(j3, ce) | 0, g3 = g3 + Math.imul(j3, pe) | 0, g3 = g3 + Math.imul(Z2, ce) | 0, _3 = _3 + Math.imul(Z2, pe) | 0, w3 = w3 + Math.imul(W, ve) | 0, g3 = g3 + Math.imul(W, be) | 0, g3 = g3 + Math.imul(K3, ve) | 0, _3 = _3 + Math.imul(K3, be) | 0, w3 = w3 + Math.imul(z, Be) | 0, g3 = g3 + Math.imul(z, qe) | 0, g3 = g3 + Math.imul(H2, Be) | 0, _3 = _3 + Math.imul(H2, qe) | 0;
        var et = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, w3 = Math.imul(X2, he), g3 = Math.imul(X2, ue), g3 = g3 + Math.imul(J2, he) | 0, _3 = Math.imul(J2, ue), w3 = w3 + Math.imul(G2, le) | 0, g3 = g3 + Math.imul(G2, de) | 0, g3 = g3 + Math.imul(Y2, le) | 0, _3 = _3 + Math.imul(Y2, de) | 0, w3 = w3 + Math.imul(V2, ce) | 0, g3 = g3 + Math.imul(V2, pe) | 0, g3 = g3 + Math.imul($3, ce) | 0, _3 = _3 + Math.imul($3, pe) | 0, w3 = w3 + Math.imul(j3, ve) | 0, g3 = g3 + Math.imul(j3, be) | 0, g3 = g3 + Math.imul(Z2, ve) | 0, _3 = _3 + Math.imul(Z2, be) | 0, w3 = w3 + Math.imul(W, Be) | 0, g3 = g3 + Math.imul(W, qe) | 0, g3 = g3 + Math.imul(K3, Be) | 0, _3 = _3 + Math.imul(K3, qe) | 0;
        var tt = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, w3 = Math.imul(X2, le), g3 = Math.imul(X2, de), g3 = g3 + Math.imul(J2, le) | 0, _3 = Math.imul(J2, de), w3 = w3 + Math.imul(G2, ce) | 0, g3 = g3 + Math.imul(G2, pe) | 0, g3 = g3 + Math.imul(Y2, ce) | 0, _3 = _3 + Math.imul(Y2, pe) | 0, w3 = w3 + Math.imul(V2, ve) | 0, g3 = g3 + Math.imul(V2, be) | 0, g3 = g3 + Math.imul($3, ve) | 0, _3 = _3 + Math.imul($3, be) | 0, w3 = w3 + Math.imul(j3, Be) | 0, g3 = g3 + Math.imul(j3, qe) | 0, g3 = g3 + Math.imul(Z2, Be) | 0, _3 = _3 + Math.imul(Z2, qe) | 0;
        var rt = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, w3 = Math.imul(X2, ce), g3 = Math.imul(X2, pe), g3 = g3 + Math.imul(J2, ce) | 0, _3 = Math.imul(J2, pe), w3 = w3 + Math.imul(G2, ve) | 0, g3 = g3 + Math.imul(G2, be) | 0, g3 = g3 + Math.imul(Y2, ve) | 0, _3 = _3 + Math.imul(Y2, be) | 0, w3 = w3 + Math.imul(V2, Be) | 0, g3 = g3 + Math.imul(V2, qe) | 0, g3 = g3 + Math.imul($3, Be) | 0, _3 = _3 + Math.imul($3, qe) | 0;
        var S02 = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (S02 >>> 26) | 0, S02 &= 67108863, w3 = Math.imul(X2, ve), g3 = Math.imul(X2, be), g3 = g3 + Math.imul(J2, ve) | 0, _3 = Math.imul(J2, be), w3 = w3 + Math.imul(G2, Be) | 0, g3 = g3 + Math.imul(G2, qe) | 0, g3 = g3 + Math.imul(Y2, Be) | 0, _3 = _3 + Math.imul(Y2, qe) | 0;
        var E0 = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        d2 = (_3 + (g3 >>> 13) | 0) + (E0 >>> 26) | 0, E0 &= 67108863, w3 = Math.imul(X2, Be), g3 = Math.imul(X2, qe), g3 = g3 + Math.imul(J2, Be) | 0, _3 = Math.imul(J2, qe);
        var A0 = (d2 + w3 | 0) + ((g3 & 8191) << 13) | 0;
        return d2 = (_3 + (g3 >>> 13) | 0) + (A0 >>> 26) | 0, A0 &= 67108863, n3[0] = ze, n3[1] = He, n3[2] = We, n3[3] = Ke, n3[4] = je, n3[5] = Ze, n3[6] = Ve, n3[7] = $e, n3[8] = Ge, n3[9] = Ye, n3[10] = Xe, n3[11] = Je, n3[12] = Qe, n3[13] = et, n3[14] = tt, n3[15] = rt, n3[16] = S02, n3[17] = E0, n3[18] = A0, d2 !== 0 && (n3[19] = d2, c.length++), c;
      };
      Math.imul || (N5 = _e);
      function we(h3, s, u2) {
        u2.negative = s.negative ^ h3.negative, u2.length = h3.length + s.length;
        for (var c = 0, b4 = 0, l2 = 0;l2 < u2.length - 1; l2++) {
          var n3 = b4;
          b4 = 0;
          for (var d2 = c & 67108863, w3 = Math.min(l2, s.length - 1), g3 = Math.max(0, l2 - h3.length + 1);g3 <= w3; g3++) {
            var _3 = l2 - g3, A2 = h3.words[_3] | 0, R3 = s.words[g3] | 0, I2 = A2 * R3, Me = I2 & 67108863;
            n3 = n3 + (I2 / 67108864 | 0) | 0, Me = Me + d2 | 0, d2 = Me & 67108863, n3 = n3 + (Me >>> 26) | 0, b4 += n3 >>> 26, n3 &= 67108863;
          }
          u2.words[l2] = d2, c = n3, n3 = b4;
        }
        return c !== 0 ? u2.words[l2] = c : u2.length--, u2._strip();
      }
      function ye(h3, s, u2) {
        return we(h3, s, u2);
      }
      f2.prototype.mulTo = function(s, u2) {
        var c, b4 = this.length + s.length;
        return this.length === 10 && s.length === 10 ? c = N5(this, s, u2) : b4 < 63 ? c = _e(this, s, u2) : b4 < 1024 ? c = we(this, s, u2) : c = ye(this, s, u2), c;
      };
      function xe(h3, s) {
        this.x = h3, this.y = s;
      }
      xe.prototype.makeRBT = function(s) {
        for (var u2 = new Array(s), c = f2.prototype._countBits(s) - 1, b4 = 0;b4 < s; b4++)
          u2[b4] = this.revBin(b4, c, s);
        return u2;
      }, xe.prototype.revBin = function(s, u2, c) {
        if (s === 0 || s === c - 1)
          return s;
        for (var b4 = 0, l2 = 0;l2 < u2; l2++)
          b4 |= (s & 1) << u2 - l2 - 1, s >>= 1;
        return b4;
      }, xe.prototype.permute = function(s, u2, c, b4, l2, n3) {
        for (var d2 = 0;d2 < n3; d2++)
          b4[d2] = u2[s[d2]], l2[d2] = c[s[d2]];
      }, xe.prototype.transform = function(s, u2, c, b4, l2, n3) {
        this.permute(n3, s, u2, c, b4, l2);
        for (var d2 = 1;d2 < l2; d2 <<= 1)
          for (var w3 = d2 << 1, g3 = Math.cos(2 * Math.PI / w3), _3 = Math.sin(2 * Math.PI / w3), A2 = 0;A2 < l2; A2 += w3)
            for (var R3 = g3, I2 = _3, Me = 0;Me < d2; Me++) {
              var k2 = c[A2 + Me], D3 = b4[A2 + Me], nt2 = c[A2 + Me + d2], C2 = b4[A2 + Me + d2], O3 = R3 * nt2 - I2 * C2;
              C2 = R3 * C2 + I2 * nt2, nt2 = O3, c[A2 + Me] = k2 + nt2, b4[A2 + Me] = D3 + C2, c[A2 + Me + d2] = k2 - nt2, b4[A2 + Me + d2] = D3 - C2, Me !== w3 && (O3 = g3 * R3 - _3 * I2, I2 = g3 * I2 + _3 * R3, R3 = O3);
            }
      }, xe.prototype.guessLen13b = function(s, u2) {
        var c = Math.max(u2, s) | 1, b4 = c & 1, l2 = 0;
        for (c = c / 2 | 0;c; c = c >>> 1)
          l2++;
        return 1 << l2 + 1 + b4;
      }, xe.prototype.conjugate = function(s, u2, c) {
        if (!(c <= 1))
          for (var b4 = 0;b4 < c / 2; b4++) {
            var l2 = s[b4];
            s[b4] = s[c - b4 - 1], s[c - b4 - 1] = l2, l2 = u2[b4], u2[b4] = -u2[c - b4 - 1], u2[c - b4 - 1] = -l2;
          }
      }, xe.prototype.normalize13b = function(s, u2) {
        for (var c = 0, b4 = 0;b4 < u2 / 2; b4++) {
          var l2 = Math.round(s[2 * b4 + 1] / u2) * 8192 + Math.round(s[2 * b4] / u2) + c;
          s[b4] = l2 & 67108863, l2 < 67108864 ? c = 0 : c = l2 / 67108864 | 0;
        }
        return s;
      }, xe.prototype.convert13b = function(s, u2, c, b4) {
        for (var l2 = 0, n3 = 0;n3 < u2; n3++)
          l2 = l2 + (s[n3] | 0), c[2 * n3] = l2 & 8191, l2 = l2 >>> 13, c[2 * n3 + 1] = l2 & 8191, l2 = l2 >>> 13;
        for (n3 = 2 * u2;n3 < b4; ++n3)
          c[n3] = 0;
        r(l2 === 0), r((l2 & -8192) === 0);
      }, xe.prototype.stub = function(s) {
        for (var u2 = new Array(s), c = 0;c < s; c++)
          u2[c] = 0;
        return u2;
      }, xe.prototype.mulp = function(s, u2, c) {
        var b4 = 2 * this.guessLen13b(s.length, u2.length), l2 = this.makeRBT(b4), n3 = this.stub(b4), d2 = new Array(b4), w3 = new Array(b4), g3 = new Array(b4), _3 = new Array(b4), A2 = new Array(b4), R3 = new Array(b4), I2 = c.words;
        I2.length = b4, this.convert13b(s.words, s.length, d2, b4), this.convert13b(u2.words, u2.length, _3, b4), this.transform(d2, n3, w3, g3, b4, l2), this.transform(_3, n3, A2, R3, b4, l2);
        for (var Me = 0;Me < b4; Me++) {
          var k2 = w3[Me] * A2[Me] - g3[Me] * R3[Me];
          g3[Me] = w3[Me] * R3[Me] + g3[Me] * A2[Me], w3[Me] = k2;
        }
        return this.conjugate(w3, g3, b4), this.transform(w3, g3, I2, n3, b4, l2), this.conjugate(I2, n3, b4), this.normalize13b(I2, b4), c.negative = s.negative ^ u2.negative, c.length = s.length + u2.length, c._strip();
      }, f2.prototype.mul = function(s) {
        var u2 = new f2(null);
        return u2.words = new Array(this.length + s.length), this.mulTo(s, u2);
      }, f2.prototype.mulf = function(s) {
        var u2 = new f2(null);
        return u2.words = new Array(this.length + s.length), ye(this, s, u2);
      }, f2.prototype.imul = function(s) {
        return this.clone().mulTo(s, this);
      }, f2.prototype.imuln = function(s) {
        var u2 = s < 0;
        u2 && (s = -s), r(typeof s == "number"), r(s < 67108864);
        for (var c = 0, b4 = 0;b4 < this.length; b4++) {
          var l2 = (this.words[b4] | 0) * s, n3 = (l2 & 67108863) + (c & 67108863);
          c >>= 26, c += l2 / 67108864 | 0, c += n3 >>> 26, this.words[b4] = n3 & 67108863;
        }
        return c !== 0 && (this.words[b4] = c, this.length++), u2 ? this.ineg() : this;
      }, f2.prototype.muln = function(s) {
        return this.clone().imuln(s);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(s) {
        var u2 = ge(s);
        if (u2.length === 0)
          return new f2(1);
        for (var c = this, b4 = 0;b4 < u2.length && u2[b4] === 0; b4++, c = c.sqr())
          ;
        if (++b4 < u2.length)
          for (var l2 = c.sqr();b4 < u2.length; b4++, l2 = l2.sqr())
            u2[b4] !== 0 && (c = c.mul(l2));
        return c;
      }, f2.prototype.iushln = function(s) {
        r(typeof s == "number" && s >= 0);
        var u2 = s % 26, c = (s - u2) / 26, b4 = 67108863 >>> 26 - u2 << 26 - u2, l2;
        if (u2 !== 0) {
          var n3 = 0;
          for (l2 = 0;l2 < this.length; l2++) {
            var d2 = this.words[l2] & b4, w3 = (this.words[l2] | 0) - d2 << u2;
            this.words[l2] = w3 | n3, n3 = d2 >>> 26 - u2;
          }
          n3 && (this.words[l2] = n3, this.length++);
        }
        if (c !== 0) {
          for (l2 = this.length - 1;l2 >= 0; l2--)
            this.words[l2 + c] = this.words[l2];
          for (l2 = 0;l2 < c; l2++)
            this.words[l2] = 0;
          this.length += c;
        }
        return this._strip();
      }, f2.prototype.ishln = function(s) {
        return r(this.negative === 0), this.iushln(s);
      }, f2.prototype.iushrn = function(s, u2, c) {
        r(typeof s == "number" && s >= 0);
        var b4;
        u2 ? b4 = (u2 - u2 % 26) / 26 : b4 = 0;
        var l2 = s % 26, n3 = Math.min((s - l2) / 26, this.length), d2 = 67108863 ^ 67108863 >>> l2 << l2, w3 = c;
        if (b4 -= n3, b4 = Math.max(0, b4), w3) {
          for (var g3 = 0;g3 < n3; g3++)
            w3.words[g3] = this.words[g3];
          w3.length = n3;
        }
        if (n3 !== 0)
          if (this.length > n3)
            for (this.length -= n3, g3 = 0;g3 < this.length; g3++)
              this.words[g3] = this.words[g3 + n3];
          else
            this.words[0] = 0, this.length = 1;
        var _3 = 0;
        for (g3 = this.length - 1;g3 >= 0 && (_3 !== 0 || g3 >= b4); g3--) {
          var A2 = this.words[g3] | 0;
          this.words[g3] = _3 << 26 - l2 | A2 >>> l2, _3 = A2 & d2;
        }
        return w3 && _3 !== 0 && (w3.words[w3.length++] = _3), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();
      }, f2.prototype.ishrn = function(s, u2, c) {
        return r(this.negative === 0), this.iushrn(s, u2, c);
      }, f2.prototype.shln = function(s) {
        return this.clone().ishln(s);
      }, f2.prototype.ushln = function(s) {
        return this.clone().iushln(s);
      }, f2.prototype.shrn = function(s) {
        return this.clone().ishrn(s);
      }, f2.prototype.ushrn = function(s) {
        return this.clone().iushrn(s);
      }, f2.prototype.testn = function(s) {
        r(typeof s == "number" && s >= 0);
        var u2 = s % 26, c = (s - u2) / 26, b4 = 1 << u2;
        if (this.length <= c)
          return false;
        var l2 = this.words[c];
        return !!(l2 & b4);
      }, f2.prototype.imaskn = function(s) {
        r(typeof s == "number" && s >= 0);
        var u2 = s % 26, c = (s - u2) / 26;
        if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= c)
          return this;
        if (u2 !== 0 && c++, this.length = Math.min(c, this.length), u2 !== 0) {
          var b4 = 67108863 ^ 67108863 >>> u2 << u2;
          this.words[this.length - 1] &= b4;
        }
        return this._strip();
      }, f2.prototype.maskn = function(s) {
        return this.clone().imaskn(s);
      }, f2.prototype.iaddn = function(s) {
        return r(typeof s == "number"), r(s < 67108864), s < 0 ? this.isubn(-s) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= s ? (this.words[0] = s - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(s), this.negative = 1, this) : this._iaddn(s);
      }, f2.prototype._iaddn = function(s) {
        this.words[0] += s;
        for (var u2 = 0;u2 < this.length && this.words[u2] >= 67108864; u2++)
          this.words[u2] -= 67108864, u2 === this.length - 1 ? this.words[u2 + 1] = 1 : this.words[u2 + 1]++;
        return this.length = Math.max(this.length, u2 + 1), this;
      }, f2.prototype.isubn = function(s) {
        if (r(typeof s == "number"), r(s < 67108864), s < 0)
          return this.iaddn(-s);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(s), this.negative = 1, this;
        if (this.words[0] -= s, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var u2 = 0;u2 < this.length && this.words[u2] < 0; u2++)
            this.words[u2] += 67108864, this.words[u2 + 1] -= 1;
        return this._strip();
      }, f2.prototype.addn = function(s) {
        return this.clone().iaddn(s);
      }, f2.prototype.subn = function(s) {
        return this.clone().isubn(s);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(s, u2, c) {
        var b4 = s.length + c, l2;
        this._expand(b4);
        var n3, d2 = 0;
        for (l2 = 0;l2 < s.length; l2++) {
          n3 = (this.words[l2 + c] | 0) + d2;
          var w3 = (s.words[l2] | 0) * u2;
          n3 -= w3 & 67108863, d2 = (n3 >> 26) - (w3 / 67108864 | 0), this.words[l2 + c] = n3 & 67108863;
        }
        for (;l2 < this.length - c; l2++)
          n3 = (this.words[l2 + c] | 0) + d2, d2 = n3 >> 26, this.words[l2 + c] = n3 & 67108863;
        if (d2 === 0)
          return this._strip();
        for (r(d2 === -1), d2 = 0, l2 = 0;l2 < this.length; l2++)
          n3 = -(this.words[l2] | 0) + d2, d2 = n3 >> 26, this.words[l2] = n3 & 67108863;
        return this.negative = 1, this._strip();
      }, f2.prototype._wordDiv = function(s, u2) {
        var c = this.length - s.length, b4 = this.clone(), l2 = s, n3 = l2.words[l2.length - 1] | 0, d2 = this._countBits(n3);
        c = 26 - d2, c !== 0 && (l2 = l2.ushln(c), b4.iushln(c), n3 = l2.words[l2.length - 1] | 0);
        var w3 = b4.length - l2.length, g3;
        if (u2 !== "mod") {
          g3 = new f2(null), g3.length = w3 + 1, g3.words = new Array(g3.length);
          for (var _3 = 0;_3 < g3.length; _3++)
            g3.words[_3] = 0;
        }
        var A2 = b4.clone()._ishlnsubmul(l2, 1, w3);
        A2.negative === 0 && (b4 = A2, g3 && (g3.words[w3] = 1));
        for (var R3 = w3 - 1;R3 >= 0; R3--) {
          var I2 = (b4.words[l2.length + R3] | 0) * 67108864 + (b4.words[l2.length + R3 - 1] | 0);
          for (I2 = Math.min(I2 / n3 | 0, 67108863), b4._ishlnsubmul(l2, I2, R3);b4.negative !== 0; )
            I2--, b4.negative = 0, b4._ishlnsubmul(l2, 1, R3), b4.isZero() || (b4.negative ^= 1);
          g3 && (g3.words[R3] = I2);
        }
        return g3 && g3._strip(), b4._strip(), u2 !== "div" && c !== 0 && b4.iushrn(c), { div: g3 || null, mod: b4 };
      }, f2.prototype.divmod = function(s, u2, c) {
        if (r(!s.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var b4, l2, n3;
        return this.negative !== 0 && s.negative === 0 ? (n3 = this.neg().divmod(s, u2), u2 !== "mod" && (b4 = n3.div.neg()), u2 !== "div" && (l2 = n3.mod.neg(), c && l2.negative !== 0 && l2.iadd(s)), { div: b4, mod: l2 }) : this.negative === 0 && s.negative !== 0 ? (n3 = this.divmod(s.neg(), u2), u2 !== "mod" && (b4 = n3.div.neg()), { div: b4, mod: n3.mod }) : (this.negative & s.negative) !== 0 ? (n3 = this.neg().divmod(s.neg(), u2), u2 !== "div" && (l2 = n3.mod.neg(), c && l2.negative !== 0 && l2.isub(s)), { div: n3.div, mod: l2 }) : s.length > this.length || this.cmp(s) < 0 ? { div: new f2(0), mod: this } : s.length === 1 ? u2 === "div" ? { div: this.divn(s.words[0]), mod: null } : u2 === "mod" ? { div: null, mod: new f2(this.modrn(s.words[0])) } : { div: this.divn(s.words[0]), mod: new f2(this.modrn(s.words[0])) } : this._wordDiv(s, u2);
      }, f2.prototype.div = function(s) {
        return this.divmod(s, "div", false).div;
      }, f2.prototype.mod = function(s) {
        return this.divmod(s, "mod", false).mod;
      }, f2.prototype.umod = function(s) {
        return this.divmod(s, "mod", true).mod;
      }, f2.prototype.divRound = function(s) {
        var u2 = this.divmod(s);
        if (u2.mod.isZero())
          return u2.div;
        var c = u2.div.negative !== 0 ? u2.mod.isub(s) : u2.mod, b4 = s.ushrn(1), l2 = s.andln(1), n3 = c.cmp(b4);
        return n3 < 0 || l2 === 1 && n3 === 0 ? u2.div : u2.div.negative !== 0 ? u2.div.isubn(1) : u2.div.iaddn(1);
      }, f2.prototype.modrn = function(s) {
        var u2 = s < 0;
        u2 && (s = -s), r(s <= 67108863);
        for (var c = (1 << 26) % s, b4 = 0, l2 = this.length - 1;l2 >= 0; l2--)
          b4 = (c * b4 + (this.words[l2] | 0)) % s;
        return u2 ? -b4 : b4;
      }, f2.prototype.modn = function(s) {
        return this.modrn(s);
      }, f2.prototype.idivn = function(s) {
        var u2 = s < 0;
        u2 && (s = -s), r(s <= 67108863);
        for (var c = 0, b4 = this.length - 1;b4 >= 0; b4--) {
          var l2 = (this.words[b4] | 0) + c * 67108864;
          this.words[b4] = l2 / s | 0, c = l2 % s;
        }
        return this._strip(), u2 ? this.ineg() : this;
      }, f2.prototype.divn = function(s) {
        return this.clone().idivn(s);
      }, f2.prototype.egcd = function(s) {
        r(s.negative === 0), r(!s.isZero());
        var u2 = this, c = s.clone();
        u2.negative !== 0 ? u2 = u2.umod(s) : u2 = u2.clone();
        for (var b4 = new f2(1), l2 = new f2(0), n3 = new f2(0), d2 = new f2(1), w3 = 0;u2.isEven() && c.isEven(); )
          u2.iushrn(1), c.iushrn(1), ++w3;
        for (var g3 = c.clone(), _3 = u2.clone();!u2.isZero(); ) {
          for (var A2 = 0, R3 = 1;(u2.words[0] & R3) === 0 && A2 < 26; ++A2, R3 <<= 1)
            ;
          if (A2 > 0)
            for (u2.iushrn(A2);A2-- > 0; )
              (b4.isOdd() || l2.isOdd()) && (b4.iadd(g3), l2.isub(_3)), b4.iushrn(1), l2.iushrn(1);
          for (var I2 = 0, Me = 1;(c.words[0] & Me) === 0 && I2 < 26; ++I2, Me <<= 1)
            ;
          if (I2 > 0)
            for (c.iushrn(I2);I2-- > 0; )
              (n3.isOdd() || d2.isOdd()) && (n3.iadd(g3), d2.isub(_3)), n3.iushrn(1), d2.iushrn(1);
          u2.cmp(c) >= 0 ? (u2.isub(c), b4.isub(n3), l2.isub(d2)) : (c.isub(u2), n3.isub(b4), d2.isub(l2));
        }
        return { a: n3, b: d2, gcd: c.iushln(w3) };
      }, f2.prototype._invmp = function(s) {
        r(s.negative === 0), r(!s.isZero());
        var u2 = this, c = s.clone();
        u2.negative !== 0 ? u2 = u2.umod(s) : u2 = u2.clone();
        for (var b4 = new f2(1), l2 = new f2(0), n3 = c.clone();u2.cmpn(1) > 0 && c.cmpn(1) > 0; ) {
          for (var d2 = 0, w3 = 1;(u2.words[0] & w3) === 0 && d2 < 26; ++d2, w3 <<= 1)
            ;
          if (d2 > 0)
            for (u2.iushrn(d2);d2-- > 0; )
              b4.isOdd() && b4.iadd(n3), b4.iushrn(1);
          for (var g3 = 0, _3 = 1;(c.words[0] & _3) === 0 && g3 < 26; ++g3, _3 <<= 1)
            ;
          if (g3 > 0)
            for (c.iushrn(g3);g3-- > 0; )
              l2.isOdd() && l2.iadd(n3), l2.iushrn(1);
          u2.cmp(c) >= 0 ? (u2.isub(c), b4.isub(l2)) : (c.isub(u2), l2.isub(b4));
        }
        var A2;
        return u2.cmpn(1) === 0 ? A2 = b4 : A2 = l2, A2.cmpn(0) < 0 && A2.iadd(s), A2;
      }, f2.prototype.gcd = function(s) {
        if (this.isZero())
          return s.abs();
        if (s.isZero())
          return this.abs();
        var u2 = this.clone(), c = s.clone();
        u2.negative = 0, c.negative = 0;
        for (var b4 = 0;u2.isEven() && c.isEven(); b4++)
          u2.iushrn(1), c.iushrn(1);
        do {
          for (;u2.isEven(); )
            u2.iushrn(1);
          for (;c.isEven(); )
            c.iushrn(1);
          var l2 = u2.cmp(c);
          if (l2 < 0) {
            var n3 = u2;
            u2 = c, c = n3;
          } else if (l2 === 0 || c.cmpn(1) === 0)
            break;
          u2.isub(c);
        } while (true);
        return c.iushln(b4);
      }, f2.prototype.invm = function(s) {
        return this.egcd(s).a.umod(s);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(s) {
        return this.words[0] & s;
      }, f2.prototype.bincn = function(s) {
        r(typeof s == "number");
        var u2 = s % 26, c = (s - u2) / 26, b4 = 1 << u2;
        if (this.length <= c)
          return this._expand(c + 1), this.words[c] |= b4, this;
        for (var l2 = b4, n3 = c;l2 !== 0 && n3 < this.length; n3++) {
          var d2 = this.words[n3] | 0;
          d2 += l2, l2 = d2 >>> 26, d2 &= 67108863, this.words[n3] = d2;
        }
        return l2 !== 0 && (this.words[n3] = l2, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(s) {
        var u2 = s < 0;
        if (this.negative !== 0 && !u2)
          return -1;
        if (this.negative === 0 && u2)
          return 1;
        this._strip();
        var c;
        if (this.length > 1)
          c = 1;
        else {
          u2 && (s = -s), r(s <= 67108863, "Number is too big");
          var b4 = this.words[0] | 0;
          c = b4 === s ? 0 : b4 < s ? -1 : 1;
        }
        return this.negative !== 0 ? -c | 0 : c;
      }, f2.prototype.cmp = function(s) {
        if (this.negative !== 0 && s.negative === 0)
          return -1;
        if (this.negative === 0 && s.negative !== 0)
          return 1;
        var u2 = this.ucmp(s);
        return this.negative !== 0 ? -u2 | 0 : u2;
      }, f2.prototype.ucmp = function(s) {
        if (this.length > s.length)
          return 1;
        if (this.length < s.length)
          return -1;
        for (var u2 = 0, c = this.length - 1;c >= 0; c--) {
          var b4 = this.words[c] | 0, l2 = s.words[c] | 0;
          if (b4 !== l2) {
            b4 < l2 ? u2 = -1 : b4 > l2 && (u2 = 1);
            break;
          }
        }
        return u2;
      }, f2.prototype.gtn = function(s) {
        return this.cmpn(s) === 1;
      }, f2.prototype.gt = function(s) {
        return this.cmp(s) === 1;
      }, f2.prototype.gten = function(s) {
        return this.cmpn(s) >= 0;
      }, f2.prototype.gte = function(s) {
        return this.cmp(s) >= 0;
      }, f2.prototype.ltn = function(s) {
        return this.cmpn(s) === -1;
      }, f2.prototype.lt = function(s) {
        return this.cmp(s) === -1;
      }, f2.prototype.lten = function(s) {
        return this.cmpn(s) <= 0;
      }, f2.prototype.lte = function(s) {
        return this.cmp(s) <= 0;
      }, f2.prototype.eqn = function(s) {
        return this.cmpn(s) === 0;
      }, f2.prototype.eq = function(s) {
        return this.cmp(s) === 0;
      }, f2.red = function(s) {
        return new i(s);
      }, f2.prototype.toRed = function(s) {
        return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), s.convertTo(this)._forceRed(s);
      }, f2.prototype.fromRed = function() {
        return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(s) {
        return this.red = s, this;
      }, f2.prototype.forceRed = function(s) {
        return r(!this.red, "Already a number in reduction context"), this._forceRed(s);
      }, f2.prototype.redAdd = function(s) {
        return r(this.red, "redAdd works only with red numbers"), this.red.add(this, s);
      }, f2.prototype.redIAdd = function(s) {
        return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, s);
      }, f2.prototype.redSub = function(s) {
        return r(this.red, "redSub works only with red numbers"), this.red.sub(this, s);
      }, f2.prototype.redISub = function(s) {
        return r(this.red, "redISub works only with red numbers"), this.red.isub(this, s);
      }, f2.prototype.redShl = function(s) {
        return r(this.red, "redShl works only with red numbers"), this.red.shl(this, s);
      }, f2.prototype.redMul = function(s) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, s), this.red.mul(this, s);
      }, f2.prototype.redIMul = function(s) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, s), this.red.imul(this, s);
      }, f2.prototype.redSqr = function() {
        return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(s) {
        return r(this.red && !s.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, s);
      };
      var Re = { k256: null, p224: null, p192: null, p25519: null };
      function Ee(h3, s) {
        this.name = h3, this.p = new f2(s, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      Ee.prototype._tmp = function() {
        var s = new f2(null);
        return s.words = new Array(Math.ceil(this.n / 13)), s;
      }, Ee.prototype.ireduce = function(s) {
        var u2 = s, c;
        do
          this.split(u2, this.tmp), u2 = this.imulK(u2), u2 = u2.iadd(this.tmp), c = u2.bitLength();
        while (c > this.n);
        var b4 = c < this.n ? -1 : u2.ucmp(this.p);
        return b4 === 0 ? (u2.words[0] = 0, u2.length = 1) : b4 > 0 ? u2.isub(this.p) : u2.strip !== undefined ? u2.strip() : u2._strip(), u2;
      }, Ee.prototype.split = function(s, u2) {
        s.iushrn(this.n, 0, u2);
      }, Ee.prototype.imulK = function(s) {
        return s.imul(this.k);
      };
      function Ae() {
        Ee.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(Ae, Ee), Ae.prototype.split = function(s, u2) {
        for (var c = 4194303, b4 = Math.min(s.length, 9), l2 = 0;l2 < b4; l2++)
          u2.words[l2] = s.words[l2];
        if (u2.length = b4, s.length <= 9) {
          s.words[0] = 0, s.length = 1;
          return;
        }
        var n3 = s.words[9];
        for (u2.words[u2.length++] = n3 & c, l2 = 10;l2 < s.length; l2++) {
          var d2 = s.words[l2] | 0;
          s.words[l2 - 10] = (d2 & c) << 4 | n3 >>> 22, n3 = d2;
        }
        n3 >>>= 22, s.words[l2 - 10] = n3, n3 === 0 && s.length > 10 ? s.length -= 10 : s.length -= 9;
      }, Ae.prototype.imulK = function(s) {
        s.words[s.length] = 0, s.words[s.length + 1] = 0, s.length += 2;
        for (var u2 = 0, c = 0;c < s.length; c++) {
          var b4 = s.words[c] | 0;
          u2 += b4 * 977, s.words[c] = u2 & 67108863, u2 = b4 * 64 + (u2 / 67108864 | 0);
        }
        return s.words[s.length - 1] === 0 && (s.length--, s.words[s.length - 1] === 0 && s.length--), s;
      };
      function P4() {
        Ee.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(P4, Ee);
      function Se() {
        Ee.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Se, Ee);
      function v3() {
        Ee.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(v3, Ee), v3.prototype.imulK = function(s) {
        for (var u2 = 0, c = 0;c < s.length; c++) {
          var b4 = (s.words[c] | 0) * 19 + u2, l2 = b4 & 67108863;
          b4 >>>= 26, s.words[c] = l2, u2 = b4;
        }
        return u2 !== 0 && (s.words[s.length++] = u2), s;
      }, f2._prime = function(s) {
        if (Re[s])
          return Re[s];
        var u2;
        if (s === "k256")
          u2 = new Ae;
        else if (s === "p224")
          u2 = new P4;
        else if (s === "p192")
          u2 = new Se;
        else if (s === "p25519")
          u2 = new v3;
        else
          throw new Error("Unknown prime " + s);
        return Re[s] = u2, u2;
      };
      function i(h3) {
        if (typeof h3 == "string") {
          var s = f2._prime(h3);
          this.m = s.p, this.prime = s;
        } else
          r(h3.gtn(1), "modulus must be greater than 1"), this.m = h3, this.prime = null;
      }
      i.prototype._verify1 = function(s) {
        r(s.negative === 0, "red works only with positives"), r(s.red, "red works only with red numbers");
      }, i.prototype._verify2 = function(s, u2) {
        r((s.negative | u2.negative) === 0, "red works only with positives"), r(s.red && s.red === u2.red, "red works only with red numbers");
      }, i.prototype.imod = function(s) {
        return this.prime ? this.prime.ireduce(s)._forceRed(this) : (x4(s, s.umod(this.m)._forceRed(this)), s);
      }, i.prototype.neg = function(s) {
        return s.isZero() ? s.clone() : this.m.sub(s)._forceRed(this);
      }, i.prototype.add = function(s, u2) {
        this._verify2(s, u2);
        var c = s.add(u2);
        return c.cmp(this.m) >= 0 && c.isub(this.m), c._forceRed(this);
      }, i.prototype.iadd = function(s, u2) {
        this._verify2(s, u2);
        var c = s.iadd(u2);
        return c.cmp(this.m) >= 0 && c.isub(this.m), c;
      }, i.prototype.sub = function(s, u2) {
        this._verify2(s, u2);
        var c = s.sub(u2);
        return c.cmpn(0) < 0 && c.iadd(this.m), c._forceRed(this);
      }, i.prototype.isub = function(s, u2) {
        this._verify2(s, u2);
        var c = s.isub(u2);
        return c.cmpn(0) < 0 && c.iadd(this.m), c;
      }, i.prototype.shl = function(s, u2) {
        return this._verify1(s), this.imod(s.ushln(u2));
      }, i.prototype.imul = function(s, u2) {
        return this._verify2(s, u2), this.imod(s.imul(u2));
      }, i.prototype.mul = function(s, u2) {
        return this._verify2(s, u2), this.imod(s.mul(u2));
      }, i.prototype.isqr = function(s) {
        return this.imul(s, s.clone());
      }, i.prototype.sqr = function(s) {
        return this.mul(s, s);
      }, i.prototype.sqrt = function(s) {
        if (s.isZero())
          return s.clone();
        var u2 = this.m.andln(3);
        if (r(u2 % 2 === 1), u2 === 3) {
          var c = this.m.add(new f2(1)).iushrn(2);
          return this.pow(s, c);
        }
        for (var b4 = this.m.subn(1), l2 = 0;!b4.isZero() && b4.andln(1) === 0; )
          l2++, b4.iushrn(1);
        r(!b4.isZero());
        var n3 = new f2(1).toRed(this), d2 = n3.redNeg(), w3 = this.m.subn(1).iushrn(1), g3 = this.m.bitLength();
        for (g3 = new f2(2 * g3 * g3).toRed(this);this.pow(g3, w3).cmp(d2) !== 0; )
          g3.redIAdd(d2);
        for (var _3 = this.pow(g3, b4), A2 = this.pow(s, b4.addn(1).iushrn(1)), R3 = this.pow(s, b4), I2 = l2;R3.cmp(n3) !== 0; ) {
          for (var Me = R3, k2 = 0;Me.cmp(n3) !== 0; k2++)
            Me = Me.redSqr();
          r(k2 < I2);
          var D3 = this.pow(_3, new f2(1).iushln(I2 - k2 - 1));
          A2 = A2.redMul(D3), _3 = D3.redSqr(), R3 = R3.redMul(_3), I2 = k2;
        }
        return A2;
      }, i.prototype.invm = function(s) {
        var u2 = s._invmp(this.m);
        return u2.negative !== 0 ? (u2.negative = 0, this.imod(u2).redNeg()) : this.imod(u2);
      }, i.prototype.pow = function(s, u2) {
        if (u2.isZero())
          return new f2(1).toRed(this);
        if (u2.cmpn(1) === 0)
          return s.clone();
        var c = 4, b4 = new Array(1 << c);
        b4[0] = new f2(1).toRed(this), b4[1] = s;
        for (var l2 = 2;l2 < b4.length; l2++)
          b4[l2] = this.mul(b4[l2 - 1], s);
        var n3 = b4[0], d2 = 0, w3 = 0, g3 = u2.bitLength() % 26;
        for (g3 === 0 && (g3 = 26), l2 = u2.length - 1;l2 >= 0; l2--) {
          for (var _3 = u2.words[l2], A2 = g3 - 1;A2 >= 0; A2--) {
            var R3 = _3 >> A2 & 1;
            if (n3 !== b4[0] && (n3 = this.sqr(n3)), R3 === 0 && d2 === 0) {
              w3 = 0;
              continue;
            }
            d2 <<= 1, d2 |= R3, w3++, !(w3 !== c && (l2 !== 0 || A2 !== 0)) && (n3 = this.mul(n3, b4[d2]), w3 = 0, d2 = 0);
          }
          g3 = 26;
        }
        return n3;
      }, i.prototype.convertTo = function(s) {
        var u2 = s.umod(this.m);
        return u2 === s ? u2.clone() : u2;
      }, i.prototype.convertFrom = function(s) {
        var u2 = s.clone();
        return u2.red = null, u2;
      }, f2.mont = function(s) {
        return new a2(s);
      };
      function a2(h3) {
        i.call(this, h3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(a2, i), a2.prototype.convertTo = function(s) {
        return this.imod(s.ushln(this.shift));
      }, a2.prototype.convertFrom = function(s) {
        var u2 = this.imod(s.mul(this.rinv));
        return u2.red = null, u2;
      }, a2.prototype.imul = function(s, u2) {
        if (s.isZero() || u2.isZero())
          return s.words[0] = 0, s.length = 1, s;
        var c = s.imul(u2), b4 = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), l2 = c.isub(b4).iushrn(this.shift), n3 = l2;
        return l2.cmp(this.m) >= 0 ? n3 = l2.isub(this.m) : l2.cmpn(0) < 0 && (n3 = l2.iadd(this.m)), n3._forceRed(this);
      }, a2.prototype.mul = function(s, u2) {
        if (s.isZero() || u2.isZero())
          return new f2(0)._forceRed(this);
        var c = s.mul(u2), b4 = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), l2 = c.isub(b4).iushrn(this.shift), n3 = l2;
        return l2.cmp(this.m) >= 0 ? n3 = l2.isub(this.m) : l2.cmpn(0) < 0 && (n3 = l2.iadd(this.m)), n3._forceRed(this);
      }, a2.prototype.invm = function(s) {
        var u2 = this.imod(s._invmp(this.m).mul(this.r2));
        return u2._forceRed(this);
      };
    })(typeof kl > "u" || kl, n2);
  });
  Ks = T9((yk, o2) => {
    var Rf = Ws(), oA = on();
    function sA(t) {
      var e = f2(t), r = e.toRed(Rf.mont(t.modulus)).redPow(new Rf(t.publicExponent)).fromRed();
      return { blinder: r, unblinder: e.invm(t.modulus) };
    }
    function f2(t) {
      var e = t.modulus.byteLength(), r;
      do
        r = new Rf(oA(e));
      while (r.cmp(t.modulus) >= 0 || !r.umod(t.prime1) || !r.umod(t.prime2));
      return r;
    }
    function a2(t, e) {
      var r = sA(e), o3 = e.modulus.byteLength(), f3 = new Rf(t).mul(r.blinder).umod(e.modulus), p = f3.toRed(Rf.mont(e.prime1)), m2 = f3.toRed(Rf.mont(e.prime2)), y3 = e.coefficient, M2 = e.prime1, x4 = e.prime2, S3 = p.redPow(e.exponent1).fromRed(), E3 = m2.redPow(e.exponent2).fromRed(), B2 = S3.isub(E3).imul(y3).umod(M2).imul(x4);
      return E3.iadd(B2).imul(r.unblinder).umod(e.modulus).toArrayLike(Buffer, "be", o3);
    }
    a2.getr = f2;
    o2.exports = a2;
  });
  s2 = T9((wk, hA) => {
    hA.exports = { name: "elliptic", version: "6.5.4", description: "EC cryptography", main: "lib/elliptic.js", files: ["lib"], scripts: { lint: "eslint lib test", "lint:fix": "npm run lint -- --fix", unit: "istanbul test _mocha --reporter=spec test/index.js", test: "npm run lint && npm run unit", version: "grunt dist && git add dist/" }, repository: { type: "git", url: "git@github.com:indutny/elliptic" }, keywords: ["EC", "Elliptic", "curve", "Cryptography"], author: "Fedor Indutny <fedor@indutny.com>", license: "MIT", bugs: { url: "https://github.com/indutny/elliptic/issues" }, homepage: "https://github.com/indutny/elliptic", devDependencies: { brfs: "^2.0.2", coveralls: "^3.1.0", eslint: "^7.6.0", grunt: "^1.2.1", "grunt-browserify": "^5.3.0", "grunt-cli": "^1.3.2", "grunt-contrib-connect": "^3.0.0", "grunt-contrib-copy": "^1.0.0", "grunt-contrib-uglify": "^5.0.0", "grunt-mocha-istanbul": "^5.0.2", "grunt-saucelabs": "^9.0.1", istanbul: "^0.4.5", mocha: "^8.0.1" }, dependencies: { "bn.js": "^4.11.9", brorand: "^1.1.0", "hash.js": "^1.0.0", "hmac-drbg": "^1.0.1", inherits: "^2.0.4", "minimalistic-assert": "^1.0.1", "minimalistic-crypto-utils": "^1.0.1" } };
  });
  ri = T9((h22, Ll) => {
    (function(t, e) {
      function r(v3, i) {
        if (!v3)
          throw new Error(i || "Assertion failed");
      }
      function o2(v3, i) {
        v3.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v3.prototype = new a2, v3.prototype.constructor = v3;
      }
      function f2(v3, i, a2) {
        if (f2.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v3 || 0, i || 10, a2 || "be"));
      }
      typeof t == "object" ? t.exports = f2 : e.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p = window.Buffer : p = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s = 0;
        i[0] === "-" && (s++, this.negative = 1), s < i.length && (a2 === 16 ? this._parseHex(i, s, h3) : (this._parseBase(i, a2, s), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2, c, b4 = 0;
        if (h3 === "be")
          for (s = i.length - 1, u2 = 0;s >= 0; s -= 3)
            c = i[s] | i[s - 1] << 8 | i[s - 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        else if (h3 === "le")
          for (s = 0, u2 = 0;s < i.length; s += 3)
            c = i[s] | i[s + 1] << 8 | i[s + 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        return this.strip();
      };
      function m2(v3, i) {
        var a2 = v3.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v3, i, a2) {
        var h3 = m2(v3, a2);
        return a2 - 1 >= i && (h3 |= m2(v3, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2 = 0, c = 0, b4;
        if (h3 === "be")
          for (s = i.length - 1;s >= a2; s -= 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        else {
          var l2 = i.length - a2;
          for (s = l2 % 2 === 0 ? a2 + 1 : a2;s < i.length; s += 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        }
        this.strip();
      };
      function M2(v3, i, a2, h3) {
        for (var s = 0, u2 = Math.min(v3.length, a2), c = i;c < u2; c++) {
          var b4 = v3.charCodeAt(c) - 48;
          s *= h3, b4 >= 49 ? s += b4 - 49 + 10 : b4 >= 17 ? s += b4 - 17 + 10 : s += b4;
        }
        return s;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s = 0, u2 = 1;u2 <= 67108863; u2 *= a2)
          s++;
        s--, u2 = u2 / a2 | 0;
        for (var c = i.length - h3, b4 = c % s, l2 = Math.min(c, c - b4) + h3, n2 = 0, d2 = h3;d2 < l2; d2 += s)
          n2 = M2(i, d2, d2 + s, a2), this.imuln(u2), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        if (b4 !== 0) {
          var w3 = 1;
          for (n2 = M2(i, d2, i.length, a2), d2 = 0;d2 < b4; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s = 0, u2 = 0, c = 0;c < this.length; c++) {
            var b4 = this.words[c], l2 = ((b4 << s | u2) & 16777215).toString(16);
            u2 = b4 >>> 24 - s & 16777215, u2 !== 0 || c !== this.length - 1 ? h3 = x4[6 - l2.length] + l2 + h3 : h3 = l2 + h3, s += 2, s >= 26 && (s -= 26, c--);
          }
          for (u2 !== 0 && (h3 = u2.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n2 = S3[i], d2 = E3[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g3 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g3 + h3 : h3 = x4[n2 - g3.length] + g3 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r(typeof p < "u"), this.toArrayLike(p, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s = this.byteLength(), u2 = h3 || Math.max(1, s);
        r(s <= u2, "byte array longer than desired length"), r(u2 > 0, "Requested array length <= 0"), this.strip();
        var c = a2 === "le", b4 = new i(u2), l2, n2, d2 = this.clone();
        if (c) {
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[n2] = l2;
          for (;n2 < u2; n2++)
            b4[n2] = 0;
        } else {
          for (n2 = 0;n2 < u2 - s; n2++)
            b4[n2] = 0;
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[u2 - n2 - 1] = l2;
        }
        return b4;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B2(v3) {
        for (var i = new Array(v3.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s = a2 % 26;
          i[a2] = (v3.words[h3] & 1 << s) >>> s;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s = 0;s < h3.length; s++)
          this.words[s] = a2.words[s] ^ h3.words[s];
        if (this !== a2)
          for (;s < a2.length; s++)
            this.words[s] = a2.words[s];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s = 0;s < a2; s++)
          this.words[s] = ~this.words[s] & 67108863;
        return h3 > 0 && (this.words[s] = ~this.words[s] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s : this.words[h3] = this.words[h3] & ~(1 << s), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s;
        this.length > i.length ? (h3 = this, s = i) : (h3 = i, s = this);
        for (var u2 = 0, c = 0;c < s.length; c++)
          a2 = (h3.words[c] | 0) + (s.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        for (;u2 !== 0 && c < h3.length; c++)
          a2 = (h3.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        if (this.length = h3.length, u2 !== 0)
          this.words[this.length] = u2, this.length++;
        else if (h3 !== this)
          for (;c < h3.length; c++)
            this.words[c] = h3.words[c];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s, u2;
        h3 > 0 ? (s = this, u2 = i) : (s = i, u2 = this);
        for (var c = 0, b4 = 0;b4 < u2.length; b4++)
          a2 = (s.words[b4] | 0) - (u2.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        for (;c !== 0 && b4 < s.length; b4++)
          a2 = (s.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        if (c === 0 && b4 < s.length && s !== this)
          for (;b4 < s.length; b4++)
            this.words[b4] = s.words[b4];
        return this.length = Math.max(this.length, b4), s !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative;
        var h3 = v3.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s = v3.words[0] | 0, u2 = i.words[0] | 0, c = s * u2, b4 = c & 67108863, l2 = c / 67108864 | 0;
        a2.words[0] = b4;
        for (var n2 = 1;n2 < h3; n2++) {
          for (var d2 = l2 >>> 26, w3 = l2 & 67108863, g3 = Math.min(n2, i.length - 1), _3 = Math.max(0, n2 - v3.length + 1);_3 <= g3; _3++) {
            var A2 = n2 - _3 | 0;
            s = v3.words[A2] | 0, u2 = i.words[_3] | 0, c = s * u2 + w3, d2 += c / 67108864 | 0, w3 = c & 67108863;
          }
          a2.words[n2] = w3 | 0, l2 = d2 | 0;
        }
        return l2 !== 0 ? a2.words[n2] = l2 | 0 : a2.length--, a2.strip();
      }
      var L3 = function(i, a2, h3) {
        var s = i.words, u2 = a2.words, c = h3.words, b4 = 0, l2, n2, d2, w3 = s[0] | 0, g3 = w3 & 8191, _3 = w3 >>> 13, A2 = s[1] | 0, R3 = A2 & 8191, I2 = A2 >>> 13, Me = s[2] | 0, k2 = Me & 8191, D3 = Me >>> 13, nt2 = s[3] | 0, C2 = nt2 & 8191, O3 = nt2 >>> 13, vt = s[4] | 0, F = vt & 8191, U5 = vt >>> 13, bt = s[5] | 0, z = bt & 8191, H2 = bt >>> 13, mt = s[6] | 0, W = mt & 8191, K3 = mt >>> 13, gt = s[7] | 0, j3 = gt & 8191, Z2 = gt >>> 13, yt = s[8] | 0, V2 = yt & 8191, $3 = yt >>> 13, wt = s[9] | 0, G2 = wt & 8191, Y2 = wt >>> 13, Mt = u2[0] | 0, X2 = Mt & 8191, J2 = Mt >>> 13, _t = u2[1] | 0, Q2 = _t & 8191, ee = _t >>> 13, xt = u2[2] | 0, te = xt & 8191, re = xt >>> 13, St = u2[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u2[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u2[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u2[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u2[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u2[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u2[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l2 = Math.imul(g3, X2), n2 = Math.imul(g3, J2), n2 = n2 + Math.imul(_3, X2) | 0, d2 = Math.imul(_3, J2);
        var ft2 = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ft2 >>> 26) | 0, ft2 &= 67108863, l2 = Math.imul(R3, X2), n2 = Math.imul(R3, J2), n2 = n2 + Math.imul(I2, X2) | 0, d2 = Math.imul(I2, J2), l2 = l2 + Math.imul(g3, Q2) | 0, n2 = n2 + Math.imul(g3, ee) | 0, n2 = n2 + Math.imul(_3, Q2) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l2 = Math.imul(k2, X2), n2 = Math.imul(k2, J2), n2 = n2 + Math.imul(D3, X2) | 0, d2 = Math.imul(D3, J2), l2 = l2 + Math.imul(R3, Q2) | 0, n2 = n2 + Math.imul(R3, ee) | 0, n2 = n2 + Math.imul(I2, Q2) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l2 = l2 + Math.imul(g3, te) | 0, n2 = n2 + Math.imul(g3, re) | 0, n2 = n2 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l2 = Math.imul(C2, X2), n2 = Math.imul(C2, J2), n2 = n2 + Math.imul(O3, X2) | 0, d2 = Math.imul(O3, J2), l2 = l2 + Math.imul(k2, Q2) | 0, n2 = n2 + Math.imul(k2, ee) | 0, n2 = n2 + Math.imul(D3, Q2) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l2 = l2 + Math.imul(R3, te) | 0, n2 = n2 + Math.imul(R3, re) | 0, n2 = n2 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l2 = l2 + Math.imul(g3, ie) | 0, n2 = n2 + Math.imul(g3, ne) | 0, n2 = n2 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l2 = Math.imul(F, X2), n2 = Math.imul(F, J2), n2 = n2 + Math.imul(U5, X2) | 0, d2 = Math.imul(U5, J2), l2 = l2 + Math.imul(C2, Q2) | 0, n2 = n2 + Math.imul(C2, ee) | 0, n2 = n2 + Math.imul(O3, Q2) | 0, d2 = d2 + Math.imul(O3, ee) | 0, l2 = l2 + Math.imul(k2, te) | 0, n2 = n2 + Math.imul(k2, re) | 0, n2 = n2 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l2 = l2 + Math.imul(R3, ie) | 0, n2 = n2 + Math.imul(R3, ne) | 0, n2 = n2 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l2 = l2 + Math.imul(g3, fe) | 0, n2 = n2 + Math.imul(g3, ae) | 0, n2 = n2 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l2 = Math.imul(z, X2), n2 = Math.imul(z, J2), n2 = n2 + Math.imul(H2, X2) | 0, d2 = Math.imul(H2, J2), l2 = l2 + Math.imul(F, Q2) | 0, n2 = n2 + Math.imul(F, ee) | 0, n2 = n2 + Math.imul(U5, Q2) | 0, d2 = d2 + Math.imul(U5, ee) | 0, l2 = l2 + Math.imul(C2, te) | 0, n2 = n2 + Math.imul(C2, re) | 0, n2 = n2 + Math.imul(O3, te) | 0, d2 = d2 + Math.imul(O3, re) | 0, l2 = l2 + Math.imul(k2, ie) | 0, n2 = n2 + Math.imul(k2, ne) | 0, n2 = n2 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l2 = l2 + Math.imul(R3, fe) | 0, n2 = n2 + Math.imul(R3, ae) | 0, n2 = n2 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l2 = l2 + Math.imul(g3, oe) | 0, n2 = n2 + Math.imul(g3, se) | 0, n2 = n2 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l2 = Math.imul(W, X2), n2 = Math.imul(W, J2), n2 = n2 + Math.imul(K3, X2) | 0, d2 = Math.imul(K3, J2), l2 = l2 + Math.imul(z, Q2) | 0, n2 = n2 + Math.imul(z, ee) | 0, n2 = n2 + Math.imul(H2, Q2) | 0, d2 = d2 + Math.imul(H2, ee) | 0, l2 = l2 + Math.imul(F, te) | 0, n2 = n2 + Math.imul(F, re) | 0, n2 = n2 + Math.imul(U5, te) | 0, d2 = d2 + Math.imul(U5, re) | 0, l2 = l2 + Math.imul(C2, ie) | 0, n2 = n2 + Math.imul(C2, ne) | 0, n2 = n2 + Math.imul(O3, ie) | 0, d2 = d2 + Math.imul(O3, ne) | 0, l2 = l2 + Math.imul(k2, fe) | 0, n2 = n2 + Math.imul(k2, ae) | 0, n2 = n2 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l2 = l2 + Math.imul(R3, oe) | 0, n2 = n2 + Math.imul(R3, se) | 0, n2 = n2 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l2 = l2 + Math.imul(g3, he) | 0, n2 = n2 + Math.imul(g3, ue) | 0, n2 = n2 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l2 = Math.imul(j3, X2), n2 = Math.imul(j3, J2), n2 = n2 + Math.imul(Z2, X2) | 0, d2 = Math.imul(Z2, J2), l2 = l2 + Math.imul(W, Q2) | 0, n2 = n2 + Math.imul(W, ee) | 0, n2 = n2 + Math.imul(K3, Q2) | 0, d2 = d2 + Math.imul(K3, ee) | 0, l2 = l2 + Math.imul(z, te) | 0, n2 = n2 + Math.imul(z, re) | 0, n2 = n2 + Math.imul(H2, te) | 0, d2 = d2 + Math.imul(H2, re) | 0, l2 = l2 + Math.imul(F, ie) | 0, n2 = n2 + Math.imul(F, ne) | 0, n2 = n2 + Math.imul(U5, ie) | 0, d2 = d2 + Math.imul(U5, ne) | 0, l2 = l2 + Math.imul(C2, fe) | 0, n2 = n2 + Math.imul(C2, ae) | 0, n2 = n2 + Math.imul(O3, fe) | 0, d2 = d2 + Math.imul(O3, ae) | 0, l2 = l2 + Math.imul(k2, oe) | 0, n2 = n2 + Math.imul(k2, se) | 0, n2 = n2 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l2 = l2 + Math.imul(R3, he) | 0, n2 = n2 + Math.imul(R3, ue) | 0, n2 = n2 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l2 = l2 + Math.imul(g3, le) | 0, n2 = n2 + Math.imul(g3, de) | 0, n2 = n2 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l2 = Math.imul(V2, X2), n2 = Math.imul(V2, J2), n2 = n2 + Math.imul($3, X2) | 0, d2 = Math.imul($3, J2), l2 = l2 + Math.imul(j3, Q2) | 0, n2 = n2 + Math.imul(j3, ee) | 0, n2 = n2 + Math.imul(Z2, Q2) | 0, d2 = d2 + Math.imul(Z2, ee) | 0, l2 = l2 + Math.imul(W, te) | 0, n2 = n2 + Math.imul(W, re) | 0, n2 = n2 + Math.imul(K3, te) | 0, d2 = d2 + Math.imul(K3, re) | 0, l2 = l2 + Math.imul(z, ie) | 0, n2 = n2 + Math.imul(z, ne) | 0, n2 = n2 + Math.imul(H2, ie) | 0, d2 = d2 + Math.imul(H2, ne) | 0, l2 = l2 + Math.imul(F, fe) | 0, n2 = n2 + Math.imul(F, ae) | 0, n2 = n2 + Math.imul(U5, fe) | 0, d2 = d2 + Math.imul(U5, ae) | 0, l2 = l2 + Math.imul(C2, oe) | 0, n2 = n2 + Math.imul(C2, se) | 0, n2 = n2 + Math.imul(O3, oe) | 0, d2 = d2 + Math.imul(O3, se) | 0, l2 = l2 + Math.imul(k2, he) | 0, n2 = n2 + Math.imul(k2, ue) | 0, n2 = n2 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l2 = l2 + Math.imul(R3, le) | 0, n2 = n2 + Math.imul(R3, de) | 0, n2 = n2 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l2 = l2 + Math.imul(g3, ce) | 0, n2 = n2 + Math.imul(g3, pe) | 0, n2 = n2 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l2 = Math.imul(G2, X2), n2 = Math.imul(G2, J2), n2 = n2 + Math.imul(Y2, X2) | 0, d2 = Math.imul(Y2, J2), l2 = l2 + Math.imul(V2, Q2) | 0, n2 = n2 + Math.imul(V2, ee) | 0, n2 = n2 + Math.imul($3, Q2) | 0, d2 = d2 + Math.imul($3, ee) | 0, l2 = l2 + Math.imul(j3, te) | 0, n2 = n2 + Math.imul(j3, re) | 0, n2 = n2 + Math.imul(Z2, te) | 0, d2 = d2 + Math.imul(Z2, re) | 0, l2 = l2 + Math.imul(W, ie) | 0, n2 = n2 + Math.imul(W, ne) | 0, n2 = n2 + Math.imul(K3, ie) | 0, d2 = d2 + Math.imul(K3, ne) | 0, l2 = l2 + Math.imul(z, fe) | 0, n2 = n2 + Math.imul(z, ae) | 0, n2 = n2 + Math.imul(H2, fe) | 0, d2 = d2 + Math.imul(H2, ae) | 0, l2 = l2 + Math.imul(F, oe) | 0, n2 = n2 + Math.imul(F, se) | 0, n2 = n2 + Math.imul(U5, oe) | 0, d2 = d2 + Math.imul(U5, se) | 0, l2 = l2 + Math.imul(C2, he) | 0, n2 = n2 + Math.imul(C2, ue) | 0, n2 = n2 + Math.imul(O3, he) | 0, d2 = d2 + Math.imul(O3, ue) | 0, l2 = l2 + Math.imul(k2, le) | 0, n2 = n2 + Math.imul(k2, de) | 0, n2 = n2 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l2 = l2 + Math.imul(R3, ce) | 0, n2 = n2 + Math.imul(R3, pe) | 0, n2 = n2 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l2 = l2 + Math.imul(g3, ve) | 0, n2 = n2 + Math.imul(g3, be) | 0, n2 = n2 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l2 = Math.imul(G2, Q2), n2 = Math.imul(G2, ee), n2 = n2 + Math.imul(Y2, Q2) | 0, d2 = Math.imul(Y2, ee), l2 = l2 + Math.imul(V2, te) | 0, n2 = n2 + Math.imul(V2, re) | 0, n2 = n2 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l2 = l2 + Math.imul(j3, ie) | 0, n2 = n2 + Math.imul(j3, ne) | 0, n2 = n2 + Math.imul(Z2, ie) | 0, d2 = d2 + Math.imul(Z2, ne) | 0, l2 = l2 + Math.imul(W, fe) | 0, n2 = n2 + Math.imul(W, ae) | 0, n2 = n2 + Math.imul(K3, fe) | 0, d2 = d2 + Math.imul(K3, ae) | 0, l2 = l2 + Math.imul(z, oe) | 0, n2 = n2 + Math.imul(z, se) | 0, n2 = n2 + Math.imul(H2, oe) | 0, d2 = d2 + Math.imul(H2, se) | 0, l2 = l2 + Math.imul(F, he) | 0, n2 = n2 + Math.imul(F, ue) | 0, n2 = n2 + Math.imul(U5, he) | 0, d2 = d2 + Math.imul(U5, ue) | 0, l2 = l2 + Math.imul(C2, le) | 0, n2 = n2 + Math.imul(C2, de) | 0, n2 = n2 + Math.imul(O3, le) | 0, d2 = d2 + Math.imul(O3, de) | 0, l2 = l2 + Math.imul(k2, ce) | 0, n2 = n2 + Math.imul(k2, pe) | 0, n2 = n2 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l2 = l2 + Math.imul(R3, ve) | 0, n2 = n2 + Math.imul(R3, be) | 0, n2 = n2 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l2 = Math.imul(G2, te), n2 = Math.imul(G2, re), n2 = n2 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l2 = l2 + Math.imul(V2, ie) | 0, n2 = n2 + Math.imul(V2, ne) | 0, n2 = n2 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l2 = l2 + Math.imul(j3, fe) | 0, n2 = n2 + Math.imul(j3, ae) | 0, n2 = n2 + Math.imul(Z2, fe) | 0, d2 = d2 + Math.imul(Z2, ae) | 0, l2 = l2 + Math.imul(W, oe) | 0, n2 = n2 + Math.imul(W, se) | 0, n2 = n2 + Math.imul(K3, oe) | 0, d2 = d2 + Math.imul(K3, se) | 0, l2 = l2 + Math.imul(z, he) | 0, n2 = n2 + Math.imul(z, ue) | 0, n2 = n2 + Math.imul(H2, he) | 0, d2 = d2 + Math.imul(H2, ue) | 0, l2 = l2 + Math.imul(F, le) | 0, n2 = n2 + Math.imul(F, de) | 0, n2 = n2 + Math.imul(U5, le) | 0, d2 = d2 + Math.imul(U5, de) | 0, l2 = l2 + Math.imul(C2, ce) | 0, n2 = n2 + Math.imul(C2, pe) | 0, n2 = n2 + Math.imul(O3, ce) | 0, d2 = d2 + Math.imul(O3, pe) | 0, l2 = l2 + Math.imul(k2, ve) | 0, n2 = n2 + Math.imul(k2, be) | 0, n2 = n2 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l2 = Math.imul(G2, ie), n2 = Math.imul(G2, ne), n2 = n2 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l2 = l2 + Math.imul(V2, fe) | 0, n2 = n2 + Math.imul(V2, ae) | 0, n2 = n2 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l2 = l2 + Math.imul(j3, oe) | 0, n2 = n2 + Math.imul(j3, se) | 0, n2 = n2 + Math.imul(Z2, oe) | 0, d2 = d2 + Math.imul(Z2, se) | 0, l2 = l2 + Math.imul(W, he) | 0, n2 = n2 + Math.imul(W, ue) | 0, n2 = n2 + Math.imul(K3, he) | 0, d2 = d2 + Math.imul(K3, ue) | 0, l2 = l2 + Math.imul(z, le) | 0, n2 = n2 + Math.imul(z, de) | 0, n2 = n2 + Math.imul(H2, le) | 0, d2 = d2 + Math.imul(H2, de) | 0, l2 = l2 + Math.imul(F, ce) | 0, n2 = n2 + Math.imul(F, pe) | 0, n2 = n2 + Math.imul(U5, ce) | 0, d2 = d2 + Math.imul(U5, pe) | 0, l2 = l2 + Math.imul(C2, ve) | 0, n2 = n2 + Math.imul(C2, be) | 0, n2 = n2 + Math.imul(O3, ve) | 0, d2 = d2 + Math.imul(O3, be) | 0;
        var Ye = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l2 = Math.imul(G2, fe), n2 = Math.imul(G2, ae), n2 = n2 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l2 = l2 + Math.imul(V2, oe) | 0, n2 = n2 + Math.imul(V2, se) | 0, n2 = n2 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l2 = l2 + Math.imul(j3, he) | 0, n2 = n2 + Math.imul(j3, ue) | 0, n2 = n2 + Math.imul(Z2, he) | 0, d2 = d2 + Math.imul(Z2, ue) | 0, l2 = l2 + Math.imul(W, le) | 0, n2 = n2 + Math.imul(W, de) | 0, n2 = n2 + Math.imul(K3, le) | 0, d2 = d2 + Math.imul(K3, de) | 0, l2 = l2 + Math.imul(z, ce) | 0, n2 = n2 + Math.imul(z, pe) | 0, n2 = n2 + Math.imul(H2, ce) | 0, d2 = d2 + Math.imul(H2, pe) | 0, l2 = l2 + Math.imul(F, ve) | 0, n2 = n2 + Math.imul(F, be) | 0, n2 = n2 + Math.imul(U5, ve) | 0, d2 = d2 + Math.imul(U5, be) | 0;
        var Xe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l2 = Math.imul(G2, oe), n2 = Math.imul(G2, se), n2 = n2 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l2 = l2 + Math.imul(V2, he) | 0, n2 = n2 + Math.imul(V2, ue) | 0, n2 = n2 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l2 = l2 + Math.imul(j3, le) | 0, n2 = n2 + Math.imul(j3, de) | 0, n2 = n2 + Math.imul(Z2, le) | 0, d2 = d2 + Math.imul(Z2, de) | 0, l2 = l2 + Math.imul(W, ce) | 0, n2 = n2 + Math.imul(W, pe) | 0, n2 = n2 + Math.imul(K3, ce) | 0, d2 = d2 + Math.imul(K3, pe) | 0, l2 = l2 + Math.imul(z, ve) | 0, n2 = n2 + Math.imul(z, be) | 0, n2 = n2 + Math.imul(H2, ve) | 0, d2 = d2 + Math.imul(H2, be) | 0;
        var Je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l2 = Math.imul(G2, he), n2 = Math.imul(G2, ue), n2 = n2 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l2 = l2 + Math.imul(V2, le) | 0, n2 = n2 + Math.imul(V2, de) | 0, n2 = n2 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l2 = l2 + Math.imul(j3, ce) | 0, n2 = n2 + Math.imul(j3, pe) | 0, n2 = n2 + Math.imul(Z2, ce) | 0, d2 = d2 + Math.imul(Z2, pe) | 0, l2 = l2 + Math.imul(W, ve) | 0, n2 = n2 + Math.imul(W, be) | 0, n2 = n2 + Math.imul(K3, ve) | 0, d2 = d2 + Math.imul(K3, be) | 0;
        var Qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l2 = Math.imul(G2, le), n2 = Math.imul(G2, de), n2 = n2 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l2 = l2 + Math.imul(V2, ce) | 0, n2 = n2 + Math.imul(V2, pe) | 0, n2 = n2 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l2 = l2 + Math.imul(j3, ve) | 0, n2 = n2 + Math.imul(j3, be) | 0, n2 = n2 + Math.imul(Z2, ve) | 0, d2 = d2 + Math.imul(Z2, be) | 0;
        var et = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l2 = Math.imul(G2, ce), n2 = Math.imul(G2, pe), n2 = n2 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l2 = l2 + Math.imul(V2, ve) | 0, n2 = n2 + Math.imul(V2, be) | 0, n2 = n2 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l2 = Math.imul(G2, ve), n2 = Math.imul(G2, be), n2 = n2 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        return b4 = (d2 + (n2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft2, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b4 !== 0 && (c[19] = b4, h3.length++), h3;
      };
      Math.imul || (L3 = q);
      function ge(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative, a2.length = v3.length + i.length;
        for (var h3 = 0, s = 0, u2 = 0;u2 < a2.length - 1; u2++) {
          var c = s;
          s = 0;
          for (var b4 = h3 & 67108863, l2 = Math.min(u2, i.length - 1), n2 = Math.max(0, u2 - v3.length + 1);n2 <= l2; n2++) {
            var d2 = u2 - n2, w3 = v3.words[d2] | 0, g3 = i.words[n2] | 0, _3 = w3 * g3, A2 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A2 = A2 + b4 | 0, b4 = A2 & 67108863, c = c + (A2 >>> 26) | 0, s += c >>> 26, c &= 67108863;
          }
          a2.words[u2] = b4, h3 = c, c = s;
        }
        return h3 !== 0 ? a2.words[u2] = h3 : a2.length--, a2.strip();
      }
      function _e(v3, i, a2) {
        var h3 = new N5;
        return h3.mulp(v3, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L3(this, i, a2) : s < 63 ? h3 = q(this, i, a2) : s < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N5(v3, i) {
        this.x = v3, this.y = i;
      }
      N5.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s = 0;s < i; s++)
          a2[s] = this.revBin(s, h3, i);
        return a2;
      }, N5.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s = 0, u2 = 0;u2 < a2; u2++)
          s |= (i & 1) << a2 - u2 - 1, i >>= 1;
        return s;
      }, N5.prototype.permute = function(i, a2, h3, s, u2, c) {
        for (var b4 = 0;b4 < c; b4++)
          s[b4] = a2[i[b4]], u2[b4] = h3[i[b4]];
      }, N5.prototype.transform = function(i, a2, h3, s, u2, c) {
        this.permute(c, i, a2, h3, s, u2);
        for (var b4 = 1;b4 < u2; b4 <<= 1)
          for (var l2 = b4 << 1, n2 = Math.cos(2 * Math.PI / l2), d2 = Math.sin(2 * Math.PI / l2), w3 = 0;w3 < u2; w3 += l2)
            for (var g3 = n2, _3 = d2, A2 = 0;A2 < b4; A2++) {
              var R3 = h3[w3 + A2], I2 = s[w3 + A2], Me = h3[w3 + A2 + b4], k2 = s[w3 + A2 + b4], D3 = g3 * Me - _3 * k2;
              k2 = g3 * k2 + _3 * Me, Me = D3, h3[w3 + A2] = R3 + Me, s[w3 + A2] = I2 + k2, h3[w3 + A2 + b4] = R3 - Me, s[w3 + A2 + b4] = I2 - k2, A2 !== l2 && (D3 = n2 * g3 - d2 * _3, _3 = n2 * _3 + d2 * g3, g3 = D3);
            }
      }, N5.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s = h3 & 1, u2 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u2++;
        return 1 << u2 + 1 + s;
      }, N5.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s = 0;s < h3 / 2; s++) {
            var u2 = i[s];
            i[s] = i[h3 - s - 1], i[h3 - s - 1] = u2, u2 = a2[s], a2[s] = -a2[h3 - s - 1], a2[h3 - s - 1] = -u2;
          }
      }, N5.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s = 0;s < a2 / 2; s++) {
          var u2 = Math.round(i[2 * s + 1] / a2) * 8192 + Math.round(i[2 * s] / a2) + h3;
          i[s] = u2 & 67108863, u2 < 67108864 ? h3 = 0 : h3 = u2 / 67108864 | 0;
        }
        return i;
      }, N5.prototype.convert13b = function(i, a2, h3, s) {
        for (var u2 = 0, c = 0;c < a2; c++)
          u2 = u2 + (i[c] | 0), h3[2 * c] = u2 & 8191, u2 = u2 >>> 13, h3[2 * c + 1] = u2 & 8191, u2 = u2 >>> 13;
        for (c = 2 * a2;c < s; ++c)
          h3[c] = 0;
        r(u2 === 0), r((u2 & -8192) === 0);
      }, N5.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N5.prototype.mulp = function(i, a2, h3) {
        var s = 2 * this.guessLen13b(i.length, a2.length), u2 = this.makeRBT(s), c = this.stub(s), b4 = new Array(s), l2 = new Array(s), n2 = new Array(s), d2 = new Array(s), w3 = new Array(s), g3 = new Array(s), _3 = h3.words;
        _3.length = s, this.convert13b(i.words, i.length, b4, s), this.convert13b(a2.words, a2.length, d2, s), this.transform(b4, c, l2, n2, s, u2), this.transform(d2, c, w3, g3, s, u2);
        for (var A2 = 0;A2 < s; A2++) {
          var R3 = l2[A2] * w3[A2] - n2[A2] * g3[A2];
          n2[A2] = l2[A2] * g3[A2] + n2[A2] * w3[A2], l2[A2] = R3;
        }
        return this.conjugate(l2, n2, s), this.transform(l2, n2, _3, c, s, u2), this.conjugate(_3, c, s), this.normalize13b(_3, s), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r(typeof i == "number"), r(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s = (this.words[h3] | 0) * i, u2 = (s & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s / 67108864 | 0, a2 += u2 >>> 26, this.words[h3] = u2 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B2(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s = 0;s < a2.length && a2[s] === 0; s++, h3 = h3.sqr())
          ;
        if (++s < a2.length)
          for (var u2 = h3.sqr();s < a2.length; s++, u2 = u2.sqr())
            a2[s] !== 0 && (h3 = h3.mul(u2));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 67108863 >>> 26 - a2 << 26 - a2, u2;
        if (a2 !== 0) {
          var c = 0;
          for (u2 = 0;u2 < this.length; u2++) {
            var b4 = this.words[u2] & s, l2 = (this.words[u2] | 0) - b4 << a2;
            this.words[u2] = l2 | c, c = b4 >>> 26 - a2;
          }
          c && (this.words[u2] = c, this.length++);
        }
        if (h3 !== 0) {
          for (u2 = this.length - 1;u2 >= 0; u2--)
            this.words[u2 + h3] = this.words[u2];
          for (u2 = 0;u2 < h3; u2++)
            this.words[u2] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r(typeof i == "number" && i >= 0);
        var s;
        a2 ? s = (a2 - a2 % 26) / 26 : s = 0;
        var u2 = i % 26, c = Math.min((i - u2) / 26, this.length), b4 = 67108863 ^ 67108863 >>> u2 << u2, l2 = h3;
        if (s -= c, s = Math.max(0, s), l2) {
          for (var n2 = 0;n2 < c; n2++)
            l2.words[n2] = this.words[n2];
          l2.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n2 = 0;n2 < this.length; n2++)
              this.words[n2] = this.words[n2 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n2 = this.length - 1;n2 >= 0 && (d2 !== 0 || n2 >= s); n2--) {
          var w3 = this.words[n2] | 0;
          this.words[n2] = d2 << 26 - u2 | w3 >>> u2, d2 = w3 & b4;
        }
        return l2 && d2 !== 0 && (l2.words[l2.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return false;
        var u2 = this.words[h3];
        return !!(u2 & s);
      }, f2.prototype.imaskn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r(typeof i == "number"), r(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r(typeof i == "number"), r(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s = i.length + h3, u2;
        this._expand(s);
        var c, b4 = 0;
        for (u2 = 0;u2 < i.length; u2++) {
          c = (this.words[u2 + h3] | 0) + b4;
          var l2 = (i.words[u2] | 0) * a2;
          c -= l2 & 67108863, b4 = (c >> 26) - (l2 / 67108864 | 0), this.words[u2 + h3] = c & 67108863;
        }
        for (;u2 < this.length - h3; u2++)
          c = (this.words[u2 + h3] | 0) + b4, b4 = c >> 26, this.words[u2 + h3] = c & 67108863;
        if (b4 === 0)
          return this.strip();
        for (r(b4 === -1), b4 = 0, u2 = 0;u2 < this.length; u2++)
          c = -(this.words[u2] | 0) + b4, b4 = c >> 26, this.words[u2] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s = this.clone(), u2 = i, c = u2.words[u2.length - 1] | 0, b4 = this._countBits(c);
        h3 = 26 - b4, h3 !== 0 && (u2 = u2.ushln(h3), s.iushln(h3), c = u2.words[u2.length - 1] | 0);
        var l2 = s.length - u2.length, n2;
        if (a2 !== "mod") {
          n2 = new f2(null), n2.length = l2 + 1, n2.words = new Array(n2.length);
          for (var d2 = 0;d2 < n2.length; d2++)
            n2.words[d2] = 0;
        }
        var w3 = s.clone()._ishlnsubmul(u2, 1, l2);
        w3.negative === 0 && (s = w3, n2 && (n2.words[l2] = 1));
        for (var g3 = l2 - 1;g3 >= 0; g3--) {
          var _3 = (s.words[u2.length + g3] | 0) * 67108864 + (s.words[u2.length + g3 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s._ishlnsubmul(u2, _3, g3);s.negative !== 0; )
            _3--, s.negative = 0, s._ishlnsubmul(u2, 1, g3), s.isZero() || (s.negative ^= 1);
          n2 && (n2.words[g3] = _3);
        }
        return n2 && n2.strip(), s.strip(), a2 !== "div" && h3 !== 0 && s.iushrn(h3), { div: n2 || null, mod: s };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s, u2, c;
        return this.negative !== 0 && i.negative === 0 ? (c = this.neg().divmod(i, a2), a2 !== "mod" && (s = c.div.neg()), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.iadd(i)), { div: s, mod: u2 }) : this.negative === 0 && i.negative !== 0 ? (c = this.divmod(i.neg(), a2), a2 !== "mod" && (s = c.div.neg()), { div: s, mod: c.mod }) : (this.negative & i.negative) !== 0 ? (c = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.isub(i)), { div: c.div, mod: u2 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s = i.ushrn(1), u2 = i.andln(1), c = h3.cmp(s);
        return c < 0 || u2 === 1 && c === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s = this.length - 1;s >= 0; s--)
          h3 = (a2 * h3 + (this.words[s] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s / i | 0, a2 = s % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = new f2(0), b4 = new f2(1), l2 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l2;
        for (var n2 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g3 = 1;(a2.words[0] & g3) === 0 && w3 < 26; ++w3, g3 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s.isOdd() || u2.isOdd()) && (s.iadd(n2), u2.isub(d2)), s.iushrn(1), u2.iushrn(1);
          for (var _3 = 0, A2 = 1;(h3.words[0] & A2) === 0 && _3 < 26; ++_3, A2 <<= 1)
            ;
          if (_3 > 0)
            for (h3.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b4.isOdd()) && (c.iadd(n2), b4.isub(d2)), c.iushrn(1), b4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(c), u2.isub(b4)) : (h3.isub(a2), c.isub(s), b4.isub(u2));
        }
        return { a: c, b: b4, gcd: h3.iushln(l2) };
      }, f2.prototype._invmp = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b4 = 0, l2 = 1;(a2.words[0] & l2) === 0 && b4 < 26; ++b4, l2 <<= 1)
            ;
          if (b4 > 0)
            for (a2.iushrn(b4);b4-- > 0; )
              s.isOdd() && s.iadd(c), s.iushrn(1);
          for (var n2 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n2 < 26; ++n2, d2 <<= 1)
            ;
          if (n2 > 0)
            for (h3.iushrn(n2);n2-- > 0; )
              u2.isOdd() && u2.iadd(c), u2.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(u2)) : (h3.isub(a2), u2.isub(s));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s : w3 = u2, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s = 0;a2.isEven() && h3.isEven(); s++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u2 = a2.cmp(h3);
          if (u2 < 0) {
            var c = a2;
            a2 = h3, h3 = c;
          } else if (u2 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s, this;
        for (var u2 = s, c = h3;u2 !== 0 && c < this.length; c++) {
          var b4 = this.words[c] | 0;
          b4 += u2, u2 = b4 >>> 26, b4 &= 67108863, this.words[c] = b4;
        }
        return u2 !== 0 && (this.words[c] = u2, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r(i <= 67108863, "Number is too big");
          var s = this.words[0] | 0;
          h3 = s === i ? 0 : s < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = this.words[h3] | 0, u2 = i.words[h3] | 0;
          if (s !== u2) {
            s < u2 ? a2 = -1 : s > u2 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P4(i);
      }, f2.prototype.toRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i) {
        this.name = v3, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s === 0 ? (a2.words[0] = 0, a2.length = 1) : s > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s = Math.min(i.length, 9), u2 = 0;u2 < s; u2++)
          a2.words[u2] = i.words[u2];
        if (a2.length = s, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c = i.words[9];
        for (a2.words[a2.length++] = c & h3, u2 = 10;u2 < i.length; u2++) {
          var b4 = i.words[u2] | 0;
          i.words[u2 - 10] = (b4 & h3) << 4 | c >>> 22, c = b4;
        }
        c >>>= 22, i.words[u2 - 10] = c, c === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = i.words[h3] | 0;
          a2 += s * 977, i.words[h3] = a2 & 67108863, a2 = s * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = (i.words[h3] | 0) * 19 + a2, u2 = s & 67108863;
          s >>>= 26, i.words[h3] = u2, a2 = s;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P4(v3) {
        if (typeof v3 == "string") {
          var i = f2._prime(v3);
          this.m = i.p, this.prime = i;
        } else
          r(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P4.prototype._verify1 = function(i) {
        r(i.negative === 0, "red works only with positives"), r(i.red, "red works only with red numbers");
      }, P4.prototype._verify2 = function(i, a2) {
        r((i.negative | a2.negative) === 0, "red works only with positives"), r(i.red && i.red === a2.red, "red works only with red numbers");
      }, P4.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P4.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P4.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P4.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P4.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P4.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P4.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P4.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P4.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P4.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P4.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P4.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s = this.m.subn(1), u2 = 0;!s.isZero() && s.andln(1) === 0; )
          u2++, s.iushrn(1);
        r(!s.isZero());
        var c = new f2(1).toRed(this), b4 = c.redNeg(), l2 = this.m.subn(1).iushrn(1), n2 = this.m.bitLength();
        for (n2 = new f2(2 * n2 * n2).toRed(this);this.pow(n2, l2).cmp(b4) !== 0; )
          n2.redIAdd(b4);
        for (var d2 = this.pow(n2, s), w3 = this.pow(i, s.addn(1).iushrn(1)), g3 = this.pow(i, s), _3 = u2;g3.cmp(c) !== 0; ) {
          for (var A2 = g3, R3 = 0;A2.cmp(c) !== 0; R3++)
            A2 = A2.redSqr();
          r(R3 < _3);
          var I2 = this.pow(d2, new f2(1).iushln(_3 - R3 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g3 = g3.redMul(d2), _3 = R3;
        }
        return w3;
      }, P4.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P4.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s = new Array(1 << h3);
        s[0] = new f2(1).toRed(this), s[1] = i;
        for (var u2 = 2;u2 < s.length; u2++)
          s[u2] = this.mul(s[u2 - 1], i);
        var c = s[0], b4 = 0, l2 = 0, n2 = a2.bitLength() % 26;
        for (n2 === 0 && (n2 = 26), u2 = a2.length - 1;u2 >= 0; u2--) {
          for (var d2 = a2.words[u2], w3 = n2 - 1;w3 >= 0; w3--) {
            var g3 = d2 >> w3 & 1;
            if (c !== s[0] && (c = this.sqr(c)), g3 === 0 && b4 === 0) {
              l2 = 0;
              continue;
            }
            b4 <<= 1, b4 |= g3, l2++, !(l2 !== h3 && (u2 !== 0 || w3 !== 0)) && (c = this.mul(c, s[b4]), l2 = 0, b4 = 0);
          }
          n2 = 26;
        }
        return c;
      }, P4.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P4.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v3) {
        P4.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P4), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Ll > "u" || Ll, h22);
  });
  Nl = T9((d2) => {
    var js = d2;
    function uA(t, e) {
      if (Array.isArray(t))
        return t.slice();
      if (!t)
        return [];
      var r = [];
      if (typeof t != "string") {
        for (var o2 = 0;o2 < t.length; o2++)
          r[o2] = t[o2] | 0;
        return r;
      }
      if (e === "hex") {
        t = t.replace(/[^a-z0-9]+/ig, ""), t.length % 2 !== 0 && (t = "0" + t);
        for (var o2 = 0;o2 < t.length; o2 += 2)
          r.push(parseInt(t[o2] + t[o2 + 1], 16));
      } else
        for (var o2 = 0;o2 < t.length; o2++) {
          var f2 = t.charCodeAt(o2), p = f2 >> 8, m2 = f2 & 255;
          p ? r.push(p, m2) : r.push(m2);
        }
      return r;
    }
    js.toArray = uA;
    function u2(t) {
      return t.length === 1 ? "0" + t : t;
    }
    js.zero2 = u2;
    function l2(t) {
      for (var e = "", r = 0;r < t.length; r++)
        e += u2(t[r].toString(16));
      return e;
    }
    js.toHex = l2;
    js.encode = function(e, r) {
      return r === "hex" ? l2(e) : e;
    };
  });
  or = T9((c2) => {
    var Pr = c2, lA = ri(), dA = ar(), Zs = Nl();
    Pr.assert = dA;
    Pr.toArray = Zs.toArray;
    Pr.zero2 = Zs.zero2;
    Pr.toHex = Zs.toHex;
    Pr.encode = Zs.encode;
    function cA(t, e, r) {
      var o2 = new Array(Math.max(t.bitLength(), r) + 1);
      o2.fill(0);
      for (var f2 = 1 << e + 1, p = t.clone(), m2 = 0;m2 < o2.length; m2++) {
        var y3, M2 = p.andln(f2 - 1);
        p.isOdd() ? (M2 > (f2 >> 1) - 1 ? y3 = (f2 >> 1) - M2 : y3 = M2, p.isubn(y3)) : y3 = 0, o2[m2] = y3, p.iushrn(1);
      }
      return o2;
    }
    Pr.getNAF = cA;
    function pA(t, e) {
      var r = [[], []];
      t = t.clone(), e = e.clone();
      for (var o2 = 0, f2 = 0, p;t.cmpn(-o2) > 0 || e.cmpn(-f2) > 0; ) {
        var m2 = t.andln(3) + o2 & 3, y3 = e.andln(3) + f2 & 3;
        m2 === 3 && (m2 = -1), y3 === 3 && (y3 = -1);
        var M2;
        (m2 & 1) === 0 ? M2 = 0 : (p = t.andln(7) + o2 & 7, (p === 3 || p === 5) && y3 === 2 ? M2 = -m2 : M2 = m2), r[0].push(M2);
        var x4;
        (y3 & 1) === 0 ? x4 = 0 : (p = e.andln(7) + f2 & 7, (p === 3 || p === 5) && m2 === 2 ? x4 = -y3 : x4 = y3), r[1].push(x4), 2 * o2 === M2 + 1 && (o2 = 1 - o2), 2 * f2 === x4 + 1 && (f2 = 1 - f2), t.iushrn(1), e.iushrn(1);
      }
      return r;
    }
    Pr.getJSF = pA;
    function vA(t, e, r) {
      var o2 = "_" + e;
      t.prototype[e] = function() {
        return this[o2] !== undefined ? this[o2] : this[o2] = r.call(this);
      };
    }
    Pr.cachedProperty = vA;
    function bA(t) {
      return typeof t == "string" ? Pr.toArray(t, "hex") : t;
    }
    Pr.parseBytes = bA;
    function mA(t) {
      return new lA(t, "hex", "le");
    }
    Pr.intFromLE = mA;
  });
  Oa = T9((xk, p2) => {
    var Cn = ri(), Ca = or(), Vs = Ca.getNAF, gA = Ca.getJSF, $s = Ca.assert;
    function Xi(t, e) {
      this.type = t, this.p = new Cn(e.p, 16), this.red = e.prime ? Cn.red(e.prime) : Cn.mont(this.p), this.zero = new Cn(0).toRed(this.red), this.one = new Cn(1).toRed(this.red), this.two = new Cn(2).toRed(this.red), this.n = e.n && new Cn(e.n, 16), this.g = e.g && this.pointFromJSON(e.g, e.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
      var r = this.n && this.p.div(this.n);
      !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
    }
    p2.exports = Xi;
    Xi.prototype.point = function() {
      throw new Error("Not implemented");
    };
    Xi.prototype.validate = function() {
      throw new Error("Not implemented");
    };
    Xi.prototype._fixedNafMul = function(e, r) {
      $s(e.precomputed);
      var o2 = e._getDoubles(), f2 = Vs(r, 1, this._bitLength), p = (1 << o2.step + 1) - (o2.step % 2 === 0 ? 2 : 1);
      p /= 3;
      var m2 = [], y3, M2;
      for (y3 = 0;y3 < f2.length; y3 += o2.step) {
        M2 = 0;
        for (var x4 = y3 + o2.step - 1;x4 >= y3; x4--)
          M2 = (M2 << 1) + f2[x4];
        m2.push(M2);
      }
      for (var S3 = this.jpoint(null, null, null), E3 = this.jpoint(null, null, null), B2 = p;B2 > 0; B2--) {
        for (y3 = 0;y3 < m2.length; y3++)
          M2 = m2[y3], M2 === B2 ? E3 = E3.mixedAdd(o2.points[y3]) : M2 === -B2 && (E3 = E3.mixedAdd(o2.points[y3].neg()));
        S3 = S3.add(E3);
      }
      return S3.toP();
    };
    Xi.prototype._wnafMul = function(e, r) {
      var o2 = 4, f2 = e._getNAFPoints(o2);
      o2 = f2.wnd;
      for (var p = f2.points, m2 = Vs(r, o2, this._bitLength), y3 = this.jpoint(null, null, null), M2 = m2.length - 1;M2 >= 0; M2--) {
        for (var x4 = 0;M2 >= 0 && m2[M2] === 0; M2--)
          x4++;
        if (M2 >= 0 && x4++, y3 = y3.dblp(x4), M2 < 0)
          break;
        var S3 = m2[M2];
        $s(S3 !== 0), e.type === "affine" ? S3 > 0 ? y3 = y3.mixedAdd(p[S3 - 1 >> 1]) : y3 = y3.mixedAdd(p[-S3 - 1 >> 1].neg()) : S3 > 0 ? y3 = y3.add(p[S3 - 1 >> 1]) : y3 = y3.add(p[-S3 - 1 >> 1].neg());
      }
      return e.type === "affine" ? y3.toP() : y3;
    };
    Xi.prototype._wnafMulAdd = function(e, r, o2, f2, p) {
      var m2 = this._wnafT1, y3 = this._wnafT2, M2 = this._wnafT3, x4 = 0, S3, E3, B2;
      for (S3 = 0;S3 < f2; S3++) {
        B2 = r[S3];
        var q = B2._getNAFPoints(e);
        m2[S3] = q.wnd, y3[S3] = q.points;
      }
      for (S3 = f2 - 1;S3 >= 1; S3 -= 2) {
        var L3 = S3 - 1, ge = S3;
        if (m2[L3] !== 1 || m2[ge] !== 1) {
          M2[L3] = Vs(o2[L3], m2[L3], this._bitLength), M2[ge] = Vs(o2[ge], m2[ge], this._bitLength), x4 = Math.max(M2[L3].length, x4), x4 = Math.max(M2[ge].length, x4);
          continue;
        }
        var _e = [r[L3], null, null, r[ge]];
        r[L3].y.cmp(r[ge].y) === 0 ? (_e[1] = r[L3].add(r[ge]), _e[2] = r[L3].toJ().mixedAdd(r[ge].neg())) : r[L3].y.cmp(r[ge].y.redNeg()) === 0 ? (_e[1] = r[L3].toJ().mixedAdd(r[ge]), _e[2] = r[L3].add(r[ge].neg())) : (_e[1] = r[L3].toJ().mixedAdd(r[ge]), _e[2] = r[L3].toJ().mixedAdd(r[ge].neg()));
        var N5 = [-3, -1, -5, -7, 0, 7, 5, 1, 3], we = gA(o2[L3], o2[ge]);
        for (x4 = Math.max(we[0].length, x4), M2[L3] = new Array(x4), M2[ge] = new Array(x4), E3 = 0;E3 < x4; E3++) {
          var ye = we[0][E3] | 0, xe = we[1][E3] | 0;
          M2[L3][E3] = N5[(ye + 1) * 3 + (xe + 1)], M2[ge][E3] = 0, y3[L3] = _e;
        }
      }
      var Re = this.jpoint(null, null, null), Ee = this._wnafT4;
      for (S3 = x4;S3 >= 0; S3--) {
        for (var Ae = 0;S3 >= 0; ) {
          var P4 = true;
          for (E3 = 0;E3 < f2; E3++)
            Ee[E3] = M2[E3][S3] | 0, Ee[E3] !== 0 && (P4 = false);
          if (!P4)
            break;
          Ae++, S3--;
        }
        if (S3 >= 0 && Ae++, Re = Re.dblp(Ae), S3 < 0)
          break;
        for (E3 = 0;E3 < f2; E3++) {
          var Se = Ee[E3];
          Se !== 0 && (Se > 0 ? B2 = y3[E3][Se - 1 >> 1] : Se < 0 && (B2 = y3[E3][-Se - 1 >> 1].neg()), B2.type === "affine" ? Re = Re.mixedAdd(B2) : Re = Re.add(B2));
        }
      }
      for (S3 = 0;S3 < f2; S3++)
        y3[S3] = null;
      return p ? Re : Re.toP();
    };
    function _r(t, e) {
      this.curve = t, this.type = e, this.precomputed = null;
    }
    Xi.BasePoint = _r;
    _r.prototype.eq = function() {
      throw new Error("Not implemented");
    };
    _r.prototype.validate = function() {
      return this.curve.validate(this);
    };
    Xi.prototype.decodePoint = function(e, r) {
      e = Ca.toArray(e, r);
      var o2 = this.p.byteLength();
      if ((e[0] === 4 || e[0] === 6 || e[0] === 7) && e.length - 1 === 2 * o2) {
        e[0] === 6 ? $s(e[e.length - 1] % 2 === 0) : e[0] === 7 && $s(e[e.length - 1] % 2 === 1);
        var f2 = this.point(e.slice(1, 1 + o2), e.slice(1 + o2, 1 + 2 * o2));
        return f2;
      } else if ((e[0] === 2 || e[0] === 3) && e.length - 1 === o2)
        return this.pointFromX(e.slice(1, 1 + o2), e[0] === 3);
      throw new Error("Unknown point format");
    };
    _r.prototype.encodeCompressed = function(e) {
      return this.encode(e, true);
    };
    _r.prototype._encode = function(e) {
      var r = this.curve.p.byteLength(), o2 = this.getX().toArray("be", r);
      return e ? [this.getY().isEven() ? 2 : 3].concat(o2) : [4].concat(o2, this.getY().toArray("be", r));
    };
    _r.prototype.encode = function(e, r) {
      return Ca.encode(this._encode(r), e);
    };
    _r.prototype.precompute = function(e) {
      if (this.precomputed)
        return this;
      var r = { doubles: null, naf: null, beta: null };
      return r.naf = this._getNAFPoints(8), r.doubles = this._getDoubles(4, e), r.beta = this._getBeta(), this.precomputed = r, this;
    };
    _r.prototype._hasDoubles = function(e) {
      if (!this.precomputed)
        return false;
      var r = this.precomputed.doubles;
      return r ? r.points.length >= Math.ceil((e.bitLength() + 1) / r.step) : false;
    };
    _r.prototype._getDoubles = function(e, r) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      for (var o2 = [this], f2 = this, p = 0;p < r; p += e) {
        for (var m2 = 0;m2 < e; m2++)
          f2 = f2.dbl();
        o2.push(f2);
      }
      return { step: e, points: o2 };
    };
    _r.prototype._getNAFPoints = function(e) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      for (var r = [this], o2 = (1 << e) - 1, f2 = o2 === 1 ? null : this.dbl(), p = 1;p < o2; p++)
        r[p] = r[p - 1].add(f2);
      return { wnd: e, points: r };
    };
    _r.prototype._getBeta = function() {
      return null;
    };
    _r.prototype.dblp = function(e) {
      for (var r = this, o2 = 0;o2 < e; o2++)
        r = r.dbl();
      return r;
    };
  });
  b22 = T9((Sk, v22) => {
    var yA = or(), lt2 = ri(), Dl = Ie(), Bf = Oa(), wA = yA.assert;
    function xr(t) {
      Bf.call(this, "short", t), this.a = new lt2(t.a, 16).toRed(this.red), this.b = new lt2(t.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(t), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
    }
    Dl(xr, Bf);
    v22.exports = xr;
    xr.prototype._getEndomorphism = function(e) {
      if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
        var r, o2;
        if (e.beta)
          r = new lt2(e.beta, 16).toRed(this.red);
        else {
          var f2 = this._getEndoRoots(this.p);
          r = f2[0].cmp(f2[1]) < 0 ? f2[0] : f2[1], r = r.toRed(this.red);
        }
        if (e.lambda)
          o2 = new lt2(e.lambda, 16);
        else {
          var p = this._getEndoRoots(this.n);
          this.g.mul(p[0]).x.cmp(this.g.x.redMul(r)) === 0 ? o2 = p[0] : (o2 = p[1], wA(this.g.mul(o2).x.cmp(this.g.x.redMul(r)) === 0));
        }
        var m2;
        return e.basis ? m2 = e.basis.map(function(y3) {
          return { a: new lt2(y3.a, 16), b: new lt2(y3.b, 16) };
        }) : m2 = this._getEndoBasis(o2), { beta: r, lambda: o2, basis: m2 };
      }
    };
    xr.prototype._getEndoRoots = function(e) {
      var r = e === this.p ? this.red : lt2.mont(e), o2 = new lt2(2).toRed(r).redInvm(), f2 = o2.redNeg(), p = new lt2(3).toRed(r).redNeg().redSqrt().redMul(o2), m2 = f2.redAdd(p).fromRed(), y3 = f2.redSub(p).fromRed();
      return [m2, y3];
    };
    xr.prototype._getEndoBasis = function(e) {
      for (var r = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), o2 = e, f2 = this.n.clone(), p = new lt2(1), m2 = new lt2(0), y3 = new lt2(0), M2 = new lt2(1), x4, S3, E3, B2, q, L3, ge, _e = 0, N5, we;o2.cmpn(0) !== 0; ) {
        var ye = f2.div(o2);
        N5 = f2.sub(ye.mul(o2)), we = y3.sub(ye.mul(p));
        var xe = M2.sub(ye.mul(m2));
        if (!E3 && N5.cmp(r) < 0)
          x4 = ge.neg(), S3 = p, E3 = N5.neg(), B2 = we;
        else if (E3 && ++_e === 2)
          break;
        ge = N5, f2 = o2, o2 = N5, y3 = p, p = we, M2 = m2, m2 = xe;
      }
      q = N5.neg(), L3 = we;
      var Re = E3.sqr().add(B2.sqr()), Ee = q.sqr().add(L3.sqr());
      return Ee.cmp(Re) >= 0 && (q = x4, L3 = S3), E3.negative && (E3 = E3.neg(), B2 = B2.neg()), q.negative && (q = q.neg(), L3 = L3.neg()), [{ a: E3, b: B2 }, { a: q, b: L3 }];
    };
    xr.prototype._endoSplit = function(e) {
      var r = this.endo.basis, o2 = r[0], f2 = r[1], p = f2.b.mul(e).divRound(this.n), m2 = o2.b.neg().mul(e).divRound(this.n), y3 = p.mul(o2.a), M2 = m2.mul(f2.a), x4 = p.mul(o2.b), S3 = m2.mul(f2.b), E3 = e.sub(y3).sub(M2), B2 = x4.add(S3).neg();
      return { k1: E3, k2: B2 };
    };
    xr.prototype.pointFromX = function(e, r) {
      e = new lt2(e, 16), e.red || (e = e.toRed(this.red));
      var o2 = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), f2 = o2.redSqrt();
      if (f2.redSqr().redSub(o2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var p = f2.fromRed().isOdd();
      return (r && !p || !r && p) && (f2 = f2.redNeg()), this.point(e, f2);
    };
    xr.prototype.validate = function(e) {
      if (e.inf)
        return true;
      var { x: r, y: o2 } = e, f2 = this.a.redMul(r), p = r.redSqr().redMul(r).redIAdd(f2).redIAdd(this.b);
      return o2.redSqr().redISub(p).cmpn(0) === 0;
    };
    xr.prototype._endoWnafMulAdd = function(e, r, o2) {
      for (var f2 = this._endoWnafT1, p = this._endoWnafT2, m2 = 0;m2 < e.length; m2++) {
        var y3 = this._endoSplit(r[m2]), M2 = e[m2], x4 = M2._getBeta();
        y3.k1.negative && (y3.k1.ineg(), M2 = M2.neg(true)), y3.k2.negative && (y3.k2.ineg(), x4 = x4.neg(true)), f2[m2 * 2] = M2, f2[m2 * 2 + 1] = x4, p[m2 * 2] = y3.k1, p[m2 * 2 + 1] = y3.k2;
      }
      for (var S3 = this._wnafMulAdd(1, f2, p, m2 * 2, o2), E3 = 0;E3 < m2 * 2; E3++)
        f2[E3] = null, p[E3] = null;
      return S3;
    };
    function Ct(t, e, r, o2) {
      Bf.BasePoint.call(this, t, "affine"), e === null && r === null ? (this.x = null, this.y = null, this.inf = true) : (this.x = new lt2(e, 16), this.y = new lt2(r, 16), o2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
    }
    Dl(Ct, Bf.BasePoint);
    xr.prototype.point = function(e, r, o2) {
      return new Ct(this, e, r, o2);
    };
    xr.prototype.pointFromJSON = function(e, r) {
      return Ct.fromJSON(this, e, r);
    };
    Ct.prototype._getBeta = function() {
      if (!!this.curve.endo) {
        var e = this.precomputed;
        if (e && e.beta)
          return e.beta;
        var r = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (e) {
          var o2 = this.curve, f2 = function(p) {
            return o2.point(p.x.redMul(o2.endo.beta), p.y);
          };
          e.beta = r, r.precomputed = { beta: null, naf: e.naf && { wnd: e.naf.wnd, points: e.naf.points.map(f2) }, doubles: e.doubles && { step: e.doubles.step, points: e.doubles.points.map(f2) } };
        }
        return r;
      }
    };
    Ct.prototype.toJSON = function() {
      return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
    };
    Ct.fromJSON = function(e, r, o2) {
      typeof r == "string" && (r = JSON.parse(r));
      var f2 = e.point(r[0], r[1], o2);
      if (!r[2])
        return f2;
      function p(y3) {
        return e.point(y3[0], y3[1], o2);
      }
      var m2 = r[2];
      return f2.precomputed = { beta: null, doubles: m2.doubles && { step: m2.doubles.step, points: [f2].concat(m2.doubles.points.map(p)) }, naf: m2.naf && { wnd: m2.naf.wnd, points: [f2].concat(m2.naf.points.map(p)) } }, f2;
    };
    Ct.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Ct.prototype.isInfinity = function() {
      return this.inf;
    };
    Ct.prototype.add = function(e) {
      if (this.inf)
        return e;
      if (e.inf)
        return this;
      if (this.eq(e))
        return this.dbl();
      if (this.neg().eq(e))
        return this.curve.point(null, null);
      if (this.x.cmp(e.x) === 0)
        return this.curve.point(null, null);
      var r = this.y.redSub(e.y);
      r.cmpn(0) !== 0 && (r = r.redMul(this.x.redSub(e.x).redInvm()));
      var o2 = r.redSqr().redISub(this.x).redISub(e.x), f2 = r.redMul(this.x.redSub(o2)).redISub(this.y);
      return this.curve.point(o2, f2);
    };
    Ct.prototype.dbl = function() {
      if (this.inf)
        return this;
      var e = this.y.redAdd(this.y);
      if (e.cmpn(0) === 0)
        return this.curve.point(null, null);
      var r = this.curve.a, o2 = this.x.redSqr(), f2 = e.redInvm(), p = o2.redAdd(o2).redIAdd(o2).redIAdd(r).redMul(f2), m2 = p.redSqr().redISub(this.x.redAdd(this.x)), y3 = p.redMul(this.x.redSub(m2)).redISub(this.y);
      return this.curve.point(m2, y3);
    };
    Ct.prototype.getX = function() {
      return this.x.fromRed();
    };
    Ct.prototype.getY = function() {
      return this.y.fromRed();
    };
    Ct.prototype.mul = function(e) {
      return e = new lt2(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e);
    };
    Ct.prototype.mulAdd = function(e, r, o2) {
      var f2 = [this, r], p = [e, o2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(f2, p) : this.curve._wnafMulAdd(1, f2, p, 2);
    };
    Ct.prototype.jmulAdd = function(e, r, o2) {
      var f2 = [this, r], p = [e, o2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(f2, p, true) : this.curve._wnafMulAdd(1, f2, p, 2, true);
    };
    Ct.prototype.eq = function(e) {
      return this === e || this.inf === e.inf && (this.inf || this.x.cmp(e.x) === 0 && this.y.cmp(e.y) === 0);
    };
    Ct.prototype.neg = function(e) {
      if (this.inf)
        return this;
      var r = this.curve.point(this.x, this.y.redNeg());
      if (e && this.precomputed) {
        var o2 = this.precomputed, f2 = function(p) {
          return p.neg();
        };
        r.precomputed = { naf: o2.naf && { wnd: o2.naf.wnd, points: o2.naf.points.map(f2) }, doubles: o2.doubles && { step: o2.doubles.step, points: o2.doubles.points.map(f2) } };
      }
      return r;
    };
    Ct.prototype.toJ = function() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var e = this.curve.jpoint(this.x, this.y, this.curve.one);
      return e;
    };
    function Wt(t, e, r, o2) {
      Bf.BasePoint.call(this, t, "jacobian"), e === null && r === null && o2 === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new lt2(0)) : (this.x = new lt2(e, 16), this.y = new lt2(r, 16), this.z = new lt2(o2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
    }
    Dl(Wt, Bf.BasePoint);
    xr.prototype.jpoint = function(e, r, o2) {
      return new Wt(this, e, r, o2);
    };
    Wt.prototype.toP = function() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var e = this.z.redInvm(), r = e.redSqr(), o2 = this.x.redMul(r), f2 = this.y.redMul(r).redMul(e);
      return this.curve.point(o2, f2);
    };
    Wt.prototype.neg = function() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    Wt.prototype.add = function(e) {
      if (this.isInfinity())
        return e;
      if (e.isInfinity())
        return this;
      var r = e.z.redSqr(), o2 = this.z.redSqr(), f2 = this.x.redMul(r), p = e.x.redMul(o2), m2 = this.y.redMul(r.redMul(e.z)), y3 = e.y.redMul(o2.redMul(this.z)), M2 = f2.redSub(p), x4 = m2.redSub(y3);
      if (M2.cmpn(0) === 0)
        return x4.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
      var S3 = M2.redSqr(), E3 = S3.redMul(M2), B2 = f2.redMul(S3), q = x4.redSqr().redIAdd(E3).redISub(B2).redISub(B2), L3 = x4.redMul(B2.redISub(q)).redISub(m2.redMul(E3)), ge = this.z.redMul(e.z).redMul(M2);
      return this.curve.jpoint(q, L3, ge);
    };
    Wt.prototype.mixedAdd = function(e) {
      if (this.isInfinity())
        return e.toJ();
      if (e.isInfinity())
        return this;
      var r = this.z.redSqr(), o2 = this.x, f2 = e.x.redMul(r), p = this.y, m2 = e.y.redMul(r).redMul(this.z), y3 = o2.redSub(f2), M2 = p.redSub(m2);
      if (y3.cmpn(0) === 0)
        return M2.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
      var x4 = y3.redSqr(), S3 = x4.redMul(y3), E3 = o2.redMul(x4), B2 = M2.redSqr().redIAdd(S3).redISub(E3).redISub(E3), q = M2.redMul(E3.redISub(B2)).redISub(p.redMul(S3)), L3 = this.z.redMul(y3);
      return this.curve.jpoint(B2, q, L3);
    };
    Wt.prototype.dblp = function(e) {
      if (e === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!e)
        return this.dbl();
      var r;
      if (this.curve.zeroA || this.curve.threeA) {
        var o2 = this;
        for (r = 0;r < e; r++)
          o2 = o2.dbl();
        return o2;
      }
      var f2 = this.curve.a, p = this.curve.tinv, m2 = this.x, y3 = this.y, M2 = this.z, x4 = M2.redSqr().redSqr(), S3 = y3.redAdd(y3);
      for (r = 0;r < e; r++) {
        var E3 = m2.redSqr(), B2 = S3.redSqr(), q = B2.redSqr(), L3 = E3.redAdd(E3).redIAdd(E3).redIAdd(f2.redMul(x4)), ge = m2.redMul(B2), _e = L3.redSqr().redISub(ge.redAdd(ge)), N5 = ge.redISub(_e), we = L3.redMul(N5);
        we = we.redIAdd(we).redISub(q);
        var ye = S3.redMul(M2);
        r + 1 < e && (x4 = x4.redMul(q)), m2 = _e, M2 = ye, S3 = we;
      }
      return this.curve.jpoint(m2, S3.redMul(p), M2);
    };
    Wt.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    };
    Wt.prototype._zeroDbl = function() {
      var e, r, o2;
      if (this.zOne) {
        var f2 = this.x.redSqr(), p = this.y.redSqr(), m2 = p.redSqr(), y3 = this.x.redAdd(p).redSqr().redISub(f2).redISub(m2);
        y3 = y3.redIAdd(y3);
        var M2 = f2.redAdd(f2).redIAdd(f2), x4 = M2.redSqr().redISub(y3).redISub(y3), S3 = m2.redIAdd(m2);
        S3 = S3.redIAdd(S3), S3 = S3.redIAdd(S3), e = x4, r = M2.redMul(y3.redISub(x4)).redISub(S3), o2 = this.y.redAdd(this.y);
      } else {
        var E3 = this.x.redSqr(), B2 = this.y.redSqr(), q = B2.redSqr(), L3 = this.x.redAdd(B2).redSqr().redISub(E3).redISub(q);
        L3 = L3.redIAdd(L3);
        var ge = E3.redAdd(E3).redIAdd(E3), _e = ge.redSqr(), N5 = q.redIAdd(q);
        N5 = N5.redIAdd(N5), N5 = N5.redIAdd(N5), e = _e.redISub(L3).redISub(L3), r = ge.redMul(L3.redISub(e)).redISub(N5), o2 = this.y.redMul(this.z), o2 = o2.redIAdd(o2);
      }
      return this.curve.jpoint(e, r, o2);
    };
    Wt.prototype._threeDbl = function() {
      var e, r, o2;
      if (this.zOne) {
        var f2 = this.x.redSqr(), p = this.y.redSqr(), m2 = p.redSqr(), y3 = this.x.redAdd(p).redSqr().redISub(f2).redISub(m2);
        y3 = y3.redIAdd(y3);
        var M2 = f2.redAdd(f2).redIAdd(f2).redIAdd(this.curve.a), x4 = M2.redSqr().redISub(y3).redISub(y3);
        e = x4;
        var S3 = m2.redIAdd(m2);
        S3 = S3.redIAdd(S3), S3 = S3.redIAdd(S3), r = M2.redMul(y3.redISub(x4)).redISub(S3), o2 = this.y.redAdd(this.y);
      } else {
        var E3 = this.z.redSqr(), B2 = this.y.redSqr(), q = this.x.redMul(B2), L3 = this.x.redSub(E3).redMul(this.x.redAdd(E3));
        L3 = L3.redAdd(L3).redIAdd(L3);
        var ge = q.redIAdd(q);
        ge = ge.redIAdd(ge);
        var _e = ge.redAdd(ge);
        e = L3.redSqr().redISub(_e), o2 = this.y.redAdd(this.z).redSqr().redISub(B2).redISub(E3);
        var N5 = B2.redSqr();
        N5 = N5.redIAdd(N5), N5 = N5.redIAdd(N5), N5 = N5.redIAdd(N5), r = L3.redMul(ge.redISub(e)).redISub(N5);
      }
      return this.curve.jpoint(e, r, o2);
    };
    Wt.prototype._dbl = function() {
      var e = this.curve.a, r = this.x, o2 = this.y, f2 = this.z, p = f2.redSqr().redSqr(), m2 = r.redSqr(), y3 = o2.redSqr(), M2 = m2.redAdd(m2).redIAdd(m2).redIAdd(e.redMul(p)), x4 = r.redAdd(r);
      x4 = x4.redIAdd(x4);
      var S3 = x4.redMul(y3), E3 = M2.redSqr().redISub(S3.redAdd(S3)), B2 = S3.redISub(E3), q = y3.redSqr();
      q = q.redIAdd(q), q = q.redIAdd(q), q = q.redIAdd(q);
      var L3 = M2.redMul(B2).redISub(q), ge = o2.redAdd(o2).redMul(f2);
      return this.curve.jpoint(E3, L3, ge);
    };
    Wt.prototype.trpl = function() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var e = this.x.redSqr(), r = this.y.redSqr(), o2 = this.z.redSqr(), f2 = r.redSqr(), p = e.redAdd(e).redIAdd(e), m2 = p.redSqr(), y3 = this.x.redAdd(r).redSqr().redISub(e).redISub(f2);
      y3 = y3.redIAdd(y3), y3 = y3.redAdd(y3).redIAdd(y3), y3 = y3.redISub(m2);
      var M2 = y3.redSqr(), x4 = f2.redIAdd(f2);
      x4 = x4.redIAdd(x4), x4 = x4.redIAdd(x4), x4 = x4.redIAdd(x4);
      var S3 = p.redIAdd(y3).redSqr().redISub(m2).redISub(M2).redISub(x4), E3 = r.redMul(S3);
      E3 = E3.redIAdd(E3), E3 = E3.redIAdd(E3);
      var B2 = this.x.redMul(M2).redISub(E3);
      B2 = B2.redIAdd(B2), B2 = B2.redIAdd(B2);
      var q = this.y.redMul(S3.redMul(x4.redISub(S3)).redISub(y3.redMul(M2)));
      q = q.redIAdd(q), q = q.redIAdd(q), q = q.redIAdd(q);
      var L3 = this.z.redAdd(y3).redSqr().redISub(o2).redISub(M2);
      return this.curve.jpoint(B2, q, L3);
    };
    Wt.prototype.mul = function(e, r) {
      return e = new lt2(e, r), this.curve._wnafMul(this, e);
    };
    Wt.prototype.eq = function(e) {
      if (e.type === "affine")
        return this.eq(e.toJ());
      if (this === e)
        return true;
      var r = this.z.redSqr(), o2 = e.z.redSqr();
      if (this.x.redMul(o2).redISub(e.x.redMul(r)).cmpn(0) !== 0)
        return false;
      var f2 = r.redMul(this.z), p = o2.redMul(e.z);
      return this.y.redMul(p).redISub(e.y.redMul(f2)).cmpn(0) === 0;
    };
    Wt.prototype.eqXToP = function(e) {
      var r = this.z.redSqr(), o2 = e.toRed(this.curve.red).redMul(r);
      if (this.x.cmp(o2) === 0)
        return true;
      for (var f2 = e.clone(), p = this.curve.redN.redMul(r);; ) {
        if (f2.iadd(this.curve.n), f2.cmp(this.curve.p) >= 0)
          return false;
        if (o2.redIAdd(p), this.x.cmp(o2) === 0)
          return true;
      }
    };
    Wt.prototype.inspect = function() {
      return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    Wt.prototype.isInfinity = function() {
      return this.z.cmpn(0) === 0;
    };
  });
  y22 = T9((Ek, g22) => {
    var qf = ri(), m2 = Ie(), Gs = Oa(), MA = or();
    function If(t) {
      Gs.call(this, "mont", t), this.a = new qf(t.a, 16).toRed(this.red), this.b = new qf(t.b, 16).toRed(this.red), this.i4 = new qf(4).toRed(this.red).redInvm(), this.two = new qf(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    m2(If, Gs);
    g22.exports = If;
    If.prototype.validate = function(e) {
      var r = e.normalize().x, o2 = r.redSqr(), f2 = o2.redMul(r).redAdd(o2.redMul(this.a)).redAdd(r), p = f2.redSqrt();
      return p.redSqr().cmp(f2) === 0;
    };
    function Ot(t, e, r) {
      Gs.BasePoint.call(this, t, "projective"), e === null && r === null ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new qf(e, 16), this.z = new qf(r, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
    }
    m2(Ot, Gs.BasePoint);
    If.prototype.decodePoint = function(e, r) {
      return this.point(MA.toArray(e, r), 1);
    };
    If.prototype.point = function(e, r) {
      return new Ot(this, e, r);
    };
    If.prototype.pointFromJSON = function(e) {
      return Ot.fromJSON(this, e);
    };
    Ot.prototype.precompute = function() {
    };
    Ot.prototype._encode = function() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Ot.fromJSON = function(e, r) {
      return new Ot(e, r[0], r[1] || e.one);
    };
    Ot.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Ot.prototype.isInfinity = function() {
      return this.z.cmpn(0) === 0;
    };
    Ot.prototype.dbl = function() {
      var e = this.x.redAdd(this.z), r = e.redSqr(), o2 = this.x.redSub(this.z), f2 = o2.redSqr(), p = r.redSub(f2), m3 = r.redMul(f2), y3 = p.redMul(f2.redAdd(this.curve.a24.redMul(p)));
      return this.curve.point(m3, y3);
    };
    Ot.prototype.add = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.diffAdd = function(e, r) {
      var o2 = this.x.redAdd(this.z), f2 = this.x.redSub(this.z), p = e.x.redAdd(e.z), m3 = e.x.redSub(e.z), y3 = m3.redMul(o2), M2 = p.redMul(f2), x4 = r.z.redMul(y3.redAdd(M2).redSqr()), S3 = r.x.redMul(y3.redISub(M2).redSqr());
      return this.curve.point(x4, S3);
    };
    Ot.prototype.mul = function(e) {
      for (var r = e.clone(), o2 = this, f2 = this.curve.point(null, null), p = this, m3 = [];r.cmpn(0) !== 0; r.iushrn(1))
        m3.push(r.andln(1));
      for (var y3 = m3.length - 1;y3 >= 0; y3--)
        m3[y3] === 0 ? (o2 = o2.diffAdd(f2, p), f2 = f2.dbl()) : (f2 = o2.diffAdd(f2, p), o2 = o2.dbl());
      return f2;
    };
    Ot.prototype.mulAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.jumlAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    };
    Ot.prototype.eq = function(e) {
      return this.getX().cmp(e.getX()) === 0;
    };
    Ot.prototype.normalize = function() {
      return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
    };
    Ot.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
  });
  _22 = T9((Ak, M2) => {
    var _A = or(), Ai = ri(), w22 = Ie(), Ys = Oa(), xA = _A.assert;
    function ii(t) {
      this.twisted = (t.a | 0) !== 1, this.mOneA = this.twisted && (t.a | 0) === -1, this.extended = this.mOneA, Ys.call(this, "edwards", t), this.a = new Ai(t.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new Ai(t.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new Ai(t.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), xA(!this.twisted || this.c.fromRed().cmpn(1) === 0), this.oneC = (t.c | 0) === 1;
    }
    w22(ii, Ys);
    M2.exports = ii;
    ii.prototype._mulA = function(e) {
      return this.mOneA ? e.redNeg() : this.a.redMul(e);
    };
    ii.prototype._mulC = function(e) {
      return this.oneC ? e : this.c.redMul(e);
    };
    ii.prototype.jpoint = function(e, r, o2, f2) {
      return this.point(e, r, o2, f2);
    };
    ii.prototype.pointFromX = function(e, r) {
      e = new Ai(e, 16), e.red || (e = e.toRed(this.red));
      var o2 = e.redSqr(), f2 = this.c2.redSub(this.a.redMul(o2)), p = this.one.redSub(this.c2.redMul(this.d).redMul(o2)), m2 = f2.redMul(p.redInvm()), y3 = m2.redSqrt();
      if (y3.redSqr().redSub(m2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var M3 = y3.fromRed().isOdd();
      return (r && !M3 || !r && M3) && (y3 = y3.redNeg()), this.point(e, y3);
    };
    ii.prototype.pointFromY = function(e, r) {
      e = new Ai(e, 16), e.red || (e = e.toRed(this.red));
      var o2 = e.redSqr(), f2 = o2.redSub(this.c2), p = o2.redMul(this.d).redMul(this.c2).redSub(this.a), m2 = f2.redMul(p.redInvm());
      if (m2.cmp(this.zero) === 0) {
        if (r)
          throw new Error("invalid point");
        return this.point(this.zero, e);
      }
      var y3 = m2.redSqrt();
      if (y3.redSqr().redSub(m2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      return y3.fromRed().isOdd() !== r && (y3 = y3.redNeg()), this.point(y3, e);
    };
    ii.prototype.validate = function(e) {
      if (e.isInfinity())
        return true;
      e.normalize();
      var r = e.x.redSqr(), o2 = e.y.redSqr(), f2 = r.redMul(this.a).redAdd(o2), p = this.c2.redMul(this.one.redAdd(this.d.redMul(r).redMul(o2)));
      return f2.cmp(p) === 0;
    };
    function at2(t, e, r, o2, f2) {
      Ys.BasePoint.call(this, t, "projective"), e === null && r === null && o2 === null ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = true) : (this.x = new Ai(e, 16), this.y = new Ai(r, 16), this.z = o2 ? new Ai(o2, 16) : this.curve.one, this.t = f2 && new Ai(f2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
    }
    w22(at2, Ys.BasePoint);
    ii.prototype.pointFromJSON = function(e) {
      return at2.fromJSON(this, e);
    };
    ii.prototype.point = function(e, r, o2, f2) {
      return new at2(this, e, r, o2, f2);
    };
    at2.fromJSON = function(e, r) {
      return new at2(e, r[0], r[1], r[2]);
    };
    at2.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    at2.prototype.isInfinity = function() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    at2.prototype._extDbl = function() {
      var e = this.x.redSqr(), r = this.y.redSqr(), o2 = this.z.redSqr();
      o2 = o2.redIAdd(o2);
      var f2 = this.curve._mulA(e), p = this.x.redAdd(this.y).redSqr().redISub(e).redISub(r), m2 = f2.redAdd(r), y3 = m2.redSub(o2), M3 = f2.redSub(r), x4 = p.redMul(y3), S3 = m2.redMul(M3), E3 = p.redMul(M3), B2 = y3.redMul(m2);
      return this.curve.point(x4, S3, B2, E3);
    };
    at2.prototype._projDbl = function() {
      var e = this.x.redAdd(this.y).redSqr(), r = this.x.redSqr(), o2 = this.y.redSqr(), f2, p, m2, y3, M3, x4;
      if (this.curve.twisted) {
        y3 = this.curve._mulA(r);
        var S3 = y3.redAdd(o2);
        this.zOne ? (f2 = e.redSub(r).redSub(o2).redMul(S3.redSub(this.curve.two)), p = S3.redMul(y3.redSub(o2)), m2 = S3.redSqr().redSub(S3).redSub(S3)) : (M3 = this.z.redSqr(), x4 = S3.redSub(M3).redISub(M3), f2 = e.redSub(r).redISub(o2).redMul(x4), p = S3.redMul(y3.redSub(o2)), m2 = S3.redMul(x4));
      } else
        y3 = r.redAdd(o2), M3 = this.curve._mulC(this.z).redSqr(), x4 = y3.redSub(M3).redSub(M3), f2 = this.curve._mulC(e.redISub(y3)).redMul(x4), p = this.curve._mulC(y3).redMul(r.redISub(o2)), m2 = y3.redMul(x4);
      return this.curve.point(f2, p, m2);
    };
    at2.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
    };
    at2.prototype._extAdd = function(e) {
      var r = this.y.redSub(this.x).redMul(e.y.redSub(e.x)), o2 = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)), f2 = this.t.redMul(this.curve.dd).redMul(e.t), p = this.z.redMul(e.z.redAdd(e.z)), m2 = o2.redSub(r), y3 = p.redSub(f2), M3 = p.redAdd(f2), x4 = o2.redAdd(r), S3 = m2.redMul(y3), E3 = M3.redMul(x4), B2 = m2.redMul(x4), q = y3.redMul(M3);
      return this.curve.point(S3, E3, q, B2);
    };
    at2.prototype._projAdd = function(e) {
      var r = this.z.redMul(e.z), o2 = r.redSqr(), f2 = this.x.redMul(e.x), p = this.y.redMul(e.y), m2 = this.curve.d.redMul(f2).redMul(p), y3 = o2.redSub(m2), M3 = o2.redAdd(m2), x4 = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(f2).redISub(p), S3 = r.redMul(y3).redMul(x4), E3, B2;
      return this.curve.twisted ? (E3 = r.redMul(M3).redMul(p.redSub(this.curve._mulA(f2))), B2 = y3.redMul(M3)) : (E3 = r.redMul(M3).redMul(p.redSub(f2)), B2 = this.curve._mulC(y3).redMul(M3)), this.curve.point(S3, E3, B2);
    };
    at2.prototype.add = function(e) {
      return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e);
    };
    at2.prototype.mul = function(e) {
      return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e);
    };
    at2.prototype.mulAdd = function(e, r, o2) {
      return this.curve._wnafMulAdd(1, [this, r], [e, o2], 2, false);
    };
    at2.prototype.jmulAdd = function(e, r, o2) {
      return this.curve._wnafMulAdd(1, [this, r], [e, o2], 2, true);
    };
    at2.prototype.normalize = function() {
      if (this.zOne)
        return this;
      var e = this.z.redInvm();
      return this.x = this.x.redMul(e), this.y = this.y.redMul(e), this.t && (this.t = this.t.redMul(e)), this.z = this.curve.one, this.zOne = true, this;
    };
    at2.prototype.neg = function() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };
    at2.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
    at2.prototype.getY = function() {
      return this.normalize(), this.y.fromRed();
    };
    at2.prototype.eq = function(e) {
      return this === e || this.getX().cmp(e.getX()) === 0 && this.getY().cmp(e.getY()) === 0;
    };
    at2.prototype.eqXToP = function(e) {
      var r = e.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(r) === 0)
        return true;
      for (var o2 = e.clone(), f2 = this.curve.redN.redMul(this.z);; ) {
        if (o2.iadd(this.curve.n), o2.cmp(this.curve.p) >= 0)
          return false;
        if (r.redIAdd(f2), this.x.cmp(r) === 0)
          return true;
      }
    };
    at2.prototype.toP = at2.prototype.normalize;
    at2.prototype.mixedAdd = at2.prototype.add;
  });
  Pl = T9((x22) => {
    var Xs = x22;
    Xs.base = Oa();
    Xs.short = b22();
    Xs.mont = y22();
    Xs.edwards = _22();
  });
  Cr = T9((it) => {
    var SA = ar(), EA = Ie();
    it.inherits = EA;
    function AA(t, e) {
      return (t.charCodeAt(e) & 64512) !== 55296 || e < 0 || e + 1 >= t.length ? false : (t.charCodeAt(e + 1) & 64512) === 56320;
    }
    function RA(t, e) {
      if (Array.isArray(t))
        return t.slice();
      if (!t)
        return [];
      var r = [];
      if (typeof t == "string")
        if (e) {
          if (e === "hex")
            for (t = t.replace(/[^a-z0-9]+/ig, ""), t.length % 2 !== 0 && (t = "0" + t), f2 = 0;f2 < t.length; f2 += 2)
              r.push(parseInt(t[f2] + t[f2 + 1], 16));
        } else
          for (var o2 = 0, f2 = 0;f2 < t.length; f2++) {
            var p = t.charCodeAt(f2);
            p < 128 ? r[o2++] = p : p < 2048 ? (r[o2++] = p >> 6 | 192, r[o2++] = p & 63 | 128) : AA(t, f2) ? (p = 65536 + ((p & 1023) << 10) + (t.charCodeAt(++f2) & 1023), r[o2++] = p >> 18 | 240, r[o2++] = p >> 12 & 63 | 128, r[o2++] = p >> 6 & 63 | 128, r[o2++] = p & 63 | 128) : (r[o2++] = p >> 12 | 224, r[o2++] = p >> 6 & 63 | 128, r[o2++] = p & 63 | 128);
          }
      else
        for (f2 = 0;f2 < t.length; f2++)
          r[f2] = t[f2] | 0;
      return r;
    }
    it.toArray = RA;
    function BA(t) {
      for (var e = "", r = 0;r < t.length; r++)
        e += E22(t[r].toString(16));
      return e;
    }
    it.toHex = BA;
    function S22(t) {
      var e = t >>> 24 | t >>> 8 & 65280 | t << 8 & 16711680 | (t & 255) << 24;
      return e >>> 0;
    }
    it.htonl = S22;
    function qA(t, e) {
      for (var r = "", o2 = 0;o2 < t.length; o2++) {
        var f2 = t[o2];
        e === "little" && (f2 = S22(f2)), r += A2(f2.toString(16));
      }
      return r;
    }
    it.toHex32 = qA;
    function E22(t) {
      return t.length === 1 ? "0" + t : t;
    }
    it.zero2 = E22;
    function A2(t) {
      return t.length === 7 ? "0" + t : t.length === 6 ? "00" + t : t.length === 5 ? "000" + t : t.length === 4 ? "0000" + t : t.length === 3 ? "00000" + t : t.length === 2 ? "000000" + t : t.length === 1 ? "0000000" + t : t;
    }
    it.zero8 = A2;
    function IA(t, e, r, o2) {
      var f2 = r - e;
      SA(f2 % 4 === 0);
      for (var p = new Array(f2 / 4), m2 = 0, y3 = e;m2 < p.length; m2++, y3 += 4) {
        var M2;
        o2 === "big" ? M2 = t[y3] << 24 | t[y3 + 1] << 16 | t[y3 + 2] << 8 | t[y3 + 3] : M2 = t[y3 + 3] << 24 | t[y3 + 2] << 16 | t[y3 + 1] << 8 | t[y3], p[m2] = M2 >>> 0;
      }
      return p;
    }
    it.join32 = IA;
    function TA(t, e) {
      for (var r = new Array(t.length * 4), o2 = 0, f2 = 0;o2 < t.length; o2++, f2 += 4) {
        var p = t[o2];
        e === "big" ? (r[f2] = p >>> 24, r[f2 + 1] = p >>> 16 & 255, r[f2 + 2] = p >>> 8 & 255, r[f2 + 3] = p & 255) : (r[f2 + 3] = p >>> 24, r[f2 + 2] = p >>> 16 & 255, r[f2 + 1] = p >>> 8 & 255, r[f2] = p & 255);
      }
      return r;
    }
    it.split32 = TA;
    function kA(t, e) {
      return t >>> e | t << 32 - e;
    }
    it.rotr32 = kA;
    function LA(t, e) {
      return t << e | t >>> 32 - e;
    }
    it.rotl32 = LA;
    function NA(t, e) {
      return t + e >>> 0;
    }
    it.sum32 = NA;
    function DA(t, e, r) {
      return t + e + r >>> 0;
    }
    it.sum32_3 = DA;
    function PA(t, e, r, o2) {
      return t + e + r + o2 >>> 0;
    }
    it.sum32_4 = PA;
    function CA(t, e, r, o2, f2) {
      return t + e + r + o2 + f2 >>> 0;
    }
    it.sum32_5 = CA;
    function OA(t, e, r, o2) {
      var f2 = t[e], p = t[e + 1], m2 = o2 + p >>> 0, y3 = (m2 < o2 ? 1 : 0) + r + f2;
      t[e] = y3 >>> 0, t[e + 1] = m2;
    }
    it.sum64 = OA;
    function FA(t, e, r, o2) {
      var f2 = e + o2 >>> 0, p = (f2 < e ? 1 : 0) + t + r;
      return p >>> 0;
    }
    it.sum64_hi = FA;
    function UA(t, e, r, o2) {
      var f2 = e + o2;
      return f2 >>> 0;
    }
    it.sum64_lo = UA;
    function zA(t, e, r, o2, f2, p, m2, y3) {
      var M2 = 0, x4 = e;
      x4 = x4 + o2 >>> 0, M2 += x4 < e ? 1 : 0, x4 = x4 + p >>> 0, M2 += x4 < p ? 1 : 0, x4 = x4 + y3 >>> 0, M2 += x4 < y3 ? 1 : 0;
      var S3 = t + r + f2 + m2 + M2;
      return S3 >>> 0;
    }
    it.sum64_4_hi = zA;
    function HA(t, e, r, o2, f2, p, m2, y3) {
      var M2 = e + o2 + p + y3;
      return M2 >>> 0;
    }
    it.sum64_4_lo = HA;
    function WA(t, e, r, o2, f2, p, m2, y3, M2, x4) {
      var S3 = 0, E3 = e;
      E3 = E3 + o2 >>> 0, S3 += E3 < e ? 1 : 0, E3 = E3 + p >>> 0, S3 += E3 < p ? 1 : 0, E3 = E3 + y3 >>> 0, S3 += E3 < y3 ? 1 : 0, E3 = E3 + x4 >>> 0, S3 += E3 < x4 ? 1 : 0;
      var B2 = t + r + f2 + m2 + M2 + S3;
      return B2 >>> 0;
    }
    it.sum64_5_hi = WA;
    function KA(t, e, r, o2, f2, p, m2, y3, M2, x4) {
      var S3 = e + o2 + p + y3 + x4;
      return S3 >>> 0;
    }
    it.sum64_5_lo = KA;
    function jA(t, e, r) {
      var o2 = e << 32 - r | t >>> r;
      return o2 >>> 0;
    }
    it.rotr64_hi = jA;
    function ZA(t, e, r) {
      var o2 = t << 32 - r | e >>> r;
      return o2 >>> 0;
    }
    it.rotr64_lo = ZA;
    function VA(t, e, r) {
      return t >>> r;
    }
    it.shr64_hi = VA;
    function $A(t, e, r) {
      var o2 = t << 32 - r | e >>> r;
      return o2 >>> 0;
    }
    it.shr64_lo = $A;
  });
  Tf = T9((B2) => {
    var R22 = Cr(), GA = ar();
    function Js() {
      this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
    }
    B2.BlockHash = Js;
    Js.prototype.update = function(e, r) {
      if (e = R22.toArray(e, r), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
        e = this.pending;
        var o2 = e.length % this._delta8;
        this.pending = e.slice(e.length - o2, e.length), this.pending.length === 0 && (this.pending = null), e = R22.join32(e, 0, e.length - o2, this.endian);
        for (var f2 = 0;f2 < e.length; f2 += this._delta32)
          this._update(e, f2, f2 + this._delta32);
      }
      return this;
    };
    Js.prototype.digest = function(e) {
      return this.update(this._pad()), GA(this.pending === null), this._digest(e);
    };
    Js.prototype._pad = function() {
      var e = this.pendingTotal, r = this._delta8, o2 = r - (e + this.padLength) % r, f2 = new Array(o2 + this.padLength);
      f2[0] = 128;
      for (var p = 1;p < o2; p++)
        f2[p] = 0;
      if (e <<= 3, this.endian === "big") {
        for (var m2 = 8;m2 < this.padLength; m2++)
          f2[p++] = 0;
        f2[p++] = 0, f2[p++] = 0, f2[p++] = 0, f2[p++] = 0, f2[p++] = e >>> 24 & 255, f2[p++] = e >>> 16 & 255, f2[p++] = e >>> 8 & 255, f2[p++] = e & 255;
      } else
        for (f2[p++] = e & 255, f2[p++] = e >>> 8 & 255, f2[p++] = e >>> 16 & 255, f2[p++] = e >>> 24 & 255, f2[p++] = 0, f2[p++] = 0, f2[p++] = 0, f2[p++] = 0, m2 = 8;m2 < this.padLength; m2++)
          f2[p++] = 0;
      return f2;
    };
  });
  Cl = T9((Ri) => {
    var YA = Cr(), ni = YA.rotr32;
    function XA(t, e, r, o2) {
      if (t === 0)
        return q2(e, r, o2);
      if (t === 1 || t === 3)
        return T22(e, r, o2);
      if (t === 2)
        return I2(e, r, o2);
    }
    Ri.ft_1 = XA;
    function q2(t, e, r) {
      return t & e ^ ~t & r;
    }
    Ri.ch32 = q2;
    function I2(t, e, r) {
      return t & e ^ t & r ^ e & r;
    }
    Ri.maj32 = I2;
    function T22(t, e, r) {
      return t ^ e ^ r;
    }
    Ri.p32 = T22;
    function JA(t) {
      return ni(t, 2) ^ ni(t, 13) ^ ni(t, 22);
    }
    Ri.s0_256 = JA;
    function QA(t) {
      return ni(t, 6) ^ ni(t, 11) ^ ni(t, 25);
    }
    Ri.s1_256 = QA;
    function eR(t) {
      return ni(t, 7) ^ ni(t, 18) ^ t >>> 3;
    }
    Ri.g0_256 = eR;
    function tR(t) {
      return ni(t, 17) ^ ni(t, 19) ^ t >>> 10;
    }
    Ri.g1_256 = tR;
  });
  N22 = T9((Tk, L22) => {
    var kf = Cr(), rR = Tf(), iR = Cl(), Ol = kf.rotl32, Fa = kf.sum32, nR = kf.sum32_5, fR = iR.ft_1, k2 = rR.BlockHash, aR = [1518500249, 1859775393, 2400959708, 3395469782];
    function fi() {
      if (!(this instanceof fi))
        return new fi;
      k2.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
    }
    kf.inherits(fi, k2);
    L22.exports = fi;
    fi.blockSize = 512;
    fi.outSize = 160;
    fi.hmacStrength = 80;
    fi.padLength = 64;
    fi.prototype._update = function(e, r) {
      for (var o2 = this.W, f2 = 0;f2 < 16; f2++)
        o2[f2] = e[r + f2];
      for (;f2 < o2.length; f2++)
        o2[f2] = Ol(o2[f2 - 3] ^ o2[f2 - 8] ^ o2[f2 - 14] ^ o2[f2 - 16], 1);
      var p = this.h[0], m2 = this.h[1], y3 = this.h[2], M2 = this.h[3], x4 = this.h[4];
      for (f2 = 0;f2 < o2.length; f2++) {
        var S3 = ~~(f2 / 20), E3 = nR(Ol(p, 5), fR(S3, m2, y3, M2), x4, o2[f2], aR[S3]);
        x4 = M2, M2 = y3, y3 = Ol(m2, 30), m2 = p, p = E3;
      }
      this.h[0] = Fa(this.h[0], p), this.h[1] = Fa(this.h[1], m2), this.h[2] = Fa(this.h[2], y3), this.h[3] = Fa(this.h[3], M2), this.h[4] = Fa(this.h[4], x4);
    };
    fi.prototype._digest = function(e) {
      return e === "hex" ? kf.toHex32(this.h, "big") : kf.split32(this.h, "big");
    };
  });
  Fl = T9((kk, P22) => {
    var Lf = Cr(), oR = Tf(), Nf = Cl(), sR = ar(), Or = Lf.sum32, hR = Lf.sum32_4, uR = Lf.sum32_5, lR = Nf.ch32, dR = Nf.maj32, cR = Nf.s0_256, pR = Nf.s1_256, vR = Nf.g0_256, bR = Nf.g1_256, D22 = oR.BlockHash, mR = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    function ai() {
      if (!(this instanceof ai))
        return new ai;
      D22.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = mR, this.W = new Array(64);
    }
    Lf.inherits(ai, D22);
    P22.exports = ai;
    ai.blockSize = 512;
    ai.outSize = 256;
    ai.hmacStrength = 192;
    ai.padLength = 64;
    ai.prototype._update = function(e, r) {
      for (var o2 = this.W, f2 = 0;f2 < 16; f2++)
        o2[f2] = e[r + f2];
      for (;f2 < o2.length; f2++)
        o2[f2] = hR(bR(o2[f2 - 2]), o2[f2 - 7], vR(o2[f2 - 15]), o2[f2 - 16]);
      var p = this.h[0], m2 = this.h[1], y3 = this.h[2], M2 = this.h[3], x4 = this.h[4], S3 = this.h[5], E3 = this.h[6], B2 = this.h[7];
      for (sR(this.k.length === o2.length), f2 = 0;f2 < o2.length; f2++) {
        var q = uR(B2, pR(x4), lR(x4, S3, E3), this.k[f2], o2[f2]), L3 = Or(cR(p), dR(p, m2, y3));
        B2 = E3, E3 = S3, S3 = x4, x4 = Or(M2, q), M2 = y3, y3 = m2, m2 = p, p = Or(q, L3);
      }
      this.h[0] = Or(this.h[0], p), this.h[1] = Or(this.h[1], m2), this.h[2] = Or(this.h[2], y3), this.h[3] = Or(this.h[3], M2), this.h[4] = Or(this.h[4], x4), this.h[5] = Or(this.h[5], S3), this.h[6] = Or(this.h[6], E3), this.h[7] = Or(this.h[7], B2);
    };
    ai.prototype._digest = function(e) {
      return e === "hex" ? Lf.toHex32(this.h, "big") : Lf.split32(this.h, "big");
    };
  });
  F2 = T9((Lk, O22) => {
    var Ul = Cr(), C2 = Fl();
    function Bi() {
      if (!(this instanceof Bi))
        return new Bi;
      C2.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
    }
    Ul.inherits(Bi, C2);
    O22.exports = Bi;
    Bi.blockSize = 512;
    Bi.outSize = 224;
    Bi.hmacStrength = 192;
    Bi.padLength = 64;
    Bi.prototype._digest = function(e) {
      return e === "hex" ? Ul.toHex32(this.h.slice(0, 7), "big") : Ul.split32(this.h.slice(0, 7), "big");
    };
  });
  Wl = T9((Nk, W2) => {
    var ir = Cr(), gR = Tf(), yR = ar(), oi = ir.rotr64_hi, si = ir.rotr64_lo, U22 = ir.shr64_hi, z2 = ir.shr64_lo, Ji = ir.sum64, zl = ir.sum64_hi, Hl = ir.sum64_lo, wR = ir.sum64_4_hi, MR = ir.sum64_4_lo, _R = ir.sum64_5_hi, xR = ir.sum64_5_lo, H2 = gR.BlockHash, SR = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
    function Fr2() {
      if (!(this instanceof Fr2))
        return new Fr2;
      H2.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = SR, this.W = new Array(160);
    }
    ir.inherits(Fr2, H2);
    W2.exports = Fr2;
    Fr2.blockSize = 1024;
    Fr2.outSize = 512;
    Fr2.hmacStrength = 192;
    Fr2.padLength = 128;
    Fr2.prototype._prepareBlock = function(e, r) {
      for (var o2 = this.W, f2 = 0;f2 < 32; f2++)
        o2[f2] = e[r + f2];
      for (;f2 < o2.length; f2 += 2) {
        var p = DR(o2[f2 - 4], o2[f2 - 3]), m2 = PR(o2[f2 - 4], o2[f2 - 3]), y3 = o2[f2 - 14], M2 = o2[f2 - 13], x4 = LR(o2[f2 - 30], o2[f2 - 29]), S3 = NR(o2[f2 - 30], o2[f2 - 29]), E3 = o2[f2 - 32], B2 = o2[f2 - 31];
        o2[f2] = wR(p, m2, y3, M2, x4, S3, E3, B2), o2[f2 + 1] = MR(p, m2, y3, M2, x4, S3, E3, B2);
      }
    };
    Fr2.prototype._update = function(e, r) {
      this._prepareBlock(e, r);
      var o2 = this.W, f2 = this.h[0], p = this.h[1], m2 = this.h[2], y3 = this.h[3], M2 = this.h[4], x4 = this.h[5], S3 = this.h[6], E3 = this.h[7], B2 = this.h[8], q = this.h[9], L3 = this.h[10], ge = this.h[11], _e = this.h[12], N5 = this.h[13], we = this.h[14], ye = this.h[15];
      yR(this.k.length === o2.length);
      for (var xe = 0;xe < o2.length; xe += 2) {
        var Re = we, Ee = ye, Ae = TR(B2, q), P4 = kR(B2, q), Se = ER(B2, q, L3, ge, _e, N5), v3 = AR(B2, q, L3, ge, _e, N5), i = this.k[xe], a2 = this.k[xe + 1], h3 = o2[xe], s = o2[xe + 1], u2 = _R(Re, Ee, Ae, P4, Se, v3, i, a2, h3, s), c = xR(Re, Ee, Ae, P4, Se, v3, i, a2, h3, s);
        Re = qR(f2, p), Ee = IR(f2, p), Ae = RR(f2, p, m2, y3, M2, x4), P4 = BR(f2, p, m2, y3, M2, x4);
        var b4 = zl(Re, Ee, Ae, P4), l2 = Hl(Re, Ee, Ae, P4);
        we = _e, ye = N5, _e = L3, N5 = ge, L3 = B2, ge = q, B2 = zl(S3, E3, u2, c), q = Hl(E3, E3, u2, c), S3 = M2, E3 = x4, M2 = m2, x4 = y3, m2 = f2, y3 = p, f2 = zl(u2, c, b4, l2), p = Hl(u2, c, b4, l2);
      }
      Ji(this.h, 0, f2, p), Ji(this.h, 2, m2, y3), Ji(this.h, 4, M2, x4), Ji(this.h, 6, S3, E3), Ji(this.h, 8, B2, q), Ji(this.h, 10, L3, ge), Ji(this.h, 12, _e, N5), Ji(this.h, 14, we, ye);
    };
    Fr2.prototype._digest = function(e) {
      return e === "hex" ? ir.toHex32(this.h, "big") : ir.split32(this.h, "big");
    };
    function ER(t, e, r, o2, f2) {
      var p = t & r ^ ~t & f2;
      return p < 0 && (p += 4294967296), p;
    }
    function AR(t, e, r, o2, f2, p) {
      var m2 = e & o2 ^ ~e & p;
      return m2 < 0 && (m2 += 4294967296), m2;
    }
    function RR(t, e, r, o2, f2) {
      var p = t & r ^ t & f2 ^ r & f2;
      return p < 0 && (p += 4294967296), p;
    }
    function BR(t, e, r, o2, f2, p) {
      var m2 = e & o2 ^ e & p ^ o2 & p;
      return m2 < 0 && (m2 += 4294967296), m2;
    }
    function qR(t, e) {
      var r = oi(t, e, 28), o2 = oi(e, t, 2), f2 = oi(e, t, 7), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
    function IR(t, e) {
      var r = si(t, e, 28), o2 = si(e, t, 2), f2 = si(e, t, 7), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
    function TR(t, e) {
      var r = oi(t, e, 14), o2 = oi(t, e, 18), f2 = oi(e, t, 9), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
    function kR(t, e) {
      var r = si(t, e, 14), o2 = si(t, e, 18), f2 = si(e, t, 9), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
    function LR(t, e) {
      var r = oi(t, e, 1), o2 = oi(t, e, 8), f2 = U22(t, e, 7), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
    function NR(t, e) {
      var r = si(t, e, 1), o2 = si(t, e, 8), f2 = z2(t, e, 7), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
    function DR(t, e) {
      var r = oi(t, e, 19), o2 = oi(e, t, 29), f2 = U22(t, e, 6), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
    function PR(t, e) {
      var r = si(t, e, 19), o2 = si(e, t, 29), f2 = z2(t, e, 6), p = r ^ o2 ^ f2;
      return p < 0 && (p += 4294967296), p;
    }
  });
  Z2 = T9((Dk, j22) => {
    var Kl2 = Cr(), K22 = Wl();
    function qi() {
      if (!(this instanceof qi))
        return new qi;
      K22.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
    }
    Kl2.inherits(qi, K22);
    j22.exports = qi;
    qi.blockSize = 1024;
    qi.outSize = 384;
    qi.hmacStrength = 192;
    qi.padLength = 128;
    qi.prototype._digest = function(e) {
      return e === "hex" ? Kl2.toHex32(this.h.slice(0, 12), "big") : Kl2.split32(this.h.slice(0, 12), "big");
    };
  });
  V2 = T9((Df) => {
    Df.sha1 = N22();
    Df.sha224 = F2();
    Df.sha256 = Fl();
    Df.sha384 = Z2();
    Df.sha512 = Wl();
  });
  Q2 = T9((J2) => {
    var On = Cr(), CR = Tf(), Qs = On.rotl32, $22 = On.sum32, Ua = On.sum32_3, G2 = On.sum32_4, X2 = CR.BlockHash;
    function hi() {
      if (!(this instanceof hi))
        return new hi;
      X2.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
    }
    On.inherits(hi, X2);
    J2.ripemd160 = hi;
    hi.blockSize = 512;
    hi.outSize = 160;
    hi.hmacStrength = 192;
    hi.padLength = 64;
    hi.prototype._update = function(e, r) {
      for (var o2 = this.h[0], f2 = this.h[1], p = this.h[2], m2 = this.h[3], y3 = this.h[4], M2 = o2, x4 = f2, S3 = p, E3 = m2, B2 = y3, q = 0;q < 80; q++) {
        var L3 = $22(Qs(G2(o2, Y2(q, f2, p, m2), e[UR[q] + r], OR(q)), HR[q]), y3);
        o2 = y3, y3 = m2, m2 = Qs(p, 10), p = f2, f2 = L3, L3 = $22(Qs(G2(M2, Y2(79 - q, x4, S3, E3), e[zR[q] + r], FR(q)), WR[q]), B2), M2 = B2, B2 = E3, E3 = Qs(S3, 10), S3 = x4, x4 = L3;
      }
      L3 = Ua(this.h[1], p, E3), this.h[1] = Ua(this.h[2], m2, B2), this.h[2] = Ua(this.h[3], y3, M2), this.h[3] = Ua(this.h[4], o2, x4), this.h[4] = Ua(this.h[0], f2, S3), this.h[0] = L3;
    };
    hi.prototype._digest = function(e) {
      return e === "hex" ? On.toHex32(this.h, "little") : On.split32(this.h, "little");
    };
    function Y2(t, e, r, o2) {
      return t <= 15 ? e ^ r ^ o2 : t <= 31 ? e & r | ~e & o2 : t <= 47 ? (e | ~r) ^ o2 : t <= 63 ? e & o2 | r & ~o2 : e ^ (r | ~o2);
    }
    function OR(t) {
      return t <= 15 ? 0 : t <= 31 ? 1518500249 : t <= 47 ? 1859775393 : t <= 63 ? 2400959708 : 2840853838;
    }
    function FR(t) {
      return t <= 15 ? 1352829926 : t <= 31 ? 1548603684 : t <= 47 ? 1836072691 : t <= 63 ? 2053994217 : 0;
    }
    var UR = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], zR = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], HR = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], WR = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  });
  ty = T9((Ok, ey) => {
    var KR = Cr(), jR = ar();
    function Pf(t, e, r) {
      if (!(this instanceof Pf))
        return new Pf(t, e, r);
      this.Hash = t, this.blockSize = t.blockSize / 8, this.outSize = t.outSize / 8, this.inner = null, this.outer = null, this._init(KR.toArray(e, r));
    }
    ey.exports = Pf;
    Pf.prototype._init = function(e) {
      e.length > this.blockSize && (e = new this.Hash().update(e).digest()), jR(e.length <= this.blockSize);
      for (var r = e.length;r < this.blockSize; r++)
        e.push(0);
      for (r = 0;r < e.length; r++)
        e[r] ^= 54;
      for (this.inner = new this.Hash().update(e), r = 0;r < e.length; r++)
        e[r] ^= 106;
      this.outer = new this.Hash().update(e);
    };
    Pf.prototype.update = function(e, r) {
      return this.inner.update(e, r), this;
    };
    Pf.prototype.digest = function(e) {
      return this.outer.update(this.inner.digest()), this.outer.digest(e);
    };
  });
  e0 = T9((ry) => {
    var Kt = ry;
    Kt.utils = Cr();
    Kt.common = Tf();
    Kt.sha = V2();
    Kt.ripemd = Q2();
    Kt.hmac = ty();
    Kt.sha1 = Kt.sha.sha1;
    Kt.sha256 = Kt.sha.sha256;
    Kt.sha224 = Kt.sha.sha224;
    Kt.sha384 = Kt.sha.sha384;
    Kt.sha512 = Kt.sha.sha512;
    Kt.ripemd160 = Kt.ripemd.ripemd160;
  });
  ny = T9((Uk, iy) => {
    iy.exports = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
  });
  t0 = T9((oy) => {
    var Zl = oy, Qi = e0(), jl = Pl(), ZR = or(), fy = ZR.assert;
    function ay(t) {
      t.type === "short" ? this.curve = new jl.short(t) : t.type === "edwards" ? this.curve = new jl.edwards(t) : this.curve = new jl.mont(t), this.g = this.curve.g, this.n = this.curve.n, this.hash = t.hash, fy(this.g.validate(), "Invalid curve"), fy(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    Zl.PresetCurve = ay;
    function en(t, e) {
      Object.defineProperty(Zl, t, { configurable: true, enumerable: true, get: function() {
        var r = new ay(e);
        return Object.defineProperty(Zl, t, { configurable: true, enumerable: true, value: r }), r;
      } });
    }
    en("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: Qi.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] });
    en("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: Qi.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] });
    en("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: Qi.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] });
    en("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: Qi.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] });
    en("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: Qi.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] });
    en("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: Qi.sha256, gRed: false, g: ["9"] });
    en("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: Qi.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
    var Vl;
    try {
      Vl = ny();
    } catch {
      Vl = undefined;
    }
    en("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: Qi.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", Vl] });
  });
  uy = T9((Hk, hy) => {
    var VR = e0(), Fn = Nl(), sy = ar();
    function tn(t) {
      if (!(this instanceof tn))
        return new tn(t);
      this.hash = t.hash, this.predResist = !!t.predResist, this.outLen = this.hash.outSize, this.minEntropy = t.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
      var e = Fn.toArray(t.entropy, t.entropyEnc || "hex"), r = Fn.toArray(t.nonce, t.nonceEnc || "hex"), o2 = Fn.toArray(t.pers, t.persEnc || "hex");
      sy(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e, r, o2);
    }
    hy.exports = tn;
    tn.prototype._init = function(e, r, o2) {
      var f2 = e.concat(r).concat(o2);
      this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
      for (var p = 0;p < this.V.length; p++)
        this.K[p] = 0, this.V[p] = 1;
      this._update(f2), this._reseed = 1, this.reseedInterval = 281474976710656;
    };
    tn.prototype._hmac = function() {
      return new VR.hmac(this.hash, this.K);
    };
    tn.prototype._update = function(e) {
      var r = this._hmac().update(this.V).update([0]);
      e && (r = r.update(e)), this.K = r.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
    };
    tn.prototype.reseed = function(e, r, o2, f2) {
      typeof r != "string" && (f2 = o2, o2 = r, r = null), e = Fn.toArray(e, r), o2 = Fn.toArray(o2, f2), sy(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e.concat(o2 || [])), this._reseed = 1;
    };
    tn.prototype.generate = function(e, r, o2, f2) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      typeof r != "string" && (f2 = o2, o2 = r, r = null), o2 && (o2 = Fn.toArray(o2, f2 || "hex"), this._update(o2));
      for (var p = [];p.length < e; )
        this.V = this._hmac().update(this.V).digest(), p = p.concat(this.V);
      var m2 = p.slice(0, e);
      return this._update(o2), this._reseed++, Fn.encode(m2, r);
    };
  });
  dy = T9((Wk, ly) => {
    var $R = ri(), GR = or(), $l = GR.assert;
    function Gt(t, e) {
      this.ec = t, this.priv = null, this.pub = null, e.priv && this._importPrivate(e.priv, e.privEnc), e.pub && this._importPublic(e.pub, e.pubEnc);
    }
    ly.exports = Gt;
    Gt.fromPublic = function(e, r, o2) {
      return r instanceof Gt ? r : new Gt(e, { pub: r, pubEnc: o2 });
    };
    Gt.fromPrivate = function(e, r, o2) {
      return r instanceof Gt ? r : new Gt(e, { priv: r, privEnc: o2 });
    };
    Gt.prototype.validate = function() {
      var e = this.getPublic();
      return e.isInfinity() ? { result: false, reason: "Invalid public key" } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
    };
    Gt.prototype.getPublic = function(e, r) {
      return typeof e == "string" && (r = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), r ? this.pub.encode(r, e) : this.pub;
    };
    Gt.prototype.getPrivate = function(e) {
      return e === "hex" ? this.priv.toString(16, 2) : this.priv;
    };
    Gt.prototype._importPrivate = function(e, r) {
      this.priv = new $R(e, r || 16), this.priv = this.priv.umod(this.ec.curve.n);
    };
    Gt.prototype._importPublic = function(e, r) {
      if (e.x || e.y) {
        this.ec.curve.type === "mont" ? $l(e.x, "Need x coordinate") : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && $l(e.x && e.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(e.x, e.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(e, r);
    };
    Gt.prototype.derive = function(e) {
      return e.validate() || $l(e.validate(), "public point not validated"), e.mul(this.priv).getX();
    };
    Gt.prototype.sign = function(e, r, o2) {
      return this.ec.sign(e, this, r, o2);
    };
    Gt.prototype.verify = function(e, r) {
      return this.ec.verify(e, r, this);
    };
    Gt.prototype.inspect = function() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  });
  vy = T9((Kk, py) => {
    var r0 = ri(), Xl = or(), YR = Xl.assert;
    function i0(t, e) {
      if (t instanceof i0)
        return t;
      this._importDER(t, e) || (YR(t.r && t.s, "Signature without r or s"), this.r = new r0(t.r, 16), this.s = new r0(t.s, 16), t.recoveryParam === undefined ? this.recoveryParam = null : this.recoveryParam = t.recoveryParam);
    }
    py.exports = i0;
    function XR() {
      this.place = 0;
    }
    function Gl(t, e) {
      var r = t[e.place++];
      if (!(r & 128))
        return r;
      var o2 = r & 15;
      if (o2 === 0 || o2 > 4)
        return false;
      for (var f2 = 0, p = 0, m2 = e.place;p < o2; p++, m2++)
        f2 <<= 8, f2 |= t[m2], f2 >>>= 0;
      return f2 <= 127 ? false : (e.place = m2, f2);
    }
    function cy(t) {
      for (var e = 0, r = t.length - 1;!t[e] && !(t[e + 1] & 128) && e < r; )
        e++;
      return e === 0 ? t : t.slice(e);
    }
    i0.prototype._importDER = function(e, r) {
      e = Xl.toArray(e, r);
      var o2 = new XR;
      if (e[o2.place++] !== 48)
        return false;
      var f2 = Gl(e, o2);
      if (f2 === false || f2 + o2.place !== e.length || e[o2.place++] !== 2)
        return false;
      var p = Gl(e, o2);
      if (p === false)
        return false;
      var m2 = e.slice(o2.place, p + o2.place);
      if (o2.place += p, e[o2.place++] !== 2)
        return false;
      var y3 = Gl(e, o2);
      if (y3 === false || e.length !== y3 + o2.place)
        return false;
      var M2 = e.slice(o2.place, y3 + o2.place);
      if (m2[0] === 0)
        if (m2[1] & 128)
          m2 = m2.slice(1);
        else
          return false;
      if (M2[0] === 0)
        if (M2[1] & 128)
          M2 = M2.slice(1);
        else
          return false;
      return this.r = new r0(m2), this.s = new r0(M2), this.recoveryParam = null, true;
    };
    function Yl(t, e) {
      if (e < 128) {
        t.push(e);
        return;
      }
      var r = 1 + (Math.log(e) / Math.LN2 >>> 3);
      for (t.push(r | 128);--r; )
        t.push(e >>> (r << 3) & 255);
      t.push(e);
    }
    i0.prototype.toDER = function(e) {
      var r = this.r.toArray(), o2 = this.s.toArray();
      for (r[0] & 128 && (r = [0].concat(r)), o2[0] & 128 && (o2 = [0].concat(o2)), r = cy(r), o2 = cy(o2);!o2[0] && !(o2[1] & 128); )
        o2 = o2.slice(1);
      var f2 = [2];
      Yl(f2, r.length), f2 = f2.concat(r), f2.push(2), Yl(f2, o2.length);
      var p = f2.concat(o2), m2 = [48];
      return Yl(m2, p.length), m2 = m2.concat(p), Xl.encode(m2, e);
    };
  });
  yy = T9((jk, gy) => {
    var Un = ri(), by = uy(), JR = or(), Jl = t0(), QR = As(), my = JR.assert, Ql = dy(), n0 = vy();
    function Sr(t) {
      if (!(this instanceof Sr))
        return new Sr(t);
      typeof t == "string" && (my(Object.prototype.hasOwnProperty.call(Jl, t), "Unknown curve " + t), t = Jl[t]), t instanceof Jl.PresetCurve && (t = { curve: t }), this.curve = t.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t.curve.g, this.g.precompute(t.curve.n.bitLength() + 1), this.hash = t.hash || t.curve.hash;
    }
    gy.exports = Sr;
    Sr.prototype.keyPair = function(e) {
      return new Ql(this, e);
    };
    Sr.prototype.keyFromPrivate = function(e, r) {
      return Ql.fromPrivate(this, e, r);
    };
    Sr.prototype.keyFromPublic = function(e, r) {
      return Ql.fromPublic(this, e, r);
    };
    Sr.prototype.genKeyPair = function(e) {
      e || (e = {});
      for (var r = new by({ hash: this.hash, pers: e.pers, persEnc: e.persEnc || "utf8", entropy: e.entropy || QR(this.hash.hmacStrength), entropyEnc: e.entropy && e.entropyEnc || "utf8", nonce: this.n.toArray() }), o2 = this.n.byteLength(), f2 = this.n.sub(new Un(2));; ) {
        var p = new Un(r.generate(o2));
        if (!(p.cmp(f2) > 0))
          return p.iaddn(1), this.keyFromPrivate(p);
      }
    };
    Sr.prototype._truncateToN = function(e, r) {
      var o2 = e.byteLength() * 8 - this.n.bitLength();
      return o2 > 0 && (e = e.ushrn(o2)), !r && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
    };
    Sr.prototype.sign = function(e, r, o2, f2) {
      typeof o2 == "object" && (f2 = o2, o2 = null), f2 || (f2 = {}), r = this.keyFromPrivate(r, o2), e = this._truncateToN(new Un(e, 16));
      for (var p = this.n.byteLength(), m2 = r.getPrivate().toArray("be", p), y3 = e.toArray("be", p), M2 = new by({ hash: this.hash, entropy: m2, nonce: y3, pers: f2.pers, persEnc: f2.persEnc || "utf8" }), x4 = this.n.sub(new Un(1)), S3 = 0;; S3++) {
        var E3 = f2.k ? f2.k(S3) : new Un(M2.generate(this.n.byteLength()));
        if (E3 = this._truncateToN(E3, true), !(E3.cmpn(1) <= 0 || E3.cmp(x4) >= 0)) {
          var B2 = this.g.mul(E3);
          if (!B2.isInfinity()) {
            var q = B2.getX(), L3 = q.umod(this.n);
            if (L3.cmpn(0) !== 0) {
              var ge = E3.invm(this.n).mul(L3.mul(r.getPrivate()).iadd(e));
              if (ge = ge.umod(this.n), ge.cmpn(0) !== 0) {
                var _e = (B2.getY().isOdd() ? 1 : 0) | (q.cmp(L3) !== 0 ? 2 : 0);
                return f2.canonical && ge.cmp(this.nh) > 0 && (ge = this.n.sub(ge), _e ^= 1), new n0({ r: L3, s: ge, recoveryParam: _e });
              }
            }
          }
        }
      }
    };
    Sr.prototype.verify = function(e, r, o2, f2) {
      e = this._truncateToN(new Un(e, 16)), o2 = this.keyFromPublic(o2, f2), r = new n0(r, "hex");
      var { r: p, s: m2 } = r;
      if (p.cmpn(1) < 0 || p.cmp(this.n) >= 0 || m2.cmpn(1) < 0 || m2.cmp(this.n) >= 0)
        return false;
      var y3 = m2.invm(this.n), M2 = y3.mul(e).umod(this.n), x4 = y3.mul(p).umod(this.n), S3;
      return this.curve._maxwellTrick ? (S3 = this.g.jmulAdd(M2, o2.getPublic(), x4), S3.isInfinity() ? false : S3.eqXToP(p)) : (S3 = this.g.mulAdd(M2, o2.getPublic(), x4), S3.isInfinity() ? false : S3.getX().umod(this.n).cmp(p) === 0);
    };
    Sr.prototype.recoverPubKey = function(t, e, r, o2) {
      my((3 & r) === r, "The recovery param is more than two bits"), e = new n0(e, o2);
      var f2 = this.n, p = new Un(t), m2 = e.r, y3 = e.s, M2 = r & 1, x4 = r >> 1;
      if (m2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && x4)
        throw new Error("Unable to find sencond key candinate");
      x4 ? m2 = this.curve.pointFromX(m2.add(this.curve.n), M2) : m2 = this.curve.pointFromX(m2, M2);
      var S3 = e.r.invm(f2), E3 = f2.sub(p).mul(S3).umod(f2), B2 = y3.mul(S3).umod(f2);
      return this.g.mulAdd(E3, m2, B2);
    };
    Sr.prototype.getKeyRecoveryParam = function(t, e, r, o2) {
      if (e = new n0(e, o2), e.recoveryParam !== null)
        return e.recoveryParam;
      for (var f2 = 0;f2 < 4; f2++) {
        var p;
        try {
          p = this.recoverPubKey(t, e, f2);
        } catch {
          continue;
        }
        if (p.eq(r))
          return f2;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  });
  xy = T9((Zk, _y) => {
    var za = or(), My = za.assert, wy = za.parseBytes, Cf = za.cachedProperty;
    function Ft(t, e) {
      this.eddsa = t, this._secret = wy(e.secret), t.isPoint(e.pub) ? this._pub = e.pub : this._pubBytes = wy(e.pub);
    }
    Ft.fromPublic = function(e, r) {
      return r instanceof Ft ? r : new Ft(e, { pub: r });
    };
    Ft.fromSecret = function(e, r) {
      return r instanceof Ft ? r : new Ft(e, { secret: r });
    };
    Ft.prototype.secret = function() {
      return this._secret;
    };
    Cf(Ft, "pubBytes", function() {
      return this.eddsa.encodePoint(this.pub());
    });
    Cf(Ft, "pub", function() {
      return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
    });
    Cf(Ft, "privBytes", function() {
      var e = this.eddsa, r = this.hash(), o2 = e.encodingLength - 1, f2 = r.slice(0, e.encodingLength);
      return f2[0] &= 248, f2[o2] &= 127, f2[o2] |= 64, f2;
    });
    Cf(Ft, "priv", function() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    Cf(Ft, "hash", function() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    Cf(Ft, "messagePrefix", function() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    Ft.prototype.sign = function(e) {
      return My(this._secret, "KeyPair can only verify"), this.eddsa.sign(e, this);
    };
    Ft.prototype.verify = function(e, r) {
      return this.eddsa.verify(e, r, this);
    };
    Ft.prototype.getSecret = function(e) {
      return My(this._secret, "KeyPair is public only"), za.encode(this.secret(), e);
    };
    Ft.prototype.getPublic = function(e) {
      return za.encode(this.pubBytes(), e);
    };
    _y.exports = Ft;
  });
  Ey = T9((Vk, Sy) => {
    var eB = ri(), f0 = or(), tB = f0.assert, a0 = f0.cachedProperty, rB = f0.parseBytes;
    function zn(t, e) {
      this.eddsa = t, typeof e != "object" && (e = rB(e)), Array.isArray(e) && (e = { R: e.slice(0, t.encodingLength), S: e.slice(t.encodingLength) }), tB(e.R && e.S, "Signature without R or S"), t.isPoint(e.R) && (this._R = e.R), e.S instanceof eB && (this._S = e.S), this._Rencoded = Array.isArray(e.R) ? e.R : e.Rencoded, this._Sencoded = Array.isArray(e.S) ? e.S : e.Sencoded;
    }
    a0(zn, "S", function() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    a0(zn, "R", function() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    a0(zn, "Rencoded", function() {
      return this.eddsa.encodePoint(this.R());
    });
    a0(zn, "Sencoded", function() {
      return this.eddsa.encodeInt(this.S());
    });
    zn.prototype.toBytes = function() {
      return this.Rencoded().concat(this.Sencoded());
    };
    zn.prototype.toHex = function() {
      return f0.encode(this.toBytes(), "hex").toUpperCase();
    };
    Sy.exports = zn;
  });
  Iy = T9(($k, qy) => {
    var iB = e0(), nB = t0(), Of = or(), fB = Of.assert, Ry = Of.parseBytes, By = xy(), Ay = Ey();
    function nr(t) {
      if (fB(t === "ed25519", "only tested with ed25519 so far"), !(this instanceof nr))
        return new nr(t);
      t = nB[t].curve, this.curve = t, this.g = t.g, this.g.precompute(t.n.bitLength() + 1), this.pointClass = t.point().constructor, this.encodingLength = Math.ceil(t.n.bitLength() / 8), this.hash = iB.sha512;
    }
    qy.exports = nr;
    nr.prototype.sign = function(e, r) {
      e = Ry(e);
      var o2 = this.keyFromSecret(r), f2 = this.hashInt(o2.messagePrefix(), e), p = this.g.mul(f2), m2 = this.encodePoint(p), y3 = this.hashInt(m2, o2.pubBytes(), e).mul(o2.priv()), M2 = f2.add(y3).umod(this.curve.n);
      return this.makeSignature({ R: p, S: M2, Rencoded: m2 });
    };
    nr.prototype.verify = function(e, r, o2) {
      e = Ry(e), r = this.makeSignature(r);
      var f2 = this.keyFromPublic(o2), p = this.hashInt(r.Rencoded(), f2.pubBytes(), e), m2 = this.g.mul(r.S()), y3 = r.R().add(f2.pub().mul(p));
      return y3.eq(m2);
    };
    nr.prototype.hashInt = function() {
      for (var e = this.hash(), r = 0;r < arguments.length; r++)
        e.update(arguments[r]);
      return Of.intFromLE(e.digest()).umod(this.curve.n);
    };
    nr.prototype.keyFromPublic = function(e) {
      return By.fromPublic(this, e);
    };
    nr.prototype.keyFromSecret = function(e) {
      return By.fromSecret(this, e);
    };
    nr.prototype.makeSignature = function(e) {
      return e instanceof Ay ? e : new Ay(this, e);
    };
    nr.prototype.encodePoint = function(e) {
      var r = e.getY().toArray("le", this.encodingLength);
      return r[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0, r;
    };
    nr.prototype.decodePoint = function(e) {
      e = Of.parseBytes(e);
      var r = e.length - 1, o2 = e.slice(0, r).concat(e[r] & -129), f2 = (e[r] & 128) !== 0, p = Of.intFromLE(o2);
      return this.curve.pointFromY(p, f2);
    };
    nr.prototype.encodeInt = function(e) {
      return e.toArray("le", this.encodingLength);
    };
    nr.prototype.decodeInt = function(e) {
      return Of.intFromLE(e);
    };
    nr.prototype.isPoint = function(e) {
      return e instanceof this.pointClass;
    };
  });
  o0 = T9((Ty) => {
    var Hn = Ty;
    Hn.version = s2().version;
    Hn.utils = or();
    Hn.rand = As();
    Hn.curve = Pl();
    Hn.curves = t0();
    Hn.ec = yy();
    Hn.eddsa = Iy();
  });
  td = T9((ky, ed) => {
    (function(t, e) {
      function r(v3, i) {
        if (!v3)
          throw new Error(i || "Assertion failed");
      }
      function o2(v3, i) {
        v3.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v3.prototype = new a2, v3.prototype.constructor = v3;
      }
      function f2(v3, i, a2) {
        if (f2.isBN(v3))
          return v3;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v3 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v3 || 0, i || 10, a2 || "be"));
      }
      typeof t == "object" ? t.exports = f2 : e.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p = window.Buffer : p = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s = 0;
        i[0] === "-" && (s++, this.negative = 1), s < i.length && (a2 === 16 ? this._parseHex(i, s, h3) : (this._parseBase(i, a2, s), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2, c, b4 = 0;
        if (h3 === "be")
          for (s = i.length - 1, u2 = 0;s >= 0; s -= 3)
            c = i[s] | i[s - 1] << 8 | i[s - 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        else if (h3 === "le")
          for (s = 0, u2 = 0;s < i.length; s += 3)
            c = i[s] | i[s + 1] << 8 | i[s + 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        return this.strip();
      };
      function m2(v3, i) {
        var a2 = v3.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v3, i, a2) {
        var h3 = m2(v3, a2);
        return a2 - 1 >= i && (h3 |= m2(v3, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2 = 0, c = 0, b4;
        if (h3 === "be")
          for (s = i.length - 1;s >= a2; s -= 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        else {
          var l2 = i.length - a2;
          for (s = l2 % 2 === 0 ? a2 + 1 : a2;s < i.length; s += 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        }
        this.strip();
      };
      function M2(v3, i, a2, h3) {
        for (var s = 0, u2 = Math.min(v3.length, a2), c = i;c < u2; c++) {
          var b4 = v3.charCodeAt(c) - 48;
          s *= h3, b4 >= 49 ? s += b4 - 49 + 10 : b4 >= 17 ? s += b4 - 17 + 10 : s += b4;
        }
        return s;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s = 0, u2 = 1;u2 <= 67108863; u2 *= a2)
          s++;
        s--, u2 = u2 / a2 | 0;
        for (var c = i.length - h3, b4 = c % s, l2 = Math.min(c, c - b4) + h3, n2 = 0, d2 = h3;d2 < l2; d2 += s)
          n2 = M2(i, d2, d2 + s, a2), this.imuln(u2), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        if (b4 !== 0) {
          var w3 = 1;
          for (n2 = M2(i, d2, i.length, a2), d2 = 0;d2 < b4; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s = 0, u2 = 0, c = 0;c < this.length; c++) {
            var b4 = this.words[c], l2 = ((b4 << s | u2) & 16777215).toString(16);
            u2 = b4 >>> 24 - s & 16777215, u2 !== 0 || c !== this.length - 1 ? h3 = x4[6 - l2.length] + l2 + h3 : h3 = l2 + h3, s += 2, s >= 26 && (s -= 26, c--);
          }
          for (u2 !== 0 && (h3 = u2.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n2 = S3[i], d2 = E3[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g3 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g3 + h3 : h3 = x4[n2 - g3.length] + g3 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r(typeof p < "u"), this.toArrayLike(p, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s = this.byteLength(), u2 = h3 || Math.max(1, s);
        r(s <= u2, "byte array longer than desired length"), r(u2 > 0, "Requested array length <= 0"), this.strip();
        var c = a2 === "le", b4 = new i(u2), l2, n2, d2 = this.clone();
        if (c) {
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[n2] = l2;
          for (;n2 < u2; n2++)
            b4[n2] = 0;
        } else {
          for (n2 = 0;n2 < u2 - s; n2++)
            b4[n2] = 0;
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[u2 - n2 - 1] = l2;
        }
        return b4;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B2(v3) {
        for (var i = new Array(v3.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s = a2 % 26;
          i[a2] = (v3.words[h3] & 1 << s) >>> s;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s = 0;s < h3.length; s++)
          this.words[s] = a2.words[s] ^ h3.words[s];
        if (this !== a2)
          for (;s < a2.length; s++)
            this.words[s] = a2.words[s];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s = 0;s < a2; s++)
          this.words[s] = ~this.words[s] & 67108863;
        return h3 > 0 && (this.words[s] = ~this.words[s] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s : this.words[h3] = this.words[h3] & ~(1 << s), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s;
        this.length > i.length ? (h3 = this, s = i) : (h3 = i, s = this);
        for (var u2 = 0, c = 0;c < s.length; c++)
          a2 = (h3.words[c] | 0) + (s.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        for (;u2 !== 0 && c < h3.length; c++)
          a2 = (h3.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        if (this.length = h3.length, u2 !== 0)
          this.words[this.length] = u2, this.length++;
        else if (h3 !== this)
          for (;c < h3.length; c++)
            this.words[c] = h3.words[c];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s, u2;
        h3 > 0 ? (s = this, u2 = i) : (s = i, u2 = this);
        for (var c = 0, b4 = 0;b4 < u2.length; b4++)
          a2 = (s.words[b4] | 0) - (u2.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        for (;c !== 0 && b4 < s.length; b4++)
          a2 = (s.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        if (c === 0 && b4 < s.length && s !== this)
          for (;b4 < s.length; b4++)
            this.words[b4] = s.words[b4];
        return this.length = Math.max(this.length, b4), s !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative;
        var h3 = v3.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s = v3.words[0] | 0, u2 = i.words[0] | 0, c = s * u2, b4 = c & 67108863, l2 = c / 67108864 | 0;
        a2.words[0] = b4;
        for (var n2 = 1;n2 < h3; n2++) {
          for (var d2 = l2 >>> 26, w3 = l2 & 67108863, g3 = Math.min(n2, i.length - 1), _3 = Math.max(0, n2 - v3.length + 1);_3 <= g3; _3++) {
            var A2 = n2 - _3 | 0;
            s = v3.words[A2] | 0, u2 = i.words[_3] | 0, c = s * u2 + w3, d2 += c / 67108864 | 0, w3 = c & 67108863;
          }
          a2.words[n2] = w3 | 0, l2 = d2 | 0;
        }
        return l2 !== 0 ? a2.words[n2] = l2 | 0 : a2.length--, a2.strip();
      }
      var L3 = function(i, a2, h3) {
        var s = i.words, u2 = a2.words, c = h3.words, b4 = 0, l2, n2, d2, w3 = s[0] | 0, g3 = w3 & 8191, _3 = w3 >>> 13, A2 = s[1] | 0, R3 = A2 & 8191, I2 = A2 >>> 13, Me = s[2] | 0, k2 = Me & 8191, D3 = Me >>> 13, nt2 = s[3] | 0, C2 = nt2 & 8191, O3 = nt2 >>> 13, vt = s[4] | 0, F = vt & 8191, U5 = vt >>> 13, bt = s[5] | 0, z = bt & 8191, H2 = bt >>> 13, mt = s[6] | 0, W = mt & 8191, K3 = mt >>> 13, gt = s[7] | 0, j3 = gt & 8191, Z3 = gt >>> 13, yt = s[8] | 0, V3 = yt & 8191, $3 = yt >>> 13, wt = s[9] | 0, G2 = wt & 8191, Y2 = wt >>> 13, Mt = u2[0] | 0, X2 = Mt & 8191, J2 = Mt >>> 13, _t = u2[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u2[2] | 0, te = xt & 8191, re = xt >>> 13, St = u2[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u2[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u2[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u2[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u2[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u2[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u2[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l2 = Math.imul(g3, X2), n2 = Math.imul(g3, J2), n2 = n2 + Math.imul(_3, X2) | 0, d2 = Math.imul(_3, J2);
        var ft2 = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ft2 >>> 26) | 0, ft2 &= 67108863, l2 = Math.imul(R3, X2), n2 = Math.imul(R3, J2), n2 = n2 + Math.imul(I2, X2) | 0, d2 = Math.imul(I2, J2), l2 = l2 + Math.imul(g3, Q3) | 0, n2 = n2 + Math.imul(g3, ee) | 0, n2 = n2 + Math.imul(_3, Q3) | 0, d2 = d2 + Math.imul(_3, ee) | 0;
        var Be = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l2 = Math.imul(k2, X2), n2 = Math.imul(k2, J2), n2 = n2 + Math.imul(D3, X2) | 0, d2 = Math.imul(D3, J2), l2 = l2 + Math.imul(R3, Q3) | 0, n2 = n2 + Math.imul(R3, ee) | 0, n2 = n2 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l2 = l2 + Math.imul(g3, te) | 0, n2 = n2 + Math.imul(g3, re) | 0, n2 = n2 + Math.imul(_3, te) | 0, d2 = d2 + Math.imul(_3, re) | 0;
        var qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l2 = Math.imul(C2, X2), n2 = Math.imul(C2, J2), n2 = n2 + Math.imul(O3, X2) | 0, d2 = Math.imul(O3, J2), l2 = l2 + Math.imul(k2, Q3) | 0, n2 = n2 + Math.imul(k2, ee) | 0, n2 = n2 + Math.imul(D3, Q3) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l2 = l2 + Math.imul(R3, te) | 0, n2 = n2 + Math.imul(R3, re) | 0, n2 = n2 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l2 = l2 + Math.imul(g3, ie) | 0, n2 = n2 + Math.imul(g3, ne) | 0, n2 = n2 + Math.imul(_3, ie) | 0, d2 = d2 + Math.imul(_3, ne) | 0;
        var ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l2 = Math.imul(F, X2), n2 = Math.imul(F, J2), n2 = n2 + Math.imul(U5, X2) | 0, d2 = Math.imul(U5, J2), l2 = l2 + Math.imul(C2, Q3) | 0, n2 = n2 + Math.imul(C2, ee) | 0, n2 = n2 + Math.imul(O3, Q3) | 0, d2 = d2 + Math.imul(O3, ee) | 0, l2 = l2 + Math.imul(k2, te) | 0, n2 = n2 + Math.imul(k2, re) | 0, n2 = n2 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l2 = l2 + Math.imul(R3, ie) | 0, n2 = n2 + Math.imul(R3, ne) | 0, n2 = n2 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l2 = l2 + Math.imul(g3, fe) | 0, n2 = n2 + Math.imul(g3, ae) | 0, n2 = n2 + Math.imul(_3, fe) | 0, d2 = d2 + Math.imul(_3, ae) | 0;
        var He = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l2 = Math.imul(z, X2), n2 = Math.imul(z, J2), n2 = n2 + Math.imul(H2, X2) | 0, d2 = Math.imul(H2, J2), l2 = l2 + Math.imul(F, Q3) | 0, n2 = n2 + Math.imul(F, ee) | 0, n2 = n2 + Math.imul(U5, Q3) | 0, d2 = d2 + Math.imul(U5, ee) | 0, l2 = l2 + Math.imul(C2, te) | 0, n2 = n2 + Math.imul(C2, re) | 0, n2 = n2 + Math.imul(O3, te) | 0, d2 = d2 + Math.imul(O3, re) | 0, l2 = l2 + Math.imul(k2, ie) | 0, n2 = n2 + Math.imul(k2, ne) | 0, n2 = n2 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l2 = l2 + Math.imul(R3, fe) | 0, n2 = n2 + Math.imul(R3, ae) | 0, n2 = n2 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l2 = l2 + Math.imul(g3, oe) | 0, n2 = n2 + Math.imul(g3, se) | 0, n2 = n2 + Math.imul(_3, oe) | 0, d2 = d2 + Math.imul(_3, se) | 0;
        var We = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l2 = Math.imul(W, X2), n2 = Math.imul(W, J2), n2 = n2 + Math.imul(K3, X2) | 0, d2 = Math.imul(K3, J2), l2 = l2 + Math.imul(z, Q3) | 0, n2 = n2 + Math.imul(z, ee) | 0, n2 = n2 + Math.imul(H2, Q3) | 0, d2 = d2 + Math.imul(H2, ee) | 0, l2 = l2 + Math.imul(F, te) | 0, n2 = n2 + Math.imul(F, re) | 0, n2 = n2 + Math.imul(U5, te) | 0, d2 = d2 + Math.imul(U5, re) | 0, l2 = l2 + Math.imul(C2, ie) | 0, n2 = n2 + Math.imul(C2, ne) | 0, n2 = n2 + Math.imul(O3, ie) | 0, d2 = d2 + Math.imul(O3, ne) | 0, l2 = l2 + Math.imul(k2, fe) | 0, n2 = n2 + Math.imul(k2, ae) | 0, n2 = n2 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l2 = l2 + Math.imul(R3, oe) | 0, n2 = n2 + Math.imul(R3, se) | 0, n2 = n2 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l2 = l2 + Math.imul(g3, he) | 0, n2 = n2 + Math.imul(g3, ue) | 0, n2 = n2 + Math.imul(_3, he) | 0, d2 = d2 + Math.imul(_3, ue) | 0;
        var Ke = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l2 = Math.imul(j3, X2), n2 = Math.imul(j3, J2), n2 = n2 + Math.imul(Z3, X2) | 0, d2 = Math.imul(Z3, J2), l2 = l2 + Math.imul(W, Q3) | 0, n2 = n2 + Math.imul(W, ee) | 0, n2 = n2 + Math.imul(K3, Q3) | 0, d2 = d2 + Math.imul(K3, ee) | 0, l2 = l2 + Math.imul(z, te) | 0, n2 = n2 + Math.imul(z, re) | 0, n2 = n2 + Math.imul(H2, te) | 0, d2 = d2 + Math.imul(H2, re) | 0, l2 = l2 + Math.imul(F, ie) | 0, n2 = n2 + Math.imul(F, ne) | 0, n2 = n2 + Math.imul(U5, ie) | 0, d2 = d2 + Math.imul(U5, ne) | 0, l2 = l2 + Math.imul(C2, fe) | 0, n2 = n2 + Math.imul(C2, ae) | 0, n2 = n2 + Math.imul(O3, fe) | 0, d2 = d2 + Math.imul(O3, ae) | 0, l2 = l2 + Math.imul(k2, oe) | 0, n2 = n2 + Math.imul(k2, se) | 0, n2 = n2 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l2 = l2 + Math.imul(R3, he) | 0, n2 = n2 + Math.imul(R3, ue) | 0, n2 = n2 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l2 = l2 + Math.imul(g3, le) | 0, n2 = n2 + Math.imul(g3, de) | 0, n2 = n2 + Math.imul(_3, le) | 0, d2 = d2 + Math.imul(_3, de) | 0;
        var je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l2 = Math.imul(V3, X2), n2 = Math.imul(V3, J2), n2 = n2 + Math.imul($3, X2) | 0, d2 = Math.imul($3, J2), l2 = l2 + Math.imul(j3, Q3) | 0, n2 = n2 + Math.imul(j3, ee) | 0, n2 = n2 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l2 = l2 + Math.imul(W, te) | 0, n2 = n2 + Math.imul(W, re) | 0, n2 = n2 + Math.imul(K3, te) | 0, d2 = d2 + Math.imul(K3, re) | 0, l2 = l2 + Math.imul(z, ie) | 0, n2 = n2 + Math.imul(z, ne) | 0, n2 = n2 + Math.imul(H2, ie) | 0, d2 = d2 + Math.imul(H2, ne) | 0, l2 = l2 + Math.imul(F, fe) | 0, n2 = n2 + Math.imul(F, ae) | 0, n2 = n2 + Math.imul(U5, fe) | 0, d2 = d2 + Math.imul(U5, ae) | 0, l2 = l2 + Math.imul(C2, oe) | 0, n2 = n2 + Math.imul(C2, se) | 0, n2 = n2 + Math.imul(O3, oe) | 0, d2 = d2 + Math.imul(O3, se) | 0, l2 = l2 + Math.imul(k2, he) | 0, n2 = n2 + Math.imul(k2, ue) | 0, n2 = n2 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l2 = l2 + Math.imul(R3, le) | 0, n2 = n2 + Math.imul(R3, de) | 0, n2 = n2 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l2 = l2 + Math.imul(g3, ce) | 0, n2 = n2 + Math.imul(g3, pe) | 0, n2 = n2 + Math.imul(_3, ce) | 0, d2 = d2 + Math.imul(_3, pe) | 0;
        var Ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l2 = Math.imul(G2, X2), n2 = Math.imul(G2, J2), n2 = n2 + Math.imul(Y2, X2) | 0, d2 = Math.imul(Y2, J2), l2 = l2 + Math.imul(V3, Q3) | 0, n2 = n2 + Math.imul(V3, ee) | 0, n2 = n2 + Math.imul($3, Q3) | 0, d2 = d2 + Math.imul($3, ee) | 0, l2 = l2 + Math.imul(j3, te) | 0, n2 = n2 + Math.imul(j3, re) | 0, n2 = n2 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l2 = l2 + Math.imul(W, ie) | 0, n2 = n2 + Math.imul(W, ne) | 0, n2 = n2 + Math.imul(K3, ie) | 0, d2 = d2 + Math.imul(K3, ne) | 0, l2 = l2 + Math.imul(z, fe) | 0, n2 = n2 + Math.imul(z, ae) | 0, n2 = n2 + Math.imul(H2, fe) | 0, d2 = d2 + Math.imul(H2, ae) | 0, l2 = l2 + Math.imul(F, oe) | 0, n2 = n2 + Math.imul(F, se) | 0, n2 = n2 + Math.imul(U5, oe) | 0, d2 = d2 + Math.imul(U5, se) | 0, l2 = l2 + Math.imul(C2, he) | 0, n2 = n2 + Math.imul(C2, ue) | 0, n2 = n2 + Math.imul(O3, he) | 0, d2 = d2 + Math.imul(O3, ue) | 0, l2 = l2 + Math.imul(k2, le) | 0, n2 = n2 + Math.imul(k2, de) | 0, n2 = n2 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l2 = l2 + Math.imul(R3, ce) | 0, n2 = n2 + Math.imul(R3, pe) | 0, n2 = n2 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l2 = l2 + Math.imul(g3, ve) | 0, n2 = n2 + Math.imul(g3, be) | 0, n2 = n2 + Math.imul(_3, ve) | 0, d2 = d2 + Math.imul(_3, be) | 0;
        var Ve = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l2 = Math.imul(G2, Q3), n2 = Math.imul(G2, ee), n2 = n2 + Math.imul(Y2, Q3) | 0, d2 = Math.imul(Y2, ee), l2 = l2 + Math.imul(V3, te) | 0, n2 = n2 + Math.imul(V3, re) | 0, n2 = n2 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l2 = l2 + Math.imul(j3, ie) | 0, n2 = n2 + Math.imul(j3, ne) | 0, n2 = n2 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l2 = l2 + Math.imul(W, fe) | 0, n2 = n2 + Math.imul(W, ae) | 0, n2 = n2 + Math.imul(K3, fe) | 0, d2 = d2 + Math.imul(K3, ae) | 0, l2 = l2 + Math.imul(z, oe) | 0, n2 = n2 + Math.imul(z, se) | 0, n2 = n2 + Math.imul(H2, oe) | 0, d2 = d2 + Math.imul(H2, se) | 0, l2 = l2 + Math.imul(F, he) | 0, n2 = n2 + Math.imul(F, ue) | 0, n2 = n2 + Math.imul(U5, he) | 0, d2 = d2 + Math.imul(U5, ue) | 0, l2 = l2 + Math.imul(C2, le) | 0, n2 = n2 + Math.imul(C2, de) | 0, n2 = n2 + Math.imul(O3, le) | 0, d2 = d2 + Math.imul(O3, de) | 0, l2 = l2 + Math.imul(k2, ce) | 0, n2 = n2 + Math.imul(k2, pe) | 0, n2 = n2 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l2 = l2 + Math.imul(R3, ve) | 0, n2 = n2 + Math.imul(R3, be) | 0, n2 = n2 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l2 = Math.imul(G2, te), n2 = Math.imul(G2, re), n2 = n2 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l2 = l2 + Math.imul(V3, ie) | 0, n2 = n2 + Math.imul(V3, ne) | 0, n2 = n2 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l2 = l2 + Math.imul(j3, fe) | 0, n2 = n2 + Math.imul(j3, ae) | 0, n2 = n2 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l2 = l2 + Math.imul(W, oe) | 0, n2 = n2 + Math.imul(W, se) | 0, n2 = n2 + Math.imul(K3, oe) | 0, d2 = d2 + Math.imul(K3, se) | 0, l2 = l2 + Math.imul(z, he) | 0, n2 = n2 + Math.imul(z, ue) | 0, n2 = n2 + Math.imul(H2, he) | 0, d2 = d2 + Math.imul(H2, ue) | 0, l2 = l2 + Math.imul(F, le) | 0, n2 = n2 + Math.imul(F, de) | 0, n2 = n2 + Math.imul(U5, le) | 0, d2 = d2 + Math.imul(U5, de) | 0, l2 = l2 + Math.imul(C2, ce) | 0, n2 = n2 + Math.imul(C2, pe) | 0, n2 = n2 + Math.imul(O3, ce) | 0, d2 = d2 + Math.imul(O3, pe) | 0, l2 = l2 + Math.imul(k2, ve) | 0, n2 = n2 + Math.imul(k2, be) | 0, n2 = n2 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l2 = Math.imul(G2, ie), n2 = Math.imul(G2, ne), n2 = n2 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l2 = l2 + Math.imul(V3, fe) | 0, n2 = n2 + Math.imul(V3, ae) | 0, n2 = n2 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l2 = l2 + Math.imul(j3, oe) | 0, n2 = n2 + Math.imul(j3, se) | 0, n2 = n2 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l2 = l2 + Math.imul(W, he) | 0, n2 = n2 + Math.imul(W, ue) | 0, n2 = n2 + Math.imul(K3, he) | 0, d2 = d2 + Math.imul(K3, ue) | 0, l2 = l2 + Math.imul(z, le) | 0, n2 = n2 + Math.imul(z, de) | 0, n2 = n2 + Math.imul(H2, le) | 0, d2 = d2 + Math.imul(H2, de) | 0, l2 = l2 + Math.imul(F, ce) | 0, n2 = n2 + Math.imul(F, pe) | 0, n2 = n2 + Math.imul(U5, ce) | 0, d2 = d2 + Math.imul(U5, pe) | 0, l2 = l2 + Math.imul(C2, ve) | 0, n2 = n2 + Math.imul(C2, be) | 0, n2 = n2 + Math.imul(O3, ve) | 0, d2 = d2 + Math.imul(O3, be) | 0;
        var Ye = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l2 = Math.imul(G2, fe), n2 = Math.imul(G2, ae), n2 = n2 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l2 = l2 + Math.imul(V3, oe) | 0, n2 = n2 + Math.imul(V3, se) | 0, n2 = n2 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l2 = l2 + Math.imul(j3, he) | 0, n2 = n2 + Math.imul(j3, ue) | 0, n2 = n2 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l2 = l2 + Math.imul(W, le) | 0, n2 = n2 + Math.imul(W, de) | 0, n2 = n2 + Math.imul(K3, le) | 0, d2 = d2 + Math.imul(K3, de) | 0, l2 = l2 + Math.imul(z, ce) | 0, n2 = n2 + Math.imul(z, pe) | 0, n2 = n2 + Math.imul(H2, ce) | 0, d2 = d2 + Math.imul(H2, pe) | 0, l2 = l2 + Math.imul(F, ve) | 0, n2 = n2 + Math.imul(F, be) | 0, n2 = n2 + Math.imul(U5, ve) | 0, d2 = d2 + Math.imul(U5, be) | 0;
        var Xe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l2 = Math.imul(G2, oe), n2 = Math.imul(G2, se), n2 = n2 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l2 = l2 + Math.imul(V3, he) | 0, n2 = n2 + Math.imul(V3, ue) | 0, n2 = n2 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l2 = l2 + Math.imul(j3, le) | 0, n2 = n2 + Math.imul(j3, de) | 0, n2 = n2 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l2 = l2 + Math.imul(W, ce) | 0, n2 = n2 + Math.imul(W, pe) | 0, n2 = n2 + Math.imul(K3, ce) | 0, d2 = d2 + Math.imul(K3, pe) | 0, l2 = l2 + Math.imul(z, ve) | 0, n2 = n2 + Math.imul(z, be) | 0, n2 = n2 + Math.imul(H2, ve) | 0, d2 = d2 + Math.imul(H2, be) | 0;
        var Je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l2 = Math.imul(G2, he), n2 = Math.imul(G2, ue), n2 = n2 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l2 = l2 + Math.imul(V3, le) | 0, n2 = n2 + Math.imul(V3, de) | 0, n2 = n2 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l2 = l2 + Math.imul(j3, ce) | 0, n2 = n2 + Math.imul(j3, pe) | 0, n2 = n2 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l2 = l2 + Math.imul(W, ve) | 0, n2 = n2 + Math.imul(W, be) | 0, n2 = n2 + Math.imul(K3, ve) | 0, d2 = d2 + Math.imul(K3, be) | 0;
        var Qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l2 = Math.imul(G2, le), n2 = Math.imul(G2, de), n2 = n2 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l2 = l2 + Math.imul(V3, ce) | 0, n2 = n2 + Math.imul(V3, pe) | 0, n2 = n2 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l2 = l2 + Math.imul(j3, ve) | 0, n2 = n2 + Math.imul(j3, be) | 0, n2 = n2 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l2 = Math.imul(G2, ce), n2 = Math.imul(G2, pe), n2 = n2 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l2 = l2 + Math.imul(V3, ve) | 0, n2 = n2 + Math.imul(V3, be) | 0, n2 = n2 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l2 = Math.imul(G2, ve), n2 = Math.imul(G2, be), n2 = n2 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        return b4 = (d2 + (n2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft2, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b4 !== 0 && (c[19] = b4, h3.length++), h3;
      };
      Math.imul || (L3 = q);
      function ge(v3, i, a2) {
        a2.negative = i.negative ^ v3.negative, a2.length = v3.length + i.length;
        for (var h3 = 0, s = 0, u2 = 0;u2 < a2.length - 1; u2++) {
          var c = s;
          s = 0;
          for (var b4 = h3 & 67108863, l2 = Math.min(u2, i.length - 1), n2 = Math.max(0, u2 - v3.length + 1);n2 <= l2; n2++) {
            var d2 = u2 - n2, w3 = v3.words[d2] | 0, g3 = i.words[n2] | 0, _3 = w3 * g3, A2 = _3 & 67108863;
            c = c + (_3 / 67108864 | 0) | 0, A2 = A2 + b4 | 0, b4 = A2 & 67108863, c = c + (A2 >>> 26) | 0, s += c >>> 26, c &= 67108863;
          }
          a2.words[u2] = b4, h3 = c, c = s;
        }
        return h3 !== 0 ? a2.words[u2] = h3 : a2.length--, a2.strip();
      }
      function _e(v3, i, a2) {
        var h3 = new N5;
        return h3.mulp(v3, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L3(this, i, a2) : s < 63 ? h3 = q(this, i, a2) : s < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N5(v3, i) {
        this.x = v3, this.y = i;
      }
      N5.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s = 0;s < i; s++)
          a2[s] = this.revBin(s, h3, i);
        return a2;
      }, N5.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s = 0, u2 = 0;u2 < a2; u2++)
          s |= (i & 1) << a2 - u2 - 1, i >>= 1;
        return s;
      }, N5.prototype.permute = function(i, a2, h3, s, u2, c) {
        for (var b4 = 0;b4 < c; b4++)
          s[b4] = a2[i[b4]], u2[b4] = h3[i[b4]];
      }, N5.prototype.transform = function(i, a2, h3, s, u2, c) {
        this.permute(c, i, a2, h3, s, u2);
        for (var b4 = 1;b4 < u2; b4 <<= 1)
          for (var l2 = b4 << 1, n2 = Math.cos(2 * Math.PI / l2), d2 = Math.sin(2 * Math.PI / l2), w3 = 0;w3 < u2; w3 += l2)
            for (var g3 = n2, _3 = d2, A2 = 0;A2 < b4; A2++) {
              var R3 = h3[w3 + A2], I2 = s[w3 + A2], Me = h3[w3 + A2 + b4], k2 = s[w3 + A2 + b4], D3 = g3 * Me - _3 * k2;
              k2 = g3 * k2 + _3 * Me, Me = D3, h3[w3 + A2] = R3 + Me, s[w3 + A2] = I2 + k2, h3[w3 + A2 + b4] = R3 - Me, s[w3 + A2 + b4] = I2 - k2, A2 !== l2 && (D3 = n2 * g3 - d2 * _3, _3 = n2 * _3 + d2 * g3, g3 = D3);
            }
      }, N5.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s = h3 & 1, u2 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u2++;
        return 1 << u2 + 1 + s;
      }, N5.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s = 0;s < h3 / 2; s++) {
            var u2 = i[s];
            i[s] = i[h3 - s - 1], i[h3 - s - 1] = u2, u2 = a2[s], a2[s] = -a2[h3 - s - 1], a2[h3 - s - 1] = -u2;
          }
      }, N5.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s = 0;s < a2 / 2; s++) {
          var u2 = Math.round(i[2 * s + 1] / a2) * 8192 + Math.round(i[2 * s] / a2) + h3;
          i[s] = u2 & 67108863, u2 < 67108864 ? h3 = 0 : h3 = u2 / 67108864 | 0;
        }
        return i;
      }, N5.prototype.convert13b = function(i, a2, h3, s) {
        for (var u2 = 0, c = 0;c < a2; c++)
          u2 = u2 + (i[c] | 0), h3[2 * c] = u2 & 8191, u2 = u2 >>> 13, h3[2 * c + 1] = u2 & 8191, u2 = u2 >>> 13;
        for (c = 2 * a2;c < s; ++c)
          h3[c] = 0;
        r(u2 === 0), r((u2 & -8192) === 0);
      }, N5.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N5.prototype.mulp = function(i, a2, h3) {
        var s = 2 * this.guessLen13b(i.length, a2.length), u2 = this.makeRBT(s), c = this.stub(s), b4 = new Array(s), l2 = new Array(s), n2 = new Array(s), d2 = new Array(s), w3 = new Array(s), g3 = new Array(s), _3 = h3.words;
        _3.length = s, this.convert13b(i.words, i.length, b4, s), this.convert13b(a2.words, a2.length, d2, s), this.transform(b4, c, l2, n2, s, u2), this.transform(d2, c, w3, g3, s, u2);
        for (var A2 = 0;A2 < s; A2++) {
          var R3 = l2[A2] * w3[A2] - n2[A2] * g3[A2];
          n2[A2] = l2[A2] * g3[A2] + n2[A2] * w3[A2], l2[A2] = R3;
        }
        return this.conjugate(l2, n2, s), this.transform(l2, n2, _3, c, s, u2), this.conjugate(_3, c, s), this.normalize13b(_3, s), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r(typeof i == "number"), r(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s = (this.words[h3] | 0) * i, u2 = (s & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s / 67108864 | 0, a2 += u2 >>> 26, this.words[h3] = u2 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B2(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s = 0;s < a2.length && a2[s] === 0; s++, h3 = h3.sqr())
          ;
        if (++s < a2.length)
          for (var u2 = h3.sqr();s < a2.length; s++, u2 = u2.sqr())
            a2[s] !== 0 && (h3 = h3.mul(u2));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 67108863 >>> 26 - a2 << 26 - a2, u2;
        if (a2 !== 0) {
          var c = 0;
          for (u2 = 0;u2 < this.length; u2++) {
            var b4 = this.words[u2] & s, l2 = (this.words[u2] | 0) - b4 << a2;
            this.words[u2] = l2 | c, c = b4 >>> 26 - a2;
          }
          c && (this.words[u2] = c, this.length++);
        }
        if (h3 !== 0) {
          for (u2 = this.length - 1;u2 >= 0; u2--)
            this.words[u2 + h3] = this.words[u2];
          for (u2 = 0;u2 < h3; u2++)
            this.words[u2] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r(typeof i == "number" && i >= 0);
        var s;
        a2 ? s = (a2 - a2 % 26) / 26 : s = 0;
        var u2 = i % 26, c = Math.min((i - u2) / 26, this.length), b4 = 67108863 ^ 67108863 >>> u2 << u2, l2 = h3;
        if (s -= c, s = Math.max(0, s), l2) {
          for (var n2 = 0;n2 < c; n2++)
            l2.words[n2] = this.words[n2];
          l2.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n2 = 0;n2 < this.length; n2++)
              this.words[n2] = this.words[n2 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n2 = this.length - 1;n2 >= 0 && (d2 !== 0 || n2 >= s); n2--) {
          var w3 = this.words[n2] | 0;
          this.words[n2] = d2 << 26 - u2 | w3 >>> u2, d2 = w3 & b4;
        }
        return l2 && d2 !== 0 && (l2.words[l2.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return false;
        var u2 = this.words[h3];
        return !!(u2 & s);
      }, f2.prototype.imaskn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r(typeof i == "number"), r(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r(typeof i == "number"), r(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s = i.length + h3, u2;
        this._expand(s);
        var c, b4 = 0;
        for (u2 = 0;u2 < i.length; u2++) {
          c = (this.words[u2 + h3] | 0) + b4;
          var l2 = (i.words[u2] | 0) * a2;
          c -= l2 & 67108863, b4 = (c >> 26) - (l2 / 67108864 | 0), this.words[u2 + h3] = c & 67108863;
        }
        for (;u2 < this.length - h3; u2++)
          c = (this.words[u2 + h3] | 0) + b4, b4 = c >> 26, this.words[u2 + h3] = c & 67108863;
        if (b4 === 0)
          return this.strip();
        for (r(b4 === -1), b4 = 0, u2 = 0;u2 < this.length; u2++)
          c = -(this.words[u2] | 0) + b4, b4 = c >> 26, this.words[u2] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s = this.clone(), u2 = i, c = u2.words[u2.length - 1] | 0, b4 = this._countBits(c);
        h3 = 26 - b4, h3 !== 0 && (u2 = u2.ushln(h3), s.iushln(h3), c = u2.words[u2.length - 1] | 0);
        var l2 = s.length - u2.length, n2;
        if (a2 !== "mod") {
          n2 = new f2(null), n2.length = l2 + 1, n2.words = new Array(n2.length);
          for (var d2 = 0;d2 < n2.length; d2++)
            n2.words[d2] = 0;
        }
        var w3 = s.clone()._ishlnsubmul(u2, 1, l2);
        w3.negative === 0 && (s = w3, n2 && (n2.words[l2] = 1));
        for (var g3 = l2 - 1;g3 >= 0; g3--) {
          var _3 = (s.words[u2.length + g3] | 0) * 67108864 + (s.words[u2.length + g3 - 1] | 0);
          for (_3 = Math.min(_3 / c | 0, 67108863), s._ishlnsubmul(u2, _3, g3);s.negative !== 0; )
            _3--, s.negative = 0, s._ishlnsubmul(u2, 1, g3), s.isZero() || (s.negative ^= 1);
          n2 && (n2.words[g3] = _3);
        }
        return n2 && n2.strip(), s.strip(), a2 !== "div" && h3 !== 0 && s.iushrn(h3), { div: n2 || null, mod: s };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s, u2, c;
        return this.negative !== 0 && i.negative === 0 ? (c = this.neg().divmod(i, a2), a2 !== "mod" && (s = c.div.neg()), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.iadd(i)), { div: s, mod: u2 }) : this.negative === 0 && i.negative !== 0 ? (c = this.divmod(i.neg(), a2), a2 !== "mod" && (s = c.div.neg()), { div: s, mod: c.mod }) : (this.negative & i.negative) !== 0 ? (c = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.isub(i)), { div: c.div, mod: u2 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s = i.ushrn(1), u2 = i.andln(1), c = h3.cmp(s);
        return c < 0 || u2 === 1 && c === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s = this.length - 1;s >= 0; s--)
          h3 = (a2 * h3 + (this.words[s] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s / i | 0, a2 = s % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = new f2(0), b4 = new f2(1), l2 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l2;
        for (var n2 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g3 = 1;(a2.words[0] & g3) === 0 && w3 < 26; ++w3, g3 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s.isOdd() || u2.isOdd()) && (s.iadd(n2), u2.isub(d2)), s.iushrn(1), u2.iushrn(1);
          for (var _3 = 0, A2 = 1;(h3.words[0] & A2) === 0 && _3 < 26; ++_3, A2 <<= 1)
            ;
          if (_3 > 0)
            for (h3.iushrn(_3);_3-- > 0; )
              (c.isOdd() || b4.isOdd()) && (c.iadd(n2), b4.isub(d2)), c.iushrn(1), b4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(c), u2.isub(b4)) : (h3.isub(a2), c.isub(s), b4.isub(u2));
        }
        return { a: c, b: b4, gcd: h3.iushln(l2) };
      }, f2.prototype._invmp = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b4 = 0, l2 = 1;(a2.words[0] & l2) === 0 && b4 < 26; ++b4, l2 <<= 1)
            ;
          if (b4 > 0)
            for (a2.iushrn(b4);b4-- > 0; )
              s.isOdd() && s.iadd(c), s.iushrn(1);
          for (var n2 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n2 < 26; ++n2, d2 <<= 1)
            ;
          if (n2 > 0)
            for (h3.iushrn(n2);n2-- > 0; )
              u2.isOdd() && u2.iadd(c), u2.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(u2)) : (h3.isub(a2), u2.isub(s));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s : w3 = u2, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s = 0;a2.isEven() && h3.isEven(); s++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u2 = a2.cmp(h3);
          if (u2 < 0) {
            var c = a2;
            a2 = h3, h3 = c;
          } else if (u2 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s, this;
        for (var u2 = s, c = h3;u2 !== 0 && c < this.length; c++) {
          var b4 = this.words[c] | 0;
          b4 += u2, u2 = b4 >>> 26, b4 &= 67108863, this.words[c] = b4;
        }
        return u2 !== 0 && (this.words[c] = u2, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r(i <= 67108863, "Number is too big");
          var s = this.words[0] | 0;
          h3 = s === i ? 0 : s < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = this.words[h3] | 0, u2 = i.words[h3] | 0;
          if (s !== u2) {
            s < u2 ? a2 = -1 : s > u2 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P4(i);
      }, f2.prototype.toRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v3, i) {
        this.name = v3, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s === 0 ? (a2.words[0] = 0, a2.length = 1) : s > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s = Math.min(i.length, 9), u2 = 0;u2 < s; u2++)
          a2.words[u2] = i.words[u2];
        if (a2.length = s, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c = i.words[9];
        for (a2.words[a2.length++] = c & h3, u2 = 10;u2 < i.length; u2++) {
          var b4 = i.words[u2] | 0;
          i.words[u2 - 10] = (b4 & h3) << 4 | c >>> 22, c = b4;
        }
        c >>>= 22, i.words[u2 - 10] = c, c === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = i.words[h3] | 0;
          a2 += s * 977, i.words[h3] = a2 & 67108863, a2 = s * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = (i.words[h3] | 0) * 19 + a2, u2 = s & 67108863;
          s >>>= 26, i.words[h3] = u2, a2 = s;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P4(v3) {
        if (typeof v3 == "string") {
          var i = f2._prime(v3);
          this.m = i.p, this.prime = i;
        } else
          r(v3.gtn(1), "modulus must be greater than 1"), this.m = v3, this.prime = null;
      }
      P4.prototype._verify1 = function(i) {
        r(i.negative === 0, "red works only with positives"), r(i.red, "red works only with red numbers");
      }, P4.prototype._verify2 = function(i, a2) {
        r((i.negative | a2.negative) === 0, "red works only with positives"), r(i.red && i.red === a2.red, "red works only with red numbers");
      }, P4.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P4.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P4.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P4.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P4.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P4.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P4.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P4.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P4.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P4.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P4.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P4.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s = this.m.subn(1), u2 = 0;!s.isZero() && s.andln(1) === 0; )
          u2++, s.iushrn(1);
        r(!s.isZero());
        var c = new f2(1).toRed(this), b4 = c.redNeg(), l2 = this.m.subn(1).iushrn(1), n2 = this.m.bitLength();
        for (n2 = new f2(2 * n2 * n2).toRed(this);this.pow(n2, l2).cmp(b4) !== 0; )
          n2.redIAdd(b4);
        for (var d2 = this.pow(n2, s), w3 = this.pow(i, s.addn(1).iushrn(1)), g3 = this.pow(i, s), _3 = u2;g3.cmp(c) !== 0; ) {
          for (var A2 = g3, R3 = 0;A2.cmp(c) !== 0; R3++)
            A2 = A2.redSqr();
          r(R3 < _3);
          var I2 = this.pow(d2, new f2(1).iushln(_3 - R3 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g3 = g3.redMul(d2), _3 = R3;
        }
        return w3;
      }, P4.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P4.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s = new Array(1 << h3);
        s[0] = new f2(1).toRed(this), s[1] = i;
        for (var u2 = 2;u2 < s.length; u2++)
          s[u2] = this.mul(s[u2 - 1], i);
        var c = s[0], b4 = 0, l2 = 0, n2 = a2.bitLength() % 26;
        for (n2 === 0 && (n2 = 26), u2 = a2.length - 1;u2 >= 0; u2--) {
          for (var d2 = a2.words[u2], w3 = n2 - 1;w3 >= 0; w3--) {
            var g3 = d2 >> w3 & 1;
            if (c !== s[0] && (c = this.sqr(c)), g3 === 0 && b4 === 0) {
              l2 = 0;
              continue;
            }
            b4 <<= 1, b4 |= g3, l2++, !(l2 !== h3 && (u2 !== 0 || w3 !== 0)) && (c = this.mul(c, s[b4]), l2 = 0, b4 = 0);
          }
          n2 = 26;
        }
        return c;
      }, P4.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P4.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v3) {
        P4.call(this, v3), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P4), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof ed > "u" || ed, ky);
  });
  h0 = T9((Yk, Ly) => {
    var s0 = Ut(), Ff = s0.Buffer, Er2 = {}, Ar2;
    for (Ar2 in s0)
      !s0.hasOwnProperty(Ar2) || Ar2 === "SlowBuffer" || Ar2 === "Buffer" || (Er2[Ar2] = s0[Ar2]);
    var Uf = Er2.Buffer = {};
    for (Ar2 in Ff)
      !Ff.hasOwnProperty(Ar2) || Ar2 === "allocUnsafe" || Ar2 === "allocUnsafeSlow" || (Uf[Ar2] = Ff[Ar2]);
    Er2.Buffer.prototype = Ff.prototype;
    (!Uf.from || Uf.from === Uint8Array.from) && (Uf.from = function(t, e, r) {
      if (typeof t == "number")
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof t);
      if (t && typeof t.length > "u")
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
      return Ff(t, e, r);
    });
    Uf.alloc || (Uf.alloc = function(t, e, r) {
      if (typeof t != "number")
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof t);
      if (t < 0 || t >= 2 * (1 << 30))
        throw new RangeError('The value "' + t + '" is invalid for option "size"');
      var o2 = Ff(t);
      return !e || e.length === 0 ? o2.fill(0) : typeof r == "string" ? o2.fill(e, r) : o2.fill(e), o2;
    });
    if (!Er2.kStringMaxLength)
      try {
        Er2.kStringMaxLength = process.binding("buffer").kStringMaxLength;
      } catch {
      }
    Er2.constants || (Er2.constants = { MAX_LENGTH: Er2.kMaxLength }, Er2.kStringMaxLength && (Er2.constants.MAX_STRING_LENGTH = Er2.kStringMaxLength));
    Ly.exports = Er2;
  });
  u0 = T9((Ny) => {
    var aB = Ie();
    function Rr(t) {
      this._reporterState = { obj: null, path: [], options: t || {}, errors: [] };
    }
    Ny.Reporter = Rr;
    Rr.prototype.isError = function(e) {
      return e instanceof zf;
    };
    Rr.prototype.save = function() {
      let e = this._reporterState;
      return { obj: e.obj, pathLen: e.path.length };
    };
    Rr.prototype.restore = function(e) {
      let r = this._reporterState;
      r.obj = e.obj, r.path = r.path.slice(0, e.pathLen);
    };
    Rr.prototype.enterKey = function(e) {
      return this._reporterState.path.push(e);
    };
    Rr.prototype.exitKey = function(e) {
      let r = this._reporterState;
      r.path = r.path.slice(0, e - 1);
    };
    Rr.prototype.leaveKey = function(e, r, o2) {
      let f2 = this._reporterState;
      this.exitKey(e), f2.obj !== null && (f2.obj[r] = o2);
    };
    Rr.prototype.path = function() {
      return this._reporterState.path.join("/");
    };
    Rr.prototype.enterObject = function() {
      let e = this._reporterState, r = e.obj;
      return e.obj = {}, r;
    };
    Rr.prototype.leaveObject = function(e) {
      let r = this._reporterState, o2 = r.obj;
      return r.obj = e, o2;
    };
    Rr.prototype.error = function(e) {
      let r, o2 = this._reporterState, f2 = e instanceof zf;
      if (f2 ? r = e : r = new zf(o2.path.map(function(p) {
        return "[" + JSON.stringify(p) + "]";
      }).join(""), e.message || e, e.stack), !o2.options.partial)
        throw r;
      return f2 || o2.errors.push(r), r;
    };
    Rr.prototype.wrapResult = function(e) {
      let r = this._reporterState;
      return r.options.partial ? { result: this.isError(e) ? null : e, errors: r.errors } : e;
    };
    function zf(t, e) {
      this.path = t, this.rethrow(e);
    }
    aB(zf, Error);
    zf.prototype.rethrow = function(e) {
      if (this.message = e + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, zf), !this.stack)
        try {
          throw new Error(this.message);
        } catch (r) {
          this.stack = r.stack;
        }
      return this;
    };
  });
  Kf = T9((rd) => {
    var oB = Ie(), l0 = u0().Reporter, Hf = h0().Buffer;
    function Br2(t, e) {
      if (l0.call(this, e), !Hf.isBuffer(t)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = t, this.offset = 0, this.length = t.length;
    }
    oB(Br2, l0);
    rd.DecoderBuffer = Br2;
    Br2.isDecoderBuffer = function(e) {
      return e instanceof Br2 ? true : typeof e == "object" && Hf.isBuffer(e.base) && e.constructor.name === "DecoderBuffer" && typeof e.offset == "number" && typeof e.length == "number" && typeof e.save == "function" && typeof e.restore == "function" && typeof e.isEmpty == "function" && typeof e.readUInt8 == "function" && typeof e.skip == "function" && typeof e.raw == "function";
    };
    Br2.prototype.save = function() {
      return { offset: this.offset, reporter: l0.prototype.save.call(this) };
    };
    Br2.prototype.restore = function(e) {
      let r = new Br2(this.base);
      return r.offset = e.offset, r.length = this.offset, this.offset = e.offset, l0.prototype.restore.call(this, e.reporter), r;
    };
    Br2.prototype.isEmpty = function() {
      return this.offset === this.length;
    };
    Br2.prototype.readUInt8 = function(e) {
      return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, true) : this.error(e || "DecoderBuffer overrun");
    };
    Br2.prototype.skip = function(e, r) {
      if (!(this.offset + e <= this.length))
        return this.error(r || "DecoderBuffer overrun");
      let o2 = new Br2(this.base);
      return o2._reporterState = this._reporterState, o2.offset = this.offset, o2.length = this.offset + e, this.offset += e, o2;
    };
    Br2.prototype.raw = function(e) {
      return this.base.slice(e ? e.offset : this.offset, this.length);
    };
    function Wf(t, e) {
      if (Array.isArray(t))
        this.length = 0, this.value = t.map(function(r) {
          return Wf.isEncoderBuffer(r) || (r = new Wf(r, e)), this.length += r.length, r;
        }, this);
      else if (typeof t == "number") {
        if (!(0 <= t && t <= 255))
          return e.error("non-byte EncoderBuffer value");
        this.value = t, this.length = 1;
      } else if (typeof t == "string")
        this.value = t, this.length = Hf.byteLength(t);
      else if (Hf.isBuffer(t))
        this.value = t, this.length = t.length;
      else
        return e.error("Unsupported type: " + typeof t);
    }
    rd.EncoderBuffer = Wf;
    Wf.isEncoderBuffer = function(e) {
      return e instanceof Wf ? true : typeof e == "object" && e.constructor.name === "EncoderBuffer" && typeof e.length == "number" && typeof e.join == "function";
    };
    Wf.prototype.join = function(e, r) {
      return e || (e = Hf.alloc(this.length)), r || (r = 0), this.length === 0 || (Array.isArray(this.value) ? this.value.forEach(function(o2) {
        o2.join(e, r), r += o2.length;
      }) : (typeof this.value == "number" ? e[r] = this.value : typeof this.value == "string" ? e.write(this.value, r) : Hf.isBuffer(this.value) && this.value.copy(e, r), r += this.length)), e;
    };
  });
  d0 = T9((Qk, Py) => {
    var sB = u0().Reporter, hB = Kf().EncoderBuffer, uB = Kf().DecoderBuffer, Qt = ar(), Dy = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"], lB = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(Dy), dB = ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"];
    function Ue(t, e, r) {
      let o2 = {};
      this._baseState = o2, o2.name = r, o2.enc = t, o2.parent = e || null, o2.children = null, o2.tag = null, o2.args = null, o2.reverseArgs = null, o2.choice = null, o2.optional = false, o2.any = false, o2.obj = false, o2.use = null, o2.useDecoder = null, o2.key = null, o2.default = null, o2.explicit = null, o2.implicit = null, o2.contains = null, o2.parent || (o2.children = [], this._wrap());
    }
    Py.exports = Ue;
    var cB = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
    Ue.prototype.clone = function() {
      let e = this._baseState, r = {};
      cB.forEach(function(f2) {
        r[f2] = e[f2];
      });
      let o2 = new this.constructor(r.parent);
      return o2._baseState = r, o2;
    };
    Ue.prototype._wrap = function() {
      let e = this._baseState;
      lB.forEach(function(r) {
        this[r] = function() {
          let f2 = new this.constructor(this);
          return e.children.push(f2), f2[r].apply(f2, arguments);
        };
      }, this);
    };
    Ue.prototype._init = function(e) {
      let r = this._baseState;
      Qt(r.parent === null), e.call(this), r.children = r.children.filter(function(o2) {
        return o2._baseState.parent === this;
      }, this), Qt.equal(r.children.length, 1, "Root node can have only one child");
    };
    Ue.prototype._useArgs = function(e) {
      let r = this._baseState, o2 = e.filter(function(f2) {
        return f2 instanceof this.constructor;
      }, this);
      e = e.filter(function(f2) {
        return !(f2 instanceof this.constructor);
      }, this), o2.length !== 0 && (Qt(r.children === null), r.children = o2, o2.forEach(function(f2) {
        f2._baseState.parent = this;
      }, this)), e.length !== 0 && (Qt(r.args === null), r.args = e, r.reverseArgs = e.map(function(f2) {
        if (typeof f2 != "object" || f2.constructor !== Object)
          return f2;
        let p = {};
        return Object.keys(f2).forEach(function(m2) {
          m2 == (m2 | 0) && (m2 |= 0);
          let y3 = f2[m2];
          p[y3] = m2;
        }), p;
      }));
    };
    dB.forEach(function(t) {
      Ue.prototype[t] = function() {
        let r = this._baseState;
        throw new Error(t + " not implemented for encoding: " + r.enc);
      };
    });
    Dy.forEach(function(t) {
      Ue.prototype[t] = function() {
        let r = this._baseState, o2 = Array.prototype.slice.call(arguments);
        return Qt(r.tag === null), r.tag = t, this._useArgs(o2), this;
      };
    });
    Ue.prototype.use = function(e) {
      Qt(e);
      let r = this._baseState;
      return Qt(r.use === null), r.use = e, this;
    };
    Ue.prototype.optional = function() {
      let e = this._baseState;
      return e.optional = true, this;
    };
    Ue.prototype.def = function(e) {
      let r = this._baseState;
      return Qt(r.default === null), r.default = e, r.optional = true, this;
    };
    Ue.prototype.explicit = function(e) {
      let r = this._baseState;
      return Qt(r.explicit === null && r.implicit === null), r.explicit = e, this;
    };
    Ue.prototype.implicit = function(e) {
      let r = this._baseState;
      return Qt(r.explicit === null && r.implicit === null), r.implicit = e, this;
    };
    Ue.prototype.obj = function() {
      let e = this._baseState, r = Array.prototype.slice.call(arguments);
      return e.obj = true, r.length !== 0 && this._useArgs(r), this;
    };
    Ue.prototype.key = function(e) {
      let r = this._baseState;
      return Qt(r.key === null), r.key = e, this;
    };
    Ue.prototype.any = function() {
      let e = this._baseState;
      return e.any = true, this;
    };
    Ue.prototype.choice = function(e) {
      let r = this._baseState;
      return Qt(r.choice === null), r.choice = e, this._useArgs(Object.keys(e).map(function(o2) {
        return e[o2];
      })), this;
    };
    Ue.prototype.contains = function(e) {
      let r = this._baseState;
      return Qt(r.use === null), r.contains = e, this;
    };
    Ue.prototype._decode = function(e, r) {
      let o2 = this._baseState;
      if (o2.parent === null)
        return e.wrapResult(o2.children[0]._decode(e, r));
      let f2 = o2.default, p = true, m2 = null;
      if (o2.key !== null && (m2 = e.enterKey(o2.key)), o2.optional) {
        let M2 = null;
        if (o2.explicit !== null ? M2 = o2.explicit : o2.implicit !== null ? M2 = o2.implicit : o2.tag !== null && (M2 = o2.tag), M2 === null && !o2.any) {
          let x4 = e.save();
          try {
            o2.choice === null ? this._decodeGeneric(o2.tag, e, r) : this._decodeChoice(e, r), p = true;
          } catch {
            p = false;
          }
          e.restore(x4);
        } else if (p = this._peekTag(e, M2, o2.any), e.isError(p))
          return p;
      }
      let y3;
      if (o2.obj && p && (y3 = e.enterObject()), p) {
        if (o2.explicit !== null) {
          let x4 = this._decodeTag(e, o2.explicit);
          if (e.isError(x4))
            return x4;
          e = x4;
        }
        let M2 = e.offset;
        if (o2.use === null && o2.choice === null) {
          let x4;
          o2.any && (x4 = e.save());
          let S3 = this._decodeTag(e, o2.implicit !== null ? o2.implicit : o2.tag, o2.any);
          if (e.isError(S3))
            return S3;
          o2.any ? f2 = e.raw(x4) : e = S3;
        }
        if (r && r.track && o2.tag !== null && r.track(e.path(), M2, e.length, "tagged"), r && r.track && o2.tag !== null && r.track(e.path(), e.offset, e.length, "content"), o2.any || (o2.choice === null ? f2 = this._decodeGeneric(o2.tag, e, r) : f2 = this._decodeChoice(e, r)), e.isError(f2))
          return f2;
        if (!o2.any && o2.choice === null && o2.children !== null && o2.children.forEach(function(S3) {
          S3._decode(e, r);
        }), o2.contains && (o2.tag === "octstr" || o2.tag === "bitstr")) {
          let x4 = new uB(f2);
          f2 = this._getUse(o2.contains, e._reporterState.obj)._decode(x4, r);
        }
      }
      return o2.obj && p && (f2 = e.leaveObject(y3)), o2.key !== null && (f2 !== null || p === true) ? e.leaveKey(m2, o2.key, f2) : m2 !== null && e.exitKey(m2), f2;
    };
    Ue.prototype._decodeGeneric = function(e, r, o2) {
      let f2 = this._baseState;
      return e === "seq" || e === "set" ? null : e === "seqof" || e === "setof" ? this._decodeList(r, e, f2.args[0], o2) : /str$/.test(e) ? this._decodeStr(r, e, o2) : e === "objid" && f2.args ? this._decodeObjid(r, f2.args[0], f2.args[1], o2) : e === "objid" ? this._decodeObjid(r, null, null, o2) : e === "gentime" || e === "utctime" ? this._decodeTime(r, e, o2) : e === "null_" ? this._decodeNull(r, o2) : e === "bool" ? this._decodeBool(r, o2) : e === "objDesc" ? this._decodeStr(r, e, o2) : e === "int" || e === "enum" ? this._decodeInt(r, f2.args && f2.args[0], o2) : f2.use !== null ? this._getUse(f2.use, r._reporterState.obj)._decode(r, o2) : r.error("unknown tag: " + e);
    };
    Ue.prototype._getUse = function(e, r) {
      let o2 = this._baseState;
      return o2.useDecoder = this._use(e, r), Qt(o2.useDecoder._baseState.parent === null), o2.useDecoder = o2.useDecoder._baseState.children[0], o2.implicit !== o2.useDecoder._baseState.implicit && (o2.useDecoder = o2.useDecoder.clone(), o2.useDecoder._baseState.implicit = o2.implicit), o2.useDecoder;
    };
    Ue.prototype._decodeChoice = function(e, r) {
      let o2 = this._baseState, f2 = null, p = false;
      return Object.keys(o2.choice).some(function(m2) {
        let y3 = e.save(), M2 = o2.choice[m2];
        try {
          let x4 = M2._decode(e, r);
          if (e.isError(x4))
            return false;
          f2 = { type: m2, value: x4 }, p = true;
        } catch {
          return e.restore(y3), false;
        }
        return true;
      }, this), p ? f2 : e.error("Choice not matched");
    };
    Ue.prototype._createEncoderBuffer = function(e) {
      return new hB(e, this.reporter);
    };
    Ue.prototype._encode = function(e, r, o2) {
      let f2 = this._baseState;
      if (f2.default !== null && f2.default === e)
        return;
      let p = this._encodeValue(e, r, o2);
      if (p !== undefined && !this._skipDefault(p, r, o2))
        return p;
    };
    Ue.prototype._encodeValue = function(e, r, o2) {
      let f2 = this._baseState;
      if (f2.parent === null)
        return f2.children[0]._encode(e, r || new sB);
      let p = null;
      if (this.reporter = r, f2.optional && e === undefined)
        if (f2.default !== null)
          e = f2.default;
        else
          return;
      let m2 = null, y3 = false;
      if (f2.any)
        p = this._createEncoderBuffer(e);
      else if (f2.choice)
        p = this._encodeChoice(e, r);
      else if (f2.contains)
        m2 = this._getUse(f2.contains, o2)._encode(e, r), y3 = true;
      else if (f2.children)
        m2 = f2.children.map(function(M2) {
          if (M2._baseState.tag === "null_")
            return M2._encode(null, r, e);
          if (M2._baseState.key === null)
            return r.error("Child should have a key");
          let x4 = r.enterKey(M2._baseState.key);
          if (typeof e != "object")
            return r.error("Child expected, but input is not object");
          let S3 = M2._encode(e[M2._baseState.key], r, e);
          return r.leaveKey(x4), S3;
        }, this).filter(function(M2) {
          return M2;
        }), m2 = this._createEncoderBuffer(m2);
      else if (f2.tag === "seqof" || f2.tag === "setof") {
        if (!(f2.args && f2.args.length === 1))
          return r.error("Too many args for : " + f2.tag);
        if (!Array.isArray(e))
          return r.error("seqof/setof, but data is not Array");
        let M2 = this.clone();
        M2._baseState.implicit = null, m2 = this._createEncoderBuffer(e.map(function(x4) {
          let S3 = this._baseState;
          return this._getUse(S3.args[0], e)._encode(x4, r);
        }, M2));
      } else
        f2.use !== null ? p = this._getUse(f2.use, o2)._encode(e, r) : (m2 = this._encodePrimitive(f2.tag, e), y3 = true);
      if (!f2.any && f2.choice === null) {
        let M2 = f2.implicit !== null ? f2.implicit : f2.tag, x4 = f2.implicit === null ? "universal" : "context";
        M2 === null ? f2.use === null && r.error("Tag could be omitted only for .use()") : f2.use === null && (p = this._encodeComposite(M2, y3, x4, m2));
      }
      return f2.explicit !== null && (p = this._encodeComposite(f2.explicit, false, "context", p)), p;
    };
    Ue.prototype._encodeChoice = function(e, r) {
      let o2 = this._baseState, f2 = o2.choice[e.type];
      return f2 || Qt(false, e.type + " not found in " + JSON.stringify(Object.keys(o2.choice))), f2._encode(e.value, r);
    };
    Ue.prototype._encodePrimitive = function(e, r) {
      let o2 = this._baseState;
      if (/str$/.test(e))
        return this._encodeStr(r, e);
      if (e === "objid" && o2.args)
        return this._encodeObjid(r, o2.reverseArgs[0], o2.args[1]);
      if (e === "objid")
        return this._encodeObjid(r, null, null);
      if (e === "gentime" || e === "utctime")
        return this._encodeTime(r, e);
      if (e === "null_")
        return this._encodeNull();
      if (e === "int" || e === "enum")
        return this._encodeInt(r, o2.args && o2.reverseArgs[0]);
      if (e === "bool")
        return this._encodeBool(r);
      if (e === "objDesc")
        return this._encodeStr(r, e);
      throw new Error("Unsupported tag: " + e);
    };
    Ue.prototype._isNumstr = function(e) {
      return /^[0-9 ]*$/.test(e);
    };
    Ue.prototype._isPrintstr = function(e) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e);
    };
  });
  c0 = T9((Wn) => {
    function Cy(t) {
      let e = {};
      return Object.keys(t).forEach(function(r) {
        (r | 0) == r && (r = r | 0);
        let o2 = t[r];
        e[o2] = r;
      }), e;
    }
    Wn.tagClass = { 0: "universal", 1: "application", 2: "context", 3: "private" };
    Wn.tagClassByName = Cy(Wn.tagClass);
    Wn.tag = { 0: "end", 1: "bool", 2: "int", 3: "bitstr", 4: "octstr", 5: "null_", 6: "objid", 7: "objDesc", 8: "external", 9: "real", 10: "enum", 11: "embed", 12: "utf8str", 13: "relativeOid", 16: "seq", 17: "set", 18: "numstr", 19: "printstr", 20: "t61str", 21: "videostr", 22: "ia5str", 23: "utctime", 24: "gentime", 25: "graphstr", 26: "iso646str", 27: "genstr", 28: "unistr", 29: "charstr", 30: "bmpstr" };
    Wn.tagByName = Cy(Wn.tag);
  });
  nd = T9((tL, Uy) => {
    var pB = Ie(), Ii = h0().Buffer, Oy = d0(), id2 = c0();
    function Fy(t) {
      this.enc = "der", this.name = t.name, this.entity = t, this.tree = new Ur2, this.tree._init(t.body);
    }
    Uy.exports = Fy;
    Fy.prototype.encode = function(e, r) {
      return this.tree._encode(e, r).join();
    };
    function Ur2(t) {
      Oy.call(this, "der", t);
    }
    pB(Ur2, Oy);
    Ur2.prototype._encodeComposite = function(e, r, o2, f2) {
      let p = vB(e, r, o2, this.reporter);
      if (f2.length < 128) {
        let M2 = Ii.alloc(2);
        return M2[0] = p, M2[1] = f2.length, this._createEncoderBuffer([M2, f2]);
      }
      let m2 = 1;
      for (let M2 = f2.length;M2 >= 256; M2 >>= 8)
        m2++;
      let y3 = Ii.alloc(1 + 1 + m2);
      y3[0] = p, y3[1] = 128 | m2;
      for (let M2 = 1 + m2, x4 = f2.length;x4 > 0; M2--, x4 >>= 8)
        y3[M2] = x4 & 255;
      return this._createEncoderBuffer([y3, f2]);
    };
    Ur2.prototype._encodeStr = function(e, r) {
      if (r === "bitstr")
        return this._createEncoderBuffer([e.unused | 0, e.data]);
      if (r === "bmpstr") {
        let o2 = Ii.alloc(e.length * 2);
        for (let f2 = 0;f2 < e.length; f2++)
          o2.writeUInt16BE(e.charCodeAt(f2), f2 * 2);
        return this._createEncoderBuffer(o2);
      } else
        return r === "numstr" ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : r === "printstr" ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(r) ? this._createEncoderBuffer(e) : r === "objDesc" ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + r + " unsupported");
    };
    Ur2.prototype._encodeObjid = function(e, r, o2) {
      if (typeof e == "string") {
        if (!r)
          return this.reporter.error("string objid given, but no values map found");
        if (!r.hasOwnProperty(e))
          return this.reporter.error("objid not found in values map");
        e = r[e].split(/[\s.]+/g);
        for (let y3 = 0;y3 < e.length; y3++)
          e[y3] |= 0;
      } else if (Array.isArray(e)) {
        e = e.slice();
        for (let y3 = 0;y3 < e.length; y3++)
          e[y3] |= 0;
      }
      if (!Array.isArray(e))
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));
      if (!o2) {
        if (e[1] >= 40)
          return this.reporter.error("Second objid identifier OOB");
        e.splice(0, 2, e[0] * 40 + e[1]);
      }
      let f2 = 0;
      for (let y3 = 0;y3 < e.length; y3++) {
        let M2 = e[y3];
        for (f2++;M2 >= 128; M2 >>= 7)
          f2++;
      }
      let p = Ii.alloc(f2), m2 = p.length - 1;
      for (let y3 = e.length - 1;y3 >= 0; y3--) {
        let M2 = e[y3];
        for (p[m2--] = M2 & 127;(M2 >>= 7) > 0; )
          p[m2--] = 128 | M2 & 127;
      }
      return this._createEncoderBuffer(p);
    };
    function qr(t) {
      return t < 10 ? "0" + t : t;
    }
    Ur2.prototype._encodeTime = function(e, r) {
      let o2, f2 = new Date(e);
      return r === "gentime" ? o2 = [qr(f2.getUTCFullYear()), qr(f2.getUTCMonth() + 1), qr(f2.getUTCDate()), qr(f2.getUTCHours()), qr(f2.getUTCMinutes()), qr(f2.getUTCSeconds()), "Z"].join("") : r === "utctime" ? o2 = [qr(f2.getUTCFullYear() % 100), qr(f2.getUTCMonth() + 1), qr(f2.getUTCDate()), qr(f2.getUTCHours()), qr(f2.getUTCMinutes()), qr(f2.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + r + " time is not supported yet"), this._encodeStr(o2, "octstr");
    };
    Ur2.prototype._encodeNull = function() {
      return this._createEncoderBuffer("");
    };
    Ur2.prototype._encodeInt = function(e, r) {
      if (typeof e == "string") {
        if (!r)
          return this.reporter.error("String int or enum given, but no values map");
        if (!r.hasOwnProperty(e))
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
        e = r[e];
      }
      if (typeof e != "number" && !Ii.isBuffer(e)) {
        let p = e.toArray();
        !e.sign && p[0] & 128 && p.unshift(0), e = Ii.from(p);
      }
      if (Ii.isBuffer(e)) {
        let p = e.length;
        e.length === 0 && p++;
        let m2 = Ii.alloc(p);
        return e.copy(m2), e.length === 0 && (m2[0] = 0), this._createEncoderBuffer(m2);
      }
      if (e < 128)
        return this._createEncoderBuffer(e);
      if (e < 256)
        return this._createEncoderBuffer([0, e]);
      let o2 = 1;
      for (let p = e;p >= 256; p >>= 8)
        o2++;
      let f2 = new Array(o2);
      for (let p = f2.length - 1;p >= 0; p--)
        f2[p] = e & 255, e >>= 8;
      return f2[0] & 128 && f2.unshift(0), this._createEncoderBuffer(Ii.from(f2));
    };
    Ur2.prototype._encodeBool = function(e) {
      return this._createEncoderBuffer(e ? 255 : 0);
    };
    Ur2.prototype._use = function(e, r) {
      return typeof e == "function" && (e = e(r)), e._getEncoder("der").tree;
    };
    Ur2.prototype._skipDefault = function(e, r, o2) {
      let f2 = this._baseState, p;
      if (f2.default === null)
        return false;
      let m2 = e.join();
      if (f2.defaultBuffer === undefined && (f2.defaultBuffer = this._encodeValue(f2.default, r, o2).join()), m2.length !== f2.defaultBuffer.length)
        return false;
      for (p = 0;p < m2.length; p++)
        if (m2[p] !== f2.defaultBuffer[p])
          return false;
      return true;
    };
    function vB(t, e, r, o2) {
      let f2;
      if (t === "seqof" ? t = "seq" : t === "setof" && (t = "set"), id2.tagByName.hasOwnProperty(t))
        f2 = id2.tagByName[t];
      else if (typeof t == "number" && (t | 0) === t)
        f2 = t;
      else
        return o2.error("Unknown tag: " + t);
      return f2 >= 31 ? o2.error("Multi-octet tag encoding unsupported") : (e || (f2 |= 32), f2 |= id2.tagClassByName[r || "universal"] << 6, f2);
    }
  });
  Hy = T9((rL, zy) => {
    var bB = Ie(), fd = nd();
    function ad(t) {
      fd.call(this, t), this.enc = "pem";
    }
    bB(ad, fd);
    zy.exports = ad;
    ad.prototype.encode = function(e, r) {
      let f2 = fd.prototype.encode.call(this, e).toString("base64"), p = ["-----BEGIN " + r.label + "-----"];
      for (let m2 = 0;m2 < f2.length; m2 += 64)
        p.push(f2.slice(m2, m2 + 64));
      return p.push("-----END " + r.label + "-----"), p.join(`
`);
    };
  });
  od = T9((Ky) => {
    var Wy = Ky;
    Wy.der = nd();
    Wy.pem = Hy();
  });
  hd = T9((nL, Yy) => {
    var mB = Ie(), gB = td(), jy = Kf().DecoderBuffer, Vy = d0(), Zy = c0();
    function $y(t) {
      this.enc = "der", this.name = t.name, this.entity = t, this.tree = new sr, this.tree._init(t.body);
    }
    Yy.exports = $y;
    $y.prototype.decode = function(e, r) {
      return jy.isDecoderBuffer(e) || (e = new jy(e, r)), this.tree._decode(e, r);
    };
    function sr(t) {
      Vy.call(this, "der", t);
    }
    mB(sr, Vy);
    sr.prototype._peekTag = function(e, r, o2) {
      if (e.isEmpty())
        return false;
      let f2 = e.save(), p = sd(e, 'Failed to peek tag: "' + r + '"');
      return e.isError(p) ? p : (e.restore(f2), p.tag === r || p.tagStr === r || p.tagStr + "of" === r || o2);
    };
    sr.prototype._decodeTag = function(e, r, o2) {
      let f2 = sd(e, 'Failed to decode tag of "' + r + '"');
      if (e.isError(f2))
        return f2;
      let p = Gy(e, f2.primitive, 'Failed to get length of "' + r + '"');
      if (e.isError(p))
        return p;
      if (!o2 && f2.tag !== r && f2.tagStr !== r && f2.tagStr + "of" !== r)
        return e.error('Failed to match tag: "' + r + '"');
      if (f2.primitive || p !== null)
        return e.skip(p, 'Failed to match body of: "' + r + '"');
      let m2 = e.save(), y3 = this._skipUntilEnd(e, 'Failed to skip indefinite length body: "' + this.tag + '"');
      return e.isError(y3) ? y3 : (p = e.offset - m2.offset, e.restore(m2), e.skip(p, 'Failed to match body of: "' + r + '"'));
    };
    sr.prototype._skipUntilEnd = function(e, r) {
      for (;; ) {
        let o2 = sd(e, r);
        if (e.isError(o2))
          return o2;
        let f2 = Gy(e, o2.primitive, r);
        if (e.isError(f2))
          return f2;
        let p;
        if (o2.primitive || f2 !== null ? p = e.skip(f2) : p = this._skipUntilEnd(e, r), e.isError(p))
          return p;
        if (o2.tagStr === "end")
          break;
      }
    };
    sr.prototype._decodeList = function(e, r, o2, f2) {
      let p = [];
      for (;!e.isEmpty(); ) {
        let m2 = this._peekTag(e, "end");
        if (e.isError(m2))
          return m2;
        let y3 = o2.decode(e, "der", f2);
        if (e.isError(y3) && m2)
          break;
        p.push(y3);
      }
      return p;
    };
    sr.prototype._decodeStr = function(e, r) {
      if (r === "bitstr") {
        let o2 = e.readUInt8();
        return e.isError(o2) ? o2 : { unused: o2, data: e.raw() };
      } else if (r === "bmpstr") {
        let o2 = e.raw();
        if (o2.length % 2 === 1)
          return e.error("Decoding of string type: bmpstr length mismatch");
        let f2 = "";
        for (let p = 0;p < o2.length / 2; p++)
          f2 += String.fromCharCode(o2.readUInt16BE(p * 2));
        return f2;
      } else if (r === "numstr") {
        let o2 = e.raw().toString("ascii");
        return this._isNumstr(o2) ? o2 : e.error("Decoding of string type: numstr unsupported characters");
      } else {
        if (r === "octstr")
          return e.raw();
        if (r === "objDesc")
          return e.raw();
        if (r === "printstr") {
          let o2 = e.raw().toString("ascii");
          return this._isPrintstr(o2) ? o2 : e.error("Decoding of string type: printstr unsupported characters");
        } else
          return /str$/.test(r) ? e.raw().toString() : e.error("Decoding of string type: " + r + " unsupported");
      }
    };
    sr.prototype._decodeObjid = function(e, r, o2) {
      let f2, p = [], m2 = 0, y3 = 0;
      for (;!e.isEmpty(); )
        y3 = e.readUInt8(), m2 <<= 7, m2 |= y3 & 127, (y3 & 128) === 0 && (p.push(m2), m2 = 0);
      y3 & 128 && p.push(m2);
      let M2 = p[0] / 40 | 0, x4 = p[0] % 40;
      if (o2 ? f2 = p : f2 = [M2, x4].concat(p.slice(1)), r) {
        let S3 = r[f2.join(" ")];
        S3 === undefined && (S3 = r[f2.join(".")]), S3 !== undefined && (f2 = S3);
      }
      return f2;
    };
    sr.prototype._decodeTime = function(e, r) {
      let o2 = e.raw().toString(), f2, p, m2, y3, M2, x4;
      if (r === "gentime")
        f2 = o2.slice(0, 4) | 0, p = o2.slice(4, 6) | 0, m2 = o2.slice(6, 8) | 0, y3 = o2.slice(8, 10) | 0, M2 = o2.slice(10, 12) | 0, x4 = o2.slice(12, 14) | 0;
      else if (r === "utctime")
        f2 = o2.slice(0, 2) | 0, p = o2.slice(2, 4) | 0, m2 = o2.slice(4, 6) | 0, y3 = o2.slice(6, 8) | 0, M2 = o2.slice(8, 10) | 0, x4 = o2.slice(10, 12) | 0, f2 < 70 ? f2 = 2000 + f2 : f2 = 1900 + f2;
      else
        return e.error("Decoding " + r + " time is not supported yet");
      return Date.UTC(f2, p - 1, m2, y3, M2, x4, 0);
    };
    sr.prototype._decodeNull = function() {
      return null;
    };
    sr.prototype._decodeBool = function(e) {
      let r = e.readUInt8();
      return e.isError(r) ? r : r !== 0;
    };
    sr.prototype._decodeInt = function(e, r) {
      let o2 = e.raw(), f2 = new gB(o2);
      return r && (f2 = r[f2.toString(10)] || f2), f2;
    };
    sr.prototype._use = function(e, r) {
      return typeof e == "function" && (e = e(r)), e._getDecoder("der").tree;
    };
    function sd(t, e) {
      let r = t.readUInt8(e);
      if (t.isError(r))
        return r;
      let o2 = Zy.tagClass[r >> 6], f2 = (r & 32) === 0;
      if ((r & 31) === 31) {
        let m2 = r;
        for (r = 0;(m2 & 128) === 128; ) {
          if (m2 = t.readUInt8(e), t.isError(m2))
            return m2;
          r <<= 7, r |= m2 & 127;
        }
      } else
        r &= 31;
      let p = Zy.tag[r];
      return { cls: o2, primitive: f2, tag: r, tagStr: p };
    }
    function Gy(t, e, r) {
      let o2 = t.readUInt8(r);
      if (t.isError(o2))
        return o2;
      if (!e && o2 === 128)
        return null;
      if ((o2 & 128) === 0)
        return o2;
      let f2 = o2 & 127;
      if (f2 > 4)
        return t.error("length octect is too long");
      o2 = 0;
      for (let p = 0;p < f2; p++) {
        o2 <<= 8;
        let m2 = t.readUInt8(r);
        if (t.isError(m2))
          return m2;
        o2 |= m2;
      }
      return o2;
    }
  });
  Jy = T9((fL, Xy) => {
    var yB = Ie(), wB = h0().Buffer, ud = hd();
    function ld(t) {
      ud.call(this, t), this.enc = "pem";
    }
    yB(ld, ud);
    Xy.exports = ld;
    ld.prototype.decode = function(e, r) {
      let o2 = e.toString().split(/[\r\n]+/g), f2 = r.label.toUpperCase(), p = /^-----(BEGIN|END) ([^-]+)-----$/, m2 = -1, y3 = -1;
      for (let S3 = 0;S3 < o2.length; S3++) {
        let E3 = o2[S3].match(p);
        if (E3 !== null && E3[2] === f2)
          if (m2 === -1) {
            if (E3[1] !== "BEGIN")
              break;
            m2 = S3;
          } else {
            if (E3[1] !== "END")
              break;
            y3 = S3;
            break;
          }
      }
      if (m2 === -1 || y3 === -1)
        throw new Error("PEM section not found for: " + f2);
      let M2 = o2.slice(m2 + 1, y3).join("");
      M2.replace(/[^a-z0-9+/=]+/gi, "");
      let x4 = wB.from(M2, "base64");
      return ud.prototype.decode.call(this, x4, r);
    };
  });
  dd = T9((e3) => {
    var Qy = e3;
    Qy.der = hd();
    Qy.pem = Jy();
  });
  r3 = T9((t3) => {
    var MB = od(), _B = dd(), xB = Ie(), SB = t3;
    SB.define = function(e, r) {
      return new jf(e, r);
    };
    function jf(t, e) {
      this.name = t, this.body = e, this.decoders = {}, this.encoders = {};
    }
    jf.prototype._createNamed = function(e) {
      let r = this.name;
      function o2(f2) {
        this._initNamed(f2, r);
      }
      return xB(o2, e), o2.prototype._initNamed = function(p, m2) {
        e.call(this, p, m2);
      }, new o2(this);
    };
    jf.prototype._getDecoder = function(e) {
      return e = e || "der", this.decoders.hasOwnProperty(e) || (this.decoders[e] = this._createNamed(_B[e])), this.decoders[e];
    };
    jf.prototype.decode = function(e, r, o2) {
      return this._getDecoder(r).decode(e, o2);
    };
    jf.prototype._getEncoder = function(e) {
      return e = e || "der", this.encoders.hasOwnProperty(e) || (this.encoders[e] = this._createNamed(MB[e])), this.encoders[e];
    };
    jf.prototype.encode = function(e, r, o2) {
      return this._getEncoder(r).encode(e, o2);
    };
  });
  n3 = T9((i3) => {
    var p0 = i3;
    p0.Reporter = u0().Reporter;
    p0.DecoderBuffer = Kf().DecoderBuffer;
    p0.EncoderBuffer = Kf().EncoderBuffer;
    p0.Node = d0();
  });
  o3 = T9((a3) => {
    var f3 = a3;
    f3._reverse = function(e) {
      let r = {};
      return Object.keys(e).forEach(function(o2) {
        (o2 | 0) == o2 && (o2 = o2 | 0);
        let f2 = e[o2];
        r[f2] = o2;
      }), r;
    };
    f3.der = c0();
  });
  cd = T9((s3) => {
    var Zf = s3;
    Zf.bignum = td();
    Zf.define = r3().define;
    Zf.base = n3();
    Zf.constants = o3();
    Zf.decoders = dd();
    Zf.encoders = od();
  });
  d3 = T9((lL, l3) => {
    var zr = cd(), h3 = zr.define("Time", function() {
      this.choice({ utcTime: this.utctime(), generalTime: this.gentime() });
    }), EB = zr.define("AttributeTypeValue", function() {
      this.seq().obj(this.key("type").objid(), this.key("value").any());
    }), pd = zr.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
    }), AB = zr.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(pd), this.key("subjectPublicKey").bitstr());
    }), RB = zr.define("RelativeDistinguishedName", function() {
      this.setof(EB);
    }), BB = zr.define("RDNSequence", function() {
      this.seqof(RB);
    }), u3 = zr.define("Name", function() {
      this.choice({ rdnSequence: this.use(BB) });
    }), qB = zr.define("Validity", function() {
      this.seq().obj(this.key("notBefore").use(h3), this.key("notAfter").use(h3));
    }), IB = zr.define("Extension", function() {
      this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
    }), TB = zr.define("TBSCertificate", function() {
      this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(pd), this.key("issuer").use(u3), this.key("validity").use(qB), this.key("subject").use(u3), this.key("subjectPublicKeyInfo").use(AB), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(IB).optional());
    }), kB = zr.define("X509Certificate", function() {
      this.seq().obj(this.key("tbsCertificate").use(TB), this.key("signatureAlgorithm").use(pd), this.key("signatureValue").bitstr());
    });
    l3.exports = kB;
  });
  p3 = T9((Wr) => {
    var Hr = cd();
    Wr.certificate = d3();
    var LB = Hr.define("RSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
    });
    Wr.RSAPrivateKey = LB;
    var NB = Hr.define("RSAPublicKey", function() {
      this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
    });
    Wr.RSAPublicKey = NB;
    var DB = Hr.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(c3), this.key("subjectPublicKey").bitstr());
    });
    Wr.PublicKey = DB;
    var c3 = Hr.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
    }), PB = Hr.define("PrivateKeyInfo", function() {
      this.seq().obj(this.key("version").int(), this.key("algorithm").use(c3), this.key("subjectPrivateKey").octstr());
    });
    Wr.PrivateKey = PB;
    var CB = Hr.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
    });
    Wr.EncryptedPrivateKey = CB;
    var OB = Hr.define("DSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
    });
    Wr.DSAPrivateKey = OB;
    Wr.DSAparam = Hr.define("DSAparam", function() {
      this.int();
    });
    var FB = Hr.define("ECPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(UB), this.key("publicKey").optional().explicit(1).bitstr());
    });
    Wr.ECPrivateKey = FB;
    var UB = Hr.define("ECParameters", function() {
      this.choice({ namedCurve: this.objid() });
    });
    Wr.signature = Hr.define("signature", function() {
      this.seq().obj(this.key("r").int(), this.key("s").int());
    });
  });
  v3 = T9((cL, zB) => {
    zB.exports = { "2.16.840.1.101.3.4.1.1": "aes-128-ecb", "2.16.840.1.101.3.4.1.2": "aes-128-cbc", "2.16.840.1.101.3.4.1.3": "aes-128-ofb", "2.16.840.1.101.3.4.1.4": "aes-128-cfb", "2.16.840.1.101.3.4.1.21": "aes-192-ecb", "2.16.840.1.101.3.4.1.22": "aes-192-cbc", "2.16.840.1.101.3.4.1.23": "aes-192-ofb", "2.16.840.1.101.3.4.1.24": "aes-192-cfb", "2.16.840.1.101.3.4.1.41": "aes-256-ecb", "2.16.840.1.101.3.4.1.42": "aes-256-cbc", "2.16.840.1.101.3.4.1.43": "aes-256-ofb", "2.16.840.1.101.3.4.1.44": "aes-256-cfb" };
  });
  m3 = T9((pL, b32) => {
    var HB = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, WB = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, KB = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, jB = Ba(), ZB = Es(), v0 = Te().Buffer;
    b32.exports = function(t, e) {
      var r = t.toString(), o2 = r.match(HB), f2;
      if (o2) {
        var m2 = "aes" + o2[1], y3 = v0.from(o2[2], "hex"), M2 = v0.from(o2[3].replace(/[\r\n]/g, ""), "base64"), x4 = jB(e, y3.slice(0, 8), parseInt(o2[1], 10)).key, S3 = [], E3 = ZB.createDecipheriv(m2, x4, y3);
        S3.push(E3.update(M2)), S3.push(E3.final()), f2 = v0.concat(S3);
      } else {
        var p = r.match(KB);
        f2 = v0.from(p[2].replace(/[\r\n]/g, ""), "base64");
      }
      var B2 = r.match(WB)[1];
      return { tag: B2, data: f2 };
    };
  });
  Ha = T9((vL, y3) => {
    var fr = p3(), VB = v3(), $B = m3(), GB = Es(), YB = Iu(), vd = Te().Buffer;
    y3.exports = g3;
    function g3(t) {
      var e;
      typeof t == "object" && !vd.isBuffer(t) && (e = t.passphrase, t = t.key), typeof t == "string" && (t = vd.from(t));
      var r = $B(t, e), o2 = r.tag, f2 = r.data, p, m2;
      switch (o2) {
        case "CERTIFICATE":
          m2 = fr.certificate.decode(f2, "der").tbsCertificate.subjectPublicKeyInfo;
        case "PUBLIC KEY":
          switch (m2 || (m2 = fr.PublicKey.decode(f2, "der")), p = m2.algorithm.algorithm.join("."), p) {
            case "1.2.840.113549.1.1.1":
              return fr.RSAPublicKey.decode(m2.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
              return m2.subjectPrivateKey = m2.subjectPublicKey, { type: "ec", data: m2 };
            case "1.2.840.10040.4.1":
              return m2.algorithm.params.pub_key = fr.DSAparam.decode(m2.subjectPublicKey.data, "der"), { type: "dsa", data: m2.algorithm.params };
            default:
              throw new Error("unknown key id " + p);
          }
        case "ENCRYPTED PRIVATE KEY":
          f2 = fr.EncryptedPrivateKey.decode(f2, "der"), f2 = XB(f2, e);
        case "PRIVATE KEY":
          switch (m2 = fr.PrivateKey.decode(f2, "der"), p = m2.algorithm.algorithm.join("."), p) {
            case "1.2.840.113549.1.1.1":
              return fr.RSAPrivateKey.decode(m2.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
              return { curve: m2.algorithm.curve, privateKey: fr.ECPrivateKey.decode(m2.subjectPrivateKey, "der").privateKey };
            case "1.2.840.10040.4.1":
              return m2.algorithm.params.priv_key = fr.DSAparam.decode(m2.subjectPrivateKey, "der"), { type: "dsa", params: m2.algorithm.params };
            default:
              throw new Error("unknown key id " + p);
          }
        case "RSA PUBLIC KEY":
          return fr.RSAPublicKey.decode(f2, "der");
        case "RSA PRIVATE KEY":
          return fr.RSAPrivateKey.decode(f2, "der");
        case "DSA PRIVATE KEY":
          return { type: "dsa", params: fr.DSAPrivateKey.decode(f2, "der") };
        case "EC PRIVATE KEY":
          return f2 = fr.ECPrivateKey.decode(f2, "der"), { curve: f2.parameters.value, privateKey: f2.privateKey };
        default:
          throw new Error("unknown key type " + o2);
      }
    }
    g3.signature = fr.signature;
    function XB(t, e) {
      var r = t.algorithm.decrypt.kde.kdeparams.salt, o2 = parseInt(t.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), f2 = VB[t.algorithm.decrypt.cipher.algo.join(".")], p = t.algorithm.decrypt.cipher.iv, m2 = t.subjectPrivateKey, y4 = parseInt(f2.split("-")[1], 10) / 8, M2 = YB.pbkdf2Sync(e, r, o2, y4, "sha1"), x4 = GB.createDecipheriv(f2, M2, p), S3 = [];
      return S3.push(x4.update(m2)), S3.push(x4.final()), vd.concat(S3);
    }
  });
  bd = T9((bL, JB) => {
    JB.exports = { "1.3.132.0.10": "secp256k1", "1.3.132.0.33": "p224", "1.2.840.10045.3.1.1": "p192", "1.2.840.10045.3.1.7": "p256", "1.3.132.0.34": "p384", "1.3.132.0.35": "p521" };
  });
  _3 = T9((mL, m0) => {
    var Yt = Te().Buffer, Kn = wu(), QB = Ks(), eq = o0().ec, b0 = Ws(), tq = Ha(), rq = bd();
    function iq(t, e, r, o2, f2) {
      var p = tq(e);
      if (p.curve) {
        if (o2 !== "ecdsa" && o2 !== "ecdsa/rsa")
          throw new Error("wrong private key type");
        return nq(t, p);
      } else if (p.type === "dsa") {
        if (o2 !== "dsa")
          throw new Error("wrong private key type");
        return fq(t, p, r);
      } else if (o2 !== "rsa" && o2 !== "ecdsa/rsa")
        throw new Error("wrong private key type");
      t = Yt.concat([f2, t]);
      for (var m2 = p.modulus.byteLength(), y3 = [0, 1];t.length + y3.length + 1 < m2; )
        y3.push(255);
      y3.push(0);
      for (var M2 = -1;++M2 < t.length; )
        y3.push(t[M2]);
      var x4 = QB(y3, p);
      return x4;
    }
    function nq(t, e) {
      var r = rq[e.curve.join(".")];
      if (!r)
        throw new Error("unknown curve " + e.curve.join("."));
      var o2 = new eq(r), f2 = o2.keyFromPrivate(e.privateKey), p = f2.sign(t);
      return Yt.from(p.toDER());
    }
    function fq(t, e, r) {
      for (var o2 = e.params.priv_key, f2 = e.params.p, p = e.params.q, m2 = e.params.g, y3 = new b0(0), M2, x4 = md(t, p).mod(p), S3 = false, E3 = w3(o2, p, t, r);S3 === false; )
        M2 = M3(p, E3, r), y3 = sq(m2, M2, f2, p), S3 = M2.invm(p).imul(x4.add(o2.mul(y3))).mod(p), S3.cmpn(0) === 0 && (S3 = false, y3 = new b0(0));
      return aq(y3, S3);
    }
    function aq(t, e) {
      t = t.toArray(), e = e.toArray(), t[0] & 128 && (t = [0].concat(t)), e[0] & 128 && (e = [0].concat(e));
      var r = t.length + e.length + 4, o2 = [48, r, 2, t.length];
      return o2 = o2.concat(t, [2, e.length], e), Yt.from(o2);
    }
    function w3(t, e, r, o2) {
      if (t = Yt.from(t.toArray()), t.length < e.byteLength()) {
        var f2 = Yt.alloc(e.byteLength() - t.length);
        t = Yt.concat([f2, t]);
      }
      var p = r.length, m2 = oq(r, e), y3 = Yt.alloc(p);
      y3.fill(1);
      var M2 = Yt.alloc(p);
      return M2 = Kn(o2, M2).update(y3).update(Yt.from([0])).update(t).update(m2).digest(), y3 = Kn(o2, M2).update(y3).digest(), M2 = Kn(o2, M2).update(y3).update(Yt.from([1])).update(t).update(m2).digest(), y3 = Kn(o2, M2).update(y3).digest(), { k: M2, v: y3 };
    }
    function md(t, e) {
      var r = new b0(t), o2 = (t.length << 3) - e.bitLength();
      return o2 > 0 && r.ishrn(o2), r;
    }
    function oq(t, e) {
      t = md(t, e), t = t.mod(e);
      var r = Yt.from(t.toArray());
      if (r.length < e.byteLength()) {
        var o2 = Yt.alloc(e.byteLength() - r.length);
        r = Yt.concat([o2, r]);
      }
      return r;
    }
    function M3(t, e, r) {
      var o2, f2;
      do {
        for (o2 = Yt.alloc(0);o2.length * 8 < t.bitLength(); )
          e.v = Kn(r, e.k).update(e.v).digest(), o2 = Yt.concat([o2, e.v]);
        f2 = md(o2, t), e.k = Kn(r, e.k).update(e.v).update(Yt.from([0])).digest(), e.v = Kn(r, e.k).update(e.v).digest();
      } while (f2.cmp(t) !== -1);
      return f2;
    }
    function sq(t, e, r, o2) {
      return t.toRed(b0.mont(r)).redPow(e).fromRed().mod(o2);
    }
    m0.exports = iq;
    m0.exports.getKey = w3;
    m0.exports.makeKey = M3;
  });
  A3 = T9((gL, E3) => {
    var gd = Te().Buffer, Wa = Ws(), hq = o0().ec, S3 = Ha(), uq = bd();
    function lq(t, e, r, o2, f2) {
      var p = S3(r);
      if (p.type === "ec") {
        if (o2 !== "ecdsa" && o2 !== "ecdsa/rsa")
          throw new Error("wrong public key type");
        return dq(t, e, p);
      } else if (p.type === "dsa") {
        if (o2 !== "dsa")
          throw new Error("wrong public key type");
        return cq(t, e, p);
      } else if (o2 !== "rsa" && o2 !== "ecdsa/rsa")
        throw new Error("wrong public key type");
      e = gd.concat([f2, e]);
      for (var m2 = p.modulus.byteLength(), y3 = [1], M2 = 0;e.length + y3.length + 2 < m2; )
        y3.push(255), M2++;
      y3.push(0);
      for (var x4 = -1;++x4 < e.length; )
        y3.push(e[x4]);
      y3 = gd.from(y3);
      var S4 = Wa.mont(p.modulus);
      t = new Wa(t).toRed(S4), t = t.redPow(new Wa(p.publicExponent)), t = gd.from(t.fromRed().toArray());
      var E4 = M2 < 8 ? 1 : 0;
      for (m2 = Math.min(t.length, y3.length), t.length !== y3.length && (E4 = 1), x4 = -1;++x4 < m2; )
        E4 |= t[x4] ^ y3[x4];
      return E4 === 0;
    }
    function dq(t, e, r) {
      var o2 = uq[r.data.algorithm.curve.join(".")];
      if (!o2)
        throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
      var f2 = new hq(o2), p = r.data.subjectPrivateKey.data;
      return f2.verify(e, t, p);
    }
    function cq(t, e, r) {
      var o2 = r.data.p, f2 = r.data.q, p = r.data.g, m2 = r.data.pub_key, y3 = S3.signature.decode(t, "der"), M2 = y3.s, x4 = y3.r;
      x32(M2, f2), x32(x4, f2);
      var S4 = Wa.mont(o2), E4 = M2.invm(f2), B2 = p.toRed(S4).redPow(new Wa(e).mul(E4).mod(f2)).fromRed().mul(m2.toRed(S4).redPow(x4.mul(E4).mod(f2)).fromRed()).mod(o2).mod(f2);
      return B2.cmp(x4) === 0;
    }
    function x32(t, e) {
      if (t.cmpn(0) <= 0)
        throw new Error("invalid sig");
      if (t.cmp(e) >= e)
        throw new Error("invalid sig");
    }
    E3.exports = lq;
  });
  k3 = T9((yL, T32) => {
    var g0 = Te().Buffer, q3 = bf(), y0 = i2(), I3 = Ie(), pq = _3(), vq = A3(), jn = Mu();
    Object.keys(jn).forEach(function(t) {
      jn[t].id = g0.from(jn[t].id, "hex"), jn[t.toLowerCase()] = jn[t];
    });
    function Ka(t) {
      y0.Writable.call(this);
      var e = jn[t];
      if (!e)
        throw new Error("Unknown message digest");
      this._hashType = e.hash, this._hash = q3(e.hash), this._tag = e.id, this._signType = e.sign;
    }
    I3(Ka, y0.Writable);
    Ka.prototype._write = function(e, r, o2) {
      this._hash.update(e), o2();
    };
    Ka.prototype.update = function(e, r) {
      return typeof e == "string" && (e = g0.from(e, r)), this._hash.update(e), this;
    };
    Ka.prototype.sign = function(e, r) {
      this.end();
      var o2 = this._hash.digest(), f2 = pq(o2, e, this._hashType, this._signType, this._tag);
      return r ? f2.toString(r) : f2;
    };
    function ja(t) {
      y0.Writable.call(this);
      var e = jn[t];
      if (!e)
        throw new Error("Unknown message digest");
      this._hash = q3(e.hash), this._tag = e.id, this._signType = e.sign;
    }
    I3(ja, y0.Writable);
    ja.prototype._write = function(e, r, o2) {
      this._hash.update(e), o2();
    };
    ja.prototype.update = function(e, r) {
      return typeof e == "string" && (e = g0.from(e, r)), this._hash.update(e), this;
    };
    ja.prototype.verify = function(e, r, o2) {
      typeof r == "string" && (r = g0.from(r, o2)), this.end();
      var f2 = this._hash.digest();
      return vq(r, f2, e, this._signType, this._tag);
    };
    function R3(t) {
      return new Ka(t);
    }
    function B3(t) {
      return new ja(t);
    }
    T32.exports = { Sign: R3, Verify: B3, createSign: R3, createVerify: B3 };
  });
  N32 = T9((L3, yd) => {
    (function(t, e) {
      function r(v4, i) {
        if (!v4)
          throw new Error(i || "Assertion failed");
      }
      function o2(v4, i) {
        v4.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v4.prototype = new a2, v4.prototype.constructor = v4;
      }
      function f2(v4, i, a2) {
        if (f2.isBN(v4))
          return v4;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v4 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v4 || 0, i || 10, a2 || "be"));
      }
      typeof t == "object" ? t.exports = f2 : e.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p = window.Buffer : p = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s = 0;
        i[0] === "-" && (s++, this.negative = 1), s < i.length && (a2 === 16 ? this._parseHex(i, s, h3) : (this._parseBase(i, a2, s), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2, c, b4 = 0;
        if (h3 === "be")
          for (s = i.length - 1, u2 = 0;s >= 0; s -= 3)
            c = i[s] | i[s - 1] << 8 | i[s - 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        else if (h3 === "le")
          for (s = 0, u2 = 0;s < i.length; s += 3)
            c = i[s] | i[s + 1] << 8 | i[s + 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        return this.strip();
      };
      function m2(v4, i) {
        var a2 = v4.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v4, i, a2) {
        var h3 = m2(v4, a2);
        return a2 - 1 >= i && (h3 |= m2(v4, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2 = 0, c = 0, b4;
        if (h3 === "be")
          for (s = i.length - 1;s >= a2; s -= 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        else {
          var l2 = i.length - a2;
          for (s = l2 % 2 === 0 ? a2 + 1 : a2;s < i.length; s += 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        }
        this.strip();
      };
      function M2(v4, i, a2, h3) {
        for (var s = 0, u2 = Math.min(v4.length, a2), c = i;c < u2; c++) {
          var b4 = v4.charCodeAt(c) - 48;
          s *= h3, b4 >= 49 ? s += b4 - 49 + 10 : b4 >= 17 ? s += b4 - 17 + 10 : s += b4;
        }
        return s;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s = 0, u2 = 1;u2 <= 67108863; u2 *= a2)
          s++;
        s--, u2 = u2 / a2 | 0;
        for (var c = i.length - h3, b4 = c % s, l2 = Math.min(c, c - b4) + h3, n2 = 0, d2 = h3;d2 < l2; d2 += s)
          n2 = M2(i, d2, d2 + s, a2), this.imuln(u2), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        if (b4 !== 0) {
          var w3 = 1;
          for (n2 = M2(i, d2, i.length, a2), d2 = 0;d2 < b4; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s = 0, u2 = 0, c = 0;c < this.length; c++) {
            var b4 = this.words[c], l2 = ((b4 << s | u2) & 16777215).toString(16);
            u2 = b4 >>> 24 - s & 16777215, u2 !== 0 || c !== this.length - 1 ? h3 = x4[6 - l2.length] + l2 + h3 : h3 = l2 + h3, s += 2, s >= 26 && (s -= 26, c--);
          }
          for (u2 !== 0 && (h3 = u2.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n2 = S3[i], d2 = E3[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g3 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g3 + h3 : h3 = x4[n2 - g3.length] + g3 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r(typeof p < "u"), this.toArrayLike(p, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s = this.byteLength(), u2 = h3 || Math.max(1, s);
        r(s <= u2, "byte array longer than desired length"), r(u2 > 0, "Requested array length <= 0"), this.strip();
        var c = a2 === "le", b4 = new i(u2), l2, n2, d2 = this.clone();
        if (c) {
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[n2] = l2;
          for (;n2 < u2; n2++)
            b4[n2] = 0;
        } else {
          for (n2 = 0;n2 < u2 - s; n2++)
            b4[n2] = 0;
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[u2 - n2 - 1] = l2;
        }
        return b4;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B2(v4) {
        for (var i = new Array(v4.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s = a2 % 26;
          i[a2] = (v4.words[h3] & 1 << s) >>> s;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s = 0;s < h3.length; s++)
          this.words[s] = a2.words[s] ^ h3.words[s];
        if (this !== a2)
          for (;s < a2.length; s++)
            this.words[s] = a2.words[s];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s = 0;s < a2; s++)
          this.words[s] = ~this.words[s] & 67108863;
        return h3 > 0 && (this.words[s] = ~this.words[s] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s : this.words[h3] = this.words[h3] & ~(1 << s), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s;
        this.length > i.length ? (h3 = this, s = i) : (h3 = i, s = this);
        for (var u2 = 0, c = 0;c < s.length; c++)
          a2 = (h3.words[c] | 0) + (s.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        for (;u2 !== 0 && c < h3.length; c++)
          a2 = (h3.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        if (this.length = h3.length, u2 !== 0)
          this.words[this.length] = u2, this.length++;
        else if (h3 !== this)
          for (;c < h3.length; c++)
            this.words[c] = h3.words[c];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s, u2;
        h3 > 0 ? (s = this, u2 = i) : (s = i, u2 = this);
        for (var c = 0, b4 = 0;b4 < u2.length; b4++)
          a2 = (s.words[b4] | 0) - (u2.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        for (;c !== 0 && b4 < s.length; b4++)
          a2 = (s.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        if (c === 0 && b4 < s.length && s !== this)
          for (;b4 < s.length; b4++)
            this.words[b4] = s.words[b4];
        return this.length = Math.max(this.length, b4), s !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative;
        var h3 = v4.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s = v4.words[0] | 0, u2 = i.words[0] | 0, c = s * u2, b4 = c & 67108863, l2 = c / 67108864 | 0;
        a2.words[0] = b4;
        for (var n2 = 1;n2 < h3; n2++) {
          for (var d2 = l2 >>> 26, w3 = l2 & 67108863, g3 = Math.min(n2, i.length - 1), _4 = Math.max(0, n2 - v4.length + 1);_4 <= g3; _4++) {
            var A2 = n2 - _4 | 0;
            s = v4.words[A2] | 0, u2 = i.words[_4] | 0, c = s * u2 + w3, d2 += c / 67108864 | 0, w3 = c & 67108863;
          }
          a2.words[n2] = w3 | 0, l2 = d2 | 0;
        }
        return l2 !== 0 ? a2.words[n2] = l2 | 0 : a2.length--, a2.strip();
      }
      var L4 = function(i, a2, h3) {
        var s = i.words, u2 = a2.words, c = h3.words, b4 = 0, l2, n2, d2, w3 = s[0] | 0, g3 = w3 & 8191, _4 = w3 >>> 13, A2 = s[1] | 0, R3 = A2 & 8191, I2 = A2 >>> 13, Me = s[2] | 0, k2 = Me & 8191, D3 = Me >>> 13, nt2 = s[3] | 0, C2 = nt2 & 8191, O3 = nt2 >>> 13, vt = s[4] | 0, F = vt & 8191, U5 = vt >>> 13, bt = s[5] | 0, z = bt & 8191, H2 = bt >>> 13, mt = s[6] | 0, W = mt & 8191, K3 = mt >>> 13, gt = s[7] | 0, j3 = gt & 8191, Z3 = gt >>> 13, yt = s[8] | 0, V3 = yt & 8191, $3 = yt >>> 13, wt = s[9] | 0, G2 = wt & 8191, Y2 = wt >>> 13, Mt = u2[0] | 0, X2 = Mt & 8191, J2 = Mt >>> 13, _t = u2[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u2[2] | 0, te = xt & 8191, re = xt >>> 13, St = u2[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u2[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u2[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u2[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u2[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u2[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u2[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l2 = Math.imul(g3, X2), n2 = Math.imul(g3, J2), n2 = n2 + Math.imul(_4, X2) | 0, d2 = Math.imul(_4, J2);
        var ft2 = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ft2 >>> 26) | 0, ft2 &= 67108863, l2 = Math.imul(R3, X2), n2 = Math.imul(R3, J2), n2 = n2 + Math.imul(I2, X2) | 0, d2 = Math.imul(I2, J2), l2 = l2 + Math.imul(g3, Q3) | 0, n2 = n2 + Math.imul(g3, ee) | 0, n2 = n2 + Math.imul(_4, Q3) | 0, d2 = d2 + Math.imul(_4, ee) | 0;
        var Be = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l2 = Math.imul(k2, X2), n2 = Math.imul(k2, J2), n2 = n2 + Math.imul(D3, X2) | 0, d2 = Math.imul(D3, J2), l2 = l2 + Math.imul(R3, Q3) | 0, n2 = n2 + Math.imul(R3, ee) | 0, n2 = n2 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l2 = l2 + Math.imul(g3, te) | 0, n2 = n2 + Math.imul(g3, re) | 0, n2 = n2 + Math.imul(_4, te) | 0, d2 = d2 + Math.imul(_4, re) | 0;
        var qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l2 = Math.imul(C2, X2), n2 = Math.imul(C2, J2), n2 = n2 + Math.imul(O3, X2) | 0, d2 = Math.imul(O3, J2), l2 = l2 + Math.imul(k2, Q3) | 0, n2 = n2 + Math.imul(k2, ee) | 0, n2 = n2 + Math.imul(D3, Q3) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l2 = l2 + Math.imul(R3, te) | 0, n2 = n2 + Math.imul(R3, re) | 0, n2 = n2 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l2 = l2 + Math.imul(g3, ie) | 0, n2 = n2 + Math.imul(g3, ne) | 0, n2 = n2 + Math.imul(_4, ie) | 0, d2 = d2 + Math.imul(_4, ne) | 0;
        var ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l2 = Math.imul(F, X2), n2 = Math.imul(F, J2), n2 = n2 + Math.imul(U5, X2) | 0, d2 = Math.imul(U5, J2), l2 = l2 + Math.imul(C2, Q3) | 0, n2 = n2 + Math.imul(C2, ee) | 0, n2 = n2 + Math.imul(O3, Q3) | 0, d2 = d2 + Math.imul(O3, ee) | 0, l2 = l2 + Math.imul(k2, te) | 0, n2 = n2 + Math.imul(k2, re) | 0, n2 = n2 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l2 = l2 + Math.imul(R3, ie) | 0, n2 = n2 + Math.imul(R3, ne) | 0, n2 = n2 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l2 = l2 + Math.imul(g3, fe) | 0, n2 = n2 + Math.imul(g3, ae) | 0, n2 = n2 + Math.imul(_4, fe) | 0, d2 = d2 + Math.imul(_4, ae) | 0;
        var He = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l2 = Math.imul(z, X2), n2 = Math.imul(z, J2), n2 = n2 + Math.imul(H2, X2) | 0, d2 = Math.imul(H2, J2), l2 = l2 + Math.imul(F, Q3) | 0, n2 = n2 + Math.imul(F, ee) | 0, n2 = n2 + Math.imul(U5, Q3) | 0, d2 = d2 + Math.imul(U5, ee) | 0, l2 = l2 + Math.imul(C2, te) | 0, n2 = n2 + Math.imul(C2, re) | 0, n2 = n2 + Math.imul(O3, te) | 0, d2 = d2 + Math.imul(O3, re) | 0, l2 = l2 + Math.imul(k2, ie) | 0, n2 = n2 + Math.imul(k2, ne) | 0, n2 = n2 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l2 = l2 + Math.imul(R3, fe) | 0, n2 = n2 + Math.imul(R3, ae) | 0, n2 = n2 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l2 = l2 + Math.imul(g3, oe) | 0, n2 = n2 + Math.imul(g3, se) | 0, n2 = n2 + Math.imul(_4, oe) | 0, d2 = d2 + Math.imul(_4, se) | 0;
        var We = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l2 = Math.imul(W, X2), n2 = Math.imul(W, J2), n2 = n2 + Math.imul(K3, X2) | 0, d2 = Math.imul(K3, J2), l2 = l2 + Math.imul(z, Q3) | 0, n2 = n2 + Math.imul(z, ee) | 0, n2 = n2 + Math.imul(H2, Q3) | 0, d2 = d2 + Math.imul(H2, ee) | 0, l2 = l2 + Math.imul(F, te) | 0, n2 = n2 + Math.imul(F, re) | 0, n2 = n2 + Math.imul(U5, te) | 0, d2 = d2 + Math.imul(U5, re) | 0, l2 = l2 + Math.imul(C2, ie) | 0, n2 = n2 + Math.imul(C2, ne) | 0, n2 = n2 + Math.imul(O3, ie) | 0, d2 = d2 + Math.imul(O3, ne) | 0, l2 = l2 + Math.imul(k2, fe) | 0, n2 = n2 + Math.imul(k2, ae) | 0, n2 = n2 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l2 = l2 + Math.imul(R3, oe) | 0, n2 = n2 + Math.imul(R3, se) | 0, n2 = n2 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l2 = l2 + Math.imul(g3, he) | 0, n2 = n2 + Math.imul(g3, ue) | 0, n2 = n2 + Math.imul(_4, he) | 0, d2 = d2 + Math.imul(_4, ue) | 0;
        var Ke = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l2 = Math.imul(j3, X2), n2 = Math.imul(j3, J2), n2 = n2 + Math.imul(Z3, X2) | 0, d2 = Math.imul(Z3, J2), l2 = l2 + Math.imul(W, Q3) | 0, n2 = n2 + Math.imul(W, ee) | 0, n2 = n2 + Math.imul(K3, Q3) | 0, d2 = d2 + Math.imul(K3, ee) | 0, l2 = l2 + Math.imul(z, te) | 0, n2 = n2 + Math.imul(z, re) | 0, n2 = n2 + Math.imul(H2, te) | 0, d2 = d2 + Math.imul(H2, re) | 0, l2 = l2 + Math.imul(F, ie) | 0, n2 = n2 + Math.imul(F, ne) | 0, n2 = n2 + Math.imul(U5, ie) | 0, d2 = d2 + Math.imul(U5, ne) | 0, l2 = l2 + Math.imul(C2, fe) | 0, n2 = n2 + Math.imul(C2, ae) | 0, n2 = n2 + Math.imul(O3, fe) | 0, d2 = d2 + Math.imul(O3, ae) | 0, l2 = l2 + Math.imul(k2, oe) | 0, n2 = n2 + Math.imul(k2, se) | 0, n2 = n2 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l2 = l2 + Math.imul(R3, he) | 0, n2 = n2 + Math.imul(R3, ue) | 0, n2 = n2 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l2 = l2 + Math.imul(g3, le) | 0, n2 = n2 + Math.imul(g3, de) | 0, n2 = n2 + Math.imul(_4, le) | 0, d2 = d2 + Math.imul(_4, de) | 0;
        var je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l2 = Math.imul(V3, X2), n2 = Math.imul(V3, J2), n2 = n2 + Math.imul($3, X2) | 0, d2 = Math.imul($3, J2), l2 = l2 + Math.imul(j3, Q3) | 0, n2 = n2 + Math.imul(j3, ee) | 0, n2 = n2 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l2 = l2 + Math.imul(W, te) | 0, n2 = n2 + Math.imul(W, re) | 0, n2 = n2 + Math.imul(K3, te) | 0, d2 = d2 + Math.imul(K3, re) | 0, l2 = l2 + Math.imul(z, ie) | 0, n2 = n2 + Math.imul(z, ne) | 0, n2 = n2 + Math.imul(H2, ie) | 0, d2 = d2 + Math.imul(H2, ne) | 0, l2 = l2 + Math.imul(F, fe) | 0, n2 = n2 + Math.imul(F, ae) | 0, n2 = n2 + Math.imul(U5, fe) | 0, d2 = d2 + Math.imul(U5, ae) | 0, l2 = l2 + Math.imul(C2, oe) | 0, n2 = n2 + Math.imul(C2, se) | 0, n2 = n2 + Math.imul(O3, oe) | 0, d2 = d2 + Math.imul(O3, se) | 0, l2 = l2 + Math.imul(k2, he) | 0, n2 = n2 + Math.imul(k2, ue) | 0, n2 = n2 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l2 = l2 + Math.imul(R3, le) | 0, n2 = n2 + Math.imul(R3, de) | 0, n2 = n2 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l2 = l2 + Math.imul(g3, ce) | 0, n2 = n2 + Math.imul(g3, pe) | 0, n2 = n2 + Math.imul(_4, ce) | 0, d2 = d2 + Math.imul(_4, pe) | 0;
        var Ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l2 = Math.imul(G2, X2), n2 = Math.imul(G2, J2), n2 = n2 + Math.imul(Y2, X2) | 0, d2 = Math.imul(Y2, J2), l2 = l2 + Math.imul(V3, Q3) | 0, n2 = n2 + Math.imul(V3, ee) | 0, n2 = n2 + Math.imul($3, Q3) | 0, d2 = d2 + Math.imul($3, ee) | 0, l2 = l2 + Math.imul(j3, te) | 0, n2 = n2 + Math.imul(j3, re) | 0, n2 = n2 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l2 = l2 + Math.imul(W, ie) | 0, n2 = n2 + Math.imul(W, ne) | 0, n2 = n2 + Math.imul(K3, ie) | 0, d2 = d2 + Math.imul(K3, ne) | 0, l2 = l2 + Math.imul(z, fe) | 0, n2 = n2 + Math.imul(z, ae) | 0, n2 = n2 + Math.imul(H2, fe) | 0, d2 = d2 + Math.imul(H2, ae) | 0, l2 = l2 + Math.imul(F, oe) | 0, n2 = n2 + Math.imul(F, se) | 0, n2 = n2 + Math.imul(U5, oe) | 0, d2 = d2 + Math.imul(U5, se) | 0, l2 = l2 + Math.imul(C2, he) | 0, n2 = n2 + Math.imul(C2, ue) | 0, n2 = n2 + Math.imul(O3, he) | 0, d2 = d2 + Math.imul(O3, ue) | 0, l2 = l2 + Math.imul(k2, le) | 0, n2 = n2 + Math.imul(k2, de) | 0, n2 = n2 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l2 = l2 + Math.imul(R3, ce) | 0, n2 = n2 + Math.imul(R3, pe) | 0, n2 = n2 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l2 = l2 + Math.imul(g3, ve) | 0, n2 = n2 + Math.imul(g3, be) | 0, n2 = n2 + Math.imul(_4, ve) | 0, d2 = d2 + Math.imul(_4, be) | 0;
        var Ve = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l2 = Math.imul(G2, Q3), n2 = Math.imul(G2, ee), n2 = n2 + Math.imul(Y2, Q3) | 0, d2 = Math.imul(Y2, ee), l2 = l2 + Math.imul(V3, te) | 0, n2 = n2 + Math.imul(V3, re) | 0, n2 = n2 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l2 = l2 + Math.imul(j3, ie) | 0, n2 = n2 + Math.imul(j3, ne) | 0, n2 = n2 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l2 = l2 + Math.imul(W, fe) | 0, n2 = n2 + Math.imul(W, ae) | 0, n2 = n2 + Math.imul(K3, fe) | 0, d2 = d2 + Math.imul(K3, ae) | 0, l2 = l2 + Math.imul(z, oe) | 0, n2 = n2 + Math.imul(z, se) | 0, n2 = n2 + Math.imul(H2, oe) | 0, d2 = d2 + Math.imul(H2, se) | 0, l2 = l2 + Math.imul(F, he) | 0, n2 = n2 + Math.imul(F, ue) | 0, n2 = n2 + Math.imul(U5, he) | 0, d2 = d2 + Math.imul(U5, ue) | 0, l2 = l2 + Math.imul(C2, le) | 0, n2 = n2 + Math.imul(C2, de) | 0, n2 = n2 + Math.imul(O3, le) | 0, d2 = d2 + Math.imul(O3, de) | 0, l2 = l2 + Math.imul(k2, ce) | 0, n2 = n2 + Math.imul(k2, pe) | 0, n2 = n2 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l2 = l2 + Math.imul(R3, ve) | 0, n2 = n2 + Math.imul(R3, be) | 0, n2 = n2 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l2 = Math.imul(G2, te), n2 = Math.imul(G2, re), n2 = n2 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l2 = l2 + Math.imul(V3, ie) | 0, n2 = n2 + Math.imul(V3, ne) | 0, n2 = n2 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l2 = l2 + Math.imul(j3, fe) | 0, n2 = n2 + Math.imul(j3, ae) | 0, n2 = n2 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l2 = l2 + Math.imul(W, oe) | 0, n2 = n2 + Math.imul(W, se) | 0, n2 = n2 + Math.imul(K3, oe) | 0, d2 = d2 + Math.imul(K3, se) | 0, l2 = l2 + Math.imul(z, he) | 0, n2 = n2 + Math.imul(z, ue) | 0, n2 = n2 + Math.imul(H2, he) | 0, d2 = d2 + Math.imul(H2, ue) | 0, l2 = l2 + Math.imul(F, le) | 0, n2 = n2 + Math.imul(F, de) | 0, n2 = n2 + Math.imul(U5, le) | 0, d2 = d2 + Math.imul(U5, de) | 0, l2 = l2 + Math.imul(C2, ce) | 0, n2 = n2 + Math.imul(C2, pe) | 0, n2 = n2 + Math.imul(O3, ce) | 0, d2 = d2 + Math.imul(O3, pe) | 0, l2 = l2 + Math.imul(k2, ve) | 0, n2 = n2 + Math.imul(k2, be) | 0, n2 = n2 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l2 = Math.imul(G2, ie), n2 = Math.imul(G2, ne), n2 = n2 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l2 = l2 + Math.imul(V3, fe) | 0, n2 = n2 + Math.imul(V3, ae) | 0, n2 = n2 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l2 = l2 + Math.imul(j3, oe) | 0, n2 = n2 + Math.imul(j3, se) | 0, n2 = n2 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l2 = l2 + Math.imul(W, he) | 0, n2 = n2 + Math.imul(W, ue) | 0, n2 = n2 + Math.imul(K3, he) | 0, d2 = d2 + Math.imul(K3, ue) | 0, l2 = l2 + Math.imul(z, le) | 0, n2 = n2 + Math.imul(z, de) | 0, n2 = n2 + Math.imul(H2, le) | 0, d2 = d2 + Math.imul(H2, de) | 0, l2 = l2 + Math.imul(F, ce) | 0, n2 = n2 + Math.imul(F, pe) | 0, n2 = n2 + Math.imul(U5, ce) | 0, d2 = d2 + Math.imul(U5, pe) | 0, l2 = l2 + Math.imul(C2, ve) | 0, n2 = n2 + Math.imul(C2, be) | 0, n2 = n2 + Math.imul(O3, ve) | 0, d2 = d2 + Math.imul(O3, be) | 0;
        var Ye = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l2 = Math.imul(G2, fe), n2 = Math.imul(G2, ae), n2 = n2 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l2 = l2 + Math.imul(V3, oe) | 0, n2 = n2 + Math.imul(V3, se) | 0, n2 = n2 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l2 = l2 + Math.imul(j3, he) | 0, n2 = n2 + Math.imul(j3, ue) | 0, n2 = n2 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l2 = l2 + Math.imul(W, le) | 0, n2 = n2 + Math.imul(W, de) | 0, n2 = n2 + Math.imul(K3, le) | 0, d2 = d2 + Math.imul(K3, de) | 0, l2 = l2 + Math.imul(z, ce) | 0, n2 = n2 + Math.imul(z, pe) | 0, n2 = n2 + Math.imul(H2, ce) | 0, d2 = d2 + Math.imul(H2, pe) | 0, l2 = l2 + Math.imul(F, ve) | 0, n2 = n2 + Math.imul(F, be) | 0, n2 = n2 + Math.imul(U5, ve) | 0, d2 = d2 + Math.imul(U5, be) | 0;
        var Xe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l2 = Math.imul(G2, oe), n2 = Math.imul(G2, se), n2 = n2 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l2 = l2 + Math.imul(V3, he) | 0, n2 = n2 + Math.imul(V3, ue) | 0, n2 = n2 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l2 = l2 + Math.imul(j3, le) | 0, n2 = n2 + Math.imul(j3, de) | 0, n2 = n2 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l2 = l2 + Math.imul(W, ce) | 0, n2 = n2 + Math.imul(W, pe) | 0, n2 = n2 + Math.imul(K3, ce) | 0, d2 = d2 + Math.imul(K3, pe) | 0, l2 = l2 + Math.imul(z, ve) | 0, n2 = n2 + Math.imul(z, be) | 0, n2 = n2 + Math.imul(H2, ve) | 0, d2 = d2 + Math.imul(H2, be) | 0;
        var Je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l2 = Math.imul(G2, he), n2 = Math.imul(G2, ue), n2 = n2 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l2 = l2 + Math.imul(V3, le) | 0, n2 = n2 + Math.imul(V3, de) | 0, n2 = n2 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l2 = l2 + Math.imul(j3, ce) | 0, n2 = n2 + Math.imul(j3, pe) | 0, n2 = n2 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l2 = l2 + Math.imul(W, ve) | 0, n2 = n2 + Math.imul(W, be) | 0, n2 = n2 + Math.imul(K3, ve) | 0, d2 = d2 + Math.imul(K3, be) | 0;
        var Qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l2 = Math.imul(G2, le), n2 = Math.imul(G2, de), n2 = n2 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l2 = l2 + Math.imul(V3, ce) | 0, n2 = n2 + Math.imul(V3, pe) | 0, n2 = n2 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l2 = l2 + Math.imul(j3, ve) | 0, n2 = n2 + Math.imul(j3, be) | 0, n2 = n2 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l2 = Math.imul(G2, ce), n2 = Math.imul(G2, pe), n2 = n2 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l2 = l2 + Math.imul(V3, ve) | 0, n2 = n2 + Math.imul(V3, be) | 0, n2 = n2 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l2 = Math.imul(G2, ve), n2 = Math.imul(G2, be), n2 = n2 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        return b4 = (d2 + (n2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft2, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b4 !== 0 && (c[19] = b4, h3.length++), h3;
      };
      Math.imul || (L4 = q);
      function ge(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative, a2.length = v4.length + i.length;
        for (var h3 = 0, s = 0, u2 = 0;u2 < a2.length - 1; u2++) {
          var c = s;
          s = 0;
          for (var b4 = h3 & 67108863, l2 = Math.min(u2, i.length - 1), n2 = Math.max(0, u2 - v4.length + 1);n2 <= l2; n2++) {
            var d2 = u2 - n2, w3 = v4.words[d2] | 0, g3 = i.words[n2] | 0, _4 = w3 * g3, A2 = _4 & 67108863;
            c = c + (_4 / 67108864 | 0) | 0, A2 = A2 + b4 | 0, b4 = A2 & 67108863, c = c + (A2 >>> 26) | 0, s += c >>> 26, c &= 67108863;
          }
          a2.words[u2] = b4, h3 = c, c = s;
        }
        return h3 !== 0 ? a2.words[u2] = h3 : a2.length--, a2.strip();
      }
      function _e(v4, i, a2) {
        var h3 = new N5;
        return h3.mulp(v4, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L4(this, i, a2) : s < 63 ? h3 = q(this, i, a2) : s < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N5(v4, i) {
        this.x = v4, this.y = i;
      }
      N5.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s = 0;s < i; s++)
          a2[s] = this.revBin(s, h3, i);
        return a2;
      }, N5.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s = 0, u2 = 0;u2 < a2; u2++)
          s |= (i & 1) << a2 - u2 - 1, i >>= 1;
        return s;
      }, N5.prototype.permute = function(i, a2, h3, s, u2, c) {
        for (var b4 = 0;b4 < c; b4++)
          s[b4] = a2[i[b4]], u2[b4] = h3[i[b4]];
      }, N5.prototype.transform = function(i, a2, h3, s, u2, c) {
        this.permute(c, i, a2, h3, s, u2);
        for (var b4 = 1;b4 < u2; b4 <<= 1)
          for (var l2 = b4 << 1, n2 = Math.cos(2 * Math.PI / l2), d2 = Math.sin(2 * Math.PI / l2), w3 = 0;w3 < u2; w3 += l2)
            for (var g3 = n2, _4 = d2, A2 = 0;A2 < b4; A2++) {
              var R3 = h3[w3 + A2], I2 = s[w3 + A2], Me = h3[w3 + A2 + b4], k2 = s[w3 + A2 + b4], D3 = g3 * Me - _4 * k2;
              k2 = g3 * k2 + _4 * Me, Me = D3, h3[w3 + A2] = R3 + Me, s[w3 + A2] = I2 + k2, h3[w3 + A2 + b4] = R3 - Me, s[w3 + A2 + b4] = I2 - k2, A2 !== l2 && (D3 = n2 * g3 - d2 * _4, _4 = n2 * _4 + d2 * g3, g3 = D3);
            }
      }, N5.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s = h3 & 1, u2 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u2++;
        return 1 << u2 + 1 + s;
      }, N5.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s = 0;s < h3 / 2; s++) {
            var u2 = i[s];
            i[s] = i[h3 - s - 1], i[h3 - s - 1] = u2, u2 = a2[s], a2[s] = -a2[h3 - s - 1], a2[h3 - s - 1] = -u2;
          }
      }, N5.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s = 0;s < a2 / 2; s++) {
          var u2 = Math.round(i[2 * s + 1] / a2) * 8192 + Math.round(i[2 * s] / a2) + h3;
          i[s] = u2 & 67108863, u2 < 67108864 ? h3 = 0 : h3 = u2 / 67108864 | 0;
        }
        return i;
      }, N5.prototype.convert13b = function(i, a2, h3, s) {
        for (var u2 = 0, c = 0;c < a2; c++)
          u2 = u2 + (i[c] | 0), h3[2 * c] = u2 & 8191, u2 = u2 >>> 13, h3[2 * c + 1] = u2 & 8191, u2 = u2 >>> 13;
        for (c = 2 * a2;c < s; ++c)
          h3[c] = 0;
        r(u2 === 0), r((u2 & -8192) === 0);
      }, N5.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N5.prototype.mulp = function(i, a2, h3) {
        var s = 2 * this.guessLen13b(i.length, a2.length), u2 = this.makeRBT(s), c = this.stub(s), b4 = new Array(s), l2 = new Array(s), n2 = new Array(s), d2 = new Array(s), w3 = new Array(s), g3 = new Array(s), _4 = h3.words;
        _4.length = s, this.convert13b(i.words, i.length, b4, s), this.convert13b(a2.words, a2.length, d2, s), this.transform(b4, c, l2, n2, s, u2), this.transform(d2, c, w3, g3, s, u2);
        for (var A2 = 0;A2 < s; A2++) {
          var R3 = l2[A2] * w3[A2] - n2[A2] * g3[A2];
          n2[A2] = l2[A2] * g3[A2] + n2[A2] * w3[A2], l2[A2] = R3;
        }
        return this.conjugate(l2, n2, s), this.transform(l2, n2, _4, c, s, u2), this.conjugate(_4, c, s), this.normalize13b(_4, s), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r(typeof i == "number"), r(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s = (this.words[h3] | 0) * i, u2 = (s & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s / 67108864 | 0, a2 += u2 >>> 26, this.words[h3] = u2 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B2(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s = 0;s < a2.length && a2[s] === 0; s++, h3 = h3.sqr())
          ;
        if (++s < a2.length)
          for (var u2 = h3.sqr();s < a2.length; s++, u2 = u2.sqr())
            a2[s] !== 0 && (h3 = h3.mul(u2));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 67108863 >>> 26 - a2 << 26 - a2, u2;
        if (a2 !== 0) {
          var c = 0;
          for (u2 = 0;u2 < this.length; u2++) {
            var b4 = this.words[u2] & s, l2 = (this.words[u2] | 0) - b4 << a2;
            this.words[u2] = l2 | c, c = b4 >>> 26 - a2;
          }
          c && (this.words[u2] = c, this.length++);
        }
        if (h3 !== 0) {
          for (u2 = this.length - 1;u2 >= 0; u2--)
            this.words[u2 + h3] = this.words[u2];
          for (u2 = 0;u2 < h3; u2++)
            this.words[u2] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r(typeof i == "number" && i >= 0);
        var s;
        a2 ? s = (a2 - a2 % 26) / 26 : s = 0;
        var u2 = i % 26, c = Math.min((i - u2) / 26, this.length), b4 = 67108863 ^ 67108863 >>> u2 << u2, l2 = h3;
        if (s -= c, s = Math.max(0, s), l2) {
          for (var n2 = 0;n2 < c; n2++)
            l2.words[n2] = this.words[n2];
          l2.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n2 = 0;n2 < this.length; n2++)
              this.words[n2] = this.words[n2 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n2 = this.length - 1;n2 >= 0 && (d2 !== 0 || n2 >= s); n2--) {
          var w3 = this.words[n2] | 0;
          this.words[n2] = d2 << 26 - u2 | w3 >>> u2, d2 = w3 & b4;
        }
        return l2 && d2 !== 0 && (l2.words[l2.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return false;
        var u2 = this.words[h3];
        return !!(u2 & s);
      }, f2.prototype.imaskn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r(typeof i == "number"), r(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r(typeof i == "number"), r(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s = i.length + h3, u2;
        this._expand(s);
        var c, b4 = 0;
        for (u2 = 0;u2 < i.length; u2++) {
          c = (this.words[u2 + h3] | 0) + b4;
          var l2 = (i.words[u2] | 0) * a2;
          c -= l2 & 67108863, b4 = (c >> 26) - (l2 / 67108864 | 0), this.words[u2 + h3] = c & 67108863;
        }
        for (;u2 < this.length - h3; u2++)
          c = (this.words[u2 + h3] | 0) + b4, b4 = c >> 26, this.words[u2 + h3] = c & 67108863;
        if (b4 === 0)
          return this.strip();
        for (r(b4 === -1), b4 = 0, u2 = 0;u2 < this.length; u2++)
          c = -(this.words[u2] | 0) + b4, b4 = c >> 26, this.words[u2] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s = this.clone(), u2 = i, c = u2.words[u2.length - 1] | 0, b4 = this._countBits(c);
        h3 = 26 - b4, h3 !== 0 && (u2 = u2.ushln(h3), s.iushln(h3), c = u2.words[u2.length - 1] | 0);
        var l2 = s.length - u2.length, n2;
        if (a2 !== "mod") {
          n2 = new f2(null), n2.length = l2 + 1, n2.words = new Array(n2.length);
          for (var d2 = 0;d2 < n2.length; d2++)
            n2.words[d2] = 0;
        }
        var w3 = s.clone()._ishlnsubmul(u2, 1, l2);
        w3.negative === 0 && (s = w3, n2 && (n2.words[l2] = 1));
        for (var g3 = l2 - 1;g3 >= 0; g3--) {
          var _4 = (s.words[u2.length + g3] | 0) * 67108864 + (s.words[u2.length + g3 - 1] | 0);
          for (_4 = Math.min(_4 / c | 0, 67108863), s._ishlnsubmul(u2, _4, g3);s.negative !== 0; )
            _4--, s.negative = 0, s._ishlnsubmul(u2, 1, g3), s.isZero() || (s.negative ^= 1);
          n2 && (n2.words[g3] = _4);
        }
        return n2 && n2.strip(), s.strip(), a2 !== "div" && h3 !== 0 && s.iushrn(h3), { div: n2 || null, mod: s };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s, u2, c;
        return this.negative !== 0 && i.negative === 0 ? (c = this.neg().divmod(i, a2), a2 !== "mod" && (s = c.div.neg()), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.iadd(i)), { div: s, mod: u2 }) : this.negative === 0 && i.negative !== 0 ? (c = this.divmod(i.neg(), a2), a2 !== "mod" && (s = c.div.neg()), { div: s, mod: c.mod }) : (this.negative & i.negative) !== 0 ? (c = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.isub(i)), { div: c.div, mod: u2 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s = i.ushrn(1), u2 = i.andln(1), c = h3.cmp(s);
        return c < 0 || u2 === 1 && c === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s = this.length - 1;s >= 0; s--)
          h3 = (a2 * h3 + (this.words[s] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s / i | 0, a2 = s % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = new f2(0), b4 = new f2(1), l2 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l2;
        for (var n2 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g3 = 1;(a2.words[0] & g3) === 0 && w3 < 26; ++w3, g3 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s.isOdd() || u2.isOdd()) && (s.iadd(n2), u2.isub(d2)), s.iushrn(1), u2.iushrn(1);
          for (var _4 = 0, A2 = 1;(h3.words[0] & A2) === 0 && _4 < 26; ++_4, A2 <<= 1)
            ;
          if (_4 > 0)
            for (h3.iushrn(_4);_4-- > 0; )
              (c.isOdd() || b4.isOdd()) && (c.iadd(n2), b4.isub(d2)), c.iushrn(1), b4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(c), u2.isub(b4)) : (h3.isub(a2), c.isub(s), b4.isub(u2));
        }
        return { a: c, b: b4, gcd: h3.iushln(l2) };
      }, f2.prototype._invmp = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b4 = 0, l2 = 1;(a2.words[0] & l2) === 0 && b4 < 26; ++b4, l2 <<= 1)
            ;
          if (b4 > 0)
            for (a2.iushrn(b4);b4-- > 0; )
              s.isOdd() && s.iadd(c), s.iushrn(1);
          for (var n2 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n2 < 26; ++n2, d2 <<= 1)
            ;
          if (n2 > 0)
            for (h3.iushrn(n2);n2-- > 0; )
              u2.isOdd() && u2.iadd(c), u2.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(u2)) : (h3.isub(a2), u2.isub(s));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s : w3 = u2, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s = 0;a2.isEven() && h3.isEven(); s++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u2 = a2.cmp(h3);
          if (u2 < 0) {
            var c = a2;
            a2 = h3, h3 = c;
          } else if (u2 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s, this;
        for (var u2 = s, c = h3;u2 !== 0 && c < this.length; c++) {
          var b4 = this.words[c] | 0;
          b4 += u2, u2 = b4 >>> 26, b4 &= 67108863, this.words[c] = b4;
        }
        return u2 !== 0 && (this.words[c] = u2, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r(i <= 67108863, "Number is too big");
          var s = this.words[0] | 0;
          h3 = s === i ? 0 : s < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = this.words[h3] | 0, u2 = i.words[h3] | 0;
          if (s !== u2) {
            s < u2 ? a2 = -1 : s > u2 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P4(i);
      }, f2.prototype.toRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v4, i) {
        this.name = v4, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s === 0 ? (a2.words[0] = 0, a2.length = 1) : s > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s = Math.min(i.length, 9), u2 = 0;u2 < s; u2++)
          a2.words[u2] = i.words[u2];
        if (a2.length = s, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c = i.words[9];
        for (a2.words[a2.length++] = c & h3, u2 = 10;u2 < i.length; u2++) {
          var b4 = i.words[u2] | 0;
          i.words[u2 - 10] = (b4 & h3) << 4 | c >>> 22, c = b4;
        }
        c >>>= 22, i.words[u2 - 10] = c, c === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = i.words[h3] | 0;
          a2 += s * 977, i.words[h3] = a2 & 67108863, a2 = s * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = (i.words[h3] | 0) * 19 + a2, u2 = s & 67108863;
          s >>>= 26, i.words[h3] = u2, a2 = s;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P4(v4) {
        if (typeof v4 == "string") {
          var i = f2._prime(v4);
          this.m = i.p, this.prime = i;
        } else
          r(v4.gtn(1), "modulus must be greater than 1"), this.m = v4, this.prime = null;
      }
      P4.prototype._verify1 = function(i) {
        r(i.negative === 0, "red works only with positives"), r(i.red, "red works only with red numbers");
      }, P4.prototype._verify2 = function(i, a2) {
        r((i.negative | a2.negative) === 0, "red works only with positives"), r(i.red && i.red === a2.red, "red works only with red numbers");
      }, P4.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P4.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P4.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P4.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P4.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P4.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P4.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P4.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P4.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P4.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P4.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P4.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s = this.m.subn(1), u2 = 0;!s.isZero() && s.andln(1) === 0; )
          u2++, s.iushrn(1);
        r(!s.isZero());
        var c = new f2(1).toRed(this), b4 = c.redNeg(), l2 = this.m.subn(1).iushrn(1), n2 = this.m.bitLength();
        for (n2 = new f2(2 * n2 * n2).toRed(this);this.pow(n2, l2).cmp(b4) !== 0; )
          n2.redIAdd(b4);
        for (var d2 = this.pow(n2, s), w3 = this.pow(i, s.addn(1).iushrn(1)), g3 = this.pow(i, s), _4 = u2;g3.cmp(c) !== 0; ) {
          for (var A2 = g3, R3 = 0;A2.cmp(c) !== 0; R3++)
            A2 = A2.redSqr();
          r(R3 < _4);
          var I2 = this.pow(d2, new f2(1).iushln(_4 - R3 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g3 = g3.redMul(d2), _4 = R3;
        }
        return w3;
      }, P4.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P4.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s = new Array(1 << h3);
        s[0] = new f2(1).toRed(this), s[1] = i;
        for (var u2 = 2;u2 < s.length; u2++)
          s[u2] = this.mul(s[u2 - 1], i);
        var c = s[0], b4 = 0, l2 = 0, n2 = a2.bitLength() % 26;
        for (n2 === 0 && (n2 = 26), u2 = a2.length - 1;u2 >= 0; u2--) {
          for (var d2 = a2.words[u2], w3 = n2 - 1;w3 >= 0; w3--) {
            var g3 = d2 >> w3 & 1;
            if (c !== s[0] && (c = this.sqr(c)), g3 === 0 && b4 === 0) {
              l2 = 0;
              continue;
            }
            b4 <<= 1, b4 |= g3, l2++, !(l2 !== h3 && (u2 !== 0 || w3 !== 0)) && (c = this.mul(c, s[b4]), l2 = 0, b4 = 0);
          }
          n2 = 26;
        }
        return c;
      }, P4.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P4.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v4) {
        P4.call(this, v4), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P4), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof yd > "u" || yd, L3);
  });
  P32 = T9((wL, D3) => {
    var bq = o0(), mq = N32();
    D3.exports = function(e) {
      return new Zn(e);
    };
    var hr = { secp256k1: { name: "secp256k1", byteLength: 32 }, secp224r1: { name: "p224", byteLength: 28 }, prime256v1: { name: "p256", byteLength: 32 }, prime192v1: { name: "p192", byteLength: 24 }, ed25519: { name: "ed25519", byteLength: 32 }, secp384r1: { name: "p384", byteLength: 48 }, secp521r1: { name: "p521", byteLength: 66 } };
    hr.p224 = hr.secp224r1;
    hr.p256 = hr.secp256r1 = hr.prime256v1;
    hr.p192 = hr.secp192r1 = hr.prime192v1;
    hr.p384 = hr.secp384r1;
    hr.p521 = hr.secp521r1;
    function Zn(t) {
      this.curveType = hr[t], this.curveType || (this.curveType = { name: t }), this.curve = new bq.ec(this.curveType.name), this.keys = undefined;
    }
    Zn.prototype.generateKeys = function(t, e) {
      return this.keys = this.curve.genKeyPair(), this.getPublicKey(t, e);
    };
    Zn.prototype.computeSecret = function(t, e, r) {
      e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e));
      var o2 = this.curve.keyFromPublic(t).getPublic(), f2 = o2.mul(this.keys.getPrivate()).getX();
      return wd(f2, r, this.curveType.byteLength);
    };
    Zn.prototype.getPublicKey = function(t, e) {
      var r = this.keys.getPublic(e === "compressed", true);
      return e === "hybrid" && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), wd(r, t);
    };
    Zn.prototype.getPrivateKey = function(t) {
      return wd(this.keys.getPrivate(), t);
    };
    Zn.prototype.setPublicKey = function(t, e) {
      return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this.keys._importPublic(t), this;
    };
    Zn.prototype.setPrivateKey = function(t, e) {
      e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e));
      var r = new mq(t);
      return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
    };
    function wd(t, e, r) {
      Array.isArray(t) || (t = t.toArray());
      var o2 = new Buffer(t);
      if (r && o2.length < r) {
        var f2 = new Buffer(r - o2.length);
        f2.fill(0), o2 = Buffer.concat([f2, o2]);
      }
      return e ? o2.toString(e) : o2;
    }
  });
  _d = T9((ML, C3) => {
    var gq = bf(), Md = Te().Buffer;
    C3.exports = function(t, e) {
      for (var r = Md.alloc(0), o2 = 0, f2;r.length < e; )
        f2 = yq(o2++), r = Md.concat([r, gq("sha1").update(t).update(f2).digest()]);
      return r.slice(0, e);
    };
    function yq(t) {
      var e = Md.allocUnsafe(4);
      return e.writeUInt32BE(t, 0), e;
    }
  });
  xd = T9((_L, O3) => {
    O3.exports = function(e, r) {
      for (var o2 = e.length, f2 = -1;++f2 < o2; )
        e[f2] ^= r[f2];
      return e;
    };
  });
  w0 = T9((F3, Sd) => {
    (function(t, e) {
      function r(v4, i) {
        if (!v4)
          throw new Error(i || "Assertion failed");
      }
      function o2(v4, i) {
        v4.super_ = i;
        var a2 = function() {
        };
        a2.prototype = i.prototype, v4.prototype = new a2, v4.prototype.constructor = v4;
      }
      function f2(v4, i, a2) {
        if (f2.isBN(v4))
          return v4;
        this.negative = 0, this.words = null, this.length = 0, this.red = null, v4 !== null && ((i === "le" || i === "be") && (a2 = i, i = 10), this._init(v4 || 0, i || 10, a2 || "be"));
      }
      typeof t == "object" ? t.exports = f2 : e.BN = f2, f2.BN = f2, f2.wordSize = 26;
      var p;
      try {
        typeof window < "u" && typeof window.Buffer < "u" ? p = window.Buffer : p = ji().Buffer;
      } catch {
      }
      f2.isBN = function(i) {
        return i instanceof f2 ? true : i !== null && typeof i == "object" && i.constructor.wordSize === f2.wordSize && Array.isArray(i.words);
      }, f2.max = function(i, a2) {
        return i.cmp(a2) > 0 ? i : a2;
      }, f2.min = function(i, a2) {
        return i.cmp(a2) < 0 ? i : a2;
      }, f2.prototype._init = function(i, a2, h3) {
        if (typeof i == "number")
          return this._initNumber(i, a2, h3);
        if (typeof i == "object")
          return this._initArray(i, a2, h3);
        a2 === "hex" && (a2 = 16), r(a2 === (a2 | 0) && a2 >= 2 && a2 <= 36), i = i.toString().replace(/\s+/g, "");
        var s = 0;
        i[0] === "-" && (s++, this.negative = 1), s < i.length && (a2 === 16 ? this._parseHex(i, s, h3) : (this._parseBase(i, a2, s), h3 === "le" && this._initArray(this.toArray(), a2, h3)));
      }, f2.prototype._initNumber = function(i, a2, h3) {
        i < 0 && (this.negative = 1, i = -i), i < 67108864 ? (this.words = [i & 67108863], this.length = 1) : i < 4503599627370496 ? (this.words = [i & 67108863, i / 67108864 & 67108863], this.length = 2) : (r(i < 9007199254740992), this.words = [i & 67108863, i / 67108864 & 67108863, 1], this.length = 3), h3 === "le" && this._initArray(this.toArray(), a2, h3);
      }, f2.prototype._initArray = function(i, a2, h3) {
        if (r(typeof i.length == "number"), i.length <= 0)
          return this.words = [0], this.length = 1, this;
        this.length = Math.ceil(i.length / 3), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2, c, b4 = 0;
        if (h3 === "be")
          for (s = i.length - 1, u2 = 0;s >= 0; s -= 3)
            c = i[s] | i[s - 1] << 8 | i[s - 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        else if (h3 === "le")
          for (s = 0, u2 = 0;s < i.length; s += 3)
            c = i[s] | i[s + 1] << 8 | i[s + 2] << 16, this.words[u2] |= c << b4 & 67108863, this.words[u2 + 1] = c >>> 26 - b4 & 67108863, b4 += 24, b4 >= 26 && (b4 -= 26, u2++);
        return this.strip();
      };
      function m2(v4, i) {
        var a2 = v4.charCodeAt(i);
        return a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : a2 - 48 & 15;
      }
      function y3(v4, i, a2) {
        var h3 = m2(v4, a2);
        return a2 - 1 >= i && (h3 |= m2(v4, a2 - 1) << 4), h3;
      }
      f2.prototype._parseHex = function(i, a2, h3) {
        this.length = Math.ceil((i.length - a2) / 6), this.words = new Array(this.length);
        for (var s = 0;s < this.length; s++)
          this.words[s] = 0;
        var u2 = 0, c = 0, b4;
        if (h3 === "be")
          for (s = i.length - 1;s >= a2; s -= 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        else {
          var l2 = i.length - a2;
          for (s = l2 % 2 === 0 ? a2 + 1 : a2;s < i.length; s += 2)
            b4 = y3(i, a2, s) << u2, this.words[c] |= b4 & 67108863, u2 >= 18 ? (u2 -= 18, c += 1, this.words[c] |= b4 >>> 26) : u2 += 8;
        }
        this.strip();
      };
      function M2(v4, i, a2, h3) {
        for (var s = 0, u2 = Math.min(v4.length, a2), c = i;c < u2; c++) {
          var b4 = v4.charCodeAt(c) - 48;
          s *= h3, b4 >= 49 ? s += b4 - 49 + 10 : b4 >= 17 ? s += b4 - 17 + 10 : s += b4;
        }
        return s;
      }
      f2.prototype._parseBase = function(i, a2, h3) {
        this.words = [0], this.length = 1;
        for (var s = 0, u2 = 1;u2 <= 67108863; u2 *= a2)
          s++;
        s--, u2 = u2 / a2 | 0;
        for (var c = i.length - h3, b4 = c % s, l2 = Math.min(c, c - b4) + h3, n2 = 0, d2 = h3;d2 < l2; d2 += s)
          n2 = M2(i, d2, d2 + s, a2), this.imuln(u2), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        if (b4 !== 0) {
          var w3 = 1;
          for (n2 = M2(i, d2, i.length, a2), d2 = 0;d2 < b4; d2++)
            w3 *= a2;
          this.imuln(w3), this.words[0] + n2 < 67108864 ? this.words[0] += n2 : this._iaddn(n2);
        }
        this.strip();
      }, f2.prototype.copy = function(i) {
        i.words = new Array(this.length);
        for (var a2 = 0;a2 < this.length; a2++)
          i.words[a2] = this.words[a2];
        i.length = this.length, i.negative = this.negative, i.red = this.red;
      }, f2.prototype.clone = function() {
        var i = new f2(null);
        return this.copy(i), i;
      }, f2.prototype._expand = function(i) {
        for (;this.length < i; )
          this.words[this.length++] = 0;
        return this;
      }, f2.prototype.strip = function() {
        for (;this.length > 1 && this.words[this.length - 1] === 0; )
          this.length--;
        return this._normSign();
      }, f2.prototype._normSign = function() {
        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
      }, f2.prototype.inspect = function() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var x4 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], S3 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], E3 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      f2.prototype.toString = function(i, a2) {
        i = i || 10, a2 = a2 | 0 || 1;
        var h3;
        if (i === 16 || i === "hex") {
          h3 = "";
          for (var s = 0, u2 = 0, c = 0;c < this.length; c++) {
            var b4 = this.words[c], l2 = ((b4 << s | u2) & 16777215).toString(16);
            u2 = b4 >>> 24 - s & 16777215, u2 !== 0 || c !== this.length - 1 ? h3 = x4[6 - l2.length] + l2 + h3 : h3 = l2 + h3, s += 2, s >= 26 && (s -= 26, c--);
          }
          for (u2 !== 0 && (h3 = u2.toString(16) + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        if (i === (i | 0) && i >= 2 && i <= 36) {
          var n2 = S3[i], d2 = E3[i];
          h3 = "";
          var w3 = this.clone();
          for (w3.negative = 0;!w3.isZero(); ) {
            var g3 = w3.modn(d2).toString(i);
            w3 = w3.idivn(d2), w3.isZero() ? h3 = g3 + h3 : h3 = x4[n2 - g3.length] + g3 + h3;
          }
          for (this.isZero() && (h3 = "0" + h3);h3.length % a2 !== 0; )
            h3 = "0" + h3;
          return this.negative !== 0 && (h3 = "-" + h3), h3;
        }
        r(false, "Base should be between 2 and 36");
      }, f2.prototype.toNumber = function() {
        var i = this.words[0];
        return this.length === 2 ? i += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? i += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -i : i;
      }, f2.prototype.toJSON = function() {
        return this.toString(16);
      }, f2.prototype.toBuffer = function(i, a2) {
        return r(typeof p < "u"), this.toArrayLike(p, i, a2);
      }, f2.prototype.toArray = function(i, a2) {
        return this.toArrayLike(Array, i, a2);
      }, f2.prototype.toArrayLike = function(i, a2, h3) {
        var s = this.byteLength(), u2 = h3 || Math.max(1, s);
        r(s <= u2, "byte array longer than desired length"), r(u2 > 0, "Requested array length <= 0"), this.strip();
        var c = a2 === "le", b4 = new i(u2), l2, n2, d2 = this.clone();
        if (c) {
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[n2] = l2;
          for (;n2 < u2; n2++)
            b4[n2] = 0;
        } else {
          for (n2 = 0;n2 < u2 - s; n2++)
            b4[n2] = 0;
          for (n2 = 0;!d2.isZero(); n2++)
            l2 = d2.andln(255), d2.iushrn(8), b4[u2 - n2 - 1] = l2;
        }
        return b4;
      }, Math.clz32 ? f2.prototype._countBits = function(i) {
        return 32 - Math.clz32(i);
      } : f2.prototype._countBits = function(i) {
        var a2 = i, h3 = 0;
        return a2 >= 4096 && (h3 += 13, a2 >>>= 13), a2 >= 64 && (h3 += 7, a2 >>>= 7), a2 >= 8 && (h3 += 4, a2 >>>= 4), a2 >= 2 && (h3 += 2, a2 >>>= 2), h3 + a2;
      }, f2.prototype._zeroBits = function(i) {
        if (i === 0)
          return 26;
        var a2 = i, h3 = 0;
        return (a2 & 8191) === 0 && (h3 += 13, a2 >>>= 13), (a2 & 127) === 0 && (h3 += 7, a2 >>>= 7), (a2 & 15) === 0 && (h3 += 4, a2 >>>= 4), (a2 & 3) === 0 && (h3 += 2, a2 >>>= 2), (a2 & 1) === 0 && h3++, h3;
      }, f2.prototype.bitLength = function() {
        var i = this.words[this.length - 1], a2 = this._countBits(i);
        return (this.length - 1) * 26 + a2;
      };
      function B2(v4) {
        for (var i = new Array(v4.bitLength()), a2 = 0;a2 < i.length; a2++) {
          var h3 = a2 / 26 | 0, s = a2 % 26;
          i[a2] = (v4.words[h3] & 1 << s) >>> s;
        }
        return i;
      }
      f2.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var i = 0, a2 = 0;a2 < this.length; a2++) {
          var h3 = this._zeroBits(this.words[a2]);
          if (i += h3, h3 !== 26)
            break;
        }
        return i;
      }, f2.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, f2.prototype.toTwos = function(i) {
        return this.negative !== 0 ? this.abs().inotn(i).iaddn(1) : this.clone();
      }, f2.prototype.fromTwos = function(i) {
        return this.testn(i - 1) ? this.notn(i).iaddn(1).ineg() : this.clone();
      }, f2.prototype.isNeg = function() {
        return this.negative !== 0;
      }, f2.prototype.neg = function() {
        return this.clone().ineg();
      }, f2.prototype.ineg = function() {
        return this.isZero() || (this.negative ^= 1), this;
      }, f2.prototype.iuor = function(i) {
        for (;this.length < i.length; )
          this.words[this.length++] = 0;
        for (var a2 = 0;a2 < i.length; a2++)
          this.words[a2] = this.words[a2] | i.words[a2];
        return this.strip();
      }, f2.prototype.ior = function(i) {
        return r((this.negative | i.negative) === 0), this.iuor(i);
      }, f2.prototype.or = function(i) {
        return this.length > i.length ? this.clone().ior(i) : i.clone().ior(this);
      }, f2.prototype.uor = function(i) {
        return this.length > i.length ? this.clone().iuor(i) : i.clone().iuor(this);
      }, f2.prototype.iuand = function(i) {
        var a2;
        this.length > i.length ? a2 = i : a2 = this;
        for (var h3 = 0;h3 < a2.length; h3++)
          this.words[h3] = this.words[h3] & i.words[h3];
        return this.length = a2.length, this.strip();
      }, f2.prototype.iand = function(i) {
        return r((this.negative | i.negative) === 0), this.iuand(i);
      }, f2.prototype.and = function(i) {
        return this.length > i.length ? this.clone().iand(i) : i.clone().iand(this);
      }, f2.prototype.uand = function(i) {
        return this.length > i.length ? this.clone().iuand(i) : i.clone().iuand(this);
      }, f2.prototype.iuxor = function(i) {
        var a2, h3;
        this.length > i.length ? (a2 = this, h3 = i) : (a2 = i, h3 = this);
        for (var s = 0;s < h3.length; s++)
          this.words[s] = a2.words[s] ^ h3.words[s];
        if (this !== a2)
          for (;s < a2.length; s++)
            this.words[s] = a2.words[s];
        return this.length = a2.length, this.strip();
      }, f2.prototype.ixor = function(i) {
        return r((this.negative | i.negative) === 0), this.iuxor(i);
      }, f2.prototype.xor = function(i) {
        return this.length > i.length ? this.clone().ixor(i) : i.clone().ixor(this);
      }, f2.prototype.uxor = function(i) {
        return this.length > i.length ? this.clone().iuxor(i) : i.clone().iuxor(this);
      }, f2.prototype.inotn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = Math.ceil(i / 26) | 0, h3 = i % 26;
        this._expand(a2), h3 > 0 && a2--;
        for (var s = 0;s < a2; s++)
          this.words[s] = ~this.words[s] & 67108863;
        return h3 > 0 && (this.words[s] = ~this.words[s] & 67108863 >> 26 - h3), this.strip();
      }, f2.prototype.notn = function(i) {
        return this.clone().inotn(i);
      }, f2.prototype.setn = function(i, a2) {
        r(typeof i == "number" && i >= 0);
        var h3 = i / 26 | 0, s = i % 26;
        return this._expand(h3 + 1), a2 ? this.words[h3] = this.words[h3] | 1 << s : this.words[h3] = this.words[h3] & ~(1 << s), this.strip();
      }, f2.prototype.iadd = function(i) {
        var a2;
        if (this.negative !== 0 && i.negative === 0)
          return this.negative = 0, a2 = this.isub(i), this.negative ^= 1, this._normSign();
        if (this.negative === 0 && i.negative !== 0)
          return i.negative = 0, a2 = this.isub(i), i.negative = 1, a2._normSign();
        var h3, s;
        this.length > i.length ? (h3 = this, s = i) : (h3 = i, s = this);
        for (var u2 = 0, c = 0;c < s.length; c++)
          a2 = (h3.words[c] | 0) + (s.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        for (;u2 !== 0 && c < h3.length; c++)
          a2 = (h3.words[c] | 0) + u2, this.words[c] = a2 & 67108863, u2 = a2 >>> 26;
        if (this.length = h3.length, u2 !== 0)
          this.words[this.length] = u2, this.length++;
        else if (h3 !== this)
          for (;c < h3.length; c++)
            this.words[c] = h3.words[c];
        return this;
      }, f2.prototype.add = function(i) {
        var a2;
        return i.negative !== 0 && this.negative === 0 ? (i.negative = 0, a2 = this.sub(i), i.negative ^= 1, a2) : i.negative === 0 && this.negative !== 0 ? (this.negative = 0, a2 = i.sub(this), this.negative = 1, a2) : this.length > i.length ? this.clone().iadd(i) : i.clone().iadd(this);
      }, f2.prototype.isub = function(i) {
        if (i.negative !== 0) {
          i.negative = 0;
          var a2 = this.iadd(i);
          return i.negative = 1, a2._normSign();
        } else if (this.negative !== 0)
          return this.negative = 0, this.iadd(i), this.negative = 1, this._normSign();
        var h3 = this.cmp(i);
        if (h3 === 0)
          return this.negative = 0, this.length = 1, this.words[0] = 0, this;
        var s, u2;
        h3 > 0 ? (s = this, u2 = i) : (s = i, u2 = this);
        for (var c = 0, b4 = 0;b4 < u2.length; b4++)
          a2 = (s.words[b4] | 0) - (u2.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        for (;c !== 0 && b4 < s.length; b4++)
          a2 = (s.words[b4] | 0) + c, c = a2 >> 26, this.words[b4] = a2 & 67108863;
        if (c === 0 && b4 < s.length && s !== this)
          for (;b4 < s.length; b4++)
            this.words[b4] = s.words[b4];
        return this.length = Math.max(this.length, b4), s !== this && (this.negative = 1), this.strip();
      }, f2.prototype.sub = function(i) {
        return this.clone().isub(i);
      };
      function q(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative;
        var h3 = v4.length + i.length | 0;
        a2.length = h3, h3 = h3 - 1 | 0;
        var s = v4.words[0] | 0, u2 = i.words[0] | 0, c = s * u2, b4 = c & 67108863, l2 = c / 67108864 | 0;
        a2.words[0] = b4;
        for (var n2 = 1;n2 < h3; n2++) {
          for (var d2 = l2 >>> 26, w3 = l2 & 67108863, g3 = Math.min(n2, i.length - 1), _4 = Math.max(0, n2 - v4.length + 1);_4 <= g3; _4++) {
            var A2 = n2 - _4 | 0;
            s = v4.words[A2] | 0, u2 = i.words[_4] | 0, c = s * u2 + w3, d2 += c / 67108864 | 0, w3 = c & 67108863;
          }
          a2.words[n2] = w3 | 0, l2 = d2 | 0;
        }
        return l2 !== 0 ? a2.words[n2] = l2 | 0 : a2.length--, a2.strip();
      }
      var L3 = function(i, a2, h3) {
        var s = i.words, u2 = a2.words, c = h3.words, b4 = 0, l2, n2, d2, w3 = s[0] | 0, g3 = w3 & 8191, _4 = w3 >>> 13, A2 = s[1] | 0, R3 = A2 & 8191, I2 = A2 >>> 13, Me = s[2] | 0, k2 = Me & 8191, D3 = Me >>> 13, nt2 = s[3] | 0, C2 = nt2 & 8191, O3 = nt2 >>> 13, vt = s[4] | 0, F = vt & 8191, U5 = vt >>> 13, bt = s[5] | 0, z = bt & 8191, H2 = bt >>> 13, mt = s[6] | 0, W = mt & 8191, K3 = mt >>> 13, gt = s[7] | 0, j3 = gt & 8191, Z3 = gt >>> 13, yt = s[8] | 0, V3 = yt & 8191, $3 = yt >>> 13, wt = s[9] | 0, G2 = wt & 8191, Y2 = wt >>> 13, Mt = u2[0] | 0, X2 = Mt & 8191, J2 = Mt >>> 13, _t = u2[1] | 0, Q3 = _t & 8191, ee = _t >>> 13, xt = u2[2] | 0, te = xt & 8191, re = xt >>> 13, St = u2[3] | 0, ie = St & 8191, ne = St >>> 13, Et = u2[4] | 0, fe = Et & 8191, ae = Et >>> 13, At = u2[5] | 0, oe = At & 8191, se = At >>> 13, Rt = u2[6] | 0, he = Rt & 8191, ue = Rt >>> 13, Bt = u2[7] | 0, le = Bt & 8191, de = Bt >>> 13, qt = u2[8] | 0, ce = qt & 8191, pe = qt >>> 13, It = u2[9] | 0, ve = It & 8191, be = It >>> 13;
        h3.negative = i.negative ^ a2.negative, h3.length = 19, l2 = Math.imul(g3, X2), n2 = Math.imul(g3, J2), n2 = n2 + Math.imul(_4, X2) | 0, d2 = Math.imul(_4, J2);
        var ft2 = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ft2 >>> 26) | 0, ft2 &= 67108863, l2 = Math.imul(R3, X2), n2 = Math.imul(R3, J2), n2 = n2 + Math.imul(I2, X2) | 0, d2 = Math.imul(I2, J2), l2 = l2 + Math.imul(g3, Q3) | 0, n2 = n2 + Math.imul(g3, ee) | 0, n2 = n2 + Math.imul(_4, Q3) | 0, d2 = d2 + Math.imul(_4, ee) | 0;
        var Be = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, l2 = Math.imul(k2, X2), n2 = Math.imul(k2, J2), n2 = n2 + Math.imul(D3, X2) | 0, d2 = Math.imul(D3, J2), l2 = l2 + Math.imul(R3, Q3) | 0, n2 = n2 + Math.imul(R3, ee) | 0, n2 = n2 + Math.imul(I2, Q3) | 0, d2 = d2 + Math.imul(I2, ee) | 0, l2 = l2 + Math.imul(g3, te) | 0, n2 = n2 + Math.imul(g3, re) | 0, n2 = n2 + Math.imul(_4, te) | 0, d2 = d2 + Math.imul(_4, re) | 0;
        var qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (qe >>> 26) | 0, qe &= 67108863, l2 = Math.imul(C2, X2), n2 = Math.imul(C2, J2), n2 = n2 + Math.imul(O3, X2) | 0, d2 = Math.imul(O3, J2), l2 = l2 + Math.imul(k2, Q3) | 0, n2 = n2 + Math.imul(k2, ee) | 0, n2 = n2 + Math.imul(D3, Q3) | 0, d2 = d2 + Math.imul(D3, ee) | 0, l2 = l2 + Math.imul(R3, te) | 0, n2 = n2 + Math.imul(R3, re) | 0, n2 = n2 + Math.imul(I2, te) | 0, d2 = d2 + Math.imul(I2, re) | 0, l2 = l2 + Math.imul(g3, ie) | 0, n2 = n2 + Math.imul(g3, ne) | 0, n2 = n2 + Math.imul(_4, ie) | 0, d2 = d2 + Math.imul(_4, ne) | 0;
        var ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (ze >>> 26) | 0, ze &= 67108863, l2 = Math.imul(F, X2), n2 = Math.imul(F, J2), n2 = n2 + Math.imul(U5, X2) | 0, d2 = Math.imul(U5, J2), l2 = l2 + Math.imul(C2, Q3) | 0, n2 = n2 + Math.imul(C2, ee) | 0, n2 = n2 + Math.imul(O3, Q3) | 0, d2 = d2 + Math.imul(O3, ee) | 0, l2 = l2 + Math.imul(k2, te) | 0, n2 = n2 + Math.imul(k2, re) | 0, n2 = n2 + Math.imul(D3, te) | 0, d2 = d2 + Math.imul(D3, re) | 0, l2 = l2 + Math.imul(R3, ie) | 0, n2 = n2 + Math.imul(R3, ne) | 0, n2 = n2 + Math.imul(I2, ie) | 0, d2 = d2 + Math.imul(I2, ne) | 0, l2 = l2 + Math.imul(g3, fe) | 0, n2 = n2 + Math.imul(g3, ae) | 0, n2 = n2 + Math.imul(_4, fe) | 0, d2 = d2 + Math.imul(_4, ae) | 0;
        var He = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (He >>> 26) | 0, He &= 67108863, l2 = Math.imul(z, X2), n2 = Math.imul(z, J2), n2 = n2 + Math.imul(H2, X2) | 0, d2 = Math.imul(H2, J2), l2 = l2 + Math.imul(F, Q3) | 0, n2 = n2 + Math.imul(F, ee) | 0, n2 = n2 + Math.imul(U5, Q3) | 0, d2 = d2 + Math.imul(U5, ee) | 0, l2 = l2 + Math.imul(C2, te) | 0, n2 = n2 + Math.imul(C2, re) | 0, n2 = n2 + Math.imul(O3, te) | 0, d2 = d2 + Math.imul(O3, re) | 0, l2 = l2 + Math.imul(k2, ie) | 0, n2 = n2 + Math.imul(k2, ne) | 0, n2 = n2 + Math.imul(D3, ie) | 0, d2 = d2 + Math.imul(D3, ne) | 0, l2 = l2 + Math.imul(R3, fe) | 0, n2 = n2 + Math.imul(R3, ae) | 0, n2 = n2 + Math.imul(I2, fe) | 0, d2 = d2 + Math.imul(I2, ae) | 0, l2 = l2 + Math.imul(g3, oe) | 0, n2 = n2 + Math.imul(g3, se) | 0, n2 = n2 + Math.imul(_4, oe) | 0, d2 = d2 + Math.imul(_4, se) | 0;
        var We = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, l2 = Math.imul(W, X2), n2 = Math.imul(W, J2), n2 = n2 + Math.imul(K3, X2) | 0, d2 = Math.imul(K3, J2), l2 = l2 + Math.imul(z, Q3) | 0, n2 = n2 + Math.imul(z, ee) | 0, n2 = n2 + Math.imul(H2, Q3) | 0, d2 = d2 + Math.imul(H2, ee) | 0, l2 = l2 + Math.imul(F, te) | 0, n2 = n2 + Math.imul(F, re) | 0, n2 = n2 + Math.imul(U5, te) | 0, d2 = d2 + Math.imul(U5, re) | 0, l2 = l2 + Math.imul(C2, ie) | 0, n2 = n2 + Math.imul(C2, ne) | 0, n2 = n2 + Math.imul(O3, ie) | 0, d2 = d2 + Math.imul(O3, ne) | 0, l2 = l2 + Math.imul(k2, fe) | 0, n2 = n2 + Math.imul(k2, ae) | 0, n2 = n2 + Math.imul(D3, fe) | 0, d2 = d2 + Math.imul(D3, ae) | 0, l2 = l2 + Math.imul(R3, oe) | 0, n2 = n2 + Math.imul(R3, se) | 0, n2 = n2 + Math.imul(I2, oe) | 0, d2 = d2 + Math.imul(I2, se) | 0, l2 = l2 + Math.imul(g3, he) | 0, n2 = n2 + Math.imul(g3, ue) | 0, n2 = n2 + Math.imul(_4, he) | 0, d2 = d2 + Math.imul(_4, ue) | 0;
        var Ke = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ke >>> 26) | 0, Ke &= 67108863, l2 = Math.imul(j3, X2), n2 = Math.imul(j3, J2), n2 = n2 + Math.imul(Z3, X2) | 0, d2 = Math.imul(Z3, J2), l2 = l2 + Math.imul(W, Q3) | 0, n2 = n2 + Math.imul(W, ee) | 0, n2 = n2 + Math.imul(K3, Q3) | 0, d2 = d2 + Math.imul(K3, ee) | 0, l2 = l2 + Math.imul(z, te) | 0, n2 = n2 + Math.imul(z, re) | 0, n2 = n2 + Math.imul(H2, te) | 0, d2 = d2 + Math.imul(H2, re) | 0, l2 = l2 + Math.imul(F, ie) | 0, n2 = n2 + Math.imul(F, ne) | 0, n2 = n2 + Math.imul(U5, ie) | 0, d2 = d2 + Math.imul(U5, ne) | 0, l2 = l2 + Math.imul(C2, fe) | 0, n2 = n2 + Math.imul(C2, ae) | 0, n2 = n2 + Math.imul(O3, fe) | 0, d2 = d2 + Math.imul(O3, ae) | 0, l2 = l2 + Math.imul(k2, oe) | 0, n2 = n2 + Math.imul(k2, se) | 0, n2 = n2 + Math.imul(D3, oe) | 0, d2 = d2 + Math.imul(D3, se) | 0, l2 = l2 + Math.imul(R3, he) | 0, n2 = n2 + Math.imul(R3, ue) | 0, n2 = n2 + Math.imul(I2, he) | 0, d2 = d2 + Math.imul(I2, ue) | 0, l2 = l2 + Math.imul(g3, le) | 0, n2 = n2 + Math.imul(g3, de) | 0, n2 = n2 + Math.imul(_4, le) | 0, d2 = d2 + Math.imul(_4, de) | 0;
        var je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, l2 = Math.imul(V3, X2), n2 = Math.imul(V3, J2), n2 = n2 + Math.imul($3, X2) | 0, d2 = Math.imul($3, J2), l2 = l2 + Math.imul(j3, Q3) | 0, n2 = n2 + Math.imul(j3, ee) | 0, n2 = n2 + Math.imul(Z3, Q3) | 0, d2 = d2 + Math.imul(Z3, ee) | 0, l2 = l2 + Math.imul(W, te) | 0, n2 = n2 + Math.imul(W, re) | 0, n2 = n2 + Math.imul(K3, te) | 0, d2 = d2 + Math.imul(K3, re) | 0, l2 = l2 + Math.imul(z, ie) | 0, n2 = n2 + Math.imul(z, ne) | 0, n2 = n2 + Math.imul(H2, ie) | 0, d2 = d2 + Math.imul(H2, ne) | 0, l2 = l2 + Math.imul(F, fe) | 0, n2 = n2 + Math.imul(F, ae) | 0, n2 = n2 + Math.imul(U5, fe) | 0, d2 = d2 + Math.imul(U5, ae) | 0, l2 = l2 + Math.imul(C2, oe) | 0, n2 = n2 + Math.imul(C2, se) | 0, n2 = n2 + Math.imul(O3, oe) | 0, d2 = d2 + Math.imul(O3, se) | 0, l2 = l2 + Math.imul(k2, he) | 0, n2 = n2 + Math.imul(k2, ue) | 0, n2 = n2 + Math.imul(D3, he) | 0, d2 = d2 + Math.imul(D3, ue) | 0, l2 = l2 + Math.imul(R3, le) | 0, n2 = n2 + Math.imul(R3, de) | 0, n2 = n2 + Math.imul(I2, le) | 0, d2 = d2 + Math.imul(I2, de) | 0, l2 = l2 + Math.imul(g3, ce) | 0, n2 = n2 + Math.imul(g3, pe) | 0, n2 = n2 + Math.imul(_4, ce) | 0, d2 = d2 + Math.imul(_4, pe) | 0;
        var Ze = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ze >>> 26) | 0, Ze &= 67108863, l2 = Math.imul(G2, X2), n2 = Math.imul(G2, J2), n2 = n2 + Math.imul(Y2, X2) | 0, d2 = Math.imul(Y2, J2), l2 = l2 + Math.imul(V3, Q3) | 0, n2 = n2 + Math.imul(V3, ee) | 0, n2 = n2 + Math.imul($3, Q3) | 0, d2 = d2 + Math.imul($3, ee) | 0, l2 = l2 + Math.imul(j3, te) | 0, n2 = n2 + Math.imul(j3, re) | 0, n2 = n2 + Math.imul(Z3, te) | 0, d2 = d2 + Math.imul(Z3, re) | 0, l2 = l2 + Math.imul(W, ie) | 0, n2 = n2 + Math.imul(W, ne) | 0, n2 = n2 + Math.imul(K3, ie) | 0, d2 = d2 + Math.imul(K3, ne) | 0, l2 = l2 + Math.imul(z, fe) | 0, n2 = n2 + Math.imul(z, ae) | 0, n2 = n2 + Math.imul(H2, fe) | 0, d2 = d2 + Math.imul(H2, ae) | 0, l2 = l2 + Math.imul(F, oe) | 0, n2 = n2 + Math.imul(F, se) | 0, n2 = n2 + Math.imul(U5, oe) | 0, d2 = d2 + Math.imul(U5, se) | 0, l2 = l2 + Math.imul(C2, he) | 0, n2 = n2 + Math.imul(C2, ue) | 0, n2 = n2 + Math.imul(O3, he) | 0, d2 = d2 + Math.imul(O3, ue) | 0, l2 = l2 + Math.imul(k2, le) | 0, n2 = n2 + Math.imul(k2, de) | 0, n2 = n2 + Math.imul(D3, le) | 0, d2 = d2 + Math.imul(D3, de) | 0, l2 = l2 + Math.imul(R3, ce) | 0, n2 = n2 + Math.imul(R3, pe) | 0, n2 = n2 + Math.imul(I2, ce) | 0, d2 = d2 + Math.imul(I2, pe) | 0, l2 = l2 + Math.imul(g3, ve) | 0, n2 = n2 + Math.imul(g3, be) | 0, n2 = n2 + Math.imul(_4, ve) | 0, d2 = d2 + Math.imul(_4, be) | 0;
        var Ve = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, l2 = Math.imul(G2, Q3), n2 = Math.imul(G2, ee), n2 = n2 + Math.imul(Y2, Q3) | 0, d2 = Math.imul(Y2, ee), l2 = l2 + Math.imul(V3, te) | 0, n2 = n2 + Math.imul(V3, re) | 0, n2 = n2 + Math.imul($3, te) | 0, d2 = d2 + Math.imul($3, re) | 0, l2 = l2 + Math.imul(j3, ie) | 0, n2 = n2 + Math.imul(j3, ne) | 0, n2 = n2 + Math.imul(Z3, ie) | 0, d2 = d2 + Math.imul(Z3, ne) | 0, l2 = l2 + Math.imul(W, fe) | 0, n2 = n2 + Math.imul(W, ae) | 0, n2 = n2 + Math.imul(K3, fe) | 0, d2 = d2 + Math.imul(K3, ae) | 0, l2 = l2 + Math.imul(z, oe) | 0, n2 = n2 + Math.imul(z, se) | 0, n2 = n2 + Math.imul(H2, oe) | 0, d2 = d2 + Math.imul(H2, se) | 0, l2 = l2 + Math.imul(F, he) | 0, n2 = n2 + Math.imul(F, ue) | 0, n2 = n2 + Math.imul(U5, he) | 0, d2 = d2 + Math.imul(U5, ue) | 0, l2 = l2 + Math.imul(C2, le) | 0, n2 = n2 + Math.imul(C2, de) | 0, n2 = n2 + Math.imul(O3, le) | 0, d2 = d2 + Math.imul(O3, de) | 0, l2 = l2 + Math.imul(k2, ce) | 0, n2 = n2 + Math.imul(k2, pe) | 0, n2 = n2 + Math.imul(D3, ce) | 0, d2 = d2 + Math.imul(D3, pe) | 0, l2 = l2 + Math.imul(R3, ve) | 0, n2 = n2 + Math.imul(R3, be) | 0, n2 = n2 + Math.imul(I2, ve) | 0, d2 = d2 + Math.imul(I2, be) | 0;
        var $e = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + ($e >>> 26) | 0, $e &= 67108863, l2 = Math.imul(G2, te), n2 = Math.imul(G2, re), n2 = n2 + Math.imul(Y2, te) | 0, d2 = Math.imul(Y2, re), l2 = l2 + Math.imul(V3, ie) | 0, n2 = n2 + Math.imul(V3, ne) | 0, n2 = n2 + Math.imul($3, ie) | 0, d2 = d2 + Math.imul($3, ne) | 0, l2 = l2 + Math.imul(j3, fe) | 0, n2 = n2 + Math.imul(j3, ae) | 0, n2 = n2 + Math.imul(Z3, fe) | 0, d2 = d2 + Math.imul(Z3, ae) | 0, l2 = l2 + Math.imul(W, oe) | 0, n2 = n2 + Math.imul(W, se) | 0, n2 = n2 + Math.imul(K3, oe) | 0, d2 = d2 + Math.imul(K3, se) | 0, l2 = l2 + Math.imul(z, he) | 0, n2 = n2 + Math.imul(z, ue) | 0, n2 = n2 + Math.imul(H2, he) | 0, d2 = d2 + Math.imul(H2, ue) | 0, l2 = l2 + Math.imul(F, le) | 0, n2 = n2 + Math.imul(F, de) | 0, n2 = n2 + Math.imul(U5, le) | 0, d2 = d2 + Math.imul(U5, de) | 0, l2 = l2 + Math.imul(C2, ce) | 0, n2 = n2 + Math.imul(C2, pe) | 0, n2 = n2 + Math.imul(O3, ce) | 0, d2 = d2 + Math.imul(O3, pe) | 0, l2 = l2 + Math.imul(k2, ve) | 0, n2 = n2 + Math.imul(k2, be) | 0, n2 = n2 + Math.imul(D3, ve) | 0, d2 = d2 + Math.imul(D3, be) | 0;
        var Ge = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ge >>> 26) | 0, Ge &= 67108863, l2 = Math.imul(G2, ie), n2 = Math.imul(G2, ne), n2 = n2 + Math.imul(Y2, ie) | 0, d2 = Math.imul(Y2, ne), l2 = l2 + Math.imul(V3, fe) | 0, n2 = n2 + Math.imul(V3, ae) | 0, n2 = n2 + Math.imul($3, fe) | 0, d2 = d2 + Math.imul($3, ae) | 0, l2 = l2 + Math.imul(j3, oe) | 0, n2 = n2 + Math.imul(j3, se) | 0, n2 = n2 + Math.imul(Z3, oe) | 0, d2 = d2 + Math.imul(Z3, se) | 0, l2 = l2 + Math.imul(W, he) | 0, n2 = n2 + Math.imul(W, ue) | 0, n2 = n2 + Math.imul(K3, he) | 0, d2 = d2 + Math.imul(K3, ue) | 0, l2 = l2 + Math.imul(z, le) | 0, n2 = n2 + Math.imul(z, de) | 0, n2 = n2 + Math.imul(H2, le) | 0, d2 = d2 + Math.imul(H2, de) | 0, l2 = l2 + Math.imul(F, ce) | 0, n2 = n2 + Math.imul(F, pe) | 0, n2 = n2 + Math.imul(U5, ce) | 0, d2 = d2 + Math.imul(U5, pe) | 0, l2 = l2 + Math.imul(C2, ve) | 0, n2 = n2 + Math.imul(C2, be) | 0, n2 = n2 + Math.imul(O3, ve) | 0, d2 = d2 + Math.imul(O3, be) | 0;
        var Ye = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, l2 = Math.imul(G2, fe), n2 = Math.imul(G2, ae), n2 = n2 + Math.imul(Y2, fe) | 0, d2 = Math.imul(Y2, ae), l2 = l2 + Math.imul(V3, oe) | 0, n2 = n2 + Math.imul(V3, se) | 0, n2 = n2 + Math.imul($3, oe) | 0, d2 = d2 + Math.imul($3, se) | 0, l2 = l2 + Math.imul(j3, he) | 0, n2 = n2 + Math.imul(j3, ue) | 0, n2 = n2 + Math.imul(Z3, he) | 0, d2 = d2 + Math.imul(Z3, ue) | 0, l2 = l2 + Math.imul(W, le) | 0, n2 = n2 + Math.imul(W, de) | 0, n2 = n2 + Math.imul(K3, le) | 0, d2 = d2 + Math.imul(K3, de) | 0, l2 = l2 + Math.imul(z, ce) | 0, n2 = n2 + Math.imul(z, pe) | 0, n2 = n2 + Math.imul(H2, ce) | 0, d2 = d2 + Math.imul(H2, pe) | 0, l2 = l2 + Math.imul(F, ve) | 0, n2 = n2 + Math.imul(F, be) | 0, n2 = n2 + Math.imul(U5, ve) | 0, d2 = d2 + Math.imul(U5, be) | 0;
        var Xe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, l2 = Math.imul(G2, oe), n2 = Math.imul(G2, se), n2 = n2 + Math.imul(Y2, oe) | 0, d2 = Math.imul(Y2, se), l2 = l2 + Math.imul(V3, he) | 0, n2 = n2 + Math.imul(V3, ue) | 0, n2 = n2 + Math.imul($3, he) | 0, d2 = d2 + Math.imul($3, ue) | 0, l2 = l2 + Math.imul(j3, le) | 0, n2 = n2 + Math.imul(j3, de) | 0, n2 = n2 + Math.imul(Z3, le) | 0, d2 = d2 + Math.imul(Z3, de) | 0, l2 = l2 + Math.imul(W, ce) | 0, n2 = n2 + Math.imul(W, pe) | 0, n2 = n2 + Math.imul(K3, ce) | 0, d2 = d2 + Math.imul(K3, pe) | 0, l2 = l2 + Math.imul(z, ve) | 0, n2 = n2 + Math.imul(z, be) | 0, n2 = n2 + Math.imul(H2, ve) | 0, d2 = d2 + Math.imul(H2, be) | 0;
        var Je = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, l2 = Math.imul(G2, he), n2 = Math.imul(G2, ue), n2 = n2 + Math.imul(Y2, he) | 0, d2 = Math.imul(Y2, ue), l2 = l2 + Math.imul(V3, le) | 0, n2 = n2 + Math.imul(V3, de) | 0, n2 = n2 + Math.imul($3, le) | 0, d2 = d2 + Math.imul($3, de) | 0, l2 = l2 + Math.imul(j3, ce) | 0, n2 = n2 + Math.imul(j3, pe) | 0, n2 = n2 + Math.imul(Z3, ce) | 0, d2 = d2 + Math.imul(Z3, pe) | 0, l2 = l2 + Math.imul(W, ve) | 0, n2 = n2 + Math.imul(W, be) | 0, n2 = n2 + Math.imul(K3, ve) | 0, d2 = d2 + Math.imul(K3, be) | 0;
        var Qe = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, l2 = Math.imul(G2, le), n2 = Math.imul(G2, de), n2 = n2 + Math.imul(Y2, le) | 0, d2 = Math.imul(Y2, de), l2 = l2 + Math.imul(V3, ce) | 0, n2 = n2 + Math.imul(V3, pe) | 0, n2 = n2 + Math.imul($3, ce) | 0, d2 = d2 + Math.imul($3, pe) | 0, l2 = l2 + Math.imul(j3, ve) | 0, n2 = n2 + Math.imul(j3, be) | 0, n2 = n2 + Math.imul(Z3, ve) | 0, d2 = d2 + Math.imul(Z3, be) | 0;
        var et = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, l2 = Math.imul(G2, ce), n2 = Math.imul(G2, pe), n2 = n2 + Math.imul(Y2, ce) | 0, d2 = Math.imul(Y2, pe), l2 = l2 + Math.imul(V3, ve) | 0, n2 = n2 + Math.imul(V3, be) | 0, n2 = n2 + Math.imul($3, ve) | 0, d2 = d2 + Math.imul($3, be) | 0;
        var tt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        b4 = (d2 + (n2 >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, l2 = Math.imul(G2, ve), n2 = Math.imul(G2, be), n2 = n2 + Math.imul(Y2, ve) | 0, d2 = Math.imul(Y2, be);
        var rt = (b4 + l2 | 0) + ((n2 & 8191) << 13) | 0;
        return b4 = (d2 + (n2 >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, c[0] = ft2, c[1] = Be, c[2] = qe, c[3] = ze, c[4] = He, c[5] = We, c[6] = Ke, c[7] = je, c[8] = Ze, c[9] = Ve, c[10] = $e, c[11] = Ge, c[12] = Ye, c[13] = Xe, c[14] = Je, c[15] = Qe, c[16] = et, c[17] = tt, c[18] = rt, b4 !== 0 && (c[19] = b4, h3.length++), h3;
      };
      Math.imul || (L3 = q);
      function ge(v4, i, a2) {
        a2.negative = i.negative ^ v4.negative, a2.length = v4.length + i.length;
        for (var h3 = 0, s = 0, u2 = 0;u2 < a2.length - 1; u2++) {
          var c = s;
          s = 0;
          for (var b4 = h3 & 67108863, l2 = Math.min(u2, i.length - 1), n2 = Math.max(0, u2 - v4.length + 1);n2 <= l2; n2++) {
            var d2 = u2 - n2, w3 = v4.words[d2] | 0, g3 = i.words[n2] | 0, _4 = w3 * g3, A2 = _4 & 67108863;
            c = c + (_4 / 67108864 | 0) | 0, A2 = A2 + b4 | 0, b4 = A2 & 67108863, c = c + (A2 >>> 26) | 0, s += c >>> 26, c &= 67108863;
          }
          a2.words[u2] = b4, h3 = c, c = s;
        }
        return h3 !== 0 ? a2.words[u2] = h3 : a2.length--, a2.strip();
      }
      function _e(v4, i, a2) {
        var h3 = new N5;
        return h3.mulp(v4, i, a2);
      }
      f2.prototype.mulTo = function(i, a2) {
        var h3, s = this.length + i.length;
        return this.length === 10 && i.length === 10 ? h3 = L3(this, i, a2) : s < 63 ? h3 = q(this, i, a2) : s < 1024 ? h3 = ge(this, i, a2) : h3 = _e(this, i, a2), h3;
      };
      function N5(v4, i) {
        this.x = v4, this.y = i;
      }
      N5.prototype.makeRBT = function(i) {
        for (var a2 = new Array(i), h3 = f2.prototype._countBits(i) - 1, s = 0;s < i; s++)
          a2[s] = this.revBin(s, h3, i);
        return a2;
      }, N5.prototype.revBin = function(i, a2, h3) {
        if (i === 0 || i === h3 - 1)
          return i;
        for (var s = 0, u2 = 0;u2 < a2; u2++)
          s |= (i & 1) << a2 - u2 - 1, i >>= 1;
        return s;
      }, N5.prototype.permute = function(i, a2, h3, s, u2, c) {
        for (var b4 = 0;b4 < c; b4++)
          s[b4] = a2[i[b4]], u2[b4] = h3[i[b4]];
      }, N5.prototype.transform = function(i, a2, h3, s, u2, c) {
        this.permute(c, i, a2, h3, s, u2);
        for (var b4 = 1;b4 < u2; b4 <<= 1)
          for (var l2 = b4 << 1, n2 = Math.cos(2 * Math.PI / l2), d2 = Math.sin(2 * Math.PI / l2), w3 = 0;w3 < u2; w3 += l2)
            for (var g3 = n2, _4 = d2, A2 = 0;A2 < b4; A2++) {
              var R3 = h3[w3 + A2], I2 = s[w3 + A2], Me = h3[w3 + A2 + b4], k2 = s[w3 + A2 + b4], D3 = g3 * Me - _4 * k2;
              k2 = g3 * k2 + _4 * Me, Me = D3, h3[w3 + A2] = R3 + Me, s[w3 + A2] = I2 + k2, h3[w3 + A2 + b4] = R3 - Me, s[w3 + A2 + b4] = I2 - k2, A2 !== l2 && (D3 = n2 * g3 - d2 * _4, _4 = n2 * _4 + d2 * g3, g3 = D3);
            }
      }, N5.prototype.guessLen13b = function(i, a2) {
        var h3 = Math.max(a2, i) | 1, s = h3 & 1, u2 = 0;
        for (h3 = h3 / 2 | 0;h3; h3 = h3 >>> 1)
          u2++;
        return 1 << u2 + 1 + s;
      }, N5.prototype.conjugate = function(i, a2, h3) {
        if (!(h3 <= 1))
          for (var s = 0;s < h3 / 2; s++) {
            var u2 = i[s];
            i[s] = i[h3 - s - 1], i[h3 - s - 1] = u2, u2 = a2[s], a2[s] = -a2[h3 - s - 1], a2[h3 - s - 1] = -u2;
          }
      }, N5.prototype.normalize13b = function(i, a2) {
        for (var h3 = 0, s = 0;s < a2 / 2; s++) {
          var u2 = Math.round(i[2 * s + 1] / a2) * 8192 + Math.round(i[2 * s] / a2) + h3;
          i[s] = u2 & 67108863, u2 < 67108864 ? h3 = 0 : h3 = u2 / 67108864 | 0;
        }
        return i;
      }, N5.prototype.convert13b = function(i, a2, h3, s) {
        for (var u2 = 0, c = 0;c < a2; c++)
          u2 = u2 + (i[c] | 0), h3[2 * c] = u2 & 8191, u2 = u2 >>> 13, h3[2 * c + 1] = u2 & 8191, u2 = u2 >>> 13;
        for (c = 2 * a2;c < s; ++c)
          h3[c] = 0;
        r(u2 === 0), r((u2 & -8192) === 0);
      }, N5.prototype.stub = function(i) {
        for (var a2 = new Array(i), h3 = 0;h3 < i; h3++)
          a2[h3] = 0;
        return a2;
      }, N5.prototype.mulp = function(i, a2, h3) {
        var s = 2 * this.guessLen13b(i.length, a2.length), u2 = this.makeRBT(s), c = this.stub(s), b4 = new Array(s), l2 = new Array(s), n2 = new Array(s), d2 = new Array(s), w3 = new Array(s), g3 = new Array(s), _4 = h3.words;
        _4.length = s, this.convert13b(i.words, i.length, b4, s), this.convert13b(a2.words, a2.length, d2, s), this.transform(b4, c, l2, n2, s, u2), this.transform(d2, c, w3, g3, s, u2);
        for (var A2 = 0;A2 < s; A2++) {
          var R3 = l2[A2] * w3[A2] - n2[A2] * g3[A2];
          n2[A2] = l2[A2] * g3[A2] + n2[A2] * w3[A2], l2[A2] = R3;
        }
        return this.conjugate(l2, n2, s), this.transform(l2, n2, _4, c, s, u2), this.conjugate(_4, c, s), this.normalize13b(_4, s), h3.negative = i.negative ^ a2.negative, h3.length = i.length + a2.length, h3.strip();
      }, f2.prototype.mul = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), this.mulTo(i, a2);
      }, f2.prototype.mulf = function(i) {
        var a2 = new f2(null);
        return a2.words = new Array(this.length + i.length), _e(this, i, a2);
      }, f2.prototype.imul = function(i) {
        return this.clone().mulTo(i, this);
      }, f2.prototype.imuln = function(i) {
        r(typeof i == "number"), r(i < 67108864);
        for (var a2 = 0, h3 = 0;h3 < this.length; h3++) {
          var s = (this.words[h3] | 0) * i, u2 = (s & 67108863) + (a2 & 67108863);
          a2 >>= 26, a2 += s / 67108864 | 0, a2 += u2 >>> 26, this.words[h3] = u2 & 67108863;
        }
        return a2 !== 0 && (this.words[h3] = a2, this.length++), this;
      }, f2.prototype.muln = function(i) {
        return this.clone().imuln(i);
      }, f2.prototype.sqr = function() {
        return this.mul(this);
      }, f2.prototype.isqr = function() {
        return this.imul(this.clone());
      }, f2.prototype.pow = function(i) {
        var a2 = B2(i);
        if (a2.length === 0)
          return new f2(1);
        for (var h3 = this, s = 0;s < a2.length && a2[s] === 0; s++, h3 = h3.sqr())
          ;
        if (++s < a2.length)
          for (var u2 = h3.sqr();s < a2.length; s++, u2 = u2.sqr())
            a2[s] !== 0 && (h3 = h3.mul(u2));
        return h3;
      }, f2.prototype.iushln = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 67108863 >>> 26 - a2 << 26 - a2, u2;
        if (a2 !== 0) {
          var c = 0;
          for (u2 = 0;u2 < this.length; u2++) {
            var b4 = this.words[u2] & s, l2 = (this.words[u2] | 0) - b4 << a2;
            this.words[u2] = l2 | c, c = b4 >>> 26 - a2;
          }
          c && (this.words[u2] = c, this.length++);
        }
        if (h3 !== 0) {
          for (u2 = this.length - 1;u2 >= 0; u2--)
            this.words[u2 + h3] = this.words[u2];
          for (u2 = 0;u2 < h3; u2++)
            this.words[u2] = 0;
          this.length += h3;
        }
        return this.strip();
      }, f2.prototype.ishln = function(i) {
        return r(this.negative === 0), this.iushln(i);
      }, f2.prototype.iushrn = function(i, a2, h3) {
        r(typeof i == "number" && i >= 0);
        var s;
        a2 ? s = (a2 - a2 % 26) / 26 : s = 0;
        var u2 = i % 26, c = Math.min((i - u2) / 26, this.length), b4 = 67108863 ^ 67108863 >>> u2 << u2, l2 = h3;
        if (s -= c, s = Math.max(0, s), l2) {
          for (var n2 = 0;n2 < c; n2++)
            l2.words[n2] = this.words[n2];
          l2.length = c;
        }
        if (c !== 0)
          if (this.length > c)
            for (this.length -= c, n2 = 0;n2 < this.length; n2++)
              this.words[n2] = this.words[n2 + c];
          else
            this.words[0] = 0, this.length = 1;
        var d2 = 0;
        for (n2 = this.length - 1;n2 >= 0 && (d2 !== 0 || n2 >= s); n2--) {
          var w3 = this.words[n2] | 0;
          this.words[n2] = d2 << 26 - u2 | w3 >>> u2, d2 = w3 & b4;
        }
        return l2 && d2 !== 0 && (l2.words[l2.length++] = d2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
      }, f2.prototype.ishrn = function(i, a2, h3) {
        return r(this.negative === 0), this.iushrn(i, a2, h3);
      }, f2.prototype.shln = function(i) {
        return this.clone().ishln(i);
      }, f2.prototype.ushln = function(i) {
        return this.clone().iushln(i);
      }, f2.prototype.shrn = function(i) {
        return this.clone().ishrn(i);
      }, f2.prototype.ushrn = function(i) {
        return this.clone().iushrn(i);
      }, f2.prototype.testn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return false;
        var u2 = this.words[h3];
        return !!(u2 & s);
      }, f2.prototype.imaskn = function(i) {
        r(typeof i == "number" && i >= 0);
        var a2 = i % 26, h3 = (i - a2) / 26;
        if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= h3)
          return this;
        if (a2 !== 0 && h3++, this.length = Math.min(h3, this.length), a2 !== 0) {
          var s = 67108863 ^ 67108863 >>> a2 << a2;
          this.words[this.length - 1] &= s;
        }
        return this.strip();
      }, f2.prototype.maskn = function(i) {
        return this.clone().imaskn(i);
      }, f2.prototype.iaddn = function(i) {
        return r(typeof i == "number"), r(i < 67108864), i < 0 ? this.isubn(-i) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < i ? (this.words[0] = i - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(i), this.negative = 1, this) : this._iaddn(i);
      }, f2.prototype._iaddn = function(i) {
        this.words[0] += i;
        for (var a2 = 0;a2 < this.length && this.words[a2] >= 67108864; a2++)
          this.words[a2] -= 67108864, a2 === this.length - 1 ? this.words[a2 + 1] = 1 : this.words[a2 + 1]++;
        return this.length = Math.max(this.length, a2 + 1), this;
      }, f2.prototype.isubn = function(i) {
        if (r(typeof i == "number"), r(i < 67108864), i < 0)
          return this.iaddn(-i);
        if (this.negative !== 0)
          return this.negative = 0, this.iaddn(i), this.negative = 1, this;
        if (this.words[0] -= i, this.length === 1 && this.words[0] < 0)
          this.words[0] = -this.words[0], this.negative = 1;
        else
          for (var a2 = 0;a2 < this.length && this.words[a2] < 0; a2++)
            this.words[a2] += 67108864, this.words[a2 + 1] -= 1;
        return this.strip();
      }, f2.prototype.addn = function(i) {
        return this.clone().iaddn(i);
      }, f2.prototype.subn = function(i) {
        return this.clone().isubn(i);
      }, f2.prototype.iabs = function() {
        return this.negative = 0, this;
      }, f2.prototype.abs = function() {
        return this.clone().iabs();
      }, f2.prototype._ishlnsubmul = function(i, a2, h3) {
        var s = i.length + h3, u2;
        this._expand(s);
        var c, b4 = 0;
        for (u2 = 0;u2 < i.length; u2++) {
          c = (this.words[u2 + h3] | 0) + b4;
          var l2 = (i.words[u2] | 0) * a2;
          c -= l2 & 67108863, b4 = (c >> 26) - (l2 / 67108864 | 0), this.words[u2 + h3] = c & 67108863;
        }
        for (;u2 < this.length - h3; u2++)
          c = (this.words[u2 + h3] | 0) + b4, b4 = c >> 26, this.words[u2 + h3] = c & 67108863;
        if (b4 === 0)
          return this.strip();
        for (r(b4 === -1), b4 = 0, u2 = 0;u2 < this.length; u2++)
          c = -(this.words[u2] | 0) + b4, b4 = c >> 26, this.words[u2] = c & 67108863;
        return this.negative = 1, this.strip();
      }, f2.prototype._wordDiv = function(i, a2) {
        var h3 = this.length - i.length, s = this.clone(), u2 = i, c = u2.words[u2.length - 1] | 0, b4 = this._countBits(c);
        h3 = 26 - b4, h3 !== 0 && (u2 = u2.ushln(h3), s.iushln(h3), c = u2.words[u2.length - 1] | 0);
        var l2 = s.length - u2.length, n2;
        if (a2 !== "mod") {
          n2 = new f2(null), n2.length = l2 + 1, n2.words = new Array(n2.length);
          for (var d2 = 0;d2 < n2.length; d2++)
            n2.words[d2] = 0;
        }
        var w3 = s.clone()._ishlnsubmul(u2, 1, l2);
        w3.negative === 0 && (s = w3, n2 && (n2.words[l2] = 1));
        for (var g3 = l2 - 1;g3 >= 0; g3--) {
          var _4 = (s.words[u2.length + g3] | 0) * 67108864 + (s.words[u2.length + g3 - 1] | 0);
          for (_4 = Math.min(_4 / c | 0, 67108863), s._ishlnsubmul(u2, _4, g3);s.negative !== 0; )
            _4--, s.negative = 0, s._ishlnsubmul(u2, 1, g3), s.isZero() || (s.negative ^= 1);
          n2 && (n2.words[g3] = _4);
        }
        return n2 && n2.strip(), s.strip(), a2 !== "div" && h3 !== 0 && s.iushrn(h3), { div: n2 || null, mod: s };
      }, f2.prototype.divmod = function(i, a2, h3) {
        if (r(!i.isZero()), this.isZero())
          return { div: new f2(0), mod: new f2(0) };
        var s, u2, c;
        return this.negative !== 0 && i.negative === 0 ? (c = this.neg().divmod(i, a2), a2 !== "mod" && (s = c.div.neg()), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.iadd(i)), { div: s, mod: u2 }) : this.negative === 0 && i.negative !== 0 ? (c = this.divmod(i.neg(), a2), a2 !== "mod" && (s = c.div.neg()), { div: s, mod: c.mod }) : (this.negative & i.negative) !== 0 ? (c = this.neg().divmod(i.neg(), a2), a2 !== "div" && (u2 = c.mod.neg(), h3 && u2.negative !== 0 && u2.isub(i)), { div: c.div, mod: u2 }) : i.length > this.length || this.cmp(i) < 0 ? { div: new f2(0), mod: this } : i.length === 1 ? a2 === "div" ? { div: this.divn(i.words[0]), mod: null } : a2 === "mod" ? { div: null, mod: new f2(this.modn(i.words[0])) } : { div: this.divn(i.words[0]), mod: new f2(this.modn(i.words[0])) } : this._wordDiv(i, a2);
      }, f2.prototype.div = function(i) {
        return this.divmod(i, "div", false).div;
      }, f2.prototype.mod = function(i) {
        return this.divmod(i, "mod", false).mod;
      }, f2.prototype.umod = function(i) {
        return this.divmod(i, "mod", true).mod;
      }, f2.prototype.divRound = function(i) {
        var a2 = this.divmod(i);
        if (a2.mod.isZero())
          return a2.div;
        var h3 = a2.div.negative !== 0 ? a2.mod.isub(i) : a2.mod, s = i.ushrn(1), u2 = i.andln(1), c = h3.cmp(s);
        return c < 0 || u2 === 1 && c === 0 ? a2.div : a2.div.negative !== 0 ? a2.div.isubn(1) : a2.div.iaddn(1);
      }, f2.prototype.modn = function(i) {
        r(i <= 67108863);
        for (var a2 = (1 << 26) % i, h3 = 0, s = this.length - 1;s >= 0; s--)
          h3 = (a2 * h3 + (this.words[s] | 0)) % i;
        return h3;
      }, f2.prototype.idivn = function(i) {
        r(i <= 67108863);
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = (this.words[h3] | 0) + a2 * 67108864;
          this.words[h3] = s / i | 0, a2 = s % i;
        }
        return this.strip();
      }, f2.prototype.divn = function(i) {
        return this.clone().idivn(i);
      }, f2.prototype.egcd = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = new f2(0), b4 = new f2(1), l2 = 0;a2.isEven() && h3.isEven(); )
          a2.iushrn(1), h3.iushrn(1), ++l2;
        for (var n2 = h3.clone(), d2 = a2.clone();!a2.isZero(); ) {
          for (var w3 = 0, g3 = 1;(a2.words[0] & g3) === 0 && w3 < 26; ++w3, g3 <<= 1)
            ;
          if (w3 > 0)
            for (a2.iushrn(w3);w3-- > 0; )
              (s.isOdd() || u2.isOdd()) && (s.iadd(n2), u2.isub(d2)), s.iushrn(1), u2.iushrn(1);
          for (var _4 = 0, A2 = 1;(h3.words[0] & A2) === 0 && _4 < 26; ++_4, A2 <<= 1)
            ;
          if (_4 > 0)
            for (h3.iushrn(_4);_4-- > 0; )
              (c.isOdd() || b4.isOdd()) && (c.iadd(n2), b4.isub(d2)), c.iushrn(1), b4.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(c), u2.isub(b4)) : (h3.isub(a2), c.isub(s), b4.isub(u2));
        }
        return { a: c, b: b4, gcd: h3.iushln(l2) };
      }, f2.prototype._invmp = function(i) {
        r(i.negative === 0), r(!i.isZero());
        var a2 = this, h3 = i.clone();
        a2.negative !== 0 ? a2 = a2.umod(i) : a2 = a2.clone();
        for (var s = new f2(1), u2 = new f2(0), c = h3.clone();a2.cmpn(1) > 0 && h3.cmpn(1) > 0; ) {
          for (var b4 = 0, l2 = 1;(a2.words[0] & l2) === 0 && b4 < 26; ++b4, l2 <<= 1)
            ;
          if (b4 > 0)
            for (a2.iushrn(b4);b4-- > 0; )
              s.isOdd() && s.iadd(c), s.iushrn(1);
          for (var n2 = 0, d2 = 1;(h3.words[0] & d2) === 0 && n2 < 26; ++n2, d2 <<= 1)
            ;
          if (n2 > 0)
            for (h3.iushrn(n2);n2-- > 0; )
              u2.isOdd() && u2.iadd(c), u2.iushrn(1);
          a2.cmp(h3) >= 0 ? (a2.isub(h3), s.isub(u2)) : (h3.isub(a2), u2.isub(s));
        }
        var w3;
        return a2.cmpn(1) === 0 ? w3 = s : w3 = u2, w3.cmpn(0) < 0 && w3.iadd(i), w3;
      }, f2.prototype.gcd = function(i) {
        if (this.isZero())
          return i.abs();
        if (i.isZero())
          return this.abs();
        var a2 = this.clone(), h3 = i.clone();
        a2.negative = 0, h3.negative = 0;
        for (var s = 0;a2.isEven() && h3.isEven(); s++)
          a2.iushrn(1), h3.iushrn(1);
        do {
          for (;a2.isEven(); )
            a2.iushrn(1);
          for (;h3.isEven(); )
            h3.iushrn(1);
          var u2 = a2.cmp(h3);
          if (u2 < 0) {
            var c = a2;
            a2 = h3, h3 = c;
          } else if (u2 === 0 || h3.cmpn(1) === 0)
            break;
          a2.isub(h3);
        } while (true);
        return h3.iushln(s);
      }, f2.prototype.invm = function(i) {
        return this.egcd(i).a.umod(i);
      }, f2.prototype.isEven = function() {
        return (this.words[0] & 1) === 0;
      }, f2.prototype.isOdd = function() {
        return (this.words[0] & 1) === 1;
      }, f2.prototype.andln = function(i) {
        return this.words[0] & i;
      }, f2.prototype.bincn = function(i) {
        r(typeof i == "number");
        var a2 = i % 26, h3 = (i - a2) / 26, s = 1 << a2;
        if (this.length <= h3)
          return this._expand(h3 + 1), this.words[h3] |= s, this;
        for (var u2 = s, c = h3;u2 !== 0 && c < this.length; c++) {
          var b4 = this.words[c] | 0;
          b4 += u2, u2 = b4 >>> 26, b4 &= 67108863, this.words[c] = b4;
        }
        return u2 !== 0 && (this.words[c] = u2, this.length++), this;
      }, f2.prototype.isZero = function() {
        return this.length === 1 && this.words[0] === 0;
      }, f2.prototype.cmpn = function(i) {
        var a2 = i < 0;
        if (this.negative !== 0 && !a2)
          return -1;
        if (this.negative === 0 && a2)
          return 1;
        this.strip();
        var h3;
        if (this.length > 1)
          h3 = 1;
        else {
          a2 && (i = -i), r(i <= 67108863, "Number is too big");
          var s = this.words[0] | 0;
          h3 = s === i ? 0 : s < i ? -1 : 1;
        }
        return this.negative !== 0 ? -h3 | 0 : h3;
      }, f2.prototype.cmp = function(i) {
        if (this.negative !== 0 && i.negative === 0)
          return -1;
        if (this.negative === 0 && i.negative !== 0)
          return 1;
        var a2 = this.ucmp(i);
        return this.negative !== 0 ? -a2 | 0 : a2;
      }, f2.prototype.ucmp = function(i) {
        if (this.length > i.length)
          return 1;
        if (this.length < i.length)
          return -1;
        for (var a2 = 0, h3 = this.length - 1;h3 >= 0; h3--) {
          var s = this.words[h3] | 0, u2 = i.words[h3] | 0;
          if (s !== u2) {
            s < u2 ? a2 = -1 : s > u2 && (a2 = 1);
            break;
          }
        }
        return a2;
      }, f2.prototype.gtn = function(i) {
        return this.cmpn(i) === 1;
      }, f2.prototype.gt = function(i) {
        return this.cmp(i) === 1;
      }, f2.prototype.gten = function(i) {
        return this.cmpn(i) >= 0;
      }, f2.prototype.gte = function(i) {
        return this.cmp(i) >= 0;
      }, f2.prototype.ltn = function(i) {
        return this.cmpn(i) === -1;
      }, f2.prototype.lt = function(i) {
        return this.cmp(i) === -1;
      }, f2.prototype.lten = function(i) {
        return this.cmpn(i) <= 0;
      }, f2.prototype.lte = function(i) {
        return this.cmp(i) <= 0;
      }, f2.prototype.eqn = function(i) {
        return this.cmpn(i) === 0;
      }, f2.prototype.eq = function(i) {
        return this.cmp(i) === 0;
      }, f2.red = function(i) {
        return new P4(i);
      }, f2.prototype.toRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), i.convertTo(this)._forceRed(i);
      }, f2.prototype.fromRed = function() {
        return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
      }, f2.prototype._forceRed = function(i) {
        return this.red = i, this;
      }, f2.prototype.forceRed = function(i) {
        return r(!this.red, "Already a number in reduction context"), this._forceRed(i);
      }, f2.prototype.redAdd = function(i) {
        return r(this.red, "redAdd works only with red numbers"), this.red.add(this, i);
      }, f2.prototype.redIAdd = function(i) {
        return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, i);
      }, f2.prototype.redSub = function(i) {
        return r(this.red, "redSub works only with red numbers"), this.red.sub(this, i);
      }, f2.prototype.redISub = function(i) {
        return r(this.red, "redISub works only with red numbers"), this.red.isub(this, i);
      }, f2.prototype.redShl = function(i) {
        return r(this.red, "redShl works only with red numbers"), this.red.shl(this, i);
      }, f2.prototype.redMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.mul(this, i);
      }, f2.prototype.redIMul = function(i) {
        return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, i), this.red.imul(this, i);
      }, f2.prototype.redSqr = function() {
        return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
      }, f2.prototype.redISqr = function() {
        return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
      }, f2.prototype.redSqrt = function() {
        return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
      }, f2.prototype.redInvm = function() {
        return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
      }, f2.prototype.redNeg = function() {
        return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
      }, f2.prototype.redPow = function(i) {
        return r(this.red && !i.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, i);
      };
      var we = { k256: null, p224: null, p192: null, p25519: null };
      function ye(v4, i) {
        this.name = v4, this.p = new f2(i, 16), this.n = this.p.bitLength(), this.k = new f2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
      }
      ye.prototype._tmp = function() {
        var i = new f2(null);
        return i.words = new Array(Math.ceil(this.n / 13)), i;
      }, ye.prototype.ireduce = function(i) {
        var a2 = i, h3;
        do
          this.split(a2, this.tmp), a2 = this.imulK(a2), a2 = a2.iadd(this.tmp), h3 = a2.bitLength();
        while (h3 > this.n);
        var s = h3 < this.n ? -1 : a2.ucmp(this.p);
        return s === 0 ? (a2.words[0] = 0, a2.length = 1) : s > 0 ? a2.isub(this.p) : a2.strip !== undefined ? a2.strip() : a2._strip(), a2;
      }, ye.prototype.split = function(i, a2) {
        i.iushrn(this.n, 0, a2);
      }, ye.prototype.imulK = function(i) {
        return i.imul(this.k);
      };
      function xe() {
        ye.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      o2(xe, ye), xe.prototype.split = function(i, a2) {
        for (var h3 = 4194303, s = Math.min(i.length, 9), u2 = 0;u2 < s; u2++)
          a2.words[u2] = i.words[u2];
        if (a2.length = s, i.length <= 9) {
          i.words[0] = 0, i.length = 1;
          return;
        }
        var c = i.words[9];
        for (a2.words[a2.length++] = c & h3, u2 = 10;u2 < i.length; u2++) {
          var b4 = i.words[u2] | 0;
          i.words[u2 - 10] = (b4 & h3) << 4 | c >>> 22, c = b4;
        }
        c >>>= 22, i.words[u2 - 10] = c, c === 0 && i.length > 10 ? i.length -= 10 : i.length -= 9;
      }, xe.prototype.imulK = function(i) {
        i.words[i.length] = 0, i.words[i.length + 1] = 0, i.length += 2;
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = i.words[h3] | 0;
          a2 += s * 977, i.words[h3] = a2 & 67108863, a2 = s * 64 + (a2 / 67108864 | 0);
        }
        return i.words[i.length - 1] === 0 && (i.length--, i.words[i.length - 1] === 0 && i.length--), i;
      };
      function Re() {
        ye.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      o2(Re, ye);
      function Ee() {
        ye.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      o2(Ee, ye);
      function Ae() {
        ye.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      o2(Ae, ye), Ae.prototype.imulK = function(i) {
        for (var a2 = 0, h3 = 0;h3 < i.length; h3++) {
          var s = (i.words[h3] | 0) * 19 + a2, u2 = s & 67108863;
          s >>>= 26, i.words[h3] = u2, a2 = s;
        }
        return a2 !== 0 && (i.words[i.length++] = a2), i;
      }, f2._prime = function(i) {
        if (we[i])
          return we[i];
        var a2;
        if (i === "k256")
          a2 = new xe;
        else if (i === "p224")
          a2 = new Re;
        else if (i === "p192")
          a2 = new Ee;
        else if (i === "p25519")
          a2 = new Ae;
        else
          throw new Error("Unknown prime " + i);
        return we[i] = a2, a2;
      };
      function P4(v4) {
        if (typeof v4 == "string") {
          var i = f2._prime(v4);
          this.m = i.p, this.prime = i;
        } else
          r(v4.gtn(1), "modulus must be greater than 1"), this.m = v4, this.prime = null;
      }
      P4.prototype._verify1 = function(i) {
        r(i.negative === 0, "red works only with positives"), r(i.red, "red works only with red numbers");
      }, P4.prototype._verify2 = function(i, a2) {
        r((i.negative | a2.negative) === 0, "red works only with positives"), r(i.red && i.red === a2.red, "red works only with red numbers");
      }, P4.prototype.imod = function(i) {
        return this.prime ? this.prime.ireduce(i)._forceRed(this) : i.umod(this.m)._forceRed(this);
      }, P4.prototype.neg = function(i) {
        return i.isZero() ? i.clone() : this.m.sub(i)._forceRed(this);
      }, P4.prototype.add = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.add(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3._forceRed(this);
      }, P4.prototype.iadd = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.iadd(a2);
        return h3.cmp(this.m) >= 0 && h3.isub(this.m), h3;
      }, P4.prototype.sub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.sub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3._forceRed(this);
      }, P4.prototype.isub = function(i, a2) {
        this._verify2(i, a2);
        var h3 = i.isub(a2);
        return h3.cmpn(0) < 0 && h3.iadd(this.m), h3;
      }, P4.prototype.shl = function(i, a2) {
        return this._verify1(i), this.imod(i.ushln(a2));
      }, P4.prototype.imul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.imul(a2));
      }, P4.prototype.mul = function(i, a2) {
        return this._verify2(i, a2), this.imod(i.mul(a2));
      }, P4.prototype.isqr = function(i) {
        return this.imul(i, i.clone());
      }, P4.prototype.sqr = function(i) {
        return this.mul(i, i);
      }, P4.prototype.sqrt = function(i) {
        if (i.isZero())
          return i.clone();
        var a2 = this.m.andln(3);
        if (r(a2 % 2 === 1), a2 === 3) {
          var h3 = this.m.add(new f2(1)).iushrn(2);
          return this.pow(i, h3);
        }
        for (var s = this.m.subn(1), u2 = 0;!s.isZero() && s.andln(1) === 0; )
          u2++, s.iushrn(1);
        r(!s.isZero());
        var c = new f2(1).toRed(this), b4 = c.redNeg(), l2 = this.m.subn(1).iushrn(1), n2 = this.m.bitLength();
        for (n2 = new f2(2 * n2 * n2).toRed(this);this.pow(n2, l2).cmp(b4) !== 0; )
          n2.redIAdd(b4);
        for (var d2 = this.pow(n2, s), w3 = this.pow(i, s.addn(1).iushrn(1)), g3 = this.pow(i, s), _4 = u2;g3.cmp(c) !== 0; ) {
          for (var A2 = g3, R3 = 0;A2.cmp(c) !== 0; R3++)
            A2 = A2.redSqr();
          r(R3 < _4);
          var I2 = this.pow(d2, new f2(1).iushln(_4 - R3 - 1));
          w3 = w3.redMul(I2), d2 = I2.redSqr(), g3 = g3.redMul(d2), _4 = R3;
        }
        return w3;
      }, P4.prototype.invm = function(i) {
        var a2 = i._invmp(this.m);
        return a2.negative !== 0 ? (a2.negative = 0, this.imod(a2).redNeg()) : this.imod(a2);
      }, P4.prototype.pow = function(i, a2) {
        if (a2.isZero())
          return new f2(1).toRed(this);
        if (a2.cmpn(1) === 0)
          return i.clone();
        var h3 = 4, s = new Array(1 << h3);
        s[0] = new f2(1).toRed(this), s[1] = i;
        for (var u2 = 2;u2 < s.length; u2++)
          s[u2] = this.mul(s[u2 - 1], i);
        var c = s[0], b4 = 0, l2 = 0, n2 = a2.bitLength() % 26;
        for (n2 === 0 && (n2 = 26), u2 = a2.length - 1;u2 >= 0; u2--) {
          for (var d2 = a2.words[u2], w3 = n2 - 1;w3 >= 0; w3--) {
            var g3 = d2 >> w3 & 1;
            if (c !== s[0] && (c = this.sqr(c)), g3 === 0 && b4 === 0) {
              l2 = 0;
              continue;
            }
            b4 <<= 1, b4 |= g3, l2++, !(l2 !== h3 && (u2 !== 0 || w3 !== 0)) && (c = this.mul(c, s[b4]), l2 = 0, b4 = 0);
          }
          n2 = 26;
        }
        return c;
      }, P4.prototype.convertTo = function(i) {
        var a2 = i.umod(this.m);
        return a2 === i ? a2.clone() : a2;
      }, P4.prototype.convertFrom = function(i) {
        var a2 = i.clone();
        return a2.red = null, a2;
      }, f2.mont = function(i) {
        return new Se(i);
      };
      function Se(v4) {
        P4.call(this, v4), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new f2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
      }
      o2(Se, P4), Se.prototype.convertTo = function(i) {
        return this.imod(i.ushln(this.shift));
      }, Se.prototype.convertFrom = function(i) {
        var a2 = this.imod(i.mul(this.rinv));
        return a2.red = null, a2;
      }, Se.prototype.imul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return i.words[0] = 0, i.length = 1, i;
        var h3 = i.imul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.mul = function(i, a2) {
        if (i.isZero() || a2.isZero())
          return new f2(0)._forceRed(this);
        var h3 = i.mul(a2), s = h3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), u2 = h3.isub(s).iushrn(this.shift), c = u2;
        return u2.cmp(this.m) >= 0 ? c = u2.isub(this.m) : u2.cmpn(0) < 0 && (c = u2.iadd(this.m)), c._forceRed(this);
      }, Se.prototype.invm = function(i) {
        var a2 = this.imod(i._invmp(this.m).mul(this.r2));
        return a2._forceRed(this);
      };
    })(typeof Sd > "u" || Sd, F3);
  });
  Ed = T9((xL, z3) => {
    var U32 = w0(), wq = Te().Buffer;
    function Mq(t, e) {
      return wq.from(t.toRed(U32.mont(e.modulus)).redPow(new U32(e.publicExponent)).fromRed().toArray());
    }
    z3.exports = Mq;
  });
  j3 = T9((SL, K3) => {
    var _q = Ha(), Ad = on(), xq = bf(), H3 = _d(), W3 = xd(), Rd = w0(), Sq = Ed(), Eq = Ks(), Kr2 = Te().Buffer;
    K3.exports = function(e, r, o2) {
      var f2;
      e.padding ? f2 = e.padding : o2 ? f2 = 1 : f2 = 4;
      var p = _q(e), m2;
      if (f2 === 4)
        m2 = Aq(p, r);
      else if (f2 === 1)
        m2 = Rq(p, r, o2);
      else if (f2 === 3) {
        if (m2 = new Rd(r), m2.cmp(p.modulus) >= 0)
          throw new Error("data too long for modulus");
      } else
        throw new Error("unknown padding");
      return o2 ? Eq(m2, p) : Sq(m2, p);
    };
    function Aq(t, e) {
      var r = t.modulus.byteLength(), o2 = e.length, f2 = xq("sha1").update(Kr2.alloc(0)).digest(), p = f2.length, m2 = 2 * p;
      if (o2 > r - m2 - 2)
        throw new Error("message too long");
      var y3 = Kr2.alloc(r - o2 - m2 - 2), M2 = r - p - 1, x4 = Ad(p), S3 = W3(Kr2.concat([f2, y3, Kr2.alloc(1, 1), e], M2), H3(x4, M2)), E3 = W3(x4, H3(S3, p));
      return new Rd(Kr2.concat([Kr2.alloc(1), E3, S3], r));
    }
    function Rq(t, e, r) {
      var o2 = e.length, f2 = t.modulus.byteLength();
      if (o2 > f2 - 11)
        throw new Error("message too long");
      var p;
      return r ? p = Kr2.alloc(f2 - o2 - 3, 255) : p = Bq(f2 - o2 - 3), new Rd(Kr2.concat([Kr2.from([0, r ? 1 : 2]), p, Kr2.alloc(1), e], f2));
    }
    function Bq(t) {
      for (var e = Kr2.allocUnsafe(t), r = 0, o2 = Ad(t * 2), f2 = 0, p;r < t; )
        f2 === o2.length && (o2 = Ad(t * 2), f2 = 0), p = o2[f2++], p && (e[r++] = p);
      return e;
    }
  });
  Y3 = T9((EL, G3) => {
    var qq = Ha(), Z3 = _d(), V3 = xd(), $3 = w0(), Iq = Ks(), Tq = bf(), kq = Ed(), Za = Te().Buffer;
    G3.exports = function(e, r, o2) {
      var f2;
      e.padding ? f2 = e.padding : o2 ? f2 = 1 : f2 = 4;
      var p = qq(e), m2 = p.modulus.byteLength();
      if (r.length > m2 || new $3(r).cmp(p.modulus) >= 0)
        throw new Error("decryption error");
      var y3;
      o2 ? y3 = kq(new $3(r), p) : y3 = Iq(r, p);
      var M2 = Za.alloc(m2 - y3.length);
      if (y3 = Za.concat([M2, y3], m2), f2 === 4)
        return Lq(p, y3);
      if (f2 === 1)
        return Nq(p, y3, o2);
      if (f2 === 3)
        return y3;
      throw new Error("unknown padding");
    };
    function Lq(t, e) {
      var r = t.modulus.byteLength(), o2 = Tq("sha1").update(Za.alloc(0)).digest(), f2 = o2.length;
      if (e[0] !== 0)
        throw new Error("decryption error");
      var p = e.slice(1, f2 + 1), m2 = e.slice(f2 + 1), y3 = V3(p, Z3(m2, f2)), M2 = V3(m2, Z3(y3, r - f2 - 1));
      if (Dq(o2, M2.slice(0, f2)))
        throw new Error("decryption error");
      for (var x4 = f2;M2[x4] === 0; )
        x4++;
      if (M2[x4++] !== 1)
        throw new Error("decryption error");
      return M2.slice(x4);
    }
    function Nq(t, e, r) {
      for (var o2 = e.slice(0, 2), f2 = 2, p = 0;e[f2++] !== 0; )
        if (f2 >= e.length) {
          p++;
          break;
        }
      var m2 = e.slice(2, f2 - 1);
      if ((o2.toString("hex") !== "0002" && !r || o2.toString("hex") !== "0001" && r) && p++, m2.length < 8 && p++, p)
        throw new Error("decryption error");
      return e.slice(f2);
    }
    function Dq(t, e) {
      t = Za.from(t), e = Za.from(e);
      var r = 0, o2 = t.length;
      t.length !== e.length && (r++, o2 = Math.min(t.length, e.length));
      for (var f2 = -1;++f2 < o2; )
        r += t[f2] ^ e[f2];
      return r;
    }
  });
  X3 = T9((Vn) => {
    Vn.publicEncrypt = j3();
    Vn.privateDecrypt = Y3();
    Vn.privateEncrypt = function(e, r) {
      return Vn.publicEncrypt(e, r, true);
    };
    Vn.publicDecrypt = function(e, r) {
      return Vn.privateDecrypt(e, r, true);
    };
  });
  ow = T9((Va) => {
    function J3() {
      throw new Error(`secure random number generation not supported by this browser
use chrome, FireFox or Internet Explorer 11`);
    }
    var ew = Te(), Q3 = on(), tw = ew.Buffer, rw = ew.kMaxLength, Bd = global.crypto || global.msCrypto, iw = Math.pow(2, 32) - 1;
    function nw(t, e) {
      if (typeof t != "number" || t !== t)
        throw new TypeError("offset must be a number");
      if (t > iw || t < 0)
        throw new TypeError("offset must be a uint32");
      if (t > rw || t > e)
        throw new RangeError("offset out of range");
    }
    function fw(t, e, r) {
      if (typeof t != "number" || t !== t)
        throw new TypeError("size must be a number");
      if (t > iw || t < 0)
        throw new TypeError("size must be a uint32");
      if (t + e > r || t > rw)
        throw new RangeError("buffer too small");
    }
    Bd && Bd.getRandomValues ? (Va.randomFill = Pq, Va.randomFillSync = Cq) : (Va.randomFill = J3, Va.randomFillSync = J3);
    function Pq(t, e, r, o2) {
      if (!tw.isBuffer(t) && !(t instanceof global.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      if (typeof e == "function")
        o2 = e, e = 0, r = t.length;
      else if (typeof r == "function")
        o2 = r, r = t.length - e;
      else if (typeof o2 != "function")
        throw new TypeError('"cb" argument must be a function');
      return nw(e, t.length), fw(r, e, t.length), aw(t, e, r, o2);
    }
    function aw(t, e, r, o2) {
      if (true) {
        var f2 = t.buffer, p = new Uint8Array(f2, e, r);
        if (Bd.getRandomValues(p), o2) {
          process.nextTick(function() {
            o2(null, t);
          });
          return;
        }
        return t;
      }
      if (o2) {
        Q3(r, function(y3, M2) {
          if (y3)
            return o2(y3);
          M2.copy(t, e), o2(null, t);
        });
        return;
      }
      var m2 = Q3(r);
      return m2.copy(t, e), t;
    }
    function Cq(t, e, r) {
      if (typeof e > "u" && (e = 0), !tw.isBuffer(t) && !(t instanceof global.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      return nw(e, t.length), r === undefined && (r = t.length - e), fw(r, e, t.length), aw(t, e, r);
    }
  });
  qd = T9((ke) => {
    ke.randomBytes = ke.rng = ke.pseudoRandomBytes = ke.prng = on();
    ke.createHash = ke.Hash = bf();
    ke.createHmac = ke.Hmac = wu();
    var Oq = Eb(), Fq = Object.keys(Oq), Uq = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(Fq);
    ke.getHashes = function() {
      return Uq;
    };
    var sw = Iu();
    ke.pbkdf2 = sw.pbkdf2;
    ke.pbkdf2Sync = sw.pbkdf2Sync;
    var ui = Vm();
    ke.Cipher = ui.Cipher;
    ke.createCipher = ui.createCipher;
    ke.Cipheriv = ui.Cipheriv;
    ke.createCipheriv = ui.createCipheriv;
    ke.Decipher = ui.Decipher;
    ke.createDecipher = ui.createDecipher;
    ke.Decipheriv = ui.Decipheriv;
    ke.createDecipheriv = ui.createDecipheriv;
    ke.getCiphers = ui.getCiphers;
    ke.listCiphers = ui.listCiphers;
    var $a = hg();
    ke.DiffieHellmanGroup = $a.DiffieHellmanGroup;
    ke.createDiffieHellmanGroup = $a.createDiffieHellmanGroup;
    ke.getDiffieHellman = $a.getDiffieHellman;
    ke.createDiffieHellman = $a.createDiffieHellman;
    ke.DiffieHellman = $a.DiffieHellman;
    var M0 = k3();
    ke.createSign = M0.createSign;
    ke.Sign = M0.Sign;
    ke.createVerify = M0.createVerify;
    ke.Verify = M0.Verify;
    ke.createECDH = P32();
    var _0 = X3();
    ke.publicEncrypt = _0.publicEncrypt;
    ke.privateEncrypt = _0.privateEncrypt;
    ke.publicDecrypt = _0.publicDecrypt;
    ke.privateDecrypt = _0.privateDecrypt;
    var hw = ow();
    ke.randomFill = hw.randomFill;
    ke.randomFillSync = hw.randomFillSync;
    ke.createCredentials = function() {
      throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join(`
`));
    };
    ke.constants = { DH_CHECK_P_NOT_SAFE_PRIME: 2, DH_CHECK_P_NOT_PRIME: 1, DH_UNABLE_TO_CHECK_GENERATOR: 4, DH_NOT_SUITABLE_GENERATOR: 8, NPN_ENABLED: 1, ALPN_ENABLED: 1, RSA_PKCS1_PADDING: 1, RSA_SSLV23_PADDING: 2, RSA_NO_PADDING: 3, RSA_PKCS1_OAEP_PADDING: 4, RSA_X931_PADDING: 5, RSA_PKCS1_PSS_PADDING: 6, POINT_CONVERSION_COMPRESSED: 2, POINT_CONVERSION_UNCOMPRESSED: 4, POINT_CONVERSION_HYBRID: 6 };
  });
  Xt = {};
  Ja(Xt, { DEFAULT_ENCODING: () => Ga, default: () => Wq, getCurves: () => dw, getRandomValues: () => uw, randomUUID: () => lw, scrypt: () => Td, scryptSync: () => Id2, timingSafeEqual: () => x0, webcrypto: () => cw });
  ot2(Xt, rn(qd()));
  zq = rn(qd());
  Hq = ["p192", "p224", "p256", "p384", "p521", "curve25519", "ed25519", "secp256k1", "secp224r1", "prime256v1", "prime192v1", "ed25519", "secp384r1", "secp521r1"];
  x0 = "timingSafeEqual" in crypto ? (t, e) => {
    let { byteLength: r } = t, { byteLength: o2 } = e;
    if (typeof r != "number" || typeof o2 != "number")
      throw new TypeError("Input must be an array buffer view");
    if (r !== o2)
      throw new RangeError("Input buffers must have the same length");
    return crypto.timingSafeEqual(t, e);
  } : undefined;
  Id2 = "scryptSync" in crypto ? (t, e, r, o2) => {
    let f2 = crypto.scryptSync(t, e, r, o2);
    return Ga !== "buffer" ? new Buffer(f2).toString(Ga) : new Buffer(f2);
  } : undefined;
  Td = "scryptSync" in crypto ? function(t, e, r, o2, f2) {
    if (typeof o2 == "function" && (f2 = o2, o2 = undefined), typeof f2 != "function") {
      var p = new TypeError("callback must be a function");
      throw p.code = "ERR_INVALID_CALLBACK", p;
    }
    try {
      let m2 = crypto.scryptSync(t, e, r, o2);
      process.nextTick(f2, null, Ga !== "buffer" ? new Buffer(m2).toString(Ga) : new Buffer(m2));
    } catch (m2) {
      throw m2;
    }
  } : undefined;
  x0 && (Object.defineProperty(x0, "name", { value: "::bunternal::" }), Object.defineProperty(Td, "name", { value: "::bunternal::" }), Object.defineProperty(Id2, "name", { value: "::bunternal::" }));
  cw = crypto;
  Wq = { ...zq, getRandomValues: uw, randomUUID: lw, timingSafeEqual: x0, scryptSync: Id2, scrypt: Td, webcrypto: cw, getCurves: dw };
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
});

// node_modules/debug/node_modules/ms/index.js
var require_ms = __commonJS((exports, module) => {
  var s = 1000;
  var m2 = s * 60;
  var h3 = m2 * 60;
  var d2 = h3 * 24;
  var w3 = d2 * 7;
  var y3 = d2 * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n2 = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n2 * y3;
      case "weeks":
      case "week":
      case "w":
        return n2 * w3;
      case "days":
      case "day":
      case "d":
        return n2 * d2;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n2 * h3;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n2 * m2;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n2 * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n2;
      default:
        return;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d2) {
      return Math.round(ms / d2) + "d";
    }
    if (msAbs >= h3) {
      return Math.round(ms / h3) + "h";
    }
    if (msAbs >= m2) {
      return Math.round(ms / m2) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d2) {
      return plural(ms, msAbs, d2, "day");
    }
    if (msAbs >= h3) {
      return plural(ms, msAbs, h3, "hour");
    }
    if (msAbs >= m2) {
      return plural(ms, msAbs, m2, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n2, name) {
    var isPlural = msAbs >= n2 * 1.5;
    return Math.round(ms / n2) + " " + name + (isPlural ? "s" : "");
  }
});

// node_modules/debug/src/common.js
var require_common2 = __commonJS((exports, module) => {
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require_ms();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash2 = 0;
      for (let i = 0;i < namespace.length; i++) {
        hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i);
        hash2 |= 0;
      }
      return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        if (!debug.enabled) {
          return;
        }
        const self2 = debug;
        const curr = Number(new Date);
        const ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy;
      Object.defineProperty(debug, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v4) => {
          enableOverride = v4;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      let i;
      const split3 = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      const len = split3.length;
      for (i = 0;i < len; i++) {
        if (!split3[i]) {
          continue;
        }
        namespaces = split3[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
        } else {
          createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
    }
    function disable() {
      const namespaces = [
        ...createDebug.names.map(toNamespace),
        ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      if (name[name.length - 1] === "*") {
        return true;
      }
      let i;
      let len;
      for (i = 0, len = createDebug.skips.length;i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = createDebug.names.length;i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }
    function toNamespace(regexp) {
      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  module.exports = setup;
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS((exports, module) => {
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.destroy = (() => {
    let warned = false;
    return () => {
      if (!warned) {
        warned = true;
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
    };
  })();
  exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  exports.log = console.debug || console.log || (() => {
  });
  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem("debug", namespaces);
      } else {
        exports.storage.removeItem("debug");
      }
    } catch (error) {
    }
  }
  function load() {
    let r;
    try {
      r = exports.storage.getItem("debug");
    } catch (error) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {
    }
  }
  module.exports = require_common2()(exports);
  var { formatters } = module.exports;
  formatters.j = function(v4) {
    try {
      return JSON.stringify(v4);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
});

// node_modules/level/browser.js
var $Level = require_browser_level().BrowserLevel;

// src/snapshot-coder.ts
var replacer = (key, value) => {
  if (value instanceof Map) {
    return { _dataType: "Map", value: Array.from(value.entries()) };
  }
  if (typeof value === "bigint") {
    return { _dataType: "BigInt", value: value.toString() };
  }
  return value;
};
var reviver = (key, value) => {
  if (typeof value === "object" && value !== null) {
    if (value._dataType === "Map")
      return new Map(value.value);
    if (value._dataType === "BigInt")
      return BigInt(value.value);
  }
  return value;
};
var encode = (data) => Buffer.from(JSON.stringify(data, replacer));
var decode = (buffer) => JSON.parse(buffer.toString(), reviver);

// node_modules/ethers/lib.esm/ethers.js
var exports_ethers = {};
__export(exports_ethers, {
  zeroPadValue: () => zeroPadValue,
  zeroPadBytes: () => zeroPadBytes,
  wordlists: () => wordlists,
  version: () => version,
  verifyTypedData: () => verifyTypedData,
  verifyMessage: () => verifyMessage,
  verifyAuthorization: () => verifyAuthorization,
  uuidV4: () => uuidV4,
  toUtf8String: () => toUtf8String,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8Bytes: () => toUtf8Bytes,
  toTwos: () => toTwos,
  toQuantity: () => toQuantity,
  toNumber: () => toNumber,
  toBigInt: () => toBigInt,
  toBeHex: () => toBeHex,
  toBeArray: () => toBeArray,
  stripZerosLeft: () => stripZerosLeft,
  solidityPackedSha256: () => solidityPackedSha256,
  solidityPackedKeccak256: () => solidityPackedKeccak256,
  solidityPacked: () => solidityPacked,
  showThrottleMessage: () => showThrottleMessage,
  sha512: () => sha5122,
  sha256: () => sha2562,
  scryptSync: () => scryptSync,
  scrypt: () => scrypt2,
  ripemd160: () => ripemd1602,
  resolveProperties: () => resolveProperties,
  resolveAddress: () => resolveAddress,
  recoverAddress: () => recoverAddress,
  randomBytes: () => randomBytes3,
  pbkdf2: () => pbkdf22,
  parseUnits: () => parseUnits,
  parseEther: () => parseEther,
  namehash: () => namehash,
  mask: () => mask,
  makeError: () => makeError,
  lock: () => lock,
  keccak256: () => keccak256,
  isValidName: () => isValidName,
  isKeystoreJson: () => isKeystoreJson,
  isHexString: () => isHexString,
  isError: () => isError,
  isCrowdsaleJson: () => isCrowdsaleJson,
  isCallException: () => isCallException,
  isBytesLike: () => isBytesLike,
  isAddressable: () => isAddressable,
  isAddress: () => isAddress,
  id: () => id,
  hexlify: () => hexlify,
  hashMessage: () => hashMessage,
  hashAuthorization: () => hashAuthorization,
  getUint: () => getUint,
  getNumber: () => getNumber,
  getIndexedAccountPath: () => getIndexedAccountPath,
  getIcapAddress: () => getIcapAddress,
  getDefaultProvider: () => getDefaultProvider,
  getCreateAddress: () => getCreateAddress,
  getCreate2Address: () => getCreate2Address,
  getBytesCopy: () => getBytesCopy,
  getBytes: () => getBytes,
  getBigInt: () => getBigInt,
  getAddress: () => getAddress,
  getAccountPath: () => getAccountPath,
  fromTwos: () => fromTwos,
  formatUnits: () => formatUnits,
  formatEther: () => formatEther,
  ensNormalize: () => ensNormalize,
  encryptKeystoreJsonSync: () => encryptKeystoreJsonSync,
  encryptKeystoreJson: () => encryptKeystoreJson,
  encodeRlp: () => encodeRlp,
  encodeBytes32String: () => encodeBytes32String,
  encodeBase64: () => encodeBase64,
  encodeBase58: () => encodeBase58,
  dnsEncode: () => dnsEncode,
  defineProperties: () => defineProperties,
  defaultPath: () => defaultPath2,
  decryptKeystoreJsonSync: () => decryptKeystoreJsonSync,
  decryptKeystoreJson: () => decryptKeystoreJson,
  decryptCrowdsaleJson: () => decryptCrowdsaleJson,
  decodeRlp: () => decodeRlp,
  decodeBytes32String: () => decodeBytes32String,
  decodeBase64: () => decodeBase64,
  decodeBase58: () => decodeBase58,
  dataSlice: () => dataSlice,
  dataLength: () => dataLength,
  copyRequest: () => copyRequest,
  concat: () => concat,
  computeHmac: () => computeHmac,
  computeAddress: () => computeAddress,
  checkResultErrors: () => checkResultErrors,
  authorizationify: () => authorizationify,
  assertPrivate: () => assertPrivate,
  assertNormalize: () => assertNormalize,
  assertArgumentCount: () => assertArgumentCount,
  assertArgument: () => assertArgument,
  assert: () => assert,
  accessListify: () => accessListify,
  ZeroHash: () => ZeroHash,
  ZeroAddress: () => ZeroAddress,
  WordlistOwlA: () => WordlistOwlA,
  WordlistOwl: () => WordlistOwl,
  Wordlist: () => Wordlist,
  WeiPerEther: () => WeiPerEther,
  WebSocketProvider: () => WebSocketProvider,
  Wallet: () => Wallet,
  VoidSigner: () => VoidSigner,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  UnmanagedSubscriber: () => UnmanagedSubscriber,
  UndecodedEventLog: () => UndecodedEventLog,
  TypedDataEncoder: () => TypedDataEncoder,
  Typed: () => Typed,
  TransactionResponse: () => TransactionResponse,
  TransactionReceipt: () => TransactionReceipt,
  TransactionDescription: () => TransactionDescription,
  Transaction: () => Transaction,
  StructFragment: () => StructFragment,
  SocketSubscriber: () => SocketSubscriber,
  SocketProvider: () => SocketProvider,
  SocketPendingSubscriber: () => SocketPendingSubscriber,
  SocketEventSubscriber: () => SocketEventSubscriber,
  SocketBlockSubscriber: () => SocketBlockSubscriber,
  SigningKey: () => SigningKey,
  Signature: () => Signature,
  Result: () => Result,
  QuickNodeProvider: () => QuickNodeProvider,
  PocketProvider: () => PocketProvider,
  ParamType: () => ParamType,
  NonceManager: () => NonceManager,
  NetworkPlugin: () => NetworkPlugin,
  Network: () => Network,
  NamedFragment: () => NamedFragment,
  N: () => N2,
  MulticoinProviderPlugin: () => MulticoinProviderPlugin,
  Mnemonic: () => Mnemonic,
  MinInt256: () => MinInt256,
  MessagePrefix: () => MessagePrefix,
  MaxUint256: () => MaxUint256,
  MaxInt256: () => MaxInt256,
  LogDescription: () => LogDescription,
  Log: () => Log,
  LangEn: () => LangEn,
  JsonRpcSigner: () => JsonRpcSigner,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcApiProvider: () => JsonRpcApiProvider,
  IpcSocketProvider: () => IpcSocketProvider,
  Interface: () => Interface,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  InfuraProvider: () => InfuraProvider,
  Indexed: () => Indexed,
  HDNodeWallet: () => HDNodeWallet,
  HDNodeVoidWallet: () => HDNodeVoidWallet,
  GasCostPlugin: () => GasCostPlugin,
  FunctionFragment: () => FunctionFragment,
  Fragment: () => Fragment,
  FixedNumber: () => FixedNumber,
  FetchUrlFeeDataNetworkPlugin: () => FetchUrlFeeDataNetworkPlugin,
  FetchResponse: () => FetchResponse,
  FetchRequest: () => FetchRequest,
  FetchCancelSignal: () => FetchCancelSignal,
  FeeDataNetworkPlugin: () => FeeDataNetworkPlugin,
  FeeData: () => FeeData,
  FallbackProvider: () => FallbackProvider,
  FallbackFragment: () => FallbackFragment,
  EventPayload: () => EventPayload,
  EventLog: () => EventLog,
  EventFragment: () => EventFragment,
  EtherscanProvider: () => EtherscanProvider,
  EtherscanPlugin: () => EtherscanPlugin,
  EtherSymbol: () => EtherSymbol,
  ErrorFragment: () => ErrorFragment,
  ErrorDescription: () => ErrorDescription,
  EnsResolver: () => EnsResolver,
  EnsPlugin: () => EnsPlugin,
  ContractUnknownEventPayload: () => ContractUnknownEventPayload,
  ContractTransactionResponse: () => ContractTransactionResponse,
  ContractTransactionReceipt: () => ContractTransactionReceipt,
  ContractFactory: () => ContractFactory,
  ContractEventPayload: () => ContractEventPayload,
  Contract: () => Contract,
  ConstructorFragment: () => ConstructorFragment,
  CloudflareProvider: () => CloudflareProvider,
  ChainstackProvider: () => ChainstackProvider,
  BrowserProvider: () => BrowserProvider,
  BlockscoutProvider: () => BlockscoutProvider,
  Block: () => Block,
  BaseWallet: () => BaseWallet,
  BaseContract: () => BaseContract,
  AnkrProvider: () => AnkrProvider,
  AlchemyProvider: () => AlchemyProvider,
  AbstractSigner: () => AbstractSigner,
  AbstractProvider: () => AbstractProvider,
  AbiCoder: () => AbiCoder
});

// node_modules/ethers/lib.esm/_version.js
var version = "6.15.0";
// node_modules/ethers/lib.esm/utils/properties.js
function checkType(value, type, name) {
  const types = type.split("|").map((t) => t.trim());
  for (let i = 0;i < types.length; i++) {
    switch (type) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof value === type) {
          return;
        }
    }
  }
  const error = new Error(`invalid value for type ${type}`);
  error.code = "INVALID_ARGUMENT";
  error.argument = `value.${name}`;
  error.value = value;
  throw error;
}
async function resolveProperties(value) {
  const keys = Object.keys(value);
  const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
  return results.reduce((accum, v3, index) => {
    accum[keys[index]] = v3;
    return accum;
  }, {});
}
function defineProperties(target, values, types) {
  for (let key in values) {
    let value = values[key];
    const type = types ? types[key] : null;
    if (type) {
      checkType(value, type, key);
    }
    Object.defineProperty(target, key, { enumerable: true, value, writable: false });
  }
}

// node_modules/ethers/lib.esm/utils/errors.js
function stringify(value, seen) {
  if (value == null) {
    return "null";
  }
  if (seen == null) {
    seen = new Set;
  }
  if (typeof value === "object") {
    if (seen.has(value)) {
      return "[Circular]";
    }
    seen.add(value);
  }
  if (Array.isArray(value)) {
    return "[ " + value.map((v3) => stringify(v3, seen)).join(", ") + " ]";
  }
  if (value instanceof Uint8Array) {
    const HEX = "0123456789abcdef";
    let result = "0x";
    for (let i = 0;i < value.length; i++) {
      result += HEX[value[i] >> 4];
      result += HEX[value[i] & 15];
    }
    return result;
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return stringify(value.toJSON(), seen);
  }
  switch (typeof value) {
    case "boolean":
    case "number":
    case "symbol":
      return value.toString();
    case "bigint":
      return BigInt(value).toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{ " + keys.map((k) => `${stringify(k, seen)}: ${stringify(value[k], seen)}`).join(", ") + " }";
    }
  }
  return `[ COULD NOT SERIALIZE ]`;
}
function isError(error, code) {
  return error && error.code === code;
}
function isCallException(error) {
  return isError(error, "CALL_EXCEPTION");
}
function makeError(message, code, info) {
  let shortMessage = message;
  {
    const details = [];
    if (info) {
      if ("message" in info || "code" in info || "name" in info) {
        throw new Error(`value will overwrite populated values: ${stringify(info)}`);
      }
      for (const key in info) {
        if (key === "shortMessage") {
          continue;
        }
        const value = info[key];
        details.push(key + "=" + stringify(value));
      }
    }
    details.push(`code=${code}`);
    details.push(`version=${version}`);
    if (details.length) {
      message += " (" + details.join(", ") + ")";
    }
  }
  let error;
  switch (code) {
    case "INVALID_ARGUMENT":
      error = new TypeError(message);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      error = new RangeError(message);
      break;
    default:
      error = new Error(message);
  }
  defineProperties(error, { code });
  if (info) {
    Object.assign(error, info);
  }
  if (error.shortMessage == null) {
    defineProperties(error, { shortMessage });
  }
  return error;
}
function assert(check, message, code, info) {
  if (!check) {
    throw makeError(message, code, info);
  }
}
function assertArgument(check, message, name, value) {
  assert(check, message, "INVALID_ARGUMENT", { argument: name, value });
}
function assertArgumentCount(count, expectedCount, message) {
  if (message == null) {
    message = "";
  }
  if (message) {
    message = ": " + message;
  }
  assert(count >= expectedCount, "missing argument" + message, "MISSING_ARGUMENT", {
    count,
    expectedCount
  });
  assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
    count,
    expectedCount
  });
}
var _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
  try {
    if ("test".normalize(form) !== "test") {
      throw new Error("bad");
    }
    if (form === "NFD") {
      const check = String.fromCharCode(233).normalize("NFD");
      const expected = String.fromCharCode(101, 769);
      if (check !== expected) {
        throw new Error("broken");
      }
    }
    accum.push(form);
  } catch (error) {
  }
  return accum;
}, []);
function assertNormalize(form) {
  assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form }
  });
}
function assertPrivate(givenGuard, guard, className) {
  if (className == null) {
    className = "";
  }
  if (givenGuard !== guard) {
    let method = className, operation = "new";
    if (className) {
      method += ".";
      operation += " " + className;
    }
    assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
      operation
    });
  }
}

// node_modules/ethers/lib.esm/utils/data.js
function _getBytes(value, name, copy) {
  if (value instanceof Uint8Array) {
    if (copy) {
      return new Uint8Array(value);
    }
    return value;
  }
  if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
    const result = new Uint8Array((value.length - 2) / 2);
    let offset = 2;
    for (let i = 0;i < result.length; i++) {
      result[i] = parseInt(value.substring(offset, offset + 2), 16);
      offset += 2;
    }
    return result;
  }
  assertArgument(false, "invalid BytesLike value", name || "value", value);
}
function getBytes(value, name) {
  return _getBytes(value, name, false);
}
function getBytesCopy(value, name) {
  return _getBytes(value, name, true);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (typeof length === "number" && value.length !== 2 + 2 * length) {
    return false;
  }
  if (length === true && value.length % 2 !== 0) {
    return false;
  }
  return true;
}
function isBytesLike(value) {
  return isHexString(value, true) || value instanceof Uint8Array;
}
var HexCharacters = "0123456789abcdef";
function hexlify(data) {
  const bytes = getBytes(data);
  let result = "0x";
  for (let i = 0;i < bytes.length; i++) {
    const v3 = bytes[i];
    result += HexCharacters[(v3 & 240) >> 4] + HexCharacters[v3 & 15];
  }
  return result;
}
function concat(datas) {
  return "0x" + datas.map((d2) => hexlify(d2).substring(2)).join("");
}
function dataLength(data) {
  if (isHexString(data, true)) {
    return (data.length - 2) / 2;
  }
  return getBytes(data).length;
}
function dataSlice(data, start, end) {
  const bytes = getBytes(data);
  if (end != null && end > bytes.length) {
    assert(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
      buffer: bytes,
      length: bytes.length,
      offset: end
    });
  }
  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
}
function stripZerosLeft(data) {
  let bytes = hexlify(data).substring(2);
  while (bytes.startsWith("00")) {
    bytes = bytes.substring(2);
  }
  return "0x" + bytes;
}
function zeroPad(data, length, left) {
  const bytes = getBytes(data);
  assert(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(bytes),
    length,
    offset: length + 1
  });
  const result = new Uint8Array(length);
  result.fill(0);
  if (left) {
    result.set(bytes, length - bytes.length);
  } else {
    result.set(bytes, 0);
  }
  return hexlify(result);
}
function zeroPadValue(data, length) {
  return zeroPad(data, length, true);
}
function zeroPadBytes(data, length) {
  return zeroPad(data, length, false);
}

// node_modules/ethers/lib.esm/utils/maths.js
var BN_0 = BigInt(0);
var BN_1 = BigInt(1);
var maxValue = 9007199254740991;
function fromTwos(_value, _width) {
  const value = getUint(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  assert(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: _value
  });
  if (value >> width - BN_1) {
    const mask = (BN_1 << width) - BN_1;
    return -((~value & mask) + BN_1);
  }
  return value;
}
function toTwos(_value, _width) {
  let value = getBigInt(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  const limit = BN_1 << width - BN_1;
  if (value < BN_0) {
    value = -value;
    assert(value <= limit, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
    const mask = (BN_1 << width) - BN_1;
    return (~value & mask) + BN_1;
  } else {
    assert(value < limit, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
  }
  return value;
}
function mask(_value, _bits) {
  const value = getUint(_value, "value");
  const bits = BigInt(getNumber(_bits, "bits"));
  return value & (BN_1 << bits) - BN_1;
}
function getBigInt(value, name) {
  switch (typeof value) {
    case "bigint":
      return value;
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return BigInt(value);
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        if (value[0] === "-" && value[1] !== "-") {
          return -BigInt(value.substring(1));
        }
        return BigInt(value);
      } catch (e) {
        assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid BigNumberish value", name || "value", value);
}
function getUint(value, name) {
  const result = getBigInt(value, name);
  assert(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value
  });
  return result;
}
var Nibbles = "0123456789abcdef";
function toBigInt(value) {
  if (value instanceof Uint8Array) {
    let result = "0x0";
    for (const v3 of value) {
      result += Nibbles[v3 >> 4];
      result += Nibbles[v3 & 15];
    }
    return BigInt(result);
  }
  return getBigInt(value);
}
function getNumber(value, name) {
  switch (typeof value) {
    case "bigint":
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return Number(value);
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return value;
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        return getNumber(BigInt(value), name);
      } catch (e) {
        assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid numeric value", name || "value", value);
}
function toNumber(value) {
  return getNumber(toBigInt(value));
}
function toBeHex(_value, _width) {
  const value = getUint(_value, "value");
  let result = value.toString(16);
  if (_width == null) {
    if (result.length % 2) {
      result = "0" + result;
    }
  } else {
    const width = getNumber(_width, "width");
    assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: _value
    });
    while (result.length < width * 2) {
      result = "0" + result;
    }
  }
  return "0x" + result;
}
function toBeArray(_value) {
  const value = getUint(_value, "value");
  if (value === BN_0) {
    return new Uint8Array([]);
  }
  let hex = value.toString(16);
  if (hex.length % 2) {
    hex = "0" + hex;
  }
  const result = new Uint8Array(hex.length / 2);
  for (let i = 0;i < result.length; i++) {
    const offset = i * 2;
    result[i] = parseInt(hex.substring(offset, offset + 2), 16);
  }
  return result;
}
function toQuantity(value) {
  let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);
  while (result.startsWith("0")) {
    result = result.substring(1);
  }
  if (result === "") {
    result = "0";
  }
  return "0x" + result;
}

// node_modules/ethers/lib.esm/utils/base58.js
var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var Lookup = null;
function getAlpha(letter) {
  if (Lookup == null) {
    Lookup = {};
    for (let i = 0;i < Alphabet.length; i++) {
      Lookup[Alphabet[i]] = BigInt(i);
    }
  }
  const result = Lookup[letter];
  assertArgument(result != null, `invalid base58 value`, "letter", letter);
  return result;
}
var BN_02 = BigInt(0);
var BN_58 = BigInt(58);
function encodeBase58(_value) {
  const bytes = getBytes(_value);
  let value = toBigInt(bytes);
  let result = "";
  while (value) {
    result = Alphabet[Number(value % BN_58)] + result;
    value /= BN_58;
  }
  for (let i = 0;i < bytes.length; i++) {
    if (bytes[i]) {
      break;
    }
    result = Alphabet[0] + result;
  }
  return result;
}
function decodeBase58(value) {
  let result = BN_02;
  for (let i = 0;i < value.length; i++) {
    result *= BN_58;
    result += getAlpha(value[i]);
  }
  return result;
}
// node_modules/ethers/lib.esm/utils/base64-browser.js
function decodeBase64(textData) {
  textData = atob(textData);
  const data = new Uint8Array(textData.length);
  for (let i = 0;i < textData.length; i++) {
    data[i] = textData.charCodeAt(i);
  }
  return getBytes(data);
}
function encodeBase64(_data) {
  const data = getBytes(_data);
  let textData = "";
  for (let i = 0;i < data.length; i++) {
    textData += String.fromCharCode(data[i]);
  }
  return btoa(textData);
}
// node_modules/ethers/lib.esm/utils/events.js
class EventPayload {
  filter;
  emitter;
  #listener;
  constructor(emitter, listener, filter) {
    this.#listener = listener;
    defineProperties(this, { emitter, filter });
  }
  async removeListener() {
    if (this.#listener == null) {
      return;
    }
    await this.emitter.off(this.filter, this.#listener);
  }
}
// node_modules/ethers/lib.esm/utils/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
    let i = 0;
    for (let o2 = offset + 1;o2 < bytes.length; o2++) {
      if (bytes[o2] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === "OVERRUN") {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === "OVERLONG") {
    assertArgument(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(_bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  const bytes = getBytes(_bytes, "bytes");
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
      } else {
        i += onError("BAD_PREFIX", i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError("OVERRUN", i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j2 = 0;j2 < extraLength; j2++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError("MISSING_CONTINUE", i, bytes, result);
        res = null;
        break;
      }
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form) {
  assertArgument(typeof str === "string", "invalid string value", "str", str);
  if (form != null) {
    assertNormalize(form);
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0;i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      assertArgument(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return new Uint8Array(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str, form) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}

// node_modules/ethers/lib.esm/utils/geturl-browser.js
function createGetUrl(options) {
  async function getUrl(req, _signal) {
    assert(_signal == null || !_signal.cancelled, "request cancelled before sending", "CANCELLED");
    const protocol = req.url.split(":")[0].toLowerCase();
    assert(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
      info: { protocol },
      operation: "request"
    });
    assert(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let error = null;
    const controller = new AbortController;
    const timer = setTimeout(() => {
      error = makeError("request timeout", "TIMEOUT");
      controller.abort();
    }, req.timeout);
    if (_signal) {
      _signal.addListener(() => {
        error = makeError("request cancelled", "CANCELLED");
        controller.abort();
      });
    }
    const init = Object.assign({}, options, {
      method: req.method,
      headers: new Headers(Array.from(req)),
      body: req.body || undefined,
      signal: controller.signal
    });
    let resp;
    try {
      resp = await fetch(req.url, init);
    } catch (_error) {
      clearTimeout(timer);
      if (error) {
        throw error;
      }
      throw _error;
    }
    clearTimeout(timer);
    const headers = {};
    resp.headers.forEach((value, key) => {
      headers[key.toLowerCase()] = value;
    });
    const respBody = await resp.arrayBuffer();
    const body = respBody == null ? null : new Uint8Array(respBody);
    return {
      statusCode: resp.status,
      statusMessage: resp.statusText,
      headers,
      body
    };
  }
  return getUrl;
}
var defaultGetUrl = createGetUrl({});

// node_modules/ethers/lib.esm/utils/fetch.js
var MAX_ATTEMPTS = 12;
var SLOT_INTERVAL = 250;
var defaultGetUrlFunc = createGetUrl();
var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
var reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
var locked = false;
async function dataGatewayFunc(url, signal) {
  try {
    const match = url.match(reData);
    if (!match) {
      throw new Error("invalid data");
    }
    return new FetchResponse(200, "OK", {
      "content-type": match[1] || "text/plain"
    }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));
  } catch (error) {
    return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
  }
}
function getIpfsGatewayFunc(baseUrl) {
  async function gatewayIpfs(url, signal) {
    try {
      const match = url.match(reIpfs);
      if (!match) {
        throw new Error("invalid link");
      }
      return new FetchRequest(`${baseUrl}${match[2]}`);
    } catch (error) {
      return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
    }
  }
  return gatewayIpfs;
}
var Gateways = {
  data: dataGatewayFunc,
  ipfs: getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
};
var fetchSignals = new WeakMap;

class FetchCancelSignal {
  #listeners;
  #cancelled;
  constructor(request) {
    this.#listeners = [];
    this.#cancelled = false;
    fetchSignals.set(request, () => {
      if (this.#cancelled) {
        return;
      }
      this.#cancelled = true;
      for (const listener of this.#listeners) {
        setTimeout(() => {
          listener();
        }, 0);
      }
      this.#listeners = [];
    });
  }
  addListener(listener) {
    assert(!this.#cancelled, "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    });
    this.#listeners.push(listener);
  }
  get cancelled() {
    return this.#cancelled;
  }
  checkSignal() {
    assert(!this.cancelled, "cancelled", "CANCELLED", {});
  }
}
function checkSignal(signal) {
  if (signal == null) {
    throw new Error("missing signal; should not happen");
  }
  signal.checkSignal();
  return signal;
}

class FetchRequest {
  #allowInsecure;
  #gzip;
  #headers;
  #method;
  #timeout;
  #url;
  #body;
  #bodyType;
  #creds;
  #preflight;
  #process;
  #retry;
  #signal;
  #throttle;
  #getUrlFunc;
  get url() {
    return this.#url;
  }
  set url(url) {
    this.#url = String(url);
  }
  get body() {
    if (this.#body == null) {
      return null;
    }
    return new Uint8Array(this.#body);
  }
  set body(body) {
    if (body == null) {
      this.#body = undefined;
      this.#bodyType = undefined;
    } else if (typeof body === "string") {
      this.#body = toUtf8Bytes(body);
      this.#bodyType = "text/plain";
    } else if (body instanceof Uint8Array) {
      this.#body = body;
      this.#bodyType = "application/octet-stream";
    } else if (typeof body === "object") {
      this.#body = toUtf8Bytes(JSON.stringify(body));
      this.#bodyType = "application/json";
    } else {
      throw new Error("invalid body");
    }
  }
  hasBody() {
    return this.#body != null;
  }
  get method() {
    if (this.#method) {
      return this.#method;
    }
    if (this.hasBody()) {
      return "POST";
    }
    return "GET";
  }
  set method(method) {
    if (method == null) {
      method = "";
    }
    this.#method = String(method).toUpperCase();
  }
  get headers() {
    const headers = Object.assign({}, this.#headers);
    if (this.#creds) {
      headers["authorization"] = `Basic ${encodeBase64(toUtf8Bytes(this.#creds))}`;
    }
    if (this.allowGzip) {
      headers["accept-encoding"] = "gzip";
    }
    if (headers["content-type"] == null && this.#bodyType) {
      headers["content-type"] = this.#bodyType;
    }
    if (this.body) {
      headers["content-length"] = String(this.body.length);
    }
    return headers;
  }
  getHeader(key) {
    return this.headers[key.toLowerCase()];
  }
  setHeader(key, value) {
    this.#headers[String(key).toLowerCase()] = String(value);
  }
  clearHeaders() {
    this.#headers = {};
  }
  [Symbol.iterator]() {
    const headers = this.headers;
    const keys = Object.keys(headers);
    let index = 0;
    return {
      next: () => {
        if (index < keys.length) {
          const key = keys[index++];
          return {
            value: [key, headers[key]],
            done: false
          };
        }
        return { value: undefined, done: true };
      }
    };
  }
  get credentials() {
    return this.#creds || null;
  }
  setCredentials(username, password) {
    assertArgument(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
    this.#creds = `${username}:${password}`;
  }
  get allowGzip() {
    return this.#gzip;
  }
  set allowGzip(value) {
    this.#gzip = !!value;
  }
  get allowInsecureAuthentication() {
    return !!this.#allowInsecure;
  }
  set allowInsecureAuthentication(value) {
    this.#allowInsecure = !!value;
  }
  get timeout() {
    return this.#timeout;
  }
  set timeout(timeout) {
    assertArgument(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
    this.#timeout = timeout;
  }
  get preflightFunc() {
    return this.#preflight || null;
  }
  set preflightFunc(preflight) {
    this.#preflight = preflight;
  }
  get processFunc() {
    return this.#process || null;
  }
  set processFunc(process2) {
    this.#process = process2;
  }
  get retryFunc() {
    return this.#retry || null;
  }
  set retryFunc(retry) {
    this.#retry = retry;
  }
  get getUrlFunc() {
    return this.#getUrlFunc || defaultGetUrlFunc;
  }
  set getUrlFunc(value) {
    this.#getUrlFunc = value;
  }
  constructor(url) {
    this.#url = String(url);
    this.#allowInsecure = false;
    this.#gzip = true;
    this.#headers = {};
    this.#method = "";
    this.#timeout = 300000;
    this.#throttle = {
      slotInterval: SLOT_INTERVAL,
      maxAttempts: MAX_ATTEMPTS
    };
    this.#getUrlFunc = null;
  }
  toString() {
    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? hexlify(this.#body) : "null"}>`;
  }
  setThrottleParams(params) {
    if (params.slotInterval != null) {
      this.#throttle.slotInterval = params.slotInterval;
    }
    if (params.maxAttempts != null) {
      this.#throttle.maxAttempts = params.maxAttempts;
    }
  }
  async#send(attempt, expires, delay, _request, _response) {
    if (attempt >= this.#throttle.maxAttempts) {
      return _response.makeServerError("exceeded maximum retry limit");
    }
    assert(getTime() <= expires, "timeout", "TIMEOUT", {
      operation: "request.send",
      reason: "timeout",
      request: _request
    });
    if (delay > 0) {
      await wait(delay);
    }
    let req = this.clone();
    const scheme = (req.url.split(":")[0] || "").toLowerCase();
    if (scheme in Gateways) {
      const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));
      if (result instanceof FetchResponse) {
        let response2 = result;
        if (this.processFunc) {
          checkSignal(_request.#signal);
          try {
            response2 = await this.processFunc(req, response2);
          } catch (error) {
            if (error.throttle == null || typeof error.stall !== "number") {
              response2.makeServerError("error in post-processing function", error).assertOk();
            }
          }
        }
        return response2;
      }
      req = result;
    }
    if (this.preflightFunc) {
      req = await this.preflightFunc(req);
    }
    const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));
    let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);
    if (response.statusCode === 301 || response.statusCode === 302) {
      try {
        const location = response.headers.location || "";
        return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);
      } catch (error) {
      }
      return response;
    } else if (response.statusCode === 429) {
      if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
        const retryAfter = response.headers["retry-after"];
        let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
        if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
          delay2 = parseInt(retryAfter);
        }
        return req.clone().#send(attempt + 1, expires, delay2, _request, response);
      }
    }
    if (this.processFunc) {
      checkSignal(_request.#signal);
      try {
        response = await this.processFunc(req, response);
      } catch (error) {
        if (error.throttle == null || typeof error.stall !== "number") {
          response.makeServerError("error in post-processing function", error).assertOk();
        }
        let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
        if (error.stall >= 0) {
          delay2 = error.stall;
        }
        return req.clone().#send(attempt + 1, expires, delay2, _request, response);
      }
    }
    return response;
  }
  send() {
    assert(this.#signal == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
    this.#signal = new FetchCancelSignal(this);
    return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
  }
  cancel() {
    assert(this.#signal != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
    const signal = fetchSignals.get(this);
    if (!signal) {
      throw new Error("missing signal; should not happen");
    }
    signal();
  }
  redirect(location) {
    const current = this.url.split(":")[0].toLowerCase();
    const target = location.split(":")[0].toLowerCase();
    assert(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
    });
    const req = new FetchRequest(location);
    req.method = "GET";
    req.allowGzip = this.allowGzip;
    req.timeout = this.timeout;
    req.#headers = Object.assign({}, this.#headers);
    if (this.#body) {
      req.#body = new Uint8Array(this.#body);
    }
    req.#bodyType = this.#bodyType;
    return req;
  }
  clone() {
    const clone = new FetchRequest(this.url);
    clone.#method = this.#method;
    if (this.#body) {
      clone.#body = this.#body;
    }
    clone.#bodyType = this.#bodyType;
    clone.#headers = Object.assign({}, this.#headers);
    clone.#creds = this.#creds;
    if (this.allowGzip) {
      clone.allowGzip = true;
    }
    clone.timeout = this.timeout;
    if (this.allowInsecureAuthentication) {
      clone.allowInsecureAuthentication = true;
    }
    clone.#preflight = this.#preflight;
    clone.#process = this.#process;
    clone.#retry = this.#retry;
    clone.#throttle = Object.assign({}, this.#throttle);
    clone.#getUrlFunc = this.#getUrlFunc;
    return clone;
  }
  static lockConfig() {
    locked = true;
  }
  static getGateway(scheme) {
    return Gateways[scheme.toLowerCase()] || null;
  }
  static registerGateway(scheme, func) {
    scheme = scheme.toLowerCase();
    if (scheme === "http" || scheme === "https") {
      throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
    }
    if (locked) {
      throw new Error("gateways locked");
    }
    Gateways[scheme] = func;
  }
  static registerGetUrl(getUrl) {
    if (locked) {
      throw new Error("gateways locked");
    }
    defaultGetUrlFunc = getUrl;
  }
  static createGetUrlFunc(options) {
    return createGetUrl(options);
  }
  static createDataGateway() {
    return dataGatewayFunc;
  }
  static createIpfsGatewayFunc(baseUrl) {
    return getIpfsGatewayFunc(baseUrl);
  }
}

class FetchResponse {
  #statusCode;
  #statusMessage;
  #headers;
  #body;
  #request;
  #error;
  toString() {
    return `<FetchResponse status=${this.statusCode} body=${this.#body ? hexlify(this.#body) : "null"}>`;
  }
  get statusCode() {
    return this.#statusCode;
  }
  get statusMessage() {
    return this.#statusMessage;
  }
  get headers() {
    return Object.assign({}, this.#headers);
  }
  get body() {
    return this.#body == null ? null : new Uint8Array(this.#body);
  }
  get bodyText() {
    try {
      return this.#body == null ? "" : toUtf8String(this.#body);
    } catch (error) {
      assert(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
        operation: "bodyText",
        info: { response: this }
      });
    }
  }
  get bodyJson() {
    try {
      return JSON.parse(this.bodyText);
    } catch (error) {
      assert(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
        operation: "bodyJson",
        info: { response: this }
      });
    }
  }
  [Symbol.iterator]() {
    const headers = this.headers;
    const keys = Object.keys(headers);
    let index = 0;
    return {
      next: () => {
        if (index < keys.length) {
          const key = keys[index++];
          return {
            value: [key, headers[key]],
            done: false
          };
        }
        return { value: undefined, done: true };
      }
    };
  }
  constructor(statusCode, statusMessage, headers, body, request) {
    this.#statusCode = statusCode;
    this.#statusMessage = statusMessage;
    this.#headers = Object.keys(headers).reduce((accum, k) => {
      accum[k.toLowerCase()] = String(headers[k]);
      return accum;
    }, {});
    this.#body = body == null ? null : new Uint8Array(body);
    this.#request = request || null;
    this.#error = { message: "" };
  }
  makeServerError(message, error) {
    let statusMessage;
    if (!message) {
      message = `${this.statusCode} ${this.statusMessage}`;
      statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
    } else {
      statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
    }
    const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);
    response.#error = { message, error };
    return response;
  }
  throwThrottleError(message, stall) {
    if (stall == null) {
      stall = -1;
    } else {
      assertArgument(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
    }
    const error = new Error(message || "throttling requests");
    defineProperties(error, { stall, throttle: true });
    throw error;
  }
  getHeader(key) {
    return this.headers[key.toLowerCase()];
  }
  hasBody() {
    return this.#body != null;
  }
  get request() {
    return this.#request;
  }
  ok() {
    return this.#error.message === "" && this.statusCode >= 200 && this.statusCode < 300;
  }
  assertOk() {
    if (this.ok()) {
      return;
    }
    let { message, error } = this.#error;
    if (message === "") {
      message = `server response ${this.statusCode} ${this.statusMessage}`;
    }
    let requestUrl = null;
    if (this.request) {
      requestUrl = this.request.url;
    }
    let responseBody = null;
    try {
      if (this.#body) {
        responseBody = toUtf8String(this.#body);
      }
    } catch (e) {
    }
    assert(false, message, "SERVER_ERROR", {
      request: this.request || "unknown request",
      response: this,
      error,
      info: {
        requestUrl,
        responseBody,
        responseStatus: `${this.statusCode} ${this.statusMessage}`
      }
    });
  }
}
function getTime() {
  return new Date().getTime();
}
function unpercent(value) {
  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
    return String.fromCharCode(parseInt(code, 16));
  }));
}
function wait(delay) {
  return new Promise((resolve) => setTimeout(resolve, delay));
}
// node_modules/ethers/lib.esm/utils/fixednumber.js
var BN_N1 = BigInt(-1);
var BN_03 = BigInt(0);
var BN_12 = BigInt(1);
var BN_5 = BigInt(5);
var _guard = {};
var Zeros = "0000";
while (Zeros.length < 80) {
  Zeros += Zeros;
}
function getTens(decimals) {
  let result = Zeros;
  while (result.length < decimals) {
    result += result;
  }
  return BigInt("1" + result.substring(0, decimals));
}
function checkValue(val, format, safeOp) {
  const width = BigInt(format.width);
  if (format.signed) {
    const limit = BN_12 << width - BN_12;
    assert(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
      operation: safeOp,
      fault: "overflow",
      value: val
    });
    if (val > BN_03) {
      val = fromTwos(mask(val, width), width);
    } else {
      val = -fromTwos(mask(-val, width), width);
    }
  } else {
    const limit = BN_12 << width;
    assert(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
      operation: safeOp,
      fault: "overflow",
      value: val
    });
    val = (val % limit + limit) % limit & limit - BN_12;
  }
  return val;
}
function getFormat(value) {
  if (typeof value === "number") {
    value = `fixed128x${value}`;
  }
  let signed = true;
  let width = 128;
  let decimals = 18;
  if (typeof value === "string") {
    if (value === "fixed") {
    } else if (value === "ufixed") {
      signed = false;
    } else {
      const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
      assertArgument(match, "invalid fixed format", "format", value);
      signed = match[1] !== "u";
      width = parseInt(match[2]);
      decimals = parseInt(match[3]);
    }
  } else if (value) {
    const v3 = value;
    const check = (key, type, defaultValue) => {
      if (v3[key] == null) {
        return defaultValue;
      }
      assertArgument(typeof v3[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v3[key]);
      return v3[key];
    };
    signed = check("signed", "boolean", signed);
    width = check("width", "number", width);
    decimals = check("decimals", "number", decimals);
  }
  assertArgument(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
  assertArgument(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
  const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
  return { signed, width, decimals, name };
}
function toString(val, decimals) {
  let negative = "";
  if (val < BN_03) {
    negative = "-";
    val *= BN_N1;
  }
  let str = val.toString();
  if (decimals === 0) {
    return negative + str;
  }
  while (str.length <= decimals) {
    str = Zeros + str;
  }
  const index = str.length - decimals;
  str = str.substring(0, index) + "." + str.substring(index);
  while (str[0] === "0" && str[1] !== ".") {
    str = str.substring(1);
  }
  while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
    str = str.substring(0, str.length - 1);
  }
  return negative + str;
}

class FixedNumber {
  format;
  #format;
  #val;
  #tens;
  _value;
  constructor(guard, value, format) {
    assertPrivate(guard, _guard, "FixedNumber");
    this.#val = value;
    this.#format = format;
    const _value = toString(value, format.decimals);
    defineProperties(this, { format: format.name, _value });
    this.#tens = getTens(format.decimals);
  }
  get signed() {
    return this.#format.signed;
  }
  get width() {
    return this.#format.width;
  }
  get decimals() {
    return this.#format.decimals;
  }
  get value() {
    return this.#val;
  }
  #checkFormat(other) {
    assertArgument(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
  }
  #checkValue(val, safeOp) {
    val = checkValue(val, this.#format, safeOp);
    return new FixedNumber(_guard, val, this.#format);
  }
  #add(o2, safeOp) {
    this.#checkFormat(o2);
    return this.#checkValue(this.#val + o2.#val, safeOp);
  }
  addUnsafe(other) {
    return this.#add(other);
  }
  add(other) {
    return this.#add(other, "add");
  }
  #sub(o2, safeOp) {
    this.#checkFormat(o2);
    return this.#checkValue(this.#val - o2.#val, safeOp);
  }
  subUnsafe(other) {
    return this.#sub(other);
  }
  sub(other) {
    return this.#sub(other, "sub");
  }
  #mul(o2, safeOp) {
    this.#checkFormat(o2);
    return this.#checkValue(this.#val * o2.#val / this.#tens, safeOp);
  }
  mulUnsafe(other) {
    return this.#mul(other);
  }
  mul(other) {
    return this.#mul(other, "mul");
  }
  mulSignal(other) {
    this.#checkFormat(other);
    const value = this.#val * other.#val;
    assert(value % this.#tens === BN_03, "precision lost during signalling mul", "NUMERIC_FAULT", {
      operation: "mulSignal",
      fault: "underflow",
      value: this
    });
    return this.#checkValue(value / this.#tens, "mulSignal");
  }
  #div(o2, safeOp) {
    assert(o2.#val !== BN_03, "division by zero", "NUMERIC_FAULT", {
      operation: "div",
      fault: "divide-by-zero",
      value: this
    });
    this.#checkFormat(o2);
    return this.#checkValue(this.#val * this.#tens / o2.#val, safeOp);
  }
  divUnsafe(other) {
    return this.#div(other);
  }
  div(other) {
    return this.#div(other, "div");
  }
  divSignal(other) {
    assert(other.#val !== BN_03, "division by zero", "NUMERIC_FAULT", {
      operation: "div",
      fault: "divide-by-zero",
      value: this
    });
    this.#checkFormat(other);
    const value = this.#val * this.#tens;
    assert(value % other.#val === BN_03, "precision lost during signalling div", "NUMERIC_FAULT", {
      operation: "divSignal",
      fault: "underflow",
      value: this
    });
    return this.#checkValue(value / other.#val, "divSignal");
  }
  cmp(other) {
    let a2 = this.value, b3 = other.value;
    const delta = this.decimals - other.decimals;
    if (delta > 0) {
      b3 *= getTens(delta);
    } else if (delta < 0) {
      a2 *= getTens(-delta);
    }
    if (a2 < b3) {
      return -1;
    }
    if (a2 > b3) {
      return 1;
    }
    return 0;
  }
  eq(other) {
    return this.cmp(other) === 0;
  }
  lt(other) {
    return this.cmp(other) < 0;
  }
  lte(other) {
    return this.cmp(other) <= 0;
  }
  gt(other) {
    return this.cmp(other) > 0;
  }
  gte(other) {
    return this.cmp(other) >= 0;
  }
  floor() {
    let val = this.#val;
    if (this.#val < BN_03) {
      val -= this.#tens - BN_12;
    }
    val = this.#val / this.#tens * this.#tens;
    return this.#checkValue(val, "floor");
  }
  ceiling() {
    let val = this.#val;
    if (this.#val > BN_03) {
      val += this.#tens - BN_12;
    }
    val = this.#val / this.#tens * this.#tens;
    return this.#checkValue(val, "ceiling");
  }
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    if (decimals >= this.decimals) {
      return this;
    }
    const delta = this.decimals - decimals;
    const bump = BN_5 * getTens(delta - 1);
    let value = this.value + bump;
    const tens = getTens(delta);
    value = value / tens * tens;
    checkValue(value, this.#format, "round");
    return new FixedNumber(_guard, value, this.#format);
  }
  isZero() {
    return this.#val === BN_03;
  }
  isNegative() {
    return this.#val < BN_03;
  }
  toString() {
    return this._value;
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return FixedNumber.fromString(this.toString(), format);
  }
  static fromValue(_value, _decimals, _format) {
    const decimals = _decimals == null ? 0 : getNumber(_decimals);
    const format = getFormat(_format);
    let value = getBigInt(_value, "value");
    const delta = decimals - format.decimals;
    if (delta > 0) {
      const tens = getTens(delta);
      assert(value % tens === BN_03, "value loses precision for format", "NUMERIC_FAULT", {
        operation: "fromValue",
        fault: "underflow",
        value: _value
      });
      value /= tens;
    } else if (delta < 0) {
      value *= getTens(-delta);
    }
    checkValue(value, format, "fromValue");
    return new FixedNumber(_guard, value, format);
  }
  static fromString(_value, _format) {
    const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
    assertArgument(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
    const format = getFormat(_format);
    let whole = match[2] || "0", decimal = match[3] || "";
    while (decimal.length < format.decimals) {
      decimal += Zeros;
    }
    assert(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
      operation: "fromString",
      fault: "underflow",
      value: _value
    });
    decimal = decimal.substring(0, format.decimals);
    const value = BigInt(match[1] + whole + decimal);
    checkValue(value, format, "fromString");
    return new FixedNumber(_guard, value, format);
  }
  static fromBytes(_value, _format) {
    let value = toBigInt(getBytes(_value, "value"));
    const format = getFormat(_format);
    if (format.signed) {
      value = fromTwos(value, format.width);
    }
    checkValue(value, format, "fromBytes");
    return new FixedNumber(_guard, value, format);
  }
}
// node_modules/ethers/lib.esm/utils/rlp-decode.js
function hexlifyByte(value) {
  let result = value.toString(16);
  while (result.length < 2) {
    result = "0" + result;
  }
  return "0x" + result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i = 0;i < length; i++) {
    result = result * 256 + data[offset + i];
  }
  return result;
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    assert(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
      buffer: data,
      length,
      offset
    });
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  assert(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
    buffer: data,
    length: 0,
    offset: 1
  });
  const checkOffset = (offset2) => {
    assert(offset2 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
      buffer: data,
      length: data.length,
      offset: offset2
    });
  };
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    checkOffset(offset + 1 + lengthLength);
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    checkOffset(offset + 1 + lengthLength + length);
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    checkOffset(offset + 1 + length);
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    checkOffset(offset + 1 + lengthLength);
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    checkOffset(offset + 1 + lengthLength + length);
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    checkOffset(offset + 1 + length);
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlifyByte(data[offset]) };
}
function decodeRlp(_data) {
  const data = getBytes(_data, "data");
  const decoded = _decode(data, 0);
  assertArgument(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
  return decoded.result;
}
// node_modules/ethers/lib.esm/utils/rlp-encode.js
function arrayifyInteger(value) {
  const result = [];
  while (value) {
    result.unshift(value & 255);
    value >>= 8;
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  const data = Array.prototype.slice.call(getBytes(object, "object"));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
var nibbles = "0123456789abcdef";
function encodeRlp(object) {
  let result = "0x";
  for (const v3 of _encode(object)) {
    result += nibbles[v3 >> 4];
    result += nibbles[v3 & 15];
  }
  return result;
}
// node_modules/ethers/lib.esm/utils/units.js
var names = [
  "wei",
  "kwei",
  "mwei",
  "gwei",
  "szabo",
  "finney",
  "ether"
];
function formatUnits(value, unit) {
  let decimals = 18;
  if (typeof unit === "string") {
    const index = names.indexOf(unit);
    assertArgument(index >= 0, "invalid unit", "unit", unit);
    decimals = 3 * index;
  } else if (unit != null) {
    decimals = getNumber(unit, "unit");
  }
  return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
}
function parseUnits(value, unit) {
  assertArgument(typeof value === "string", "value must be a string", "value", value);
  let decimals = 18;
  if (typeof unit === "string") {
    const index = names.indexOf(unit);
    assertArgument(index >= 0, "invalid unit", "unit", unit);
    decimals = 3 * index;
  } else if (unit != null) {
    decimals = getNumber(unit, "unit");
  }
  return FixedNumber.fromString(value, { decimals, width: 512 }).value;
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}
// node_modules/ethers/lib.esm/utils/uuid.js
function uuidV4(randomBytes) {
  const bytes = getBytes(randomBytes, "randomBytes");
  bytes[6] = bytes[6] & 15 | 64;
  bytes[8] = bytes[8] & 63 | 128;
  const value = hexlify(bytes);
  return [
    value.substring(2, 10),
    value.substring(10, 14),
    value.substring(14, 18),
    value.substring(18, 22),
    value.substring(22, 34)
  ].join("-");
}
// node_modules/ethers/lib.esm/abi/coders/abstract-coder.js
var WordSize = 32;
var Padding = new Uint8Array(WordSize);
var passProperties = ["then"];
var _guard2 = {};
var resultNames = new WeakMap;
function getNames(result) {
  return resultNames.get(result);
}
function setNames(result, names2) {
  resultNames.set(result, names2);
}
function throwError(name, error) {
  const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
  wrapped.error = error;
  throw wrapped;
}
function toObject(names2, items, deep) {
  if (names2.indexOf(null) >= 0) {
    return items.map((item, index) => {
      if (item instanceof Result) {
        return toObject(getNames(item), item, deep);
      }
      return item;
    });
  }
  return names2.reduce((accum, name, index) => {
    let item = items.getValue(name);
    if (!(name in accum)) {
      if (deep && item instanceof Result) {
        item = toObject(getNames(item), item, deep);
      }
      accum[name] = item;
    }
    return accum;
  }, {});
}

class Result extends Array {
  #names;
  constructor(...args) {
    const guard = args[0];
    let items = args[1];
    let names2 = (args[2] || []).slice();
    let wrap = true;
    if (guard !== _guard2) {
      items = args;
      names2 = [];
      wrap = false;
    }
    super(items.length);
    items.forEach((item, index) => {
      this[index] = item;
    });
    const nameCounts = names2.reduce((accum, name) => {
      if (typeof name === "string") {
        accum.set(name, (accum.get(name) || 0) + 1);
      }
      return accum;
    }, new Map);
    setNames(this, Object.freeze(items.map((item, index) => {
      const name = names2[index];
      if (name != null && nameCounts.get(name) === 1) {
        return name;
      }
      return null;
    })));
    this.#names = [];
    if (this.#names == null) {
      this.#names;
    }
    if (!wrap) {
      return;
    }
    Object.freeze(this);
    const proxy = new Proxy(this, {
      get: (target, prop, receiver) => {
        if (typeof prop === "string") {
          if (prop.match(/^[0-9]+$/)) {
            const index = getNumber(prop, "%index");
            if (index < 0 || index >= this.length) {
              throw new RangeError("out of result range");
            }
            const item = target[index];
            if (item instanceof Error) {
              throwError(`index ${index}`, item);
            }
            return item;
          }
          if (passProperties.indexOf(prop) >= 0) {
            return Reflect.get(target, prop, receiver);
          }
          const value = target[prop];
          if (value instanceof Function) {
            return function(...args2) {
              return value.apply(this === receiver ? target : this, args2);
            };
          } else if (!(prop in target)) {
            return target.getValue.apply(this === receiver ? target : this, [prop]);
          }
        }
        return Reflect.get(target, prop, receiver);
      }
    });
    setNames(proxy, getNames(this));
    return proxy;
  }
  toArray(deep) {
    const result = [];
    this.forEach((item, index) => {
      if (item instanceof Error) {
        throwError(`index ${index}`, item);
      }
      if (deep && item instanceof Result) {
        item = item.toArray(deep);
      }
      result.push(item);
    });
    return result;
  }
  toObject(deep) {
    const names2 = getNames(this);
    return names2.reduce((accum, name, index) => {
      assert(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
        operation: "toObject()"
      });
      return toObject(names2, this, deep);
    }, {});
  }
  slice(start, end) {
    if (start == null) {
      start = 0;
    }
    if (start < 0) {
      start += this.length;
      if (start < 0) {
        start = 0;
      }
    }
    if (end == null) {
      end = this.length;
    }
    if (end < 0) {
      end += this.length;
      if (end < 0) {
        end = 0;
      }
    }
    if (end > this.length) {
      end = this.length;
    }
    const _names = getNames(this);
    const result = [], names2 = [];
    for (let i = start;i < end; i++) {
      result.push(this[i]);
      names2.push(_names[i]);
    }
    return new Result(_guard2, result, names2);
  }
  filter(callback, thisArg) {
    const _names = getNames(this);
    const result = [], names2 = [];
    for (let i = 0;i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      if (callback.call(thisArg, item, i, this)) {
        result.push(item);
        names2.push(_names[i]);
      }
    }
    return new Result(_guard2, result, names2);
  }
  map(callback, thisArg) {
    const result = [];
    for (let i = 0;i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      result.push(callback.call(thisArg, item, i, this));
    }
    return result;
  }
  getValue(name) {
    const index = getNames(this).indexOf(name);
    if (index === -1) {
      return;
    }
    const value = this[index];
    if (value instanceof Error) {
      throwError(`property ${JSON.stringify(name)}`, value.error);
    }
    return value;
  }
  static fromItems(items, keys) {
    return new Result(_guard2, items, keys);
  }
}
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key in object) {
      const childPath = path.slice();
      childPath.push(key);
      try {
        checkErrors(childPath, object[key]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
function getValue(value) {
  let bytes = toBeArray(value);
  assert(bytes.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes, length: WordSize, offset: bytes.length });
  if (bytes.length !== WordSize) {
    bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));
  }
  return bytes;
}

class Coder {
  name;
  type;
  localName;
  dynamic;
  constructor(name, type, localName, dynamic) {
    defineProperties(this, { name, type, localName, dynamic }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(message, value) {
    assertArgument(false, message, this.localName, value);
  }
}

class Writer {
  #data;
  #dataLength;
  constructor() {
    this.#data = [];
    this.#dataLength = 0;
  }
  get data() {
    return concat(this.#data);
  }
  get length() {
    return this.#dataLength;
  }
  #writeData(data) {
    this.#data.push(data);
    this.#dataLength += data.length;
    return data.length;
  }
  appendWriter(writer) {
    return this.#writeData(getBytesCopy(writer.data));
  }
  writeBytes(value) {
    let bytes = getBytesCopy(value);
    const paddingOffset = bytes.length % WordSize;
    if (paddingOffset) {
      bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));
    }
    return this.#writeData(bytes);
  }
  writeValue(value) {
    return this.#writeData(getValue(value));
  }
  writeUpdatableValue() {
    const offset = this.#data.length;
    this.#data.push(Padding);
    this.#dataLength += WordSize;
    return (value) => {
      this.#data[offset] = getValue(value);
    };
  }
}

class Reader {
  allowLoose;
  #data;
  #offset;
  #bytesRead;
  #parent;
  #maxInflation;
  constructor(data, allowLoose, maxInflation) {
    defineProperties(this, { allowLoose: !!allowLoose });
    this.#data = getBytesCopy(data);
    this.#bytesRead = 0;
    this.#parent = null;
    this.#maxInflation = maxInflation != null ? maxInflation : 1024;
    this.#offset = 0;
  }
  get data() {
    return hexlify(this.#data);
  }
  get dataLength() {
    return this.#data.length;
  }
  get consumed() {
    return this.#offset;
  }
  get bytes() {
    return new Uint8Array(this.#data);
  }
  #incrementBytesRead(count) {
    if (this.#parent) {
      return this.#parent.#incrementBytesRead(count);
    }
    this.#bytesRead += count;
    assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
      buffer: getBytesCopy(this.#data),
      offset: this.#offset,
      length: count,
      info: {
        bytesRead: this.#bytesRead,
        dataLength: this.dataLength
      }
    });
  }
  #peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / WordSize) * WordSize;
    if (this.#offset + alignedLength > this.#data.length) {
      if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {
        alignedLength = length;
      } else {
        assert(false, "data out-of-bounds", "BUFFER_OVERRUN", {
          buffer: getBytesCopy(this.#data),
          length: this.#data.length,
          offset: this.#offset + alignedLength
        });
      }
    }
    return this.#data.slice(this.#offset, this.#offset + alignedLength);
  }
  subReader(offset) {
    const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
    reader.#parent = this;
    return reader;
  }
  readBytes(length, loose) {
    let bytes = this.#peekBytes(0, length, !!loose);
    this.#incrementBytesRead(length);
    this.#offset += bytes.length;
    return bytes.slice(0, length);
  }
  readValue() {
    return toBigInt(this.readBytes(WordSize));
  }
  readIndex() {
    return toNumber(this.readBytes(WordSize));
  }
}

// node_modules/ethers/node_modules/@noble/hashes/esm/_assert.js
function number(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function bytes(b3, ...lengths) {
  if (!(b3 instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b3.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b3.length}`);
}
function hash(hash2) {
  if (typeof hash2 !== "function" || typeof hash2.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number(hash2.outputLen);
  number(hash2.blockLen);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
  bytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}

// node_modules/ethers/node_modules/@noble/hashes/esm/crypto.js
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;

// node_modules/ethers/node_modules/@noble/hashes/esm/utils.js
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
var u8a = (a2) => a2 instanceof Uint8Array;
var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr = (word, shift) => word << 32 - shift | word >>> shift;
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var nextTick = async () => {
};
async function asyncLoop(iters, tick, cb) {
  let ts = Date.now();
  for (let i = 0;i < iters; i++) {
    cb(i);
    const diff = Date.now() - ts;
    if (diff >= 0 && diff < tick)
      continue;
    await nextTick();
    ts += diff;
  }
}
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  if (!u8a(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a2) => sum + a2.length, 0));
  let pad = 0;
  arrays.forEach((a2) => {
    if (!u8a(a2))
      throw new Error("Uint8Array expected");
    r.set(a2, pad);
    pad += a2.length;
  });
  return r;
}

class Hash {
  clone() {
    return this._cloneInto();
  }
}
var toStr = {}.toString;
function checkOpts(defaults, opts) {
  if (opts !== undefined && toStr.call(opts) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes(bytesLength = 32) {
  if (crypto2 && typeof crypto2.getRandomValues === "function") {
    return crypto2.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/ethers/node_modules/@noble/hashes/esm/hmac.js
class HMAC extends Hash {
  constructor(hash2, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    hash(hash2);
    const key = toBytes(_key);
    this.iHash = hash2.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
    for (let i = 0;i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash2.create();
    for (let i = 0;i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    exists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    exists(this);
    bytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
}
var hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
hmac.create = (hash2, key) => new HMAC(hash2, key);

// node_modules/ethers/node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash2, _password, _salt, _opts) {
  hash(hash2);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  number(c);
  number(dkLen);
  number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes(_password);
  const salt = toBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash2, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf2(hash2, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0;pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1;ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0;i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

// node_modules/ethers/node_modules/@noble/hashes/esm/_sha2.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n & _u32_max);
  const wl = Number(value & _u32_max);
  const h2 = isLE2 ? 4 : 0;
  const l2 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h2, wh, isLE2);
  view.setUint32(byteOffset + l2, wl, isLE2);
}

class SHA2 extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    exists(this);
    const { view, buffer, blockLen } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0;pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (;blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    exists(this);
    output(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos;i < blockLen; i++)
      buffer[i] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0;i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor);
    to.set(...this.get());
    const { blockLen, buffer, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer);
    return to;
  }
}

// node_modules/ethers/node_modules/@noble/hashes/esm/sha256.js
var Chi = (a2, b3, c) => a2 & b3 ^ ~a2 & c;
var Maj = (a2, b3, c) => a2 & b3 ^ a2 & c ^ b3 & c;
var SHA256_K = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W = /* @__PURE__ */ new Uint32Array(64);

class SHA256 extends SHA2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV[0] | 0;
    this.B = IV[1] | 0;
    this.C = IV[2] | 0;
    this.D = IV[3] | 0;
    this.E = IV[4] | 0;
    this.F = IV[5] | 0;
    this.G = IV[6] | 0;
    this.H = IV[7] | 0;
  }
  get() {
    const { A: A2, B, C: C2, D: D2, E: E2, F, G, H } = this;
    return [A2, B, C2, D2, E2, F, G, H];
  }
  set(A2, B, C2, D2, E2, F, G, H) {
    this.A = A2 | 0;
    this.B = B | 0;
    this.C = C2 | 0;
    this.D = D2 | 0;
    this.E = E2 | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0;i < 16; i++, offset += 4)
      SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16;i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let { A: A2, B, C: C2, D: D2, E: E2, F, G, H } = this;
    for (let i = 0;i < 64; i++) {
      const sigma1 = rotr(E2, 6) ^ rotr(E2, 11) ^ rotr(E2, 25);
      const T1 = H + sigma1 + Chi(E2, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A2, 2) ^ rotr(A2, 13) ^ rotr(A2, 22);
      const T2 = sigma0 + Maj(A2, B, C2) | 0;
      H = G;
      G = F;
      F = E2;
      E2 = D2 + T1 | 0;
      D2 = C2;
      C2 = B;
      B = A2;
      A2 = T1 + T2 | 0;
    }
    A2 = A2 + this.A | 0;
    B = B + this.B | 0;
    C2 = C2 + this.C | 0;
    D2 = D2 + this.D | 0;
    E2 = E2 + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A2, B, C2, D2, E2, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
}
var sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256);

// node_modules/ethers/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
var _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0;i < lst.length; i++) {
    const { h: h2, l: l2 } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h2, l2];
  }
  return [Ah, Al];
}
var toBig = (h2, l2) => BigInt(h2 >>> 0) << _32n | BigInt(l2 >>> 0);
var shrSH = (h2, _l, s) => h2 >>> s;
var shrSL = (h2, l2, s) => h2 << 32 - s | l2 >>> s;
var rotrSH = (h2, l2, s) => h2 >>> s | l2 << 32 - s;
var rotrSL = (h2, l2, s) => h2 << 32 - s | l2 >>> s;
var rotrBH = (h2, l2, s) => h2 << 64 - s | l2 >>> s - 32;
var rotrBL = (h2, l2, s) => h2 >>> s - 32 | l2 << 64 - s;
var rotr32H = (_h, l2) => l2;
var rotr32L = (h2, _l) => h2;
var rotlSH = (h2, l2, s) => h2 << s | l2 >>> 32 - s;
var rotlSL = (h2, l2, s) => l2 << s | h2 >>> 32 - s;
var rotlBH = (h2, l2, s) => l2 << s - 32 | h2 >>> 64 - s;
var rotlBL = (h2, l2, s) => h2 << s - 32 | l2 >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l2 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l2 / 2 ** 32 | 0) | 0, l: l2 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
var _u64_default = u64;

// node_modules/ethers/node_modules/@noble/hashes/esm/sha512.js
var [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))))();
var SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
var SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);

class SHA512 extends SHA2 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0;i < 16; i++, offset += 4) {
      SHA512_W_H[i] = view.getUint32(offset);
      SHA512_W_L[i] = view.getUint32(offset += 4);
    }
    for (let i = 16;i < 80; i++) {
      const W15h = SHA512_W_H[i - 15] | 0;
      const W15l = SHA512_W_L[i - 15] | 0;
      const s0h = _u64_default.rotrSH(W15h, W15l, 1) ^ _u64_default.rotrSH(W15h, W15l, 8) ^ _u64_default.shrSH(W15h, W15l, 7);
      const s0l = _u64_default.rotrSL(W15h, W15l, 1) ^ _u64_default.rotrSL(W15h, W15l, 8) ^ _u64_default.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i - 2] | 0;
      const W2l = SHA512_W_L[i - 2] | 0;
      const s1h = _u64_default.rotrSH(W2h, W2l, 19) ^ _u64_default.rotrBH(W2h, W2l, 61) ^ _u64_default.shrSH(W2h, W2l, 6);
      const s1l = _u64_default.rotrSL(W2h, W2l, 19) ^ _u64_default.rotrBL(W2h, W2l, 61) ^ _u64_default.shrSL(W2h, W2l, 6);
      const SUMl = _u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
      const SUMh = _u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
      SHA512_W_H[i] = SUMh | 0;
      SHA512_W_L[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0;i < 80; i++) {
      const sigma1h = _u64_default.rotrSH(Eh, El, 14) ^ _u64_default.rotrSH(Eh, El, 18) ^ _u64_default.rotrBH(Eh, El, 41);
      const sigma1l = _u64_default.rotrSL(Eh, El, 14) ^ _u64_default.rotrSL(Eh, El, 18) ^ _u64_default.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = _u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
      const T1h = _u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
      const T1l = T1ll | 0;
      const sigma0h = _u64_default.rotrSH(Ah, Al, 28) ^ _u64_default.rotrBH(Ah, Al, 34) ^ _u64_default.rotrBH(Ah, Al, 39);
      const sigma0l = _u64_default.rotrSL(Ah, Al, 28) ^ _u64_default.rotrBL(Ah, Al, 34) ^ _u64_default.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = _u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = _u64_default.add3L(T1l, sigma0l, MAJl);
      Ah = _u64_default.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = _u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = _u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = _u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = _u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = _u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = _u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = _u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = _u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
var sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512);

// node_modules/ethers/lib.esm/crypto/crypto-browser.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
var anyGlobal = getGlobal();
var crypto3 = anyGlobal.crypto || anyGlobal.msCrypto;
function createHash(algo) {
  switch (algo) {
    case "sha256":
      return sha256.create();
    case "sha512":
      return sha512.create();
  }
  assertArgument(false, "invalid hashing algorithm name", "algorithm", algo);
}
function createHmac(_algo, key) {
  const algo = { sha256, sha512 }[_algo];
  assertArgument(algo != null, "invalid hmac algorithm", "algorithm", _algo);
  return hmac.create(algo, key);
}
function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
  const algo = { sha256, sha512 }[_algo];
  assertArgument(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
  return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });
}
function randomBytes2(length) {
  assert(crypto3 != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
    operation: "randomBytes"
  });
  assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
  const result = new Uint8Array(length);
  crypto3.getRandomValues(result);
  return result;
}

// node_modules/ethers/lib.esm/crypto/hmac.js
var locked2 = false;
var _computeHmac = function(algorithm, key, data) {
  return createHmac(algorithm, key).update(data).digest();
};
var __computeHmac = _computeHmac;
function computeHmac(algorithm, _key, _data) {
  const key = getBytes(_key, "key");
  const data = getBytes(_data, "data");
  return hexlify(__computeHmac(algorithm, key, data));
}
computeHmac._ = _computeHmac;
computeHmac.lock = function() {
  locked2 = true;
};
computeHmac.register = function(func) {
  if (locked2) {
    throw new Error("computeHmac is locked");
  }
  __computeHmac = func;
};
Object.freeze(computeHmac);

// node_modules/ethers/node_modules/@noble/hashes/esm/sha3.js
var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
var _0n = /* @__PURE__ */ BigInt(0);
var _1n = /* @__PURE__ */ BigInt(1);
var _2n = /* @__PURE__ */ BigInt(2);
var _7n = /* @__PURE__ */ BigInt(7);
var _256n = /* @__PURE__ */ BigInt(256);
var _0x71n = /* @__PURE__ */ BigInt(113);
for (let round = 0, R2 = _1n, x3 = 1, y2 = 0;round < 24; round++) {
  [x3, y2] = [y2, (2 * x3 + 3 * y2) % 5];
  SHA3_PI.push(2 * (5 * y2 + x3));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n;
  for (let j2 = 0;j2 < 7; j2++) {
    R2 = (R2 << _1n ^ (R2 >> _7n) * _0x71n) % _256n;
    if (R2 & _2n)
      t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j2)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
var [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
var rotlH = (h2, l2, s) => s > 32 ? rotlBH(h2, l2, s) : rotlSH(h2, l2, s);
var rotlL = (h2, l2, s) => s > 32 ? rotlBL(h2, l2, s) : rotlSL(h2, l2, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds;round < 24; round++) {
    for (let x3 = 0;x3 < 10; x3++)
      B[x3] = s[x3] ^ s[x3 + 10] ^ s[x3 + 20] ^ s[x3 + 30] ^ s[x3 + 40];
    for (let x3 = 0;x3 < 10; x3 += 2) {
      const idx1 = (x3 + 8) % 10;
      const idx0 = (x3 + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y2 = 0;y2 < 50; y2 += 10) {
        s[x3 + y2] ^= Th;
        s[x3 + y2 + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0;t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y2 = 0;y2 < 50; y2 += 10) {
      for (let x3 = 0;x3 < 10; x3++)
        B[x3] = s[y2 + x3];
      for (let x3 = 0;x3 < 10; x3++)
        s[y2 + x3] ^= ~B[(x3 + 2) % 10] & B[(x3 + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}

class Keccak extends Hash {
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  keccak() {
    keccakP(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists(this);
    const { blockLen, state } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0;pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0;i < take; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists(this, false);
    bytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length;pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes2) {
    number(bytes2);
    return this.xofInto(new Uint8Array(bytes2));
  }
  digestInto(out) {
    output(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
}
var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
var sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
var sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
var sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
var keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
var keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
var keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
var keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
var shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
var shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);

// node_modules/ethers/lib.esm/crypto/keccak.js
var locked3 = false;
var _keccak256 = function(data) {
  return keccak_256(data);
};
var __keccak256 = _keccak256;
function keccak256(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__keccak256(data));
}
keccak256._ = _keccak256;
keccak256.lock = function() {
  locked3 = true;
};
keccak256.register = function(func) {
  if (locked3) {
    throw new TypeError("keccak256 is locked");
  }
  __keccak256 = func;
};
Object.freeze(keccak256);

// node_modules/ethers/node_modules/@noble/hashes/esm/ripemd160.js
var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_2, i) => i);
var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i = 0;i < 4; i++)
  for (let j2 of [idxL, idxR])
    j2.push(j2[i].map((k) => Rho[k]));
var shifts = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i) => new Uint8Array(i));
var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j2) => shifts[i][j2]));
var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j2) => shifts[i][j2]));
var Kl = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
var rotl = (word, shift) => word << shift | word >>> 32 - shift;
function f(group, x3, y2, z) {
  if (group === 0)
    return x3 ^ y2 ^ z;
  else if (group === 1)
    return x3 & y2 | ~x3 & z;
  else if (group === 2)
    return (x3 | ~y2) ^ z;
  else if (group === 3)
    return x3 & z | y2 & ~z;
  else
    return x3 ^ (y2 | ~z);
}
var BUF = /* @__PURE__ */ new Uint32Array(16);

class RIPEMD160 extends SHA2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2, h3, h4 } = this;
    return [h0, h1, h2, h3, h4];
  }
  set(h0, h1, h2, h3, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h2 | 0;
    this.h3 = h3 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i = 0;i < 16; i++, offset += 4)
      BUF[i] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
    for (let group = 0;group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr[group];
      const rl = idxL[group], rr2 = idxR[group];
      const sl = shiftsL[group], sr = shiftsR[group];
      for (let i = 0;i < 16; i++) {
        const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i = 0;i < 16; i++) {
        const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr2[i]] + hbr, sr[i]) + er | 0;
        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
      }
    }
    this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
  }
  roundClean() {
    BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
}
var ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160);

// node_modules/ethers/lib.esm/crypto/ripemd160.js
var locked4 = false;
var _ripemd160 = function(data) {
  return ripemd160(data);
};
var __ripemd160 = _ripemd160;
function ripemd1602(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__ripemd160(data));
}
ripemd1602._ = _ripemd160;
ripemd1602.lock = function() {
  locked4 = true;
};
ripemd1602.register = function(func) {
  if (locked4) {
    throw new TypeError("ripemd160 is locked");
  }
  __ripemd160 = func;
};
Object.freeze(ripemd1602);

// node_modules/ethers/lib.esm/crypto/pbkdf2.js
var locked5 = false;
var _pbkdf2 = function(password, salt, iterations, keylen, algo) {
  return pbkdf2Sync(password, salt, iterations, keylen, algo);
};
var __pbkdf2 = _pbkdf2;
function pbkdf22(_password, _salt, iterations, keylen, algo) {
  const password = getBytes(_password, "password");
  const salt = getBytes(_salt, "salt");
  return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));
}
pbkdf22._ = _pbkdf2;
pbkdf22.lock = function() {
  locked5 = true;
};
pbkdf22.register = function(func) {
  if (locked5) {
    throw new Error("pbkdf2 is locked");
  }
  __pbkdf2 = func;
};
Object.freeze(pbkdf22);

// node_modules/ethers/lib.esm/crypto/random.js
var locked6 = false;
var _randomBytes = function(length) {
  return new Uint8Array(randomBytes2(length));
};
var __randomBytes = _randomBytes;
function randomBytes3(length) {
  return __randomBytes(length);
}
randomBytes3._ = _randomBytes;
randomBytes3.lock = function() {
  locked6 = true;
};
randomBytes3.register = function(func) {
  if (locked6) {
    throw new Error("randomBytes is locked");
  }
  __randomBytes = func;
};
Object.freeze(randomBytes3);

// node_modules/ethers/node_modules/@noble/hashes/esm/scrypt.js
var rotl2 = (a2, b3) => a2 << b3 | a2 >>> 32 - b3;
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0;i < 8; i += 2) {
    x04 ^= rotl2(x00 + x12 | 0, 7);
    x08 ^= rotl2(x04 + x00 | 0, 9);
    x12 ^= rotl2(x08 + x04 | 0, 13);
    x00 ^= rotl2(x12 + x08 | 0, 18);
    x09 ^= rotl2(x05 + x01 | 0, 7);
    x13 ^= rotl2(x09 + x05 | 0, 9);
    x01 ^= rotl2(x13 + x09 | 0, 13);
    x05 ^= rotl2(x01 + x13 | 0, 18);
    x14 ^= rotl2(x10 + x06 | 0, 7);
    x02 ^= rotl2(x14 + x10 | 0, 9);
    x06 ^= rotl2(x02 + x14 | 0, 13);
    x10 ^= rotl2(x06 + x02 | 0, 18);
    x03 ^= rotl2(x15 + x11 | 0, 7);
    x07 ^= rotl2(x03 + x15 | 0, 9);
    x11 ^= rotl2(x07 + x03 | 0, 13);
    x15 ^= rotl2(x11 + x07 | 0, 18);
    x01 ^= rotl2(x00 + x03 | 0, 7);
    x02 ^= rotl2(x01 + x00 | 0, 9);
    x03 ^= rotl2(x02 + x01 | 0, 13);
    x00 ^= rotl2(x03 + x02 | 0, 18);
    x06 ^= rotl2(x05 + x04 | 0, 7);
    x07 ^= rotl2(x06 + x05 | 0, 9);
    x04 ^= rotl2(x07 + x06 | 0, 13);
    x05 ^= rotl2(x04 + x07 | 0, 18);
    x11 ^= rotl2(x10 + x09 | 0, 7);
    x08 ^= rotl2(x11 + x10 | 0, 9);
    x09 ^= rotl2(x08 + x11 | 0, 13);
    x10 ^= rotl2(x09 + x08 | 0, 18);
    x12 ^= rotl2(x15 + x14 | 0, 7);
    x13 ^= rotl2(x12 + x15 | 0, 9);
    x14 ^= rotl2(x13 + x12 | 0, 13);
    x15 ^= rotl2(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
  let head = oi + 0;
  let tail = oi + 16 * r;
  for (let i = 0;i < 16; i++)
    out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0;i < r; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N: N2, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  number(N2);
  number(r);
  number(p);
  number(dkLen);
  number(asyncTick);
  number(maxmem);
  if (onProgress !== undefined && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  if (N2 <= 1 || (N2 & N2 - 1) !== 0 || N2 >= 2 ** (blockSize / 8) || N2 > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N2 + p);
  if (memUsed > maxmem) {
    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
  }
  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V = u32(new Uint8Array(blockSize * N2));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = () => {
  };
  if (onProgress) {
    const totalBlockMix = 2 * N2 * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N: N2, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
  B.fill(0);
  V.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt(password, salt, opts) {
  const { N: N2, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  for (let pi = 0;pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0;i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    for (let i = 0, pos = 0;i < N2 - 1; i++) {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    }
    BlockMix(V, (N2 - 1) * blockSize32, B32, Pi2, r);
    blockMixCb();
    for (let i = 0;i < N2; i++) {
      const j2 = B32[Pi2 + blockSize32 - 16] % N2;
      for (let k = 0;k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j2 * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r);
      blockMixCb();
    }
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}
async function scryptAsync(password, salt, opts) {
  const { N: N2, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
  for (let pi = 0;pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0;i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    let pos = 0;
    await asyncLoop(N2 - 1, asyncTick, () => {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    });
    BlockMix(V, (N2 - 1) * blockSize32, B32, Pi2, r);
    blockMixCb();
    await asyncLoop(N2, asyncTick, () => {
      const j2 = B32[Pi2 + blockSize32 - 16] % N2;
      for (let k = 0;k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j2 * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r);
      blockMixCb();
    });
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}

// node_modules/ethers/lib.esm/crypto/scrypt.js
var lockedSync = false;
var lockedAsync = false;
var _scryptAsync = async function(passwd, salt, N2, r, p, dkLen, onProgress) {
  return await scryptAsync(passwd, salt, { N: N2, r, p, dkLen, onProgress });
};
var _scryptSync = function(passwd, salt, N2, r, p, dkLen) {
  return scrypt(passwd, salt, { N: N2, r, p, dkLen });
};
var __scryptAsync = _scryptAsync;
var __scryptSync = _scryptSync;
async function scrypt2(_passwd, _salt, N2, r, p, dkLen, progress) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(await __scryptAsync(passwd, salt, N2, r, p, dkLen, progress));
}
scrypt2._ = _scryptAsync;
scrypt2.lock = function() {
  lockedAsync = true;
};
scrypt2.register = function(func) {
  if (lockedAsync) {
    throw new Error("scrypt is locked");
  }
  __scryptAsync = func;
};
Object.freeze(scrypt2);
function scryptSync(_passwd, _salt, N2, r, p, dkLen) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(__scryptSync(passwd, salt, N2, r, p, dkLen));
}
scryptSync._ = _scryptSync;
scryptSync.lock = function() {
  lockedSync = true;
};
scryptSync.register = function(func) {
  if (lockedSync) {
    throw new Error("scryptSync is locked");
  }
  __scryptSync = func;
};
Object.freeze(scryptSync);

// node_modules/ethers/lib.esm/crypto/sha2.js
var _sha256 = function(data) {
  return createHash("sha256").update(data).digest();
};
var _sha512 = function(data) {
  return createHash("sha512").update(data).digest();
};
var __sha256 = _sha256;
var __sha512 = _sha512;
var locked256 = false;
var locked512 = false;
function sha2562(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__sha256(data));
}
sha2562._ = _sha256;
sha2562.lock = function() {
  locked256 = true;
};
sha2562.register = function(func) {
  if (locked256) {
    throw new Error("sha256 is locked");
  }
  __sha256 = func;
};
Object.freeze(sha2562);
function sha5122(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__sha512(data));
}
sha5122._ = _sha512;
sha5122.lock = function() {
  locked512 = true;
};
sha5122.register = function(func) {
  if (locked512) {
    throw new Error("sha512 is locked");
  }
  __sha512 = func;
};
Object.freeze(sha2562);

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/utils.js
var exports_utils = {};
__export(exports_utils, {
  validateObject: () => validateObject,
  utf8ToBytes: () => utf8ToBytes2,
  numberToVarBytesBE: () => numberToVarBytesBE,
  numberToHexUnpadded: () => numberToHexUnpadded,
  numberToBytesLE: () => numberToBytesLE,
  numberToBytesBE: () => numberToBytesBE,
  hexToNumber: () => hexToNumber,
  hexToBytes: () => hexToBytes,
  equalBytes: () => equalBytes,
  ensureBytes: () => ensureBytes,
  createHmacDrbg: () => createHmacDrbg,
  concatBytes: () => concatBytes2,
  bytesToNumberLE: () => bytesToNumberLE,
  bytesToNumberBE: () => bytesToNumberBE,
  bytesToHex: () => bytesToHex,
  bitSet: () => bitSet,
  bitMask: () => bitMask,
  bitLen: () => bitLen,
  bitGet: () => bitGet
});
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n2 = BigInt(2);
var u8a2 = (a2) => a2 instanceof Uint8Array;
var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_2, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(bytes2) {
  if (!u8a2(bytes2))
    throw new Error("Uint8Array expected");
  let hex = "";
  for (let i = 0;i < bytes2.length; i++) {
    hex += hexes[bytes2[i]];
  }
  return hex;
}
function numberToHexUnpadded(num) {
  const hex = num.toString(16);
  return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  return BigInt(hex === "" ? "0" : `0x${hex}`);
}
function hexToBytes(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  const len = hex.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0;i < array.length; i++) {
    const j2 = i * 2;
    const hexByte = hex.slice(j2, j2 + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE(bytes2) {
  return hexToNumber(bytesToHex(bytes2));
}
function bytesToNumberLE(bytes2) {
  if (!u8a2(bytes2))
    throw new Error("Uint8Array expected");
  return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
}
function numberToBytesBE(n, len) {
  return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
  return numberToBytesBE(n, len).reverse();
}
function numberToVarBytesBE(n) {
  return hexToBytes(numberToHexUnpadded(n));
}
function ensureBytes(title, hex, expectedLength) {
  let res;
  if (typeof hex === "string") {
    try {
      res = hexToBytes(hex);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
    }
  } else if (u8a2(hex)) {
    res = Uint8Array.from(hex);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes2(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a2) => sum + a2.length, 0));
  let pad = 0;
  arrays.forEach((a2) => {
    if (!u8a2(a2))
      throw new Error("Uint8Array expected");
    r.set(a2, pad);
    pad += a2.length;
  });
  return r;
}
function equalBytes(b1, b22) {
  if (b1.length !== b22.length)
    return false;
  for (let i = 0;i < b1.length; i++)
    if (b1[i] !== b22[i])
      return false;
  return true;
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen(n) {
  let len;
  for (len = 0;n > _0n2; n >>= _1n2, len += 1)
    ;
  return len;
}
function bitGet(n, pos) {
  return n >> BigInt(pos) & _1n2;
}
var bitSet = (n, pos, value) => {
  return n | (value ? _1n2 : _0n2) << BigInt(pos);
};
var bitMask = (n) => (_2n2 << BigInt(n - 1)) - _1n2;
var u8n = (data) => new Uint8Array(data);
var u8fr = (arr) => Uint8Array.from(arr);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v3 = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v3.fill(1);
    k.fill(0);
    i = 0;
  };
  const h2 = (...b3) => hmacFn(k, v3, ...b3);
  const reseed = (seed = u8n()) => {
    k = h2(u8fr([0]), seed);
    v3 = h2();
    if (seed.length === 0)
      return;
    k = h2(u8fr([1]), seed);
    v3 = h2();
  };
  const gen2 = () => {
    if (i++ >= 1000)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v3 = h2();
      const sl = v3.slice();
      out.push(sl);
      len += v3.length;
    }
    return concatBytes2(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = undefined;
    while (!(res = pred(gen2())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object[fieldName];
    if (isOptional && val === undefined)
      return;
    if (!checkVal(val, object)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/modular.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
var _2n3 = BigInt(2);
var _3n = BigInt(3);
var _4n = BigInt(4);
var _5n = BigInt(5);
var _8n = BigInt(8);
var _9n = BigInt(9);
var _16n = BigInt(16);
function mod(a2, b3) {
  const result = a2 % b3;
  return result >= _0n3 ? result : b3 + result;
}
function pow(num, power, modulo) {
  if (modulo <= _0n3 || power < _0n3)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n3)
    return _0n3;
  let res = _1n3;
  while (power > _0n3) {
    if (power & _1n3)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n3;
  }
  return res;
}
function pow2(x3, power, modulo) {
  let res = x3;
  while (power-- > _0n3) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number2, modulo) {
  if (number2 === _0n3 || modulo <= _0n3) {
    throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
  }
  let a2 = mod(number2, modulo);
  let b3 = modulo;
  let x3 = _0n3, y2 = _1n3, u = _1n3, v3 = _0n3;
  while (a2 !== _0n3) {
    const q = b3 / a2;
    const r = b3 % a2;
    const m2 = x3 - u * q;
    const n = y2 - v3 * q;
    b3 = a2, a2 = r, x3 = u, y2 = v3, u = m2, v3 = n;
  }
  const gcd = b3;
  if (gcd !== _1n3)
    throw new Error("invert: does not exist");
  return mod(x3, modulo);
}
function tonelliShanks(P3) {
  const legendreC = (P3 - _1n3) / _2n3;
  let Q, S, Z;
  for (Q = P3 - _1n3, S = 0;Q % _2n3 === _0n3; Q /= _2n3, S++)
    ;
  for (Z = _2n3;Z < P3 && pow(Z, legendreC, P3) !== P3 - _1n3; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P3 + _1n3) / _4n;
    return function tonelliFast(Fp, n) {
      const root = Fp.pow(n, p1div4);
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n3) / _2n3;
  return function tonelliSlow(Fp, n) {
    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g2 = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
    let x3 = Fp.pow(n, Q1div2);
    let b3 = Fp.pow(n, Q);
    while (!Fp.eql(b3, Fp.ONE)) {
      if (Fp.eql(b3, Fp.ZERO))
        return Fp.ZERO;
      let m2 = 1;
      for (let t2 = Fp.sqr(b3);m2 < r; m2++) {
        if (Fp.eql(t2, Fp.ONE))
          break;
        t2 = Fp.sqr(t2);
      }
      const ge = Fp.pow(g2, _1n3 << BigInt(r - m2 - 1));
      g2 = Fp.sqr(ge);
      x3 = Fp.mul(x3, ge);
      b3 = Fp.mul(b3, g2);
      r = m2;
    }
    return x3;
  };
}
function FpSqrt(P3) {
  if (P3 % _4n === _3n) {
    const p1div4 = (P3 + _1n3) / _4n;
    return function sqrt3mod4(Fp, n) {
      const root = Fp.pow(n, p1div4);
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P3 % _8n === _5n) {
    const c1 = (P3 - _5n) / _8n;
    return function sqrt5mod8(Fp, n) {
      const n2 = Fp.mul(n, _2n3);
      const v3 = Fp.pow(n2, c1);
      const nv = Fp.mul(n, v3);
      const i = Fp.mul(Fp.mul(nv, _2n3), v3);
      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P3 % _16n === _9n) {
  }
  return tonelliShanks(P3);
}
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(f2, num, power) {
  if (power < _0n3)
    throw new Error("Expected power > 0");
  if (power === _0n3)
    return f2.ONE;
  if (power === _1n3)
    return num;
  let p = f2.ONE;
  let d2 = num;
  while (power > _0n3) {
    if (power & _1n3)
      p = f2.mul(p, d2);
    d2 = f2.sqr(d2);
    power >>= _1n3;
  }
  return p;
}
function FpInvertBatch(f2, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = acc;
    return f2.mul(acc, num);
  }, f2.ONE);
  const inverted = f2.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = f2.mul(acc, tmp[i]);
    return f2.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength(n, nBitLength) {
  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
  if (ORDER <= _0n3)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt(ORDER);
  const f2 = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n3,
    ONE: _1n3,
    create: (num) => mod(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n3 <= num && num < ORDER;
    },
    is0: (num) => num === _0n3,
    isOdd: (num) => (num & _1n3) === _1n3,
    neg: (num) => mod(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod(num * num, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num, power) => FpPow(f2, num, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert(num, ORDER),
    sqrt: redef.sqrt || ((n) => sqrtP(f2, n)),
    invertBatch: (lst) => FpInvertBatch(f2, lst),
    cmov: (a2, b3, c) => c ? b3 : a2,
    toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
    fromBytes: (bytes2) => {
      if (bytes2.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
      return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
    }
  });
  return Object.freeze(f2);
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length = getFieldBytesLength(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE2 ? bytesToNumberBE(key) : bytesToNumberLE(key);
  const reduced = mod(num, fieldOrder - _1n3) + _1n3;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/curve.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
function wNAF(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    unsafeLadder(elm, n) {
      let p = c.ZERO;
      let d2 = elm;
      while (n > _0n4) {
        if (n & _1n4)
          p = p.add(d2);
        d2 = d2.double();
        n >>= _1n4;
      }
      return p;
    },
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window2 = 0;window2 < windows; window2++) {
        base = p;
        points.push(base);
        for (let i = 1;i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f2 = c.BASE;
      const mask2 = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0;window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits = Number(n & mask2);
        n >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n += _1n4;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f: f2 };
    },
    wNAFCached(P3, precomputesMap, n, transform) {
      const W = P3._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P3);
      if (!comp) {
        comp = this.precomputeWindow(P3, W);
        if (W !== 1) {
          precomputesMap.set(P3, transform(comp));
        }
      }
      return this.wNAF(W, comp, n);
    }
  };
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/weierstrass.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp, a: a2 } = opts;
  if (endo) {
    if (!Fp.eql(a2, Fp.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n, hexToBytes: h2b } = exports_utils;
var DER = {
  Err: class DERErr extends Error {
    constructor(m2 = "") {
      super(m2);
    }
  },
  _parseInt(data) {
    const { Err: E2 } = DER;
    if (data.length < 2 || data[0] !== 2)
      throw new E2("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E2("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E2("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E2("Invalid signature integer: unnecessary leading zero");
    return { d: b2n(res), l: data.subarray(len + 2) };
  },
  toSig(hex) {
    const { Err: E2 } = DER;
    const data = typeof hex === "string" ? h2b(hex) : hex;
    if (!(data instanceof Uint8Array))
      throw new Error("ui8a expected");
    let l2 = data.length;
    if (l2 < 2 || data[0] != 48)
      throw new E2("Invalid signature tag");
    if (data[1] !== l2 - 2)
      throw new E2("Invalid signature: incorrect length");
    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E2("Invalid signature: left bytes after parsing");
    return { r, s };
  },
  hexFromSig(sig) {
    const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h2 = (num) => {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    };
    const s = slice(h2(sig.s));
    const r = slice(h2(sig.r));
    const shl = s.length / 2;
    const rhl = r.length / 2;
    const sl = h2(shl);
    const rl = h2(rhl);
    return `30${h2(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
  }
};
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n4 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp } = CURVE;
  const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a2 = point.toAffine();
    return concatBytes2(Uint8Array.from([4]), Fp.toBytes(a2.x), Fp.toBytes(a2.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes2) => {
    const tail = bytes2.subarray(1);
    const x3 = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
    const y2 = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
    return { x: x3, y: y2 };
  });
  function weierstrassEquation(x3) {
    const { a: a2, b: b3 } = CURVE;
    const x22 = Fp.sqr(x3);
    const x32 = Fp.mul(x22, x3);
    return Fp.add(Fp.add(x32, Fp.mul(x3, a2)), b3);
  }
  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n5 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod(num, n);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = new Map;
  function assertPrjPoint(other) {
    if (!(other instanceof Point))
      throw new Error("ProjectivePoint expected");
  }

  class Point {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp.isValid(pz))
        throw new Error("z required");
    }
    static fromAffine(p) {
      const { x: x3, y: y2 } = p || {};
      if (!p || !Fp.isValid(x3) || !Fp.isValid(y2))
        throw new Error("invalid affine point");
      if (p instanceof Point)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp.eql(i, Fp.ZERO);
      if (is0(x3) && is0(y2))
        return Point.ZERO;
      return new Point(x3, y2, Fp.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(points) {
      const toInv = Fp.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
    }
    static fromHex(hex) {
      const P3 = Point.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
      P3.assertValidity();
      return P3;
    }
    static fromPrivateKey(privateKey) {
      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: x3, y: y2 } = this.toAffine();
      if (!Fp.isValid(x3) || !Fp.isValid(y2))
        throw new Error("bad point: x or y not FE");
      const left = Fp.sqr(y2);
      const right = weierstrassEquation(x3);
      if (!Fp.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: y2 } = this.toAffine();
      if (Fp.isOdd)
        return !Fp.isOdd(y2);
      throw new Error("Field doesn't support isOdd");
    }
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
      return U1 && U2;
    }
    negate() {
      return new Point(this.px, Fp.neg(this.py), this.pz);
    }
    double() {
      const { a: a2, b: b3 } = CURVE;
      const b32 = Fp.mul(b3, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let { ZERO: X3, ZERO: Y3, ZERO: Z3 } = Fp;
      let t0 = Fp.mul(X1, X1);
      let t1 = Fp.mul(Y1, Y1);
      let t2 = Fp.mul(Z1, Z1);
      let t3 = Fp.mul(X1, Y1);
      t3 = Fp.add(t3, t3);
      Z3 = Fp.mul(X1, Z1);
      Z3 = Fp.add(Z3, Z3);
      X3 = Fp.mul(a2, Z3);
      Y3 = Fp.mul(b32, t2);
      Y3 = Fp.add(X3, Y3);
      X3 = Fp.sub(t1, Y3);
      Y3 = Fp.add(t1, Y3);
      Y3 = Fp.mul(X3, Y3);
      X3 = Fp.mul(t3, X3);
      Z3 = Fp.mul(b32, Z3);
      t2 = Fp.mul(a2, t2);
      t3 = Fp.sub(t0, t2);
      t3 = Fp.mul(a2, t3);
      t3 = Fp.add(t3, Z3);
      Z3 = Fp.add(t0, t0);
      t0 = Fp.add(Z3, t0);
      t0 = Fp.add(t0, t2);
      t0 = Fp.mul(t0, t3);
      Y3 = Fp.add(Y3, t0);
      t2 = Fp.mul(Y1, Z1);
      t2 = Fp.add(t2, t2);
      t0 = Fp.mul(t2, t3);
      X3 = Fp.sub(X3, t0);
      Z3 = Fp.mul(t2, t1);
      Z3 = Fp.add(Z3, Z3);
      Z3 = Fp.add(Z3, Z3);
      return new Point(X3, Y3, Z3);
    }
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let { ZERO: X3, ZERO: Y3, ZERO: Z3 } = Fp;
      const a2 = CURVE.a;
      const b3 = Fp.mul(CURVE.b, _3n2);
      let t0 = Fp.mul(X1, X2);
      let t1 = Fp.mul(Y1, Y2);
      let t2 = Fp.mul(Z1, Z2);
      let t3 = Fp.add(X1, Y1);
      let t4 = Fp.add(X2, Y2);
      t3 = Fp.mul(t3, t4);
      t4 = Fp.add(t0, t1);
      t3 = Fp.sub(t3, t4);
      t4 = Fp.add(X1, Z1);
      let t5 = Fp.add(X2, Z2);
      t4 = Fp.mul(t4, t5);
      t5 = Fp.add(t0, t2);
      t4 = Fp.sub(t4, t5);
      t5 = Fp.add(Y1, Z1);
      X3 = Fp.add(Y2, Z2);
      t5 = Fp.mul(t5, X3);
      X3 = Fp.add(t1, t2);
      t5 = Fp.sub(t5, X3);
      Z3 = Fp.mul(a2, t4);
      X3 = Fp.mul(b3, t2);
      Z3 = Fp.add(X3, Z3);
      X3 = Fp.sub(t1, Z3);
      Z3 = Fp.add(t1, Z3);
      Y3 = Fp.mul(X3, Z3);
      t1 = Fp.add(t0, t0);
      t1 = Fp.add(t1, t0);
      t2 = Fp.mul(a2, t2);
      t4 = Fp.mul(b3, t4);
      t1 = Fp.add(t1, t2);
      t2 = Fp.sub(t0, t2);
      t2 = Fp.mul(a2, t2);
      t4 = Fp.add(t4, t2);
      t0 = Fp.mul(t1, t4);
      Y3 = Fp.add(Y3, t0);
      t0 = Fp.mul(t5, t4);
      X3 = Fp.mul(t3, X3);
      X3 = Fp.sub(X3, t0);
      t0 = Fp.mul(t3, t1);
      Z3 = Fp.mul(t5, Z3);
      Z3 = Fp.add(Z3, t0);
      return new Point(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
        const toInv = Fp.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
      });
    }
    multiplyUnsafe(n) {
      const I = Point.ZERO;
      if (n === _0n5)
        return I;
      assertGE(n);
      if (n === _1n5)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
      let k1p = I;
      let k2p = I;
      let d2 = this;
      while (k1 > _0n5 || k2 > _0n5) {
        if (k1 & _1n5)
          k1p = k1p.add(d2);
        if (k2 & _1n5)
          k2p = k2p.add(d2);
        d2 = d2.double();
        k1 >>= _1n5;
        k2 >>= _1n5;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    multiply(scalar) {
      assertGE(scalar);
      let n = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f: f2 } = this.wNAF(n);
        point = p;
        fake = f2;
      }
      return Point.normalizeZ([point, fake])[0];
    }
    multiplyAndAddUnsafe(Q, a2, b3) {
      const G = Point.BASE;
      const mul = (P3, a3) => a3 === _0n5 || a3 === _1n5 || !P3.equals(G) ? P3.multiplyUnsafe(a3) : P3.multiply(a3);
      const sum = mul(this, a2).add(mul(Q, b3));
      return sum.is0() ? undefined : sum;
    }
    toAffine(iz) {
      const { px: x3, py: y2, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp.ONE : Fp.inv(z);
      const ax = Fp.mul(x3, iz);
      const ay = Fp.mul(y2, iz);
      const zz = Fp.mul(z, iz);
      if (is0)
        return { x: Fp.ZERO, y: Fp.ZERO };
      if (!Fp.eql(zz, Fp.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n5)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n5)
        return this;
      if (clearCofactor)
        return clearCofactor(Point, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes2(Point, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp.BYTES + 1;
  const uncompressedLen = 2 * Fp.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n5 < num && num < Fp.ORDER;
  }
  function modN(a2) {
    return mod(a2, CURVE_ORDER);
  }
  function invN(a2) {
    return invert(a2, CURVE_ORDER);
  }
  const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a2 = point.toAffine();
      const x3 = Fp.toBytes(a2.x);
      const cat = concatBytes2;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x3);
      } else {
        return cat(Uint8Array.from([4]), x3, Fp.toBytes(a2.y));
      }
    },
    fromBytes(bytes2) {
      const len = bytes2.length;
      const head = bytes2[0];
      const tail = bytes2.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x3 = bytesToNumberBE(tail);
        if (!isValidFieldElement(x3))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x3);
        let y3 = Fp.sqrt(y2);
        const isYOdd = (y3 & _1n5) === _1n5;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y3 = Fp.neg(y3);
        return { x: x3, y: y3 };
      } else if (len === uncompressedLen && head === 4) {
        const x3 = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y2 = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x: x3, y: y2 };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number2) {
    const HALF = CURVE_ORDER >> _1n5;
    return number2 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN(-s) : s;
  }
  const slcNum = (b3, from, to) => bytesToNumberBE(b3.slice(from, to));

  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    static fromCompact(hex) {
      const l2 = CURVE.nByteLength;
      hex = ensureBytes("compactSignature", hex, l2 * 2);
      return new Signature(slcNum(hex, 0, l2), slcNum(hex, l2, 2 * l2));
    }
    static fromDER(hex) {
      const { r, s } = DER.toSig(ensureBytes("DER", hex));
      return new Signature(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h2 = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R2 = Point.fromHex(prefix + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN(-h2 * ir);
      const u2 = modN(s * ir);
      const Q = Point.BASE.multiplyAndAddUnsafe(R2, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    randomPrivateKey: () => {
      const length = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length), CURVE.n);
    },
    precompute(windowSize = 8, point = Point.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b3 = Point.fromHex(publicB);
    return b3.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes2) {
    const num = bytesToNumberBE(bytes2);
    const delta = bytes2.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
    return modN(bits2int(bytes2));
  };
  const ORDER_MASK = bitMask(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n5 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => (k in opts)))
      throw new Error("sign() legacy options not supported");
    const { hash: hash2, randomBytes: randomBytes4 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d2 = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d2), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes4(Fp.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes2(...seedArgs);
    const m2 = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point.BASE.multiply(k).toAffine();
      const r = modN(q.x);
      if (r === _0n5)
        return;
      const s = modN(ik * modN(m2 + r * d2));
      if (s === _0n5)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C2 = CURVE;
    const drbg = createHmacDrbg(C2.hash.outputLen, C2.nByteLength, C2.hmac);
    return drbg(seed, k2sig);
  }
  Point.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = undefined;
    let P3;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
          _sig = Signature.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig = new Signature(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P3 = Point.fromHex(publicKey);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h2 = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN(h2 * is);
    const u2 = modN(r * is);
    const R2 = Point.BASE.multiplyAndAddUnsafe(P3, u1, u2)?.toAffine();
    if (!R2)
      return false;
    const v3 = modN(R2.x);
    return v3 === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign,
    verify,
    ProjectivePoint: Point,
    Signature,
    utils
  };
}

// node_modules/ethers/node_modules/@noble/curves/esm/_shortw_utils.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function getHash(hash2) {
  return {
    hash: hash2,
    hmac: (key, ...msgs) => hmac(hash2, key, concatBytes(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
  return Object.freeze({ ...create(defHash), create });
}

// node_modules/ethers/node_modules/@noble/curves/esm/secp256k1.js
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n6 = BigInt(1);
var _2n5 = BigInt(2);
var divNearest = (a2, b3) => (a2 + b3 / _2n5) / b3;
function sqrtMod(y2) {
  const P3 = secp256k1P;
  const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b22 = y2 * y2 * y2 % P3;
  const b3 = b22 * b22 * y2 % P3;
  const b6 = pow2(b3, _3n3, P3) * b3 % P3;
  const b9 = pow2(b6, _3n3, P3) * b3 % P3;
  const b11 = pow2(b9, _2n5, P3) * b22 % P3;
  const b222 = pow2(b11, _11n, P3) * b11 % P3;
  const b44 = pow2(b222, _22n, P3) * b222 % P3;
  const b88 = pow2(b44, _44n, P3) * b44 % P3;
  const b176 = pow2(b88, _88n, P3) * b88 % P3;
  const b220 = pow2(b176, _44n, P3) * b44 % P3;
  const b223 = pow2(b220, _3n3, P3) * b3 % P3;
  const t1 = pow2(b223, _23n, P3) * b222 % P3;
  const t2 = pow2(t1, _6n, P3) * b22 % P3;
  const root = pow2(t2, _2n5, P3);
  if (!Fp.eql(Fp.sqr(root), y2))
    throw new Error("Cannot find square root");
  return root;
}
var Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
var secp256k1 = createCurve({
  a: BigInt(0),
  b: BigInt(7),
  Fp,
  n: secp256k1N,
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b22 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b22 * k, n);
      const c2 = divNearest(-b1 * k, n);
      let k1 = mod(k - c1 * a1 - c2 * a2, n);
      let k2 = mod(-c1 * b1 - c2 * b22, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n - k1;
      if (k2neg)
        k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha256);
var _0n6 = BigInt(0);
var Point = secp256k1.ProjectivePoint;

// node_modules/ethers/lib.esm/constants/addresses.js
var ZeroAddress = "0x0000000000000000000000000000000000000000";
// node_modules/ethers/lib.esm/constants/hashes.js
var ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
// node_modules/ethers/lib.esm/constants/numbers.js
var N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var WeiPerEther = BigInt("1000000000000000000");
var MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
var MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
// node_modules/ethers/lib.esm/constants/strings.js
var EtherSymbol = "Ξ";
var MessagePrefix = `\x19Ethereum Signed Message:
`;
// node_modules/ethers/lib.esm/crypto/signature.js
var BN_04 = BigInt(0);
var BN_13 = BigInt(1);
var BN_2 = BigInt(2);
var BN_27 = BigInt(27);
var BN_28 = BigInt(28);
var BN_35 = BigInt(35);
var _guard3 = {};
function toUint256(value) {
  return zeroPadValue(toBeArray(value), 32);
}

class Signature {
  #r;
  #s;
  #v;
  #networkV;
  get r() {
    return this.#r;
  }
  set r(value) {
    assertArgument(dataLength(value) === 32, "invalid r", "value", value);
    this.#r = hexlify(value);
  }
  get s() {
    assertArgument(parseInt(this.#s.substring(0, 3)) < 8, "non-canonical s; use ._s", "s", this.#s);
    return this.#s;
  }
  set s(_value) {
    assertArgument(dataLength(_value) === 32, "invalid s", "value", _value);
    this.#s = hexlify(_value);
  }
  get _s() {
    return this.#s;
  }
  isValid() {
    return parseInt(this.#s.substring(0, 3)) < 8;
  }
  get v() {
    return this.#v;
  }
  set v(value) {
    const v3 = getNumber(value, "value");
    assertArgument(v3 === 27 || v3 === 28, "invalid v", "v", value);
    this.#v = v3;
  }
  get networkV() {
    return this.#networkV;
  }
  get legacyChainId() {
    const v3 = this.networkV;
    if (v3 == null) {
      return null;
    }
    return Signature.getChainId(v3);
  }
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  get yParityAndS() {
    const yParityAndS = getBytes(this.s);
    if (this.yParity) {
      yParityAndS[0] |= 128;
    }
    return hexlify(yParityAndS);
  }
  get compactSerialized() {
    return concat([this.r, this.yParityAndS]);
  }
  get serialized() {
    return concat([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  constructor(guard, r, s, v3) {
    assertPrivate(guard, _guard3, "Signature");
    this.#r = r;
    this.#s = s;
    this.#v = v3;
    this.#networkV = null;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this._s}"${this.isValid() ? "" : ', valid: "false"'}, yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  clone() {
    const clone = new Signature(_guard3, this.r, this._s, this.v);
    if (this.networkV) {
      clone.#networkV = this.networkV;
    }
    return clone;
  }
  toJSON() {
    const networkV = this.networkV;
    return {
      _type: "signature",
      networkV: networkV != null ? networkV.toString() : null,
      r: this.r,
      s: this._s,
      v: this.v
    };
  }
  static getChainId(v3) {
    const bv = getBigInt(v3, "v");
    if (bv == BN_27 || bv == BN_28) {
      return BN_04;
    }
    assertArgument(bv >= BN_35, "invalid EIP-155 v", "v", v3);
    return (bv - BN_35) / BN_2;
  }
  static getChainIdV(chainId, v3) {
    return getBigInt(chainId) * BN_2 + BigInt(35 + v3 - 27);
  }
  static getNormalizedV(v3) {
    const bv = getBigInt(v3);
    if (bv === BN_04 || bv === BN_27) {
      return 27;
    }
    if (bv === BN_13 || bv === BN_28) {
      return 28;
    }
    assertArgument(bv >= BN_35, "invalid v", "v", v3);
    return bv & BN_13 ? 27 : 28;
  }
  static from(sig) {
    function assertError(check, message) {
      assertArgument(check, message, "signature", sig);
    }
    if (sig == null) {
      return new Signature(_guard3, ZeroHash, ZeroHash, 27);
    }
    if (typeof sig === "string") {
      const bytes2 = getBytes(sig, "signature");
      if (bytes2.length === 64) {
        const r2 = hexlify(bytes2.slice(0, 32));
        const s2 = bytes2.slice(32, 64);
        const v4 = s2[0] & 128 ? 28 : 27;
        s2[0] &= 127;
        return new Signature(_guard3, r2, hexlify(s2), v4);
      }
      if (bytes2.length === 65) {
        const r2 = hexlify(bytes2.slice(0, 32));
        const s2 = hexlify(bytes2.slice(32, 64));
        const v4 = Signature.getNormalizedV(bytes2[64]);
        return new Signature(_guard3, r2, s2, v4);
      }
      assertError(false, "invalid raw signature length");
    }
    if (sig instanceof Signature) {
      return sig.clone();
    }
    const _r = sig.r;
    assertError(_r != null, "missing r");
    const r = toUint256(_r);
    const s = function(s2, yParityAndS) {
      if (s2 != null) {
        return toUint256(s2);
      }
      if (yParityAndS != null) {
        assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
        const bytes2 = getBytes(yParityAndS);
        bytes2[0] &= 127;
        return hexlify(bytes2);
      }
      assertError(false, "missing s");
    }(sig.s, sig.yParityAndS);
    const { networkV, v: v3 } = function(_v, yParityAndS, yParity) {
      if (_v != null) {
        const v4 = getBigInt(_v);
        return {
          networkV: v4 >= BN_35 ? v4 : undefined,
          v: Signature.getNormalizedV(v4)
        };
      }
      if (yParityAndS != null) {
        assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
        return { v: getBytes(yParityAndS)[0] & 128 ? 28 : 27 };
      }
      if (yParity != null) {
        switch (getNumber(yParity, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        assertError(false, "invalid yParity");
      }
      assertError(false, "missing v");
    }(sig.v, sig.yParityAndS, sig.yParity);
    const result = new Signature(_guard3, r, s, v3);
    if (networkV) {
      result.#networkV = networkV;
    }
    assertError(sig.yParity == null || getNumber(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
    assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
    return result;
  }
}

// node_modules/ethers/lib.esm/crypto/signing-key.js
class SigningKey {
  #privateKey;
  constructor(privateKey) {
    assertArgument(dataLength(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
    this.#privateKey = hexlify(privateKey);
  }
  get privateKey() {
    return this.#privateKey;
  }
  get publicKey() {
    return SigningKey.computePublicKey(this.#privateKey);
  }
  get compressedPublicKey() {
    return SigningKey.computePublicKey(this.#privateKey, true);
  }
  sign(digest) {
    assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
    const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {
      lowS: true
    });
    return Signature.from({
      r: toBeHex(sig.r, 32),
      s: toBeHex(sig.s, 32),
      v: sig.recovery ? 28 : 27
    });
  }
  computeSharedSecret(other) {
    const pubKey = SigningKey.computePublicKey(other);
    return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));
  }
  static computePublicKey(key, compressed) {
    let bytes2 = getBytes(key, "key");
    if (bytes2.length === 32) {
      const pubKey = secp256k1.getPublicKey(bytes2, !!compressed);
      return hexlify(pubKey);
    }
    if (bytes2.length === 64) {
      const pub = new Uint8Array(65);
      pub[0] = 4;
      pub.set(bytes2, 1);
      bytes2 = pub;
    }
    const point = secp256k1.ProjectivePoint.fromHex(bytes2);
    return hexlify(point.toRawBytes(compressed));
  }
  static recoverPublicKey(digest, signature) {
    assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
    const sig = Signature.from(signature);
    let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));
    secpSig = secpSig.addRecoveryBit(sig.yParity);
    const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));
    assertArgument(pubKey != null, "invalid signature for digest", "signature", signature);
    return "0x" + pubKey.toHex(false);
  }
  static addPoints(p0, p1, compressed) {
    const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));
    const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));
    return "0x" + pub0.add(pub1).toHex(!!compressed);
  }
}
// node_modules/ethers/lib.esm/crypto/index.js
function lock() {
  computeHmac.lock();
  keccak256.lock();
  pbkdf22.lock();
  randomBytes3.lock();
  ripemd1602.lock();
  scrypt2.lock();
  scryptSync.lock();
  sha2562.lock();
  sha5122.lock();
  randomBytes3.lock();
}

// node_modules/ethers/lib.esm/address/address.js
var BN_05 = BigInt(0);
var BN_36 = BigInt(36);
function getChecksumAddress(address) {
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0;i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = getBytes(keccak256(expanded));
  for (let i = 0;i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var ibanLookup = {};
for (let i = 0;i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}
for (let i = 0;i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
var safeDigits = 15;
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
var Base36 = function() {
  const result = {};
  for (let i = 0;i < 36; i++) {
    const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
    result[key] = BigInt(i);
  }
  return result;
}();
function fromBase36(value) {
  value = value.toLowerCase();
  let result = BN_05;
  for (let i = 0;i < value.length; i++) {
    result = result * BN_36 + Base36[value[i]];
  }
  return result;
}
function getAddress(address) {
  assertArgument(typeof address === "string", "invalid address", "address", address);
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (!address.startsWith("0x")) {
      address = "0x" + address;
    }
    const result = getChecksumAddress(address);
    assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
    return result;
  }
  if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
    let result = fromBase36(address.substring(4)).toString(16);
    while (result.length < 40) {
      result = "0" + result;
    }
    return getChecksumAddress("0x" + result);
  }
  assertArgument(false, "invalid address", "address", address);
}
function getIcapAddress(address) {
  let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}
// node_modules/ethers/lib.esm/address/contract-address.js
function getCreateAddress(tx) {
  const from = getAddress(tx.from);
  const nonce = getBigInt(tx.nonce, "tx.nonce");
  let nonceHex = nonce.toString(16);
  if (nonceHex === "0") {
    nonceHex = "0x";
  } else if (nonceHex.length % 2) {
    nonceHex = "0x0" + nonceHex;
  } else {
    nonceHex = "0x" + nonceHex;
  }
  return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));
}
function getCreate2Address(_from, _salt, _initCodeHash) {
  const from = getAddress(_from);
  const salt = getBytes(_salt, "salt");
  const initCodeHash = getBytes(_initCodeHash, "initCodeHash");
  assertArgument(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
  assertArgument(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
  return getAddress(dataSlice(keccak256(concat(["0xff", from, salt, initCodeHash])), 12));
}
// node_modules/ethers/lib.esm/address/checks.js
function isAddressable(value) {
  return value && typeof value.getAddress === "function";
}
function isAddress(value) {
  try {
    getAddress(value);
    return true;
  } catch (error) {
  }
  return false;
}
async function checkAddress(target, promise) {
  const result = await promise;
  if (result == null || result === "0x0000000000000000000000000000000000000000") {
    assert(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
    assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
  }
  return getAddress(result);
}
function resolveAddress(target, resolver) {
  if (typeof target === "string") {
    if (target.match(/^0x[0-9a-f]{40}$/i)) {
      return getAddress(target);
    }
    assert(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
    return checkAddress(target, resolver.resolveName(target));
  } else if (isAddressable(target)) {
    return checkAddress(target, target.getAddress());
  } else if (target && typeof target.then === "function") {
    return checkAddress(target, target);
  }
  assertArgument(false, "unsupported addressable value", "target", target);
}
// node_modules/ethers/lib.esm/abi/typed.js
var _gaurd = {};
function n(value, width) {
  let signed = false;
  if (width < 0) {
    signed = true;
    width *= -1;
  }
  return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
}
function b3(value, size) {
  return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
}
var _typedSymbol = Symbol.for("_ethers_typed");

class Typed {
  type;
  value;
  #options;
  _typedSymbol;
  constructor(gaurd, type, value, options) {
    if (options == null) {
      options = null;
    }
    assertPrivate(_gaurd, gaurd, "Typed");
    defineProperties(this, { _typedSymbol, type, value });
    this.#options = options;
    this.format();
  }
  format() {
    if (this.type === "array") {
      throw new Error("");
    } else if (this.type === "dynamicArray") {
      throw new Error("");
    } else if (this.type === "tuple") {
      return `tuple(${this.value.map((v3) => v3.format()).join(",")})`;
    }
    return this.type;
  }
  defaultValue() {
    return 0;
  }
  minValue() {
    return 0;
  }
  maxValue() {
    return 0;
  }
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  isData() {
    return this.type.startsWith("bytes");
  }
  isString() {
    return this.type === "string";
  }
  get tupleName() {
    if (this.type !== "tuple") {
      throw TypeError("not a tuple");
    }
    return this.#options;
  }
  get arrayLength() {
    if (this.type !== "array") {
      throw TypeError("not an array");
    }
    if (this.#options === true) {
      return -1;
    }
    if (this.#options === false) {
      return this.value.length;
    }
    return null;
  }
  static from(type, value) {
    return new Typed(_gaurd, type, value);
  }
  static uint8(v3) {
    return n(v3, 8);
  }
  static uint16(v3) {
    return n(v3, 16);
  }
  static uint24(v3) {
    return n(v3, 24);
  }
  static uint32(v3) {
    return n(v3, 32);
  }
  static uint40(v3) {
    return n(v3, 40);
  }
  static uint48(v3) {
    return n(v3, 48);
  }
  static uint56(v3) {
    return n(v3, 56);
  }
  static uint64(v3) {
    return n(v3, 64);
  }
  static uint72(v3) {
    return n(v3, 72);
  }
  static uint80(v3) {
    return n(v3, 80);
  }
  static uint88(v3) {
    return n(v3, 88);
  }
  static uint96(v3) {
    return n(v3, 96);
  }
  static uint104(v3) {
    return n(v3, 104);
  }
  static uint112(v3) {
    return n(v3, 112);
  }
  static uint120(v3) {
    return n(v3, 120);
  }
  static uint128(v3) {
    return n(v3, 128);
  }
  static uint136(v3) {
    return n(v3, 136);
  }
  static uint144(v3) {
    return n(v3, 144);
  }
  static uint152(v3) {
    return n(v3, 152);
  }
  static uint160(v3) {
    return n(v3, 160);
  }
  static uint168(v3) {
    return n(v3, 168);
  }
  static uint176(v3) {
    return n(v3, 176);
  }
  static uint184(v3) {
    return n(v3, 184);
  }
  static uint192(v3) {
    return n(v3, 192);
  }
  static uint200(v3) {
    return n(v3, 200);
  }
  static uint208(v3) {
    return n(v3, 208);
  }
  static uint216(v3) {
    return n(v3, 216);
  }
  static uint224(v3) {
    return n(v3, 224);
  }
  static uint232(v3) {
    return n(v3, 232);
  }
  static uint240(v3) {
    return n(v3, 240);
  }
  static uint248(v3) {
    return n(v3, 248);
  }
  static uint256(v3) {
    return n(v3, 256);
  }
  static uint(v3) {
    return n(v3, 256);
  }
  static int8(v3) {
    return n(v3, -8);
  }
  static int16(v3) {
    return n(v3, -16);
  }
  static int24(v3) {
    return n(v3, -24);
  }
  static int32(v3) {
    return n(v3, -32);
  }
  static int40(v3) {
    return n(v3, -40);
  }
  static int48(v3) {
    return n(v3, -48);
  }
  static int56(v3) {
    return n(v3, -56);
  }
  static int64(v3) {
    return n(v3, -64);
  }
  static int72(v3) {
    return n(v3, -72);
  }
  static int80(v3) {
    return n(v3, -80);
  }
  static int88(v3) {
    return n(v3, -88);
  }
  static int96(v3) {
    return n(v3, -96);
  }
  static int104(v3) {
    return n(v3, -104);
  }
  static int112(v3) {
    return n(v3, -112);
  }
  static int120(v3) {
    return n(v3, -120);
  }
  static int128(v3) {
    return n(v3, -128);
  }
  static int136(v3) {
    return n(v3, -136);
  }
  static int144(v3) {
    return n(v3, -144);
  }
  static int152(v3) {
    return n(v3, -152);
  }
  static int160(v3) {
    return n(v3, -160);
  }
  static int168(v3) {
    return n(v3, -168);
  }
  static int176(v3) {
    return n(v3, -176);
  }
  static int184(v3) {
    return n(v3, -184);
  }
  static int192(v3) {
    return n(v3, -192);
  }
  static int200(v3) {
    return n(v3, -200);
  }
  static int208(v3) {
    return n(v3, -208);
  }
  static int216(v3) {
    return n(v3, -216);
  }
  static int224(v3) {
    return n(v3, -224);
  }
  static int232(v3) {
    return n(v3, -232);
  }
  static int240(v3) {
    return n(v3, -240);
  }
  static int248(v3) {
    return n(v3, -248);
  }
  static int256(v3) {
    return n(v3, -256);
  }
  static int(v3) {
    return n(v3, -256);
  }
  static bytes1(v3) {
    return b3(v3, 1);
  }
  static bytes2(v3) {
    return b3(v3, 2);
  }
  static bytes3(v3) {
    return b3(v3, 3);
  }
  static bytes4(v3) {
    return b3(v3, 4);
  }
  static bytes5(v3) {
    return b3(v3, 5);
  }
  static bytes6(v3) {
    return b3(v3, 6);
  }
  static bytes7(v3) {
    return b3(v3, 7);
  }
  static bytes8(v3) {
    return b3(v3, 8);
  }
  static bytes9(v3) {
    return b3(v3, 9);
  }
  static bytes10(v3) {
    return b3(v3, 10);
  }
  static bytes11(v3) {
    return b3(v3, 11);
  }
  static bytes12(v3) {
    return b3(v3, 12);
  }
  static bytes13(v3) {
    return b3(v3, 13);
  }
  static bytes14(v3) {
    return b3(v3, 14);
  }
  static bytes15(v3) {
    return b3(v3, 15);
  }
  static bytes16(v3) {
    return b3(v3, 16);
  }
  static bytes17(v3) {
    return b3(v3, 17);
  }
  static bytes18(v3) {
    return b3(v3, 18);
  }
  static bytes19(v3) {
    return b3(v3, 19);
  }
  static bytes20(v3) {
    return b3(v3, 20);
  }
  static bytes21(v3) {
    return b3(v3, 21);
  }
  static bytes22(v3) {
    return b3(v3, 22);
  }
  static bytes23(v3) {
    return b3(v3, 23);
  }
  static bytes24(v3) {
    return b3(v3, 24);
  }
  static bytes25(v3) {
    return b3(v3, 25);
  }
  static bytes26(v3) {
    return b3(v3, 26);
  }
  static bytes27(v3) {
    return b3(v3, 27);
  }
  static bytes28(v3) {
    return b3(v3, 28);
  }
  static bytes29(v3) {
    return b3(v3, 29);
  }
  static bytes30(v3) {
    return b3(v3, 30);
  }
  static bytes31(v3) {
    return b3(v3, 31);
  }
  static bytes32(v3) {
    return b3(v3, 32);
  }
  static address(v3) {
    return new Typed(_gaurd, "address", v3);
  }
  static bool(v3) {
    return new Typed(_gaurd, "bool", !!v3);
  }
  static bytes(v3) {
    return new Typed(_gaurd, "bytes", v3);
  }
  static string(v3) {
    return new Typed(_gaurd, "string", v3);
  }
  static array(v3, dynamic) {
    throw new Error("not implemented yet");
    return new Typed(_gaurd, "array", v3, dynamic);
  }
  static tuple(v3, name) {
    throw new Error("not implemented yet");
    return new Typed(_gaurd, "tuple", v3, name);
  }
  static overrides(v3) {
    return new Typed(_gaurd, "overrides", Object.assign({}, v3));
  }
  static isTyped(value) {
    return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
  }
  static dereference(value, type) {
    if (Typed.isTyped(value)) {
      if (value.type !== type) {
        throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
      }
      return value.value;
    }
    return value;
  }
}

// node_modules/ethers/lib.esm/abi/coders/address.js
class AddressCoder extends Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, _value) {
    let value = Typed.dereference(_value, "string");
    try {
      value = getAddress(value);
    } catch (error) {
      return this._throwError(error.message, _value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(toBeHex(reader.readValue(), 20));
  }
}

// node_modules/ethers/lib.esm/abi/coders/anonymous.js
class AnonymousCoder extends Coder {
  coder;
  constructor(coder) {
    super(coder.name, coder.type, "_", coder.dynamic);
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
}

// node_modules/ethers/lib.esm/abi/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = [];
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      assert(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      assert(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      unique[name] = true;
      return values[name];
    });
  } else {
    assertArgument(false, "invalid tuple value", "tuple", values);
  }
  assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
  let staticWriter = new Writer;
  let dynamicWriter = new Writer;
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let keys = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readIndex();
      let offsetReader = baseReader.subReader(offset);
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value == undefined) {
      throw new Error("investigate");
    }
    values.push(value);
    keys.push(coder.localName || null);
  });
  return Result.fromItems(values, keys);
}

class ArrayCoder extends Coder {
  coder;
  length;
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    defineProperties(this, { coder, length });
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i = 0;i < this.length; i++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "array");
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    assertArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i = 0;i < value.length; i++) {
      coders.push(this.coder);
    }
    return pack(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readIndex();
      assert(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
    }
    let coders = [];
    for (let i = 0;i < count; i++) {
      coders.push(new AnonymousCoder(this.coder));
    }
    return unpack(reader, coders);
  }
}

// node_modules/ethers/lib.esm/abi/coders/boolean.js
class BooleanCoder extends Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "bool");
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return !!reader.readValue();
  }
}

// node_modules/ethers/lib.esm/abi/coders/bytes.js
class DynamicBytesCoder extends Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = getBytesCopy(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readIndex(), true);
  }
}

class BytesCoder extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return hexlify(super.decode(reader));
  }
}

// node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js
class FixedBytesCoder extends Coder {
  size;
  constructor(size, localName) {
    let name = "bytes" + String(size);
    super(name, name, localName, false);
    defineProperties(this, { size }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, _value) {
    let data = getBytesCopy(Typed.dereference(_value, this.type));
    if (data.length !== this.size) {
      this._throwError("incorrect data length", _value);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return hexlify(reader.readBytes(this.size));
  }
}

// node_modules/ethers/lib.esm/abi/coders/null.js
var Empty = new Uint8Array([]);

class NullCoder extends Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes(Empty);
  }
  decode(reader) {
    reader.readBytes(0);
    return null;
  }
}

// node_modules/ethers/lib.esm/abi/coders/number.js
var BN_06 = BigInt(0);
var BN_14 = BigInt(1);
var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

class NumberCoder extends Coder {
  size;
  signed;
  constructor(size, signed, localName) {
    const name = (signed ? "int" : "uint") + size * 8;
    super(name, name, localName, false);
    defineProperties(this, { size, signed }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(writer, _value) {
    let value = getBigInt(Typed.dereference(_value, this.type));
    let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);
    if (this.signed) {
      let bounds = mask(maxUintValue, this.size * 8 - 1);
      if (value > bounds || value < -(bounds + BN_14)) {
        this._throwError("value out-of-bounds", _value);
      }
      value = toTwos(value, 8 * WordSize);
    } else if (value < BN_06 || value > mask(maxUintValue, this.size * 8)) {
      this._throwError("value out-of-bounds", _value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    let value = mask(reader.readValue(), this.size * 8);
    if (this.signed) {
      value = fromTwos(value, this.size * 8);
    }
    return value;
  }
}

// node_modules/ethers/lib.esm/abi/coders/string.js
class StringCoder extends DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, _value) {
    return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, "string")));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
}

// node_modules/ethers/lib.esm/abi/coders/tuple.js
class TupleCoder extends Coder {
  coders;
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    defineProperties(this, { coders: Object.freeze(coders.slice()) });
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name = coder.localName;
      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }
        accum[name]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name = coder.localName;
      if (!name || uniqueNames[name] !== 1) {
        return;
      }
      if (name === "length") {
        name = "_length";
      }
      if (values[name] != null) {
        return;
      }
      values[name] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "tuple");
    return pack(writer, this.coders, value);
  }
  decode(reader) {
    return unpack(reader, this.coders);
  }
}

// node_modules/ethers/lib.esm/transaction/accesslist.js
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: storageKeys.map((storageKey, index) => {
      assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        assertArgument(set.length === 2, "invalid slot set", `value[${index}]`, set);
        return accessSetify(set[0], set[1]);
      }
      assertArgument(set != null && typeof set === "object", "invalid address-slot set", "value", value);
      return accessSetify(set.address, set.storageKeys);
    });
  }
  assertArgument(value != null && typeof value === "object", "invalid access list", "value", value);
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a2, b4) => a2.address.localeCompare(b4.address));
  return result;
}
// node_modules/ethers/lib.esm/transaction/authorization.js
function authorizationify(auth) {
  return {
    address: getAddress(auth.address),
    nonce: getBigInt(auth.nonce != null ? auth.nonce : 0),
    chainId: getBigInt(auth.chainId != null ? auth.chainId : 0),
    signature: Signature.from(auth.signature)
  };
}
// node_modules/ethers/lib.esm/transaction/address.js
function computeAddress(key) {
  let pubkey;
  if (typeof key === "string") {
    pubkey = SigningKey.computePublicKey(key, false);
  } else {
    pubkey = key.publicKey;
  }
  return getAddress(keccak256("0x" + pubkey.substring(4)).substring(26));
}
function recoverAddress(digest, signature) {
  return computeAddress(SigningKey.recoverPublicKey(digest, signature));
}
// node_modules/ethers/lib.esm/transaction/transaction.js
var BN_07 = BigInt(0);
var BN_22 = BigInt(2);
var BN_272 = BigInt(27);
var BN_282 = BigInt(28);
var BN_352 = BigInt(35);
var BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var BLOB_SIZE = 4096 * 32;
function getKzgLibrary(kzg) {
  const blobToKzgCommitment = (blob) => {
    if ("computeBlobProof" in kzg) {
      if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
        return getBytes(kzg.blobToKzgCommitment(hexlify(blob)));
      }
    } else if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
      return getBytes(kzg.blobToKzgCommitment(blob));
    }
    if ("blobToKZGCommitment" in kzg && typeof kzg.blobToKZGCommitment === "function") {
      return getBytes(kzg.blobToKZGCommitment(hexlify(blob)));
    }
    assertArgument(false, "unsupported KZG library", "kzg", kzg);
  };
  const computeBlobKzgProof = (blob, commitment) => {
    if ("computeBlobProof" in kzg && typeof kzg.computeBlobProof === "function") {
      return getBytes(kzg.computeBlobProof(hexlify(blob), hexlify(commitment)));
    }
    if ("computeBlobKzgProof" in kzg && typeof kzg.computeBlobKzgProof === "function") {
      return kzg.computeBlobKzgProof(blob, commitment);
    }
    if ("computeBlobKZGProof" in kzg && typeof kzg.computeBlobKZGProof === "function") {
      return getBytes(kzg.computeBlobKZGProof(hexlify(blob), hexlify(commitment)));
    }
    assertArgument(false, "unsupported KZG library", "kzg", kzg);
  };
  return { blobToKzgCommitment, computeBlobKzgProof };
}
function getVersionedHash(version2, hash2) {
  let versioned = version2.toString(16);
  while (versioned.length < 2) {
    versioned = "0" + versioned;
  }
  versioned += sha2562(hash2).substring(4);
  return "0x" + versioned;
}
function handleAddress(value) {
  if (value === "0x") {
    return null;
  }
  return getAddress(value);
}
function handleAccessList(value, param) {
  try {
    return accessListify(value);
  } catch (error) {
    assertArgument(false, error.message, param, value);
  }
}
function handleAuthorizationList(value, param) {
  try {
    if (!Array.isArray(value)) {
      throw new Error("authorizationList: invalid array");
    }
    const result = [];
    for (let i = 0;i < value.length; i++) {
      const auth = value[i];
      if (!Array.isArray(auth)) {
        throw new Error(`authorization[${i}]: invalid array`);
      }
      if (auth.length !== 6) {
        throw new Error(`authorization[${i}]: wrong length`);
      }
      if (!auth[1]) {
        throw new Error(`authorization[${i}]: null address`);
      }
      result.push({
        address: handleAddress(auth[1]),
        nonce: handleUint(auth[2], "nonce"),
        chainId: handleUint(auth[0], "chainId"),
        signature: Signature.from({
          yParity: handleNumber(auth[3], "yParity"),
          r: zeroPadValue(auth[4], 32),
          s: zeroPadValue(auth[5], 32)
        })
      });
    }
    return result;
  } catch (error) {
    assertArgument(false, error.message, param, value);
  }
}
function handleNumber(_value, param) {
  if (_value === "0x") {
    return 0;
  }
  return getNumber(_value, param);
}
function handleUint(_value, param) {
  if (_value === "0x") {
    return BN_07;
  }
  const value = getBigInt(_value, param);
  assertArgument(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
  return value;
}
function formatNumber(_value, name) {
  const value = getBigInt(_value, "value");
  const result = toBeArray(value);
  assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);
  return result;
}
function formatAccessList(value) {
  return accessListify(value).map((set) => [set.address, set.storageKeys]);
}
function formatAuthorizationList(value) {
  return value.map((a2) => {
    return [
      formatNumber(a2.chainId, "chainId"),
      a2.address,
      formatNumber(a2.nonce, "nonce"),
      formatNumber(a2.signature.yParity, "yParity"),
      toBeArray(a2.signature.r),
      toBeArray(a2.signature.s)
    ];
  });
}
function formatHashes(value, param) {
  assertArgument(Array.isArray(value), `invalid ${param}`, "value", value);
  for (let i = 0;i < value.length; i++) {
    assertArgument(isHexString(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
  }
  return value;
}
function _parseLegacy(data) {
  const fields = decodeRlp(data);
  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
  const tx = {
    type: 0,
    nonce: handleNumber(fields[0], "nonce"),
    gasPrice: handleUint(fields[1], "gasPrice"),
    gasLimit: handleUint(fields[2], "gasLimit"),
    to: handleAddress(fields[3]),
    value: handleUint(fields[4], "value"),
    data: hexlify(fields[5]),
    chainId: BN_07
  };
  if (fields.length === 6) {
    return tx;
  }
  const v3 = handleUint(fields[6], "v");
  const r = handleUint(fields[7], "r");
  const s = handleUint(fields[8], "s");
  if (r === BN_07 && s === BN_07) {
    tx.chainId = v3;
  } else {
    let chainId = (v3 - BN_352) / BN_22;
    if (chainId < BN_07) {
      chainId = BN_07;
    }
    tx.chainId = chainId;
    assertArgument(chainId !== BN_07 || (v3 === BN_272 || v3 === BN_282), "non-canonical legacy v", "v", fields[6]);
    tx.signature = Signature.from({
      r: zeroPadValue(fields[7], 32),
      s: zeroPadValue(fields[8], 32),
      v: v3
    });
  }
  return tx;
}
function _serializeLegacy(tx, sig) {
  const fields = [
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.gasPrice || 0, "gasPrice"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data
  ];
  let chainId = BN_07;
  if (tx.chainId != BN_07) {
    chainId = getBigInt(tx.chainId, "tx.chainId");
    assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
  } else if (tx.signature) {
    const legacy = tx.signature.legacyChainId;
    if (legacy != null) {
      chainId = legacy;
    }
  }
  if (!sig) {
    if (chainId !== BN_07) {
      fields.push(toBeArray(chainId));
      fields.push("0x");
      fields.push("0x");
    }
    return encodeRlp(fields);
  }
  let v3 = BigInt(27 + sig.yParity);
  if (chainId !== BN_07) {
    v3 = Signature.getChainIdV(chainId, sig.v);
  } else if (BigInt(sig.v) !== v3) {
    assertArgument(false, "tx.chainId/sig.v mismatch", "sig", sig);
  }
  fields.push(toBeArray(v3));
  fields.push(toBeArray(sig.r));
  fields.push(toBeArray(sig.s));
  return encodeRlp(fields);
}
function _parseEipSignature(tx, fields) {
  let yParity;
  try {
    yParity = handleNumber(fields[0], "yParity");
    if (yParity !== 0 && yParity !== 1) {
      throw new Error("bad yParity");
    }
  } catch (error) {
    assertArgument(false, "invalid yParity", "yParity", fields[0]);
  }
  const r = zeroPadValue(fields[1], 32);
  const s = zeroPadValue(fields[2], 32);
  const signature = Signature.from({ r, s, yParity });
  tx.signature = signature;
}
function _parseEip1559(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", hexlify(data));
  const tx = {
    type: 2,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList")
  };
  if (fields.length === 9) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(9));
  return tx;
}
function _serializeEip1559(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x02", encodeRlp(fields)]);
}
function _parseEip2930(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", hexlify(data));
  const tx = {
    type: 1,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    gasPrice: handleUint(fields[2], "gasPrice"),
    gasLimit: handleUint(fields[3], "gasLimit"),
    to: handleAddress(fields[4]),
    value: handleUint(fields[5], "value"),
    data: hexlify(fields[6]),
    accessList: handleAccessList(fields[7], "accessList")
  };
  if (fields.length === 8) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(8));
  return tx;
}
function _serializeEip2930(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.gasPrice || 0, "gasPrice"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "recoveryParam"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x01", encodeRlp(fields)]);
}
function _parseEip4844(data) {
  let fields = decodeRlp(getBytes(data).slice(1));
  let typeName = "3";
  let blobs = null;
  if (fields.length === 4 && Array.isArray(fields[0])) {
    typeName = "3 (network format)";
    const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
    assertArgument(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
    assertArgument(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
    assertArgument(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
    assertArgument(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
    assertArgument(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
    blobs = [];
    for (let i = 0;i < fields[1].length; i++) {
      blobs.push({
        data: fBlobs[i],
        commitment: fCommits[i],
        proof: fProofs[i]
      });
    }
    fields = fields[0];
  }
  assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", hexlify(data));
  const tx = {
    type: 3,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList"),
    maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
    blobVersionedHashes: fields[10]
  };
  if (blobs) {
    tx.blobs = blobs;
  }
  assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
  assertArgument(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
  for (let i = 0;i < tx.blobVersionedHashes.length; i++) {
    assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
  }
  if (fields.length === 11) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(11));
  return tx;
}
function _serializeEip4844(tx, sig, blobs) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || ZeroAddress,
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || []),
    formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
    formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
    if (blobs) {
      return concat([
        "0x03",
        encodeRlp([
          fields,
          blobs.map((b4) => b4.data),
          blobs.map((b4) => b4.commitment),
          blobs.map((b4) => b4.proof)
        ])
      ]);
    }
  }
  return concat(["0x03", encodeRlp(fields)]);
}
function _parseEip7702(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 10 || fields.length === 13), "invalid field count for transaction type: 4", "data", hexlify(data));
  const tx = {
    type: 4,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList"),
    authorizationList: handleAuthorizationList(fields[9], "authorizationList")
  };
  if (fields.length === 10) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(10));
  return tx;
}
function _serializeEip7702(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || []),
    formatAuthorizationList(tx.authorizationList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x04", encodeRlp(fields)]);
}

class Transaction {
  #type;
  #to;
  #data;
  #nonce;
  #gasLimit;
  #gasPrice;
  #maxPriorityFeePerGas;
  #maxFeePerGas;
  #value;
  #chainId;
  #sig;
  #accessList;
  #maxFeePerBlobGas;
  #blobVersionedHashes;
  #kzg;
  #blobs;
  #auths;
  get type() {
    return this.#type;
  }
  set type(value) {
    switch (value) {
      case null:
        this.#type = null;
        break;
      case 0:
      case "legacy":
        this.#type = 0;
        break;
      case 1:
      case "berlin":
      case "eip-2930":
        this.#type = 1;
        break;
      case 2:
      case "london":
      case "eip-1559":
        this.#type = 2;
        break;
      case 3:
      case "cancun":
      case "eip-4844":
        this.#type = 3;
        break;
      case 4:
      case "pectra":
      case "eip-7702":
        this.#type = 4;
        break;
      default:
        assertArgument(false, "unsupported transaction type", "type", value);
    }
  }
  get typeName() {
    switch (this.type) {
      case 0:
        return "legacy";
      case 1:
        return "eip-2930";
      case 2:
        return "eip-1559";
      case 3:
        return "eip-4844";
      case 4:
        return "eip-7702";
    }
    return null;
  }
  get to() {
    const value = this.#to;
    if (value == null && this.type === 3) {
      return ZeroAddress;
    }
    return value;
  }
  set to(value) {
    this.#to = value == null ? null : getAddress(value);
  }
  get nonce() {
    return this.#nonce;
  }
  set nonce(value) {
    this.#nonce = getNumber(value, "value");
  }
  get gasLimit() {
    return this.#gasLimit;
  }
  set gasLimit(value) {
    this.#gasLimit = getBigInt(value);
  }
  get gasPrice() {
    const value = this.#gasPrice;
    if (value == null && (this.type === 0 || this.type === 1)) {
      return BN_07;
    }
    return value;
  }
  set gasPrice(value) {
    this.#gasPrice = value == null ? null : getBigInt(value, "gasPrice");
  }
  get maxPriorityFeePerGas() {
    const value = this.#maxPriorityFeePerGas;
    if (value == null) {
      if (this.type === 2 || this.type === 3) {
        return BN_07;
      }
      return null;
    }
    return value;
  }
  set maxPriorityFeePerGas(value) {
    this.#maxPriorityFeePerGas = value == null ? null : getBigInt(value, "maxPriorityFeePerGas");
  }
  get maxFeePerGas() {
    const value = this.#maxFeePerGas;
    if (value == null) {
      if (this.type === 2 || this.type === 3) {
        return BN_07;
      }
      return null;
    }
    return value;
  }
  set maxFeePerGas(value) {
    this.#maxFeePerGas = value == null ? null : getBigInt(value, "maxFeePerGas");
  }
  get data() {
    return this.#data;
  }
  set data(value) {
    this.#data = hexlify(value);
  }
  get value() {
    return this.#value;
  }
  set value(value) {
    this.#value = getBigInt(value, "value");
  }
  get chainId() {
    return this.#chainId;
  }
  set chainId(value) {
    this.#chainId = getBigInt(value);
  }
  get signature() {
    return this.#sig || null;
  }
  set signature(value) {
    this.#sig = value == null ? null : Signature.from(value);
  }
  get accessList() {
    const value = this.#accessList || null;
    if (value == null) {
      if (this.type === 1 || this.type === 2 || this.type === 3) {
        return [];
      }
      return null;
    }
    return value;
  }
  set accessList(value) {
    this.#accessList = value == null ? null : accessListify(value);
  }
  get authorizationList() {
    const value = this.#auths || null;
    if (value == null) {
      if (this.type === 4) {
        return [];
      }
    }
    return value;
  }
  set authorizationList(auths) {
    this.#auths = auths == null ? null : auths.map((a2) => authorizationify(a2));
  }
  get maxFeePerBlobGas() {
    const value = this.#maxFeePerBlobGas;
    if (value == null && this.type === 3) {
      return BN_07;
    }
    return value;
  }
  set maxFeePerBlobGas(value) {
    this.#maxFeePerBlobGas = value == null ? null : getBigInt(value, "maxFeePerBlobGas");
  }
  get blobVersionedHashes() {
    let value = this.#blobVersionedHashes;
    if (value == null && this.type === 3) {
      return [];
    }
    return value;
  }
  set blobVersionedHashes(value) {
    if (value != null) {
      assertArgument(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
      value = value.slice();
      for (let i = 0;i < value.length; i++) {
        assertArgument(isHexString(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
      }
    }
    this.#blobVersionedHashes = value;
  }
  get blobs() {
    if (this.#blobs == null) {
      return null;
    }
    return this.#blobs.map((b4) => Object.assign({}, b4));
  }
  set blobs(_blobs) {
    if (_blobs == null) {
      this.#blobs = null;
      return;
    }
    const blobs = [];
    const versionedHashes = [];
    for (let i = 0;i < _blobs.length; i++) {
      const blob = _blobs[i];
      if (isBytesLike(blob)) {
        assert(this.#kzg, "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
          operation: "set blobs()"
        });
        let data = getBytes(blob);
        assertArgument(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob);
        if (data.length !== BLOB_SIZE) {
          const padded = new Uint8Array(BLOB_SIZE);
          padded.set(data);
          data = padded;
        }
        const commit = this.#kzg.blobToKzgCommitment(data);
        const proof = hexlify(this.#kzg.computeBlobKzgProof(data, commit));
        blobs.push({
          data: hexlify(data),
          commitment: hexlify(commit),
          proof
        });
        versionedHashes.push(getVersionedHash(1, commit));
      } else {
        const commit = hexlify(blob.commitment);
        blobs.push({
          data: hexlify(blob.data),
          commitment: commit,
          proof: hexlify(blob.proof)
        });
        versionedHashes.push(getVersionedHash(1, commit));
      }
    }
    this.#blobs = blobs;
    this.#blobVersionedHashes = versionedHashes;
  }
  get kzg() {
    return this.#kzg;
  }
  set kzg(kzg) {
    if (kzg == null) {
      this.#kzg = null;
    } else {
      this.#kzg = getKzgLibrary(kzg);
    }
  }
  constructor() {
    this.#type = null;
    this.#to = null;
    this.#nonce = 0;
    this.#gasLimit = BN_07;
    this.#gasPrice = null;
    this.#maxPriorityFeePerGas = null;
    this.#maxFeePerGas = null;
    this.#data = "0x";
    this.#value = BN_07;
    this.#chainId = BN_07;
    this.#sig = null;
    this.#accessList = null;
    this.#maxFeePerBlobGas = null;
    this.#blobVersionedHashes = null;
    this.#kzg = null;
    this.#blobs = null;
    this.#auths = null;
  }
  get hash() {
    if (this.signature == null) {
      return null;
    }
    return keccak256(this.#getSerialized(true, false));
  }
  get unsignedHash() {
    return keccak256(this.unsignedSerialized);
  }
  get from() {
    if (this.signature == null) {
      return null;
    }
    return recoverAddress(this.unsignedHash, this.signature);
  }
  get fromPublicKey() {
    if (this.signature == null) {
      return null;
    }
    return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
  }
  isSigned() {
    return this.signature != null;
  }
  #getSerialized(signed, sidecar) {
    assert(!signed || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    const sig = signed ? this.signature : null;
    switch (this.inferType()) {
      case 0:
        return _serializeLegacy(this, sig);
      case 1:
        return _serializeEip2930(this, sig);
      case 2:
        return _serializeEip1559(this, sig);
      case 3:
        return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
      case 4:
        return _serializeEip7702(this, sig);
    }
    assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
  }
  get serialized() {
    return this.#getSerialized(true, true);
  }
  get unsignedSerialized() {
    return this.#getSerialized(false, false);
  }
  inferType() {
    const types = this.inferTypes();
    if (types.indexOf(2) >= 0) {
      return 2;
    }
    return types.pop();
  }
  inferTypes() {
    const hasGasPrice = this.gasPrice != null;
    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
    const hasAccessList = this.accessList != null;
    const hasBlob = this.#maxFeePerBlobGas != null || this.#blobVersionedHashes;
    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
      assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
    }
    assert(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
    assert(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
    const types = [];
    if (this.type != null) {
      types.push(this.type);
    } else {
      if (this.authorizationList && this.authorizationList.length) {
        types.push(4);
      } else if (hasFee) {
        types.push(2);
      } else if (hasGasPrice) {
        types.push(1);
        if (!hasAccessList) {
          types.push(0);
        }
      } else if (hasAccessList) {
        types.push(1);
        types.push(2);
      } else if (hasBlob && this.to) {
        types.push(3);
      } else {
        types.push(0);
        types.push(1);
        types.push(2);
        types.push(3);
      }
    }
    types.sort();
    return types;
  }
  isLegacy() {
    return this.type === 0;
  }
  isBerlin() {
    return this.type === 1;
  }
  isLondon() {
    return this.type === 2;
  }
  isCancun() {
    return this.type === 3;
  }
  clone() {
    return Transaction.from(this);
  }
  toJSON() {
    const s = (v3) => {
      if (v3 == null) {
        return null;
      }
      return v3.toString();
    };
    return {
      type: this.type,
      to: this.to,
      data: this.data,
      nonce: this.nonce,
      gasLimit: s(this.gasLimit),
      gasPrice: s(this.gasPrice),
      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
      maxFeePerGas: s(this.maxFeePerGas),
      value: s(this.value),
      chainId: s(this.chainId),
      sig: this.signature ? this.signature.toJSON() : null,
      accessList: this.accessList
    };
  }
  static from(tx) {
    if (tx == null) {
      return new Transaction;
    }
    if (typeof tx === "string") {
      const payload = getBytes(tx);
      if (payload[0] >= 127) {
        return Transaction.from(_parseLegacy(payload));
      }
      switch (payload[0]) {
        case 1:
          return Transaction.from(_parseEip2930(payload));
        case 2:
          return Transaction.from(_parseEip1559(payload));
        case 3:
          return Transaction.from(_parseEip4844(payload));
        case 4:
          return Transaction.from(_parseEip7702(payload));
      }
      assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
    }
    const result = new Transaction;
    if (tx.type != null) {
      result.type = tx.type;
    }
    if (tx.to != null) {
      result.to = tx.to;
    }
    if (tx.nonce != null) {
      result.nonce = tx.nonce;
    }
    if (tx.gasLimit != null) {
      result.gasLimit = tx.gasLimit;
    }
    if (tx.gasPrice != null) {
      result.gasPrice = tx.gasPrice;
    }
    if (tx.maxPriorityFeePerGas != null) {
      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
    }
    if (tx.maxFeePerGas != null) {
      result.maxFeePerGas = tx.maxFeePerGas;
    }
    if (tx.maxFeePerBlobGas != null) {
      result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
    }
    if (tx.data != null) {
      result.data = tx.data;
    }
    if (tx.value != null) {
      result.value = tx.value;
    }
    if (tx.chainId != null) {
      result.chainId = tx.chainId;
    }
    if (tx.signature != null) {
      result.signature = Signature.from(tx.signature);
    }
    if (tx.accessList != null) {
      result.accessList = tx.accessList;
    }
    if (tx.authorizationList != null) {
      result.authorizationList = tx.authorizationList;
    }
    if (tx.blobVersionedHashes != null) {
      result.blobVersionedHashes = tx.blobVersionedHashes;
    }
    if (tx.kzg != null) {
      result.kzg = tx.kzg;
    }
    if (tx.blobs != null) {
      result.blobs = tx.blobs;
    }
    if (tx.hash != null) {
      assertArgument(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
      assertArgument(result.hash === tx.hash, "hash mismatch", "tx", tx);
    }
    if (tx.from != null) {
      assertArgument(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
      assertArgument(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
    }
    return result;
  }
}
// node_modules/ethers/lib.esm/hash/authorization.js
function hashAuthorization(auth) {
  assertArgument(typeof auth.address === "string", "invalid address for hashAuthorization", "auth.address", auth);
  return keccak256(concat([
    "0x05",
    encodeRlp([
      auth.chainId != null ? toBeArray(auth.chainId) : "0x",
      getAddress(auth.address),
      auth.nonce != null ? toBeArray(auth.nonce) : "0x"
    ])
  ]));
}
function verifyAuthorization(auth, sig) {
  return recoverAddress(hashAuthorization(auth), sig);
}
// node_modules/ethers/lib.esm/hash/id.js
function id(value) {
  return keccak256(toUtf8Bytes(value));
}
// node_modules/@adraffy/ens-normalize/dist/index.mjs
var COMPRESSED$1 = "";
var FENCED = new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
var NSM_MAX = 4;
function decode_arithmetic(bytes2) {
  let pos = 0;
  function u16() {
    return bytes2[pos++] << 8 | bytes2[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1;i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes2[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N3 = 31;
  const FULL = 2 ** N3;
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0;i < N3; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a2 = low + Math.floor(range * acc[start] / total);
    let b4 = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a2 ^ b4) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a2 = a2 << 1 & MASK;
      b4 = b4 << 1 & MASK | 1;
    }
    while (a2 & ~b4 & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a2 = a2 << 1 ^ HALF;
      b4 = (b4 ^ HALF) << 1 | HALF | 1;
    }
    low = a2;
    range = 1 + b4 - a2;
  }
  let offset = symbol_count - 4;
  return symbols.map((x3) => {
    switch (x3 - offset) {
      case 3:
        return offset + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
      case 2:
        return offset + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
      case 1:
        return offset + bytes2[pos_payload++];
      default:
        return x3 - 1;
    }
  });
}
function read_payload(v3) {
  let pos = 0;
  return () => v3[pos++];
}
function read_compressed_payload(s) {
  return read_payload(decode_arithmetic(unsafe_atob(s)));
}
function unsafe_atob(s) {
  let lookup = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
  let n2 = s.length;
  let ret = new Uint8Array(6 * n2 >> 3);
  for (let i = 0, pos = 0, width = 0, carry = 0;i < n2; i++) {
    carry = carry << 6 | lookup[s.charCodeAt(i)];
    width += 6;
    if (width >= 8) {
      ret[pos++] = carry >> (width -= 8);
    }
  }
  return ret;
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_deltas(n2, next) {
  let v3 = Array(n2);
  for (let i = 0, x3 = 0;i < n2; i++)
    v3[i] = x3 += signed(next());
  return v3;
}
function read_sorted(next, prev = 0) {
  let ret = [];
  while (true) {
    let x3 = next();
    let n2 = next();
    if (!n2)
      break;
    prev += x3;
    for (let i = 0;i < n2; i++) {
      ret.push(prev + i);
    }
    prev += n2 + 1;
  }
  return ret;
}
function read_sorted_arrays(next) {
  return read_array_while(() => {
    let v3 = read_sorted(next);
    if (v3.length)
      return v3;
  });
}
function read_mapped(next) {
  let ret = [];
  while (true) {
    let w3 = next();
    if (w3 == 0)
      break;
    ret.push(read_linear_table(w3, next));
  }
  while (true) {
    let w3 = next() - 1;
    if (w3 < 0)
      break;
    ret.push(read_replacement_table(w3, next));
  }
  return ret.flat();
}
function read_array_while(next) {
  let v3 = [];
  while (true) {
    let x3 = next(v3.length);
    if (!x3)
      break;
    v3.push(x3);
  }
  return v3;
}
function read_transposed(n2, w3, next) {
  let m2 = Array(n2).fill().map(() => []);
  for (let i = 0;i < w3; i++) {
    read_deltas(n2, next).forEach((x3, j2) => m2[j2].push(x3));
  }
  return m2;
}
function read_linear_table(w3, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_array_while(next);
  let m2 = read_transposed(vN.length, 1 + w3, next);
  return m2.flatMap((v3, i) => {
    let [x3, ...ys] = v3;
    return Array(vN[i]).fill().map((_2, j2) => {
      let j_dy = j2 * dy;
      return [x3 + j2 * dx, ys.map((y2) => y2 + j_dy)];
    });
  });
}
function read_replacement_table(w3, next) {
  let n2 = 1 + next();
  let m2 = read_transposed(n2, 1 + w3, next);
  return m2.map((v3) => [v3[0], v3.slice(1)]);
}
function read_trie(next) {
  let ret = [];
  let sorted = read_sorted(next);
  expand(decode2([]), []);
  return ret;
  function decode2(Q) {
    let S = next();
    let B = read_array_while(() => {
      let cps = read_sorted(next).map((i) => sorted[i]);
      if (cps.length)
        return decode2(cps);
    });
    return { S, B, Q };
  }
  function expand({ S, B }, cps, saved) {
    if (S & 4 && saved === cps[cps.length - 1])
      return;
    if (S & 2)
      saved = cps[cps.length - 1];
    if (S & 1)
      ret.push(cps);
    for (let br of B) {
      for (let cp of br.Q) {
        expand(br, [...cps, cp], saved);
      }
    }
  }
}
function hex_cp(cp) {
  return cp.toString(16).toUpperCase().padStart(2, "0");
}
function quote_cp(cp) {
  return `{${hex_cp(cp)}}`;
}
function explode_cp(s) {
  let cps = [];
  for (let pos = 0, len = s.length;pos < len; ) {
    let cp = s.codePointAt(pos);
    pos += cp < 65536 ? 1 : 2;
    cps.push(cp);
  }
  return cps;
}
function str_from_cps(cps) {
  const chunk = 4096;
  let len = cps.length;
  if (len < chunk)
    return String.fromCodePoint(...cps);
  let buf = [];
  for (let i = 0;i < len; ) {
    buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
  }
  return buf.join("");
}
function compare_arrays(a2, b4) {
  let n2 = a2.length;
  let c = n2 - b4.length;
  for (let i = 0;c == 0 && i < n2; i++)
    c = a2[i] - b4[i];
  return c;
}
var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
var S0 = 44032;
var L0 = 4352;
var V0 = 4449;
var T0 = 4519;
var L_COUNT = 19;
var V_COUNT = 21;
var T_COUNT = 28;
var N_COUNT = V_COUNT * T_COUNT;
var S_COUNT = L_COUNT * N_COUNT;
var S1 = S0 + S_COUNT;
var L1 = L0 + L_COUNT;
var V1 = V0 + V_COUNT;
var T1 = T0 + T_COUNT;
function unpack_cc(packed) {
  return packed >> 24 & 255;
}
function unpack_cp(packed) {
  return packed & 16777215;
}
var SHIFTED_RANK;
var EXCLUSIONS;
var DECOMP;
var RECOMP;
function init$1() {
  let r = read_compressed_payload(COMPRESSED);
  SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v3, i) => v3.map((x3) => [x3, i + 1 << 24])));
  EXCLUSIONS = new Set(read_sorted(r));
  DECOMP = new Map;
  RECOMP = new Map;
  for (let [cp, cps] of read_mapped(r)) {
    if (!EXCLUSIONS.has(cp) && cps.length == 2) {
      let [a2, b4] = cps;
      let bucket = RECOMP.get(a2);
      if (!bucket) {
        bucket = new Map;
        RECOMP.set(a2, bucket);
      }
      bucket.set(b4, cp);
    }
    DECOMP.set(cp, cps.reverse());
  }
}
function is_hangul(cp) {
  return cp >= S0 && cp < S1;
}
function compose_pair(a2, b4) {
  if (a2 >= L0 && a2 < L1 && b4 >= V0 && b4 < V1) {
    return S0 + (a2 - L0) * N_COUNT + (b4 - V0) * T_COUNT;
  } else if (is_hangul(a2) && b4 > T0 && b4 < T1 && (a2 - S0) % T_COUNT == 0) {
    return a2 + (b4 - T0);
  } else {
    let recomp = RECOMP.get(a2);
    if (recomp) {
      recomp = recomp.get(b4);
      if (recomp) {
        return recomp;
      }
    }
    return -1;
  }
}
function decomposed(cps) {
  if (!SHIFTED_RANK)
    init$1();
  let ret = [];
  let buf = [];
  let check_order = false;
  function add2(cp) {
    let cc = SHIFTED_RANK.get(cp);
    if (cc) {
      check_order = true;
      cp |= cc;
    }
    ret.push(cp);
  }
  for (let cp of cps) {
    while (true) {
      if (cp < 128) {
        ret.push(cp);
      } else if (is_hangul(cp)) {
        let s_index = cp - S0;
        let l_index = s_index / N_COUNT | 0;
        let v_index = s_index % N_COUNT / T_COUNT | 0;
        let t_index = s_index % T_COUNT;
        add2(L0 + l_index);
        add2(V0 + v_index);
        if (t_index > 0)
          add2(T0 + t_index);
      } else {
        let mapped = DECOMP.get(cp);
        if (mapped) {
          buf.push(...mapped);
        } else {
          add2(cp);
        }
      }
      if (!buf.length)
        break;
      cp = buf.pop();
    }
  }
  if (check_order && ret.length > 1) {
    let prev_cc = unpack_cc(ret[0]);
    for (let i = 1;i < ret.length; i++) {
      let cc = unpack_cc(ret[i]);
      if (cc == 0 || prev_cc <= cc) {
        prev_cc = cc;
        continue;
      }
      let j2 = i - 1;
      while (true) {
        let tmp = ret[j2 + 1];
        ret[j2 + 1] = ret[j2];
        ret[j2] = tmp;
        if (!j2)
          break;
        prev_cc = unpack_cc(ret[--j2]);
        if (prev_cc <= cc)
          break;
      }
      prev_cc = unpack_cc(ret[i]);
    }
  }
  return ret;
}
function composed_from_decomposed(v3) {
  let ret = [];
  let stack = [];
  let prev_cp = -1;
  let prev_cc = 0;
  for (let packed of v3) {
    let cc = unpack_cc(packed);
    let cp = unpack_cp(packed);
    if (prev_cp == -1) {
      if (cc == 0) {
        prev_cp = cp;
      } else {
        ret.push(cp);
      }
    } else if (prev_cc > 0 && prev_cc >= cc) {
      if (cc == 0) {
        ret.push(prev_cp, ...stack);
        stack.length = 0;
        prev_cp = cp;
      } else {
        stack.push(cp);
      }
      prev_cc = cc;
    } else {
      let composed = compose_pair(prev_cp, cp);
      if (composed >= 0) {
        prev_cp = composed;
      } else if (prev_cc == 0 && cc == 0) {
        ret.push(prev_cp);
        prev_cp = cp;
      } else {
        stack.push(cp);
        prev_cc = cc;
      }
    }
  }
  if (prev_cp >= 0) {
    ret.push(prev_cp, ...stack);
  }
  return ret;
}
function nfd(cps) {
  return decomposed(cps).map(unpack_cp);
}
function nfc(cps) {
  return composed_from_decomposed(decomposed(cps));
}
var HYPHEN = 45;
var STOP_CH = ".";
var FE0F = 65039;
var UNIQUE_PH = 1;
var Array_from = (x3) => Array.from(x3);
function group_has_cp(g2, cp) {
  return g2.P.has(cp) || g2.Q.has(cp);
}

class Emoji extends Array {
  get is_emoji() {
    return true;
  }
}
var MAPPED;
var IGNORED;
var CM;
var NSM;
var ESCAPE;
var NFC_CHECK;
var GROUPS;
var WHOLE_VALID;
var WHOLE_MAP;
var VALID;
var EMOJI_LIST;
var EMOJI_ROOT;
function init() {
  if (MAPPED)
    return;
  let r = read_compressed_payload(COMPRESSED$1);
  const read_sorted_array = () => read_sorted(r);
  const read_sorted_set = () => new Set(read_sorted_array());
  const set_add_many = (set, v3) => v3.forEach((x3) => set.add(x3));
  MAPPED = new Map(read_mapped(r));
  IGNORED = read_sorted_set();
  CM = read_sorted_array();
  NSM = new Set(read_sorted_array().map((i) => CM[i]));
  CM = new Set(CM);
  ESCAPE = read_sorted_set();
  NFC_CHECK = read_sorted_set();
  let chunks = read_sorted_arrays(r);
  let unrestricted = r();
  const read_chunked = () => {
    let set = new Set;
    read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
    set_add_many(set, read_sorted_array());
    return set;
  };
  GROUPS = read_array_while((i) => {
    let N3 = read_array_while(r).map((x3) => x3 + 96);
    if (N3.length) {
      let R2 = i >= unrestricted;
      N3[0] -= 32;
      N3 = str_from_cps(N3);
      if (R2)
        N3 = `Restricted[${N3}]`;
      let P3 = read_chunked();
      let Q = read_chunked();
      let M2 = !r();
      return { N: N3, P: P3, Q, M: M2, R: R2 };
    }
  });
  WHOLE_VALID = read_sorted_set();
  WHOLE_MAP = new Map;
  let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a2, b4) => a2 - b4);
  wholes.forEach((cp, i) => {
    let d2 = r();
    let w3 = wholes[i] = d2 ? wholes[i - d2] : { V: [], M: new Map };
    w3.V.push(cp);
    if (!WHOLE_VALID.has(cp)) {
      WHOLE_MAP.set(cp, w3);
    }
  });
  for (let { V, M: M2 } of new Set(WHOLE_MAP.values())) {
    let recs = [];
    for (let cp of V) {
      let gs = GROUPS.filter((g2) => group_has_cp(g2, cp));
      let rec = recs.find(({ G }) => gs.some((g2) => G.has(g2)));
      if (!rec) {
        rec = { G: new Set, V: [] };
        recs.push(rec);
      }
      rec.V.push(cp);
      set_add_many(rec.G, gs);
    }
    let union = recs.flatMap((x3) => Array_from(x3.G));
    for (let { G, V: V2 } of recs) {
      let complement = new Set(union.filter((g2) => !G.has(g2)));
      for (let cp of V2) {
        M2.set(cp, complement);
      }
    }
  }
  VALID = new Set;
  let multi = new Set;
  const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
  for (let g2 of GROUPS) {
    for (let cp of g2.P)
      add_to_union(cp);
    for (let cp of g2.Q)
      add_to_union(cp);
  }
  for (let cp of VALID) {
    if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
      WHOLE_MAP.set(cp, UNIQUE_PH);
    }
  }
  set_add_many(VALID, nfd(VALID));
  EMOJI_LIST = read_trie(r).map((v3) => Emoji.from(v3)).sort(compare_arrays);
  EMOJI_ROOT = new Map;
  for (let cps of EMOJI_LIST) {
    let prev = [EMOJI_ROOT];
    for (let cp of cps) {
      let next = prev.map((node) => {
        let child = node.get(cp);
        if (!child) {
          child = new Map;
          node.set(cp, child);
        }
        return child;
      });
      if (cp === FE0F) {
        prev.push(...next);
      } else {
        prev = next;
      }
    }
    for (let x3 of prev) {
      x3.V = cps;
    }
  }
}
function quoted_cp(cp) {
  return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
}
function bidi_qq(s) {
  return `"${s}"‎`;
}
function check_label_extension(cps) {
  if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
    throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
  }
}
function check_leading_underscore(cps) {
  const UNDERSCORE = 95;
  for (let i = cps.lastIndexOf(UNDERSCORE);i > 0; ) {
    if (cps[--i] !== UNDERSCORE) {
      throw new Error("underscore allowed only at start");
    }
  }
}
function check_fenced(cps) {
  let cp = cps[0];
  let prev = FENCED.get(cp);
  if (prev)
    throw error_placement(`leading ${prev}`);
  let n2 = cps.length;
  let last = -1;
  for (let i = 1;i < n2; i++) {
    cp = cps[i];
    let match = FENCED.get(cp);
    if (match) {
      if (last == i)
        throw error_placement(`${prev} + ${match}`);
      last = i + 1;
      prev = match;
    }
  }
  if (last == n2)
    throw error_placement(`trailing ${prev}`);
}
function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
  let buf = [];
  if (is_combining_mark(cps[0]))
    buf.push("◌");
  if (cps.length > max) {
    max >>= 1;
    cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
  }
  let prev = 0;
  let n2 = cps.length;
  for (let i = 0;i < n2; i++) {
    let cp = cps[i];
    if (should_escape(cp)) {
      buf.push(str_from_cps(cps.slice(prev, i)));
      buf.push(quoter(cp));
      prev = i + 1;
    }
  }
  buf.push(str_from_cps(cps.slice(prev, n2)));
  return buf.join("");
}
function is_combining_mark(cp) {
  init();
  return CM.has(cp);
}
function should_escape(cp) {
  init();
  return ESCAPE.has(cp);
}
function ens_normalize(name) {
  return flatten(split2(name, nfc, filter_fe0f));
}
function split2(name, nf, ef) {
  if (!name)
    return [];
  init();
  let offset = 0;
  return name.split(STOP_CH).map((label) => {
    let input = explode_cp(label);
    let info = {
      input,
      offset
    };
    offset += input.length + 1;
    try {
      let tokens = info.tokens = tokens_from_str(input, nf, ef);
      let token_count = tokens.length;
      let type;
      if (!token_count) {
        throw new Error(`empty label`);
      }
      let norm = info.output = tokens.flat();
      check_leading_underscore(norm);
      let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
      if (!emoji && norm.every((cp) => cp < 128)) {
        check_label_extension(norm);
        type = "ASCII";
      } else {
        let chars = tokens.flatMap((x3) => x3.is_emoji ? [] : x3);
        if (!chars.length) {
          type = "Emoji";
        } else {
          if (CM.has(norm[0]))
            throw error_placement("leading combining mark");
          for (let i = 1;i < token_count; i++) {
            let cps = tokens[i];
            if (!cps.is_emoji && CM.has(cps[0])) {
              throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
            }
          }
          check_fenced(norm);
          let unique = Array_from(new Set(chars));
          let [g2] = determine_group(unique);
          check_group(g2, chars);
          check_whole(g2, unique);
          type = g2.N;
        }
      }
      info.type = type;
    } catch (err) {
      info.error = err;
    }
    return info;
  });
}
function check_whole(group, unique) {
  let maker;
  let shared = [];
  for (let cp of unique) {
    let whole = WHOLE_MAP.get(cp);
    if (whole === UNIQUE_PH)
      return;
    if (whole) {
      let set = whole.M.get(cp);
      maker = maker ? maker.filter((g2) => set.has(g2)) : Array_from(set);
      if (!maker.length)
        return;
    } else {
      shared.push(cp);
    }
  }
  if (maker) {
    for (let g2 of maker) {
      if (shared.every((cp) => group_has_cp(g2, cp))) {
        throw new Error(`whole-script confusable: ${group.N}/${g2.N}`);
      }
    }
  }
}
function determine_group(unique) {
  let groups = GROUPS;
  for (let cp of unique) {
    let gs = groups.filter((g2) => group_has_cp(g2, cp));
    if (!gs.length) {
      if (!GROUPS.some((g2) => group_has_cp(g2, cp))) {
        throw error_disallowed(cp);
      } else {
        throw error_group_member(groups[0], cp);
      }
    }
    groups = gs;
    if (gs.length == 1)
      break;
  }
  return groups;
}
function flatten(split3) {
  return split3.map(({ input, error, output: output2 }) => {
    if (error) {
      let msg = error.message;
      throw new Error(split3.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
    }
    return str_from_cps(output2);
  }).join(STOP_CH);
}
function error_disallowed(cp) {
  return new Error(`disallowed character: ${quoted_cp(cp)}`);
}
function error_group_member(g2, cp) {
  let quoted = quoted_cp(cp);
  let gg = GROUPS.find((g3) => g3.P.has(cp));
  if (gg) {
    quoted = `${gg.N} ${quoted}`;
  }
  return new Error(`illegal mixture: ${g2.N} + ${quoted}`);
}
function error_placement(where) {
  return new Error(`illegal placement: ${where}`);
}
function check_group(g2, cps) {
  for (let cp of cps) {
    if (!group_has_cp(g2, cp)) {
      throw error_group_member(g2, cp);
    }
  }
  if (g2.M) {
    let decomposed2 = nfd(cps);
    for (let i = 1, e = decomposed2.length;i < e; i++) {
      if (NSM.has(decomposed2[i])) {
        let j2 = i + 1;
        for (let cp;j2 < e && NSM.has(cp = decomposed2[j2]); j2++) {
          for (let k = i;k < j2; k++) {
            if (decomposed2[k] == cp) {
              throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
            }
          }
        }
        if (j2 - i > NSM_MAX) {
          throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j2)))} (${j2 - i}/${NSM_MAX})`);
        }
        i = j2;
      }
    }
  }
}
function tokens_from_str(input, nf, ef) {
  let ret = [];
  let chars = [];
  input = input.slice().reverse();
  while (input.length) {
    let emoji = consume_emoji_reversed(input);
    if (emoji) {
      if (chars.length) {
        ret.push(nf(chars));
        chars = [];
      }
      ret.push(ef(emoji));
    } else {
      let cp = input.pop();
      if (VALID.has(cp)) {
        chars.push(cp);
      } else {
        let cps = MAPPED.get(cp);
        if (cps) {
          chars.push(...cps);
        } else if (!IGNORED.has(cp)) {
          throw error_disallowed(cp);
        }
      }
    }
  }
  if (chars.length) {
    ret.push(nf(chars));
  }
  return ret;
}
function filter_fe0f(cps) {
  return cps.filter((cp) => cp != FE0F);
}
function consume_emoji_reversed(cps, eaten) {
  let node = EMOJI_ROOT;
  let emoji;
  let pos = cps.length;
  while (pos) {
    node = node.get(cps[--pos]);
    if (!node)
      break;
    let { V } = node;
    if (V) {
      emoji = V;
      if (eaten)
        eaten.push(...cps.slice(pos).reverse());
      cps.length = pos;
    }
  }
  return emoji;
}

// node_modules/ethers/lib.esm/hash/namehash.js
var Zeros2 = new Uint8Array(32);
Zeros2.fill(0);
function checkComponent(comp) {
  assertArgument(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
  return comp;
}
function ensNameSplit(name) {
  const bytes2 = toUtf8Bytes(ensNormalize(name));
  const comps = [];
  if (name.length === 0) {
    return comps;
  }
  let last = 0;
  for (let i = 0;i < bytes2.length; i++) {
    const d2 = bytes2[i];
    if (d2 === 46) {
      comps.push(checkComponent(bytes2.slice(last, i)));
      last = i + 1;
    }
  }
  assertArgument(last < bytes2.length, "invalid ENS name; empty component", "name", name);
  comps.push(checkComponent(bytes2.slice(last)));
  return comps;
}
function ensNormalize(name) {
  try {
    if (name.length === 0) {
      throw new Error("empty label");
    }
    return ens_normalize(name);
  } catch (error) {
    assertArgument(false, `invalid ENS name (${error.message})`, "name", name);
  }
}
function isValidName(name) {
  try {
    return ensNameSplit(name).length !== 0;
  } catch (error) {
  }
  return false;
}
function namehash(name) {
  assertArgument(typeof name === "string", "invalid ENS name; not a string", "name", name);
  assertArgument(name.length, `invalid ENS name (empty label)`, "name", name);
  let result = Zeros2;
  const comps = ensNameSplit(name);
  while (comps.length) {
    result = keccak256(concat([result, keccak256(comps.pop())]));
  }
  return hexlify(result);
}
function dnsEncode(name, _maxLength) {
  const length = _maxLength != null ? _maxLength : 63;
  assertArgument(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
  return hexlify(concat(ensNameSplit(name).map((comp) => {
    assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
    const bytes2 = new Uint8Array(comp.length + 1);
    bytes2.set(comp, 1);
    bytes2[0] = bytes2.length - 1;
    return bytes2;
  }))) + "00";
}
// node_modules/ethers/lib.esm/hash/message.js
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat([
    toUtf8Bytes(MessagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}
function verifyMessage(message, sig) {
  const digest = hashMessage(message);
  return recoverAddress(digest, sig);
}
// node_modules/ethers/lib.esm/hash/solidity.js
var regexBytes = new RegExp("^bytes([0-9]+)$");
var regexNumber = new RegExp("^(u?int)([0-9]*)$");
var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(getAddress(value));
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return getBytes(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let signed2 = match[1] === "int";
    let size = parseInt(match[2] || "256");
    assertArgument((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
    if (isArray) {
      size = 256;
    }
    if (signed2) {
      value = toTwos(value, size);
    }
    return getBytes(zeroPadValue(toBeArray(value), size / 8));
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    assertArgument(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
    assertArgument(dataLength(value) === size, `invalid value for ${type}`, "value", value);
    if (isArray) {
      return getBytes(zeroPadBytes(value, 32));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    assertArgument(count === value.length, `invalid array length for ${type}`, "value", value);
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return getBytes(concat(result));
  }
  assertArgument(false, "invalid type", "type", type);
}
function solidityPacked(types, values) {
  assertArgument(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function solidityPackedKeccak256(types, values) {
  return keccak256(solidityPacked(types, values));
}
function solidityPackedSha256(types, values) {
  return sha2562(solidityPacked(types, values));
}
// node_modules/ethers/lib.esm/hash/typed-data.js
var padding = new Uint8Array(32);
padding.fill(0);
var BN__1 = BigInt(-1);
var BN_08 = BigInt(0);
var BN_15 = BigInt(1);
var BN_MAX_UINT2562 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function hexPadRight(value) {
  const bytes2 = getBytes(value);
  const padOffset = bytes2.length % 32;
  if (padOffset) {
    return concat([bytes2, padding.slice(padOffset)]);
  }
  return hexlify(bytes2);
}
var hexTrue = toBeHex(BN_15, 32);
var hexFalse = toBeHex(BN_08, 32);
var domainFieldTypes = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
};
var domainFieldNames = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function checkString(key) {
  return function(value) {
    assertArgument(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(_value) {
    const value = getBigInt(_value, "domain.chainId");
    assertArgument(value >= 0, "invalid chain ID", "domain.chainId", _value);
    if (Number.isSafeInteger(value)) {
      return Number(value);
    }
    return toQuantity(value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    assertArgument(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    const bytes2 = getBytes(value, "domain.salt");
    assertArgument(bytes2.length === 32, `invalid domain value "salt"`, "domain.salt", value);
    return hexlify(bytes2);
  }
};
function getBaseEncoder(type) {
  {
    const match = type.match(/^(u?)int(\d+)$/);
    if (match) {
      const signed2 = match[1] === "";
      const width = parseInt(match[2]);
      assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
      const boundsUpper = mask(BN_MAX_UINT2562, signed2 ? width - 1 : width);
      const boundsLower = signed2 ? (boundsUpper + BN_15) * BN__1 : BN_08;
      return function(_value) {
        const value = getBigInt(_value, "value");
        assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
        return toBeHex(signed2 ? toTwos(value, 256) : value, 32);
      };
    }
  }
  {
    const match = type.match(/^bytes(\d+)$/);
    if (match) {
      const width = parseInt(match[1]);
      assertArgument(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
      return function(value) {
        const bytes2 = getBytes(value);
        assertArgument(bytes2.length === width, `invalid length for ${type}`, "value", value);
        return hexPadRight(value);
      };
    }
  }
  switch (type) {
    case "address":
      return function(value) {
        return zeroPadValue(getAddress(value), 32);
      };
    case "bool":
      return function(value) {
        return !value ? hexFalse : hexTrue;
      };
    case "bytes":
      return function(value) {
        return keccak256(value);
      };
    case "string":
      return function(value) {
        return id(value);
      };
  }
  return null;
}
function encodeType(name, fields) {
  return `${name}(${fields.map(({ name: name2, type }) => type + " " + name2).join(",")})`;
}
function splitArray(type) {
  const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
  if (match) {
    return {
      base: match[1],
      index: match[2] + match[4],
      array: {
        base: match[1],
        prefix: match[1] + match[2],
        count: match[5] ? parseInt(match[5]) : -1
      }
    };
  }
  return { base: type };
}

class TypedDataEncoder {
  primaryType;
  #types;
  get types() {
    return JSON.parse(this.#types);
  }
  #fullTypes;
  #encoderCache;
  constructor(_types) {
    this.#fullTypes = new Map;
    this.#encoderCache = new Map;
    const links = new Map;
    const parents = new Map;
    const subtypes = new Map;
    const types = {};
    Object.keys(_types).forEach((type) => {
      types[type] = _types[type].map(({ name, type: type2 }) => {
        let { base, index } = splitArray(type2);
        if (base === "int" && !_types["int"]) {
          base = "int256";
        }
        if (base === "uint" && !_types["uint"]) {
          base = "uint256";
        }
        return { name, type: base + (index || "") };
      });
      links.set(type, new Set);
      parents.set(type, []);
      subtypes.set(type, new Set);
    });
    this.#types = JSON.stringify(types);
    for (const name in types) {
      const uniqueNames = new Set;
      for (const field of types[name]) {
        assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types);
        uniqueNames.add(field.name);
        const baseType = splitArray(field.type).base;
        assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types);
        const encoder = getBaseEncoder(baseType);
        if (encoder) {
          continue;
        }
        assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types);
        parents.get(baseType).push(name);
        links.get(name).add(baseType);
      }
    }
    const primaryTypes = Array.from(parents.keys()).filter((n2) => parents.get(n2).length === 0);
    assertArgument(primaryTypes.length !== 0, "missing primary type", "types", _types);
    assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types);
    defineProperties(this, { primaryType: primaryTypes[0] });
    function checkCircular(type, found) {
      assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types);
      found.add(type);
      for (const child of links.get(type)) {
        if (!parents.has(child)) {
          continue;
        }
        checkCircular(child, found);
        for (const subtype of found) {
          subtypes.get(subtype).add(child);
        }
      }
      found.delete(type);
    }
    checkCircular(this.primaryType, new Set);
    for (const [name, set] of subtypes) {
      const st2 = Array.from(set);
      st2.sort();
      this.#fullTypes.set(name, encodeType(name, types[name]) + st2.map((t) => encodeType(t, types[t])).join(""));
    }
  }
  getEncoder(type) {
    let encoder = this.#encoderCache.get(type);
    if (!encoder) {
      encoder = this.#getEncoder(type);
      this.#encoderCache.set(type, encoder);
    }
    return encoder;
  }
  #getEncoder(type) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return encoder;
      }
    }
    const array = splitArray(type).array;
    if (array) {
      const subtype = array.prefix;
      const subEncoder = this.getEncoder(subtype);
      return (value) => {
        assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
        let result = value.map(subEncoder);
        if (this.#fullTypes.has(subtype)) {
          result = result.map(keccak256);
        }
        return keccak256(concat(result));
      };
    }
    const fields = this.types[type];
    if (fields) {
      const encodedType = id(this.#fullTypes.get(type));
      return (value) => {
        const values = fields.map(({ name, type: type2 }) => {
          const result = this.getEncoder(type2)(value[name]);
          if (this.#fullTypes.has(type2)) {
            return keccak256(result);
          }
          return result;
        });
        values.unshift(encodedType);
        return concat(values);
      };
    }
    assertArgument(false, `unknown type: ${type}`, "type", type);
  }
  encodeType(name) {
    const result = this.#fullTypes.get(name);
    assertArgument(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
    return result;
  }
  encodeData(type, value) {
    return this.getEncoder(type)(value);
  }
  hashStruct(name, value) {
    return keccak256(this.encodeData(name, value));
  }
  encode(value) {
    return this.encodeData(this.primaryType, value);
  }
  hash(value) {
    return this.hashStruct(this.primaryType, value);
  }
  _visit(type, value, callback) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return callback(type, value);
      }
    }
    const array = splitArray(type).array;
    if (array) {
      assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
      return value.map((v3) => this._visit(array.prefix, v3, callback));
    }
    const fields = this.types[type];
    if (fields) {
      return fields.reduce((accum, { name, type: type2 }) => {
        accum[name] = this._visit(type2, value[name], callback);
        return accum;
      }, {});
    }
    assertArgument(false, `unknown type: ${type}`, "type", type);
  }
  visit(value, callback) {
    return this._visit(this.primaryType, value, callback);
  }
  static from(types) {
    return new TypedDataEncoder(types);
  }
  static getPrimaryType(types) {
    return TypedDataEncoder.from(types).primaryType;
  }
  static hashStruct(name, types, value) {
    return TypedDataEncoder.from(types).hashStruct(name, value);
  }
  static hashDomain(domain) {
    const domainFields = [];
    for (const name in domain) {
      if (domain[name] == null) {
        continue;
      }
      const type = domainFieldTypes[name];
      assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
      domainFields.push({ name, type });
    }
    domainFields.sort((a2, b4) => {
      return domainFieldNames.indexOf(a2.name) - domainFieldNames.indexOf(b4.name);
    });
    return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
  }
  static encode(domain, types, value) {
    return concat([
      "0x1901",
      TypedDataEncoder.hashDomain(domain),
      TypedDataEncoder.from(types).hash(value)
    ]);
  }
  static hash(domain, types, value) {
    return keccak256(TypedDataEncoder.encode(domain, types, value));
  }
  static async resolveNames(domain, types, value, resolveName) {
    domain = Object.assign({}, domain);
    for (const key in domain) {
      if (domain[key] == null) {
        delete domain[key];
      }
    }
    const ensCache = {};
    if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
      ensCache[domain.verifyingContract] = "0x";
    }
    const encoder = TypedDataEncoder.from(types);
    encoder.visit(value, (type, value2) => {
      if (type === "address" && !isHexString(value2, 20)) {
        ensCache[value2] = "0x";
      }
      return value2;
    });
    for (const name in ensCache) {
      ensCache[name] = await resolveName(name);
    }
    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
      domain.verifyingContract = ensCache[domain.verifyingContract];
    }
    value = encoder.visit(value, (type, value2) => {
      if (type === "address" && ensCache[value2]) {
        return ensCache[value2];
      }
      return value2;
    });
    return { domain, value };
  }
  static getPayload(domain, types, value) {
    TypedDataEncoder.hashDomain(domain);
    const domainValues = {};
    const domainTypes = [];
    domainFieldNames.forEach((name) => {
      const value2 = domain[name];
      if (value2 == null) {
        return;
      }
      domainValues[name] = domainChecks[name](value2);
      domainTypes.push({ name, type: domainFieldTypes[name] });
    });
    const encoder = TypedDataEncoder.from(types);
    types = encoder.types;
    const typesWithDomain = Object.assign({}, types);
    assertArgument(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
    typesWithDomain.EIP712Domain = domainTypes;
    encoder.encode(value);
    return {
      types: typesWithDomain,
      domain: domainValues,
      primaryType: encoder.primaryType,
      message: encoder.visit(value, (type, value2) => {
        if (type.match(/^bytes(\d*)/)) {
          return hexlify(getBytes(value2));
        }
        if (type.match(/^u?int/)) {
          return getBigInt(value2).toString();
        }
        switch (type) {
          case "address":
            return value2.toLowerCase();
          case "bool":
            return !!value2;
          case "string":
            assertArgument(typeof value2 === "string", "invalid string", "value", value2);
            return value2;
        }
        assertArgument(false, "unsupported type", "type", type);
      })
    };
  }
}
function verifyTypedData(domain, types, value, signature) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
}
// node_modules/ethers/lib.esm/abi/fragments.js
function setify(items) {
  const result = new Set;
  items.forEach((k) => result.add(k));
  return Object.freeze(result);
}
var _kwVisibDeploy = "external public payable override";
var KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
var _kwVisib = "constant external internal payable private public pure view override";
var KwVisib = setify(_kwVisib.split(" "));
var _kwTypes = "constructor error event fallback function receive struct";
var KwTypes = setify(_kwTypes.split(" "));
var _kwModifiers = "calldata memory storage payable indexed";
var KwModifiers = setify(_kwModifiers.split(" "));
var _kwOther = "tuple returns";
var _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
var Keywords = setify(_keywords.split(" "));
var SimpleTokens = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
};
var regexWhitespacePrefix = new RegExp("^(\\s*)");
var regexNumberPrefix = new RegExp("^([0-9]+)");
var regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
var regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
var regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");

class TokenString {
  #offset;
  #tokens;
  get offset() {
    return this.#offset;
  }
  get length() {
    return this.#tokens.length - this.#offset;
  }
  constructor(tokens) {
    this.#offset = 0;
    this.#tokens = tokens.slice();
  }
  clone() {
    return new TokenString(this.#tokens);
  }
  reset() {
    this.#offset = 0;
  }
  #subTokenString(from = 0, to = 0) {
    return new TokenString(this.#tokens.slice(from, to).map((t) => {
      return Object.freeze(Object.assign({}, t, {
        match: t.match - from,
        linkBack: t.linkBack - from,
        linkNext: t.linkNext - from
      }));
    }));
  }
  popKeyword(allowed) {
    const top = this.peek();
    if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
      throw new Error(`expected keyword ${top.text}`);
    }
    return this.pop().text;
  }
  popType(type) {
    if (this.peek().type !== type) {
      const top = this.peek();
      throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
    }
    return this.pop().text;
  }
  popParen() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = this.#subTokenString(this.#offset + 1, top.match + 1);
    this.#offset = top.match + 1;
    return result;
  }
  popParams() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = [];
    while (this.#offset < top.match - 1) {
      const link = this.peek().linkNext;
      result.push(this.#subTokenString(this.#offset + 1, link));
      this.#offset = link;
    }
    this.#offset = top.match + 1;
    return result;
  }
  peek() {
    if (this.#offset >= this.#tokens.length) {
      throw new Error("out-of-bounds");
    }
    return this.#tokens[this.#offset];
  }
  peekKeyword(allowed) {
    const top = this.peekType("KEYWORD");
    return top != null && allowed.has(top) ? top : null;
  }
  peekType(type) {
    if (this.length === 0) {
      return null;
    }
    const top = this.peek();
    return top.type === type ? top.text : null;
  }
  pop() {
    const result = this.peek();
    this.#offset++;
    return result;
  }
  toString() {
    const tokens = [];
    for (let i = this.#offset;i < this.#tokens.length; i++) {
      const token = this.#tokens[i];
      tokens.push(`${token.type}:${token.text}`);
    }
    return `<TokenString ${tokens.join(" ")}>`;
  }
}
function lex(text) {
  const tokens = [];
  const throwError2 = (message) => {
    const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
    throw new Error(`invalid token ${token} at ${offset}: ${message}`);
  };
  let brackets = [];
  let commas = [];
  let offset = 0;
  while (offset < text.length) {
    let cur = text.substring(offset);
    let match = cur.match(regexWhitespacePrefix);
    if (match) {
      offset += match[1].length;
      cur = text.substring(offset);
    }
    const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
    tokens.push(token);
    let type = SimpleTokens[cur[0]] || "";
    if (type) {
      token.type = type;
      token.text = cur[0];
      offset++;
      if (type === "OPEN_PAREN") {
        brackets.push(tokens.length - 1);
        commas.push(tokens.length - 1);
      } else if (type == "CLOSE_PAREN") {
        if (brackets.length === 0) {
          throwError2("no matching open bracket");
        }
        token.match = brackets.pop();
        tokens[token.match].match = tokens.length - 1;
        token.depth--;
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
      } else if (type === "COMMA") {
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
        commas.push(tokens.length - 1);
      } else if (type === "OPEN_BRACKET") {
        token.type = "BRACKET";
      } else if (type === "CLOSE_BRACKET") {
        let suffix = tokens.pop().text;
        if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
          const value = tokens.pop().text;
          suffix = value + suffix;
          tokens[tokens.length - 1].value = getNumber(value);
        }
        if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
          throw new Error("missing opening bracket");
        }
        tokens[tokens.length - 1].text += suffix;
      }
      continue;
    }
    match = cur.match(regexIdPrefix);
    if (match) {
      token.text = match[1];
      offset += token.text.length;
      if (Keywords.has(token.text)) {
        token.type = "KEYWORD";
        continue;
      }
      if (token.text.match(regexType)) {
        token.type = "TYPE";
        continue;
      }
      token.type = "ID";
      continue;
    }
    match = cur.match(regexNumberPrefix);
    if (match) {
      token.text = match[1];
      token.type = "NUMBER";
      offset += token.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
  }
  return new TokenString(tokens.map((t) => Object.freeze(t)));
}
function allowSingle(set, allowed) {
  let included = [];
  for (const key in allowed.keys()) {
    if (set.has(key)) {
      included.push(key);
    }
  }
  if (included.length > 1) {
    throw new Error(`conflicting types: ${included.join(", ")}`);
  }
}
function consumeName(type, tokens) {
  if (tokens.peekKeyword(KwTypes)) {
    const keyword = tokens.pop().text;
    if (keyword !== type) {
      throw new Error(`expected ${type}, got ${keyword}`);
    }
  }
  return tokens.popType("ID");
}
function consumeKeywords(tokens, allowed) {
  const keywords = new Set;
  while (true) {
    const keyword = tokens.peekType("KEYWORD");
    if (keyword == null || allowed && !allowed.has(keyword)) {
      break;
    }
    tokens.pop();
    if (keywords.has(keyword)) {
      throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
    }
    keywords.add(keyword);
  }
  return Object.freeze(keywords);
}
function consumeMutability(tokens) {
  let modifiers = consumeKeywords(tokens, KwVisib);
  allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
  allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
  if (modifiers.has("view")) {
    return "view";
  }
  if (modifiers.has("pure")) {
    return "pure";
  }
  if (modifiers.has("payable")) {
    return "payable";
  }
  if (modifiers.has("nonpayable")) {
    return "nonpayable";
  }
  if (modifiers.has("constant")) {
    return "view";
  }
  return "nonpayable";
}
function consumeParams(tokens, allowIndexed) {
  return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
}
function consumeGas(tokens) {
  if (tokens.peekType("AT")) {
    tokens.pop();
    if (tokens.peekType("NUMBER")) {
      return getBigInt(tokens.pop().text);
    }
    throw new Error("invalid gas");
  }
  return null;
}
function consumeEoi(tokens) {
  if (tokens.length) {
    throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
  }
}
var regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
function verifyBasicType(type) {
  const match = type.match(regexType);
  assertArgument(match, "invalid type", "type", type);
  if (type === "uint") {
    return "uint256";
  }
  if (type === "int") {
    return "int256";
  }
  if (match[2]) {
    const length = parseInt(match[2]);
    assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type);
  } else if (match[3]) {
    const size = parseInt(match[3]);
    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
  }
  return type;
}
var _guard4 = {};
var internal = Symbol.for("_ethers_internal");
var ParamTypeInternal = "_ParamTypeInternal";
var ErrorFragmentInternal = "_ErrorInternal";
var EventFragmentInternal = "_EventInternal";
var ConstructorFragmentInternal = "_ConstructorInternal";
var FallbackFragmentInternal = "_FallbackInternal";
var FunctionFragmentInternal = "_FunctionInternal";
var StructFragmentInternal = "_StructInternal";

class ParamType {
  name;
  type;
  baseType;
  indexed;
  components;
  arrayLength;
  arrayChildren;
  constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
    assertPrivate(guard, _guard4, "ParamType");
    Object.defineProperty(this, internal, { value: ParamTypeInternal });
    if (components) {
      components = Object.freeze(components.slice());
    }
    if (baseType === "array") {
      if (arrayLength == null || arrayChildren == null) {
        throw new Error("");
      }
    } else if (arrayLength != null || arrayChildren != null) {
      throw new Error("");
    }
    if (baseType === "tuple") {
      if (components == null) {
        throw new Error("");
      }
    } else if (components != null) {
      throw new Error("");
    }
    defineProperties(this, {
      name,
      type,
      baseType,
      indexed,
      components,
      arrayLength,
      arrayChildren
    });
  }
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      const name = this.name || "";
      if (this.isArray()) {
        const result3 = JSON.parse(this.arrayChildren.format("json"));
        result3.name = name;
        result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        return JSON.stringify(result3);
      }
      const result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.isTuple()) {
        result2.components = this.components.map((c) => JSON.parse(c.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.isArray()) {
      result += this.arrayChildren.format(format);
      result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
    } else {
      if (this.isTuple()) {
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== "sighash") {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === "full" && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  isArray() {
    return this.baseType === "array";
  }
  isTuple() {
    return this.baseType === "tuple";
  }
  isIndexable() {
    return this.indexed != null;
  }
  walk(value, process2) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v3) => _this.arrayChildren.walk(v3, process2));
    }
    if (this.isTuple()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid tuple value");
      }
      if (value.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v3, i) => _this.components[i].walk(v3, process2));
    }
    return process2(this.type, value);
  }
  #walkAsync(promises, value, process2, setValue) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const childType = this.arrayChildren;
      const result2 = value.slice();
      result2.forEach((value2, index) => {
        childType.#walkAsync(promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    if (this.isTuple()) {
      const components = this.components;
      let result2;
      if (Array.isArray(value)) {
        result2 = value.slice();
      } else {
        if (value == null || typeof value !== "object") {
          throw new Error("invalid tuple value");
        }
        result2 = components.map((param) => {
          if (!param.name) {
            throw new Error("cannot use object value with unnamed components");
          }
          if (!(param.name in value)) {
            throw new Error(`missing value for component ${param.name}`);
          }
          return value[param.name];
        });
      }
      if (result2.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      result2.forEach((value2, index) => {
        components[index].#walkAsync(promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    const result = process2(this.type, value);
    if (result.then) {
      promises.push(async function() {
        setValue(await result);
      }());
    } else {
      setValue(result);
    }
  }
  async walkAsync(value, process2) {
    const promises = [];
    const result = [value];
    this.#walkAsync(promises, value, process2, (value2) => {
      result[0] = value2;
    });
    if (promises.length) {
      await Promise.all(promises);
    }
    return result[0];
  }
  static from(obj, allowIndexed) {
    if (ParamType.isParamType(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return ParamType.from(lex(obj), allowIndexed);
      } catch (error) {
        assertArgument(false, "invalid param type", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      let type2 = "", baseType = "";
      let comps = null;
      if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
        baseType = "tuple";
        comps = obj.popParams().map((t) => ParamType.from(t));
        type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
      } else {
        type2 = verifyBasicType(obj.popType("TYPE"));
        baseType = type2;
      }
      let arrayChildren = null;
      let arrayLength = null;
      while (obj.length && obj.peekType("BRACKET")) {
        const bracket = obj.pop();
        arrayChildren = new ParamType(_guard4, "", type2, baseType, null, comps, arrayLength, arrayChildren);
        arrayLength = bracket.value;
        type2 += bracket.text;
        baseType = "array";
        comps = null;
      }
      let indexed2 = null;
      const keywords = consumeKeywords(obj, KwModifiers);
      if (keywords.has("indexed")) {
        if (!allowIndexed) {
          throw new Error("");
        }
        indexed2 = true;
      }
      const name2 = obj.peekType("ID") ? obj.pop().text : "";
      if (obj.length) {
        throw new Error("leftover tokens");
      }
      return new ParamType(_guard4, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
    }
    const name = obj.name;
    assertArgument(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
    let indexed = obj.indexed;
    if (indexed != null) {
      assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
      indexed = !!indexed;
    }
    let type = obj.type;
    let arrayMatch = type.match(regexArrayType);
    if (arrayMatch) {
      const arrayLength = parseInt(arrayMatch[2] || "-1");
      const arrayChildren = ParamType.from({
        type: arrayMatch[1],
        components: obj.components
      });
      return new ParamType(_guard4, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
    }
    if (type === "tuple" || type.startsWith("tuple(") || type.startsWith("(")) {
      const comps = obj.components != null ? obj.components.map((c) => ParamType.from(c)) : null;
      const tuple = new ParamType(_guard4, name || "", type, "tuple", indexed, comps, null, null);
      return tuple;
    }
    type = verifyBasicType(obj.type);
    return new ParamType(_guard4, name || "", type, type, indexed, null, null, null);
  }
  static isParamType(value) {
    return value && value[internal] === ParamTypeInternal;
  }
}

class Fragment {
  type;
  inputs;
  constructor(guard, type, inputs) {
    assertPrivate(guard, _guard4, "Fragment");
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { type, inputs });
  }
  static from(obj) {
    if (typeof obj === "string") {
      try {
        Fragment.from(JSON.parse(obj));
      } catch (e) {
      }
      return Fragment.from(lex(obj));
    }
    if (obj instanceof TokenString) {
      const type = obj.peekKeyword(KwTypes);
      switch (type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
    } else if (typeof obj === "object") {
      switch (obj.type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
      assert(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    assertArgument(false, "unsupported frgament object", "obj", obj);
  }
  static isConstructor(value) {
    return ConstructorFragment.isFragment(value);
  }
  static isError(value) {
    return ErrorFragment.isFragment(value);
  }
  static isEvent(value) {
    return EventFragment.isFragment(value);
  }
  static isFunction(value) {
    return FunctionFragment.isFragment(value);
  }
  static isStruct(value) {
    return StructFragment.isFragment(value);
  }
}

class NamedFragment extends Fragment {
  name;
  constructor(guard, type, name, inputs) {
    super(guard, type, inputs);
    assertArgument(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { name });
  }
}
function joinParams(format, params) {
  return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
}

class ErrorFragment extends NamedFragment {
  constructor(guard, name, inputs) {
    super(guard, "error", name, inputs);
    Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
  }
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("error");
    }
    result.push(this.name + joinParams(format, this.inputs));
    return result.join(" ");
  }
  static from(obj) {
    if (ErrorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      return ErrorFragment.from(lex(obj));
    } else if (obj instanceof TokenString) {
      const name = consumeName("error", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new ErrorFragment(_guard4, name, inputs);
    }
    return new ErrorFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  static isFragment(value) {
    return value && value[internal] === ErrorFragmentInternal;
  }
}

class EventFragment extends NamedFragment {
  anonymous;
  constructor(guard, name, inputs, anonymous) {
    super(guard, "event", name, inputs);
    Object.defineProperty(this, internal, { value: EventFragmentInternal });
    defineProperties(this, { anonymous });
  }
  get topicHash() {
    return id(this.format("sighash"));
  }
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("event");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash" && this.anonymous) {
      result.push("anonymous");
    }
    return result.join(" ");
  }
  static getTopicHash(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new EventFragment(_guard4, name, params, false);
    return fragment.topicHash;
  }
  static from(obj) {
    if (EventFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return EventFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid event fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("event", obj);
      const inputs = consumeParams(obj, true);
      const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
      consumeEoi(obj);
      return new EventFragment(_guard4, name, inputs, anonymous);
    }
    return new EventFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
  }
  static isFragment(value) {
    return value && value[internal] === EventFragmentInternal;
  }
}

class ConstructorFragment extends Fragment {
  payable;
  gas;
  constructor(guard, type, inputs, payable, gas) {
    super(guard, type, inputs);
    Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
    defineProperties(this, { payable, gas });
  }
  format(format) {
    assert(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
    if (format === "json") {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : undefined,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [`constructor${joinParams(format, this.inputs)}`];
    if (this.payable) {
      result.push("payable");
    }
    if (this.gas != null) {
      result.push(`@${this.gas.toString()}`);
    }
    return result.join(" ");
  }
  static from(obj) {
    if (ConstructorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return ConstructorFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid constuctor fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      consumeKeywords(obj, setify(["constructor"]));
      const inputs = consumeParams(obj);
      const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new ConstructorFragment(_guard4, "constructor", inputs, payable, gas);
    }
    return new ConstructorFragment(_guard4, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
  }
  static isFragment(value) {
    return value && value[internal] === ConstructorFragmentInternal;
  }
}

class FallbackFragment extends Fragment {
  payable;
  constructor(guard, inputs, payable) {
    super(guard, "fallback", inputs);
    Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
    defineProperties(this, { payable });
  }
  format(format) {
    const type = this.inputs.length === 0 ? "receive" : "fallback";
    if (format === "json") {
      const stateMutability = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type, stateMutability });
    }
    return `${type}()${this.payable ? " payable" : ""}`;
  }
  static from(obj) {
    if (FallbackFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return FallbackFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid fallback fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const errorObj = obj.toString();
      const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
      assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
      const type = obj.popKeyword(setify(["fallback", "receive"]));
      if (type === "receive") {
        const inputs2 = consumeParams(obj);
        assertArgument(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
        consumeKeywords(obj, setify(["payable"]));
        consumeEoi(obj);
        return new FallbackFragment(_guard4, [], true);
      }
      let inputs = consumeParams(obj);
      if (inputs.length) {
        assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
      } else {
        inputs = [ParamType.from("bytes")];
      }
      const mutability = consumeMutability(obj);
      assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        const outputs = consumeParams(obj);
        assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
      }
      consumeEoi(obj);
      return new FallbackFragment(_guard4, inputs, mutability === "payable");
    }
    if (obj.type === "receive") {
      return new FallbackFragment(_guard4, [], true);
    }
    if (obj.type === "fallback") {
      const inputs = [ParamType.from("bytes")];
      const payable = obj.stateMutability === "payable";
      return new FallbackFragment(_guard4, inputs, payable);
    }
    assertArgument(false, "invalid fallback description", "obj", obj);
  }
  static isFragment(value) {
    return value && value[internal] === FallbackFragmentInternal;
  }
}

class FunctionFragment extends NamedFragment {
  constant;
  outputs;
  stateMutability;
  payable;
  gas;
  constructor(guard, name, stateMutability, inputs, outputs, gas) {
    super(guard, "function", name, inputs);
    Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
    outputs = Object.freeze(outputs.slice());
    const constant = stateMutability === "view" || stateMutability === "pure";
    const payable = stateMutability === "payable";
    defineProperties(this, { constant, gas, outputs, payable, stateMutability });
  }
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
        payable: this.payable,
        gas: this.gas != null ? this.gas : undefined,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
        outputs: this.outputs.map((o2) => JSON.parse(o2.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("function");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash") {
      if (this.stateMutability !== "nonpayable") {
        result.push(this.stateMutability);
      }
      if (this.outputs && this.outputs.length) {
        result.push("returns");
        result.push(joinParams(format, this.outputs));
      }
      if (this.gas != null) {
        result.push(`@${this.gas.toString()}`);
      }
    }
    return result.join(" ");
  }
  static getSelector(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new FunctionFragment(_guard4, name, "view", params, [], null);
    return fragment.selector;
  }
  static from(obj) {
    if (FunctionFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return FunctionFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid function fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("function", obj);
      const inputs = consumeParams(obj);
      const mutability = consumeMutability(obj);
      let outputs = [];
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        outputs = consumeParams(obj);
      }
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new FunctionFragment(_guard4, name, mutability, inputs, outputs, gas);
    }
    let stateMutability = obj.stateMutability;
    if (stateMutability == null) {
      stateMutability = "payable";
      if (typeof obj.constant === "boolean") {
        stateMutability = "view";
        if (!obj.constant) {
          stateMutability = "payable";
          if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
      } else if (typeof obj.payable === "boolean" && !obj.payable) {
        stateMutability = "nonpayable";
      }
    }
    return new FunctionFragment(_guard4, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
  }
  static isFragment(value) {
    return value && value[internal] === FunctionFragmentInternal;
  }
}

class StructFragment extends NamedFragment {
  constructor(guard, name, inputs) {
    super(guard, "struct", name, inputs);
    Object.defineProperty(this, internal, { value: StructFragmentInternal });
  }
  format() {
    throw new Error("@TODO");
  }
  static from(obj) {
    if (typeof obj === "string") {
      try {
        return StructFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid struct fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("struct", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new StructFragment(_guard4, name, inputs);
    }
    return new StructFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  static isFragment(value) {
    return value && value[internal] === StructFragmentInternal;
  }
}

// node_modules/ethers/lib.esm/abi/abi-coder.js
var PanicReasons = new Map;
PanicReasons.set(0, "GENERIC_PANIC");
PanicReasons.set(1, "ASSERT_FALSE");
PanicReasons.set(17, "OVERFLOW");
PanicReasons.set(18, "DIVIDE_BY_ZERO");
PanicReasons.set(33, "ENUM_RANGE_ERROR");
PanicReasons.set(34, "BAD_STORAGE_DATA");
PanicReasons.set(49, "STACK_UNDERFLOW");
PanicReasons.set(50, "ARRAY_RANGE_ERROR");
PanicReasons.set(65, "OUT_OF_MEMORY");
PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var defaultCoder = null;
var defaultMaxInflation = 1024;
function getBuiltinCallException(action, tx, data, abiCoder) {
  let message = "missing revert data";
  let reason = null;
  const invocation = null;
  let revert = null;
  if (data) {
    message = "execution reverted";
    const bytes2 = getBytes(data);
    data = hexlify(data);
    if (bytes2.length === 0) {
      message += " (no data present; likely require(false) occurred";
      reason = "require(false)";
    } else if (bytes2.length % 32 !== 4) {
      message += " (could not decode reason; invalid data length)";
    } else if (hexlify(bytes2.slice(0, 4)) === "0x08c379a0") {
      try {
        reason = abiCoder.decode(["string"], bytes2.slice(4))[0];
        revert = {
          signature: "Error(string)",
          name: "Error",
          args: [reason]
        };
        message += `: ${JSON.stringify(reason)}`;
      } catch (error) {
        message += " (could not decode reason; invalid string data)";
      }
    } else if (hexlify(bytes2.slice(0, 4)) === "0x4e487b71") {
      try {
        const code = Number(abiCoder.decode(["uint256"], bytes2.slice(4))[0]);
        revert = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [code]
        };
        reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
        message += `: ${reason}`;
      } catch (error) {
        message += " (could not decode panic code)";
      }
    } else {
      message += " (unknown custom error)";
    }
  }
  const transaction = {
    to: tx.to ? getAddress(tx.to) : null,
    data: tx.data || "0x"
  };
  if (tx.from) {
    transaction.from = getAddress(tx.from);
  }
  return makeError(message, "CALL_EXCEPTION", {
    action,
    data,
    reason,
    transaction,
    invocation,
    revert
  });
}

class AbiCoder {
  #getCoder(param) {
    if (param.isArray()) {
      return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
    }
    if (param.isTuple()) {
      return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
    }
    switch (param.baseType) {
      case "address":
        return new AddressCoder(param.name);
      case "bool":
        return new BooleanCoder(param.name);
      case "string":
        return new StringCoder(param.name);
      case "bytes":
        return new BytesCoder(param.name);
      case "":
        return new NullCoder(param.name);
    }
    let match = param.type.match(paramTypeNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
      return new NumberCoder(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes);
    if (match) {
      let size = parseInt(match[1]);
      assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
      return new FixedBytesCoder(size, param.name);
    }
    assertArgument(false, "invalid type", "type", param.type);
  }
  getDefaultValue(types) {
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  encode(types, values) {
    assertArgumentCount(values.length, types.length, "types/values length mismatch");
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = new Writer;
    coder.encode(writer, values);
    return writer.data;
  }
  decode(types, data, loose) {
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(new Reader(data, loose, defaultMaxInflation));
  }
  static _setDefaultMaxInflation(value) {
    assertArgument(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
    defaultMaxInflation = value;
  }
  static defaultAbiCoder() {
    if (defaultCoder == null) {
      defaultCoder = new AbiCoder;
    }
    return defaultCoder;
  }
  static getBuiltinCallException(action, tx, data) {
    return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());
  }
}
// node_modules/ethers/lib.esm/abi/bytes32.js
function encodeBytes32String(text) {
  const bytes2 = toUtf8Bytes(text);
  if (bytes2.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  return zeroPadBytes(bytes2, 32);
}
function decodeBytes32String(_bytes) {
  const data = getBytes(_bytes, "bytes");
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  let length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  return toUtf8String(data.slice(0, length));
}
// node_modules/ethers/lib.esm/abi/interface.js
class LogDescription {
  fragment;
  name;
  signature;
  topic;
  args;
  constructor(fragment, topic, args) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      signature,
      topic,
      args
    });
  }
}

class TransactionDescription {
  fragment;
  name;
  args;
  signature;
  selector;
  value;
  constructor(fragment, selector, args, value) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector,
      value
    });
  }
}

class ErrorDescription {
  fragment;
  name;
  args;
  signature;
  selector;
  constructor(fragment, selector, args) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector
    });
  }
}

class Indexed {
  hash;
  _isIndexed;
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
  constructor(hash2) {
    defineProperties(this, { hash: hash2, _isIndexed: true });
  }
}
var PanicReasons2 = {
  "0": "generic panic",
  "1": "assert(false)",
  "17": "arithmetic overflow",
  "18": "division or modulo by zero",
  "33": "enum overflow",
  "34": "invalid encoded storage byte array accessed",
  "49": "out-of-bounds array access; popping on an empty array",
  "50": "out-of-bounds access of an array or bytesN",
  "65": "out of memory",
  "81": "uninitialized function"
};
var BuiltinErrors = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (message) => {
      return `reverted with reason string ${JSON.stringify(message)}`;
    }
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (code) => {
      let reason = "unknown panic code";
      if (code >= 0 && code <= 255 && PanicReasons2[code.toString()]) {
        reason = PanicReasons2[code.toString()];
      }
      return `reverted with panic code 0x${code.toString(16)} (${reason})`;
    }
  }
};

class Interface {
  fragments;
  deploy;
  fallback;
  receive;
  #errors;
  #events;
  #functions;
  #abiCoder;
  constructor(fragments) {
    let abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    this.#functions = new Map;
    this.#errors = new Map;
    this.#events = new Map;
    const frags = [];
    for (const a2 of abi) {
      try {
        frags.push(Fragment.from(a2));
      } catch (error) {
        console.log(`[Warning] Invalid Fragment ${JSON.stringify(a2)}:`, error.message);
      }
    }
    defineProperties(this, {
      fragments: Object.freeze(frags)
    });
    let fallback = null;
    let receive = false;
    this.#abiCoder = this.getAbiCoder();
    this.fragments.forEach((fragment, index) => {
      let bucket;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          defineProperties(this, { deploy: fragment });
          return;
        case "fallback":
          if (fragment.inputs.length === 0) {
            receive = true;
          } else {
            assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
            fallback = fragment;
            receive = fallback.payable;
          }
          return;
        case "function":
          bucket = this.#functions;
          break;
        case "event":
          bucket = this.#events;
          break;
        case "error":
          bucket = this.#errors;
          break;
        default:
          return;
      }
      const signature = fragment.format();
      if (bucket.has(signature)) {
        return;
      }
      bucket.set(signature, fragment);
    });
    if (!this.deploy) {
      defineProperties(this, {
        deploy: ConstructorFragment.from("constructor()")
      });
    }
    defineProperties(this, { fallback, receive });
  }
  format(minimal) {
    const format = minimal ? "minimal" : "full";
    const abi = this.fragments.map((f2) => f2.format(format));
    return abi;
  }
  formatJson() {
    const abi = this.fragments.map((f2) => f2.format("json"));
    return JSON.stringify(abi.map((j2) => JSON.parse(j2)));
  }
  getAbiCoder() {
    return AbiCoder.defaultAbiCoder();
  }
  #getFunction(key, values, forceUnique) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      for (const fragment of this.#functions.values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#functions) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        const lastValue = values.length > 0 ? values[values.length - 1] : null;
        let valueLength = values.length;
        let allowOptions = true;
        if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
          allowOptions = false;
          valueLength--;
        }
        for (let i = matching.length - 1;i >= 0; i--) {
          const inputs = matching[i].inputs.length;
          if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
            matching.splice(i, 1);
          }
        }
        for (let i = matching.length - 1;i >= 0; i--) {
          const inputs = matching[i].inputs;
          for (let j2 = 0;j2 < values.length; j2++) {
            if (!Typed.isTyped(values[j2])) {
              continue;
            }
            if (j2 >= inputs.length) {
              if (values[j2].type === "overrides") {
                continue;
              }
              matching.splice(i, 1);
              break;
            }
            if (values[j2].type !== inputs[j2].baseType) {
              matching.splice(i, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
        const lastArg = values[values.length - 1];
        if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
          matching.splice(0, 1);
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m2) => JSON.stringify(m2.format())).join(", ");
        assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = this.#functions.get(FunctionFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  }
  getFunctionName(key) {
    const fragment = this.#getFunction(key, null, false);
    assertArgument(fragment, "no matching function", "key", key);
    return fragment.name;
  }
  hasFunction(key) {
    return !!this.#getFunction(key, null, false);
  }
  getFunction(key, values) {
    return this.#getFunction(key, values || null, true);
  }
  forEachFunction(callback) {
    const names2 = Array.from(this.#functions.keys());
    names2.sort((a2, b4) => a2.localeCompare(b4));
    for (let i = 0;i < names2.length; i++) {
      const name = names2[i];
      callback(this.#functions.get(name), i);
    }
  }
  #getEvent(key, values, forceUnique) {
    if (isHexString(key)) {
      const eventTopic = key.toLowerCase();
      for (const fragment of this.#events.values()) {
        if (eventTopic === fragment.topicHash) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#events) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        for (let i = matching.length - 1;i >= 0; i--) {
          if (matching[i].inputs.length < values.length) {
            matching.splice(i, 1);
          }
        }
        for (let i = matching.length - 1;i >= 0; i--) {
          const inputs = matching[i].inputs;
          for (let j2 = 0;j2 < values.length; j2++) {
            if (!Typed.isTyped(values[j2])) {
              continue;
            }
            if (values[j2].type !== inputs[j2].baseType) {
              matching.splice(i, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m2) => JSON.stringify(m2.format())).join(", ");
        assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = this.#events.get(EventFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  }
  getEventName(key) {
    const fragment = this.#getEvent(key, null, false);
    assertArgument(fragment, "no matching event", "key", key);
    return fragment.name;
  }
  hasEvent(key) {
    return !!this.#getEvent(key, null, false);
  }
  getEvent(key, values) {
    return this.#getEvent(key, values || null, true);
  }
  forEachEvent(callback) {
    const names2 = Array.from(this.#events.keys());
    names2.sort((a2, b4) => a2.localeCompare(b4));
    for (let i = 0;i < names2.length; i++) {
      const name = names2[i];
      callback(this.#events.get(name), i);
    }
  }
  getError(key, values) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      if (BuiltinErrors[selector]) {
        return ErrorFragment.from(BuiltinErrors[selector].signature);
      }
      for (const fragment of this.#errors.values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#errors) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (matching.length === 0) {
        if (key === "Error") {
          return ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic") {
          return ErrorFragment.from("error Panic(uint256)");
        }
        return null;
      } else if (matching.length > 1) {
        const matchStr = matching.map((m2) => JSON.stringify(m2.format())).join(", ");
        assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
      }
      return matching[0];
    }
    key = ErrorFragment.from(key).format();
    if (key === "Error(string)") {
      return ErrorFragment.from("error Error(string)");
    }
    if (key === "Panic(uint256)") {
      return ErrorFragment.from("error Panic(uint256)");
    }
    const result = this.#errors.get(key);
    if (result) {
      return result;
    }
    return null;
  }
  forEachError(callback) {
    const names2 = Array.from(this.#errors.keys());
    names2.sort((a2, b4) => a2.localeCompare(b4));
    for (let i = 0;i < names2.length; i++) {
      const name = names2[i];
      callback(this.#errors.get(name), i);
    }
  }
  _decodeParams(params, data) {
    return this.#abiCoder.decode(params, data);
  }
  _encodeParams(params, values) {
    return this.#abiCoder.encode(params, values);
  }
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  decodeFunctionData(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  encodeFunctionData(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  decodeFunctionResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    let message = "invalid length for result data";
    const bytes2 = getBytesCopy(data);
    if (bytes2.length % 32 === 0) {
      try {
        return this.#abiCoder.decode(fragment.outputs, bytes2);
      } catch (error) {
        message = "could not decode result data";
      }
    }
    assert(false, message, "BAD_DATA", {
      value: hexlify(bytes2),
      info: { method: fragment.name, signature: fragment.format() }
    });
  }
  makeError(_data, tx) {
    const data = getBytes(_data, "data");
    const error = AbiCoder.getBuiltinCallException("call", tx, data);
    const customPrefix = "execution reverted (unknown custom error)";
    if (error.message.startsWith(customPrefix)) {
      const selector = hexlify(data.slice(0, 4));
      const ef = this.getError(selector);
      if (ef) {
        try {
          const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
          error.revert = {
            name: ef.name,
            signature: ef.format(),
            args
          };
          error.reason = error.revert.signature;
          error.message = `execution reverted: ${error.reason}`;
        } catch (e) {
          error.message = `execution reverted (coult not decode custom error)`;
        }
      }
    }
    const parsed = this.parseTransaction(tx);
    if (parsed) {
      error.invocation = {
        method: parsed.name,
        signature: parsed.signature,
        args: parsed.args
      };
    }
    return error;
  }
  encodeFunctionResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));
  }
  encodeFilterTopics(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
    const topics = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "bool" && typeof value === "boolean") {
        value = value ? "0x01" : "0x00";
      } else if (param.type.match(/^u?int/)) {
        value = toBeHex(value);
      } else if (param.type.match(/^bytes/)) {
        value = zeroPadBytes(value, 32);
      } else if (param.type === "address") {
        this.#abiCoder.encode(["address"], [value]);
      }
      return zeroPadValue(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      const param = fragment.inputs[index];
      if (!param.indexed) {
        assertArgument(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        assertArgument(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
    fragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(this.#abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this.#abiCoder.encode(dataTypes, dataValues),
      topics
    };
  }
  decodeEventLog(fragment, data, topics) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    if (topics != null && !fragment.anonymous) {
      const eventTopic = fragment.topicHash;
      assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
      topics = topics.slice(1);
    }
    const indexed = [];
    const nonIndexed = [];
    const dynamic = [];
    fragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, concat(topics)) : null;
    const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
    const values = [];
    const keys = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    fragment.inputs.forEach((param, index) => {
      let value = null;
      if (param.indexed) {
        if (resultIndexed == null) {
          value = new Indexed(null);
        } else if (dynamic[index]) {
          value = new Indexed(resultIndexed[indexedIndex++]);
        } else {
          try {
            value = resultIndexed[indexedIndex++];
          } catch (error) {
            value = error;
          }
        }
      } else {
        try {
          value = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          value = error;
        }
      }
      values.push(value);
      keys.push(param.name || null);
    });
    return Result.fromItems(values, keys);
  }
  parseTransaction(tx) {
    const data = getBytes(tx.data, "tx.data");
    const value = getBigInt(tx.value != null ? tx.value : 0, "tx.value");
    const fragment = this.getFunction(hexlify(data.slice(0, 4)));
    if (!fragment) {
      return null;
    }
    const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
    return new TransactionDescription(fragment, fragment.selector, args, value);
  }
  parseCallResult(data) {
    throw new Error("@TODO");
  }
  parseLog(log) {
    const fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
  }
  parseError(data) {
    const hexData = hexlify(data);
    const fragment = this.getError(dataSlice(hexData, 0, 4));
    if (!fragment) {
      return null;
    }
    const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));
    return new ErrorDescription(fragment, fragment.selector, args);
  }
  static from(value) {
    if (value instanceof Interface) {
      return value;
    }
    if (typeof value === "string") {
      return new Interface(JSON.parse(value));
    }
    if (typeof value.formatJson === "function") {
      return new Interface(value.formatJson());
    }
    if (typeof value.format === "function") {
      return new Interface(value.format("json"));
    }
    return new Interface(value);
  }
}
// node_modules/ethers/lib.esm/providers/provider.js
var BN_09 = BigInt(0);
function getValue2(value) {
  if (value == null) {
    return null;
  }
  return value;
}
function toJson(value) {
  if (value == null) {
    return null;
  }
  return value.toString();
}

class FeeData {
  gasPrice;
  maxFeePerGas;
  maxPriorityFeePerGas;
  constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
    defineProperties(this, {
      gasPrice: getValue2(gasPrice),
      maxFeePerGas: getValue2(maxFeePerGas),
      maxPriorityFeePerGas: getValue2(maxPriorityFeePerGas)
    });
  }
  toJSON() {
    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
    return {
      _type: "FeeData",
      gasPrice: toJson(gasPrice),
      maxFeePerGas: toJson(maxFeePerGas),
      maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
    };
  }
}
function copyRequest(req) {
  const result = {};
  if (req.to) {
    result.to = req.to;
  }
  if (req.from) {
    result.from = req.from;
  }
  if (req.data) {
    result.data = hexlify(req.data);
  }
  const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const key of bigIntKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getBigInt(req[key], `request.${key}`);
  }
  const numberKeys = "type,nonce".split(/,/);
  for (const key of numberKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getNumber(req[key], `request.${key}`);
  }
  if (req.accessList) {
    result.accessList = accessListify(req.accessList);
  }
  if (req.authorizationList) {
    result.authorizationList = req.authorizationList.slice();
  }
  if ("blockTag" in req) {
    result.blockTag = req.blockTag;
  }
  if ("enableCcipRead" in req) {
    result.enableCcipRead = !!req.enableCcipRead;
  }
  if ("customData" in req) {
    result.customData = req.customData;
  }
  if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
    result.blobVersionedHashes = req.blobVersionedHashes.slice();
  }
  if ("kzg" in req) {
    result.kzg = req.kzg;
  }
  if ("blobs" in req && req.blobs) {
    result.blobs = req.blobs.map((b4) => {
      if (isBytesLike(b4)) {
        return hexlify(b4);
      }
      return Object.assign({}, b4);
    });
  }
  return result;
}

class Block {
  provider;
  number;
  hash;
  timestamp;
  parentHash;
  parentBeaconBlockRoot;
  nonce;
  difficulty;
  gasLimit;
  gasUsed;
  stateRoot;
  receiptsRoot;
  blobGasUsed;
  excessBlobGas;
  miner;
  prevRandao;
  extraData;
  baseFeePerGas;
  #transactions;
  constructor(block, provider) {
    this.#transactions = block.transactions.map((tx) => {
      if (typeof tx !== "string") {
        return new TransactionResponse(tx, provider);
      }
      return tx;
    });
    defineProperties(this, {
      provider,
      hash: getValue2(block.hash),
      number: block.number,
      timestamp: block.timestamp,
      parentHash: block.parentHash,
      parentBeaconBlockRoot: block.parentBeaconBlockRoot,
      nonce: block.nonce,
      difficulty: block.difficulty,
      gasLimit: block.gasLimit,
      gasUsed: block.gasUsed,
      blobGasUsed: block.blobGasUsed,
      excessBlobGas: block.excessBlobGas,
      miner: block.miner,
      prevRandao: getValue2(block.prevRandao),
      extraData: block.extraData,
      baseFeePerGas: getValue2(block.baseFeePerGas),
      stateRoot: block.stateRoot,
      receiptsRoot: block.receiptsRoot
    });
  }
  get transactions() {
    return this.#transactions.map((tx) => {
      if (typeof tx === "string") {
        return tx;
      }
      return tx.hash;
    });
  }
  get prefetchedTransactions() {
    const txs = this.#transactions.slice();
    if (txs.length === 0) {
      return [];
    }
    assert(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
      operation: "transactionResponses()"
    });
    return txs;
  }
  toJSON() {
    const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash2, miner, prevRandao, nonce, number: number2, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
    return {
      _type: "Block",
      baseFeePerGas: toJson(baseFeePerGas),
      difficulty: toJson(difficulty),
      extraData,
      gasLimit: toJson(gasLimit),
      gasUsed: toJson(gasUsed),
      blobGasUsed: toJson(this.blobGasUsed),
      excessBlobGas: toJson(this.excessBlobGas),
      hash: hash2,
      miner,
      prevRandao,
      nonce,
      number: number2,
      parentHash,
      timestamp,
      parentBeaconBlockRoot,
      stateRoot,
      receiptsRoot,
      transactions
    };
  }
  [Symbol.iterator]() {
    let index = 0;
    const txs = this.transactions;
    return {
      next: () => {
        if (index < this.length) {
          return {
            value: txs[index++],
            done: false
          };
        }
        return { value: undefined, done: true };
      }
    };
  }
  get length() {
    return this.#transactions.length;
  }
  get date() {
    if (this.timestamp == null) {
      return null;
    }
    return new Date(this.timestamp * 1000);
  }
  async getTransaction(indexOrHash) {
    let tx = undefined;
    if (typeof indexOrHash === "number") {
      tx = this.#transactions[indexOrHash];
    } else {
      const hash2 = indexOrHash.toLowerCase();
      for (const v3 of this.#transactions) {
        if (typeof v3 === "string") {
          if (v3 !== hash2) {
            continue;
          }
          tx = v3;
          break;
        } else {
          if (v3.hash !== hash2) {
            continue;
          }
          tx = v3;
          break;
        }
      }
    }
    if (tx == null) {
      throw new Error("no such tx");
    }
    if (typeof tx === "string") {
      return await this.provider.getTransaction(tx);
    } else {
      return tx;
    }
  }
  getPrefetchedTransaction(indexOrHash) {
    const txs = this.prefetchedTransactions;
    if (typeof indexOrHash === "number") {
      return txs[indexOrHash];
    }
    indexOrHash = indexOrHash.toLowerCase();
    for (const tx of txs) {
      if (tx.hash === indexOrHash) {
        return tx;
      }
    }
    assertArgument(false, "no matching transaction", "indexOrHash", indexOrHash);
  }
  isMined() {
    return !!this.hash;
  }
  isLondon() {
    return !!this.baseFeePerGas;
  }
  orphanedEvent() {
    if (!this.isMined()) {
      throw new Error("");
    }
    return createOrphanedBlockFilter(this);
  }
}

class Log {
  provider;
  transactionHash;
  blockHash;
  blockNumber;
  removed;
  address;
  data;
  topics;
  index;
  transactionIndex;
  constructor(log, provider) {
    this.provider = provider;
    const topics = Object.freeze(log.topics.slice());
    defineProperties(this, {
      transactionHash: log.transactionHash,
      blockHash: log.blockHash,
      blockNumber: log.blockNumber,
      removed: log.removed,
      address: log.address,
      data: log.data,
      topics,
      index: log.index,
      transactionIndex: log.transactionIndex
    });
  }
  toJSON() {
    const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
    return {
      _type: "log",
      address,
      blockHash,
      blockNumber,
      data,
      index,
      removed,
      topics,
      transactionHash,
      transactionIndex
    };
  }
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    assert(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
    return block;
  }
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.transactionHash);
    assert(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
    return tx;
  }
  async getTransactionReceipt() {
    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
    assert(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
    return receipt;
  }
  removedEvent() {
    return createRemovedLogFilter(this);
  }
}

class TransactionReceipt {
  provider;
  to;
  from;
  contractAddress;
  hash;
  index;
  blockHash;
  blockNumber;
  logsBloom;
  gasUsed;
  blobGasUsed;
  cumulativeGasUsed;
  gasPrice;
  blobGasPrice;
  type;
  status;
  root;
  #logs;
  constructor(tx, provider) {
    this.#logs = Object.freeze(tx.logs.map((log) => {
      return new Log(log, provider);
    }));
    let gasPrice = BN_09;
    if (tx.effectiveGasPrice != null) {
      gasPrice = tx.effectiveGasPrice;
    } else if (tx.gasPrice != null) {
      gasPrice = tx.gasPrice;
    }
    defineProperties(this, {
      provider,
      to: tx.to,
      from: tx.from,
      contractAddress: tx.contractAddress,
      hash: tx.hash,
      index: tx.index,
      blockHash: tx.blockHash,
      blockNumber: tx.blockNumber,
      logsBloom: tx.logsBloom,
      gasUsed: tx.gasUsed,
      cumulativeGasUsed: tx.cumulativeGasUsed,
      blobGasUsed: tx.blobGasUsed,
      gasPrice,
      blobGasPrice: tx.blobGasPrice,
      type: tx.type,
      status: tx.status,
      root: tx.root
    });
  }
  get logs() {
    return this.#logs;
  }
  toJSON() {
    const {
      to,
      from,
      contractAddress,
      hash: hash2,
      index,
      blockHash,
      blockNumber,
      logsBloom,
      logs,
      status,
      root
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash,
      blockNumber,
      contractAddress,
      cumulativeGasUsed: toJson(this.cumulativeGasUsed),
      from,
      gasPrice: toJson(this.gasPrice),
      blobGasUsed: toJson(this.blobGasUsed),
      blobGasPrice: toJson(this.blobGasPrice),
      gasUsed: toJson(this.gasUsed),
      hash: hash2,
      index,
      logs,
      logsBloom,
      root,
      status,
      to
    };
  }
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let index = 0;
    return {
      next: () => {
        if (index < this.length) {
          return { value: this.logs[index++], done: false };
        }
        return { value: undefined, done: true };
      }
    };
  }
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.hash);
    if (tx == null) {
      throw new Error("TODO");
    }
    return tx;
  }
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  removedEvent() {
    return createRemovedTransactionFilter(this);
  }
  reorderedEvent(other) {
    assert(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
    return createReorderedTransactionFilter(this, other);
  }
}

class TransactionResponse {
  provider;
  blockNumber;
  blockHash;
  index;
  hash;
  type;
  to;
  from;
  nonce;
  gasLimit;
  gasPrice;
  maxPriorityFeePerGas;
  maxFeePerGas;
  maxFeePerBlobGas;
  data;
  value;
  chainId;
  signature;
  accessList;
  blobVersionedHashes;
  authorizationList;
  #startBlock;
  constructor(tx, provider) {
    this.provider = provider;
    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
    this.blockHash = tx.blockHash != null ? tx.blockHash : null;
    this.hash = tx.hash;
    this.index = tx.index;
    this.type = tx.type;
    this.from = tx.from;
    this.to = tx.to || null;
    this.gasLimit = tx.gasLimit;
    this.nonce = tx.nonce;
    this.data = tx.data;
    this.value = tx.value;
    this.gasPrice = tx.gasPrice;
    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
    this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
    this.chainId = tx.chainId;
    this.signature = tx.signature;
    this.accessList = tx.accessList != null ? tx.accessList : null;
    this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
    this.authorizationList = tx.authorizationList != null ? tx.authorizationList : null;
    this.#startBlock = -1;
  }
  toJSON() {
    const { blockNumber, blockHash, index, hash: hash2, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
    return {
      _type: "TransactionResponse",
      accessList,
      blockNumber,
      blockHash,
      blobVersionedHashes,
      chainId: toJson(this.chainId),
      data,
      from,
      gasLimit: toJson(this.gasLimit),
      gasPrice: toJson(this.gasPrice),
      hash: hash2,
      maxFeePerGas: toJson(this.maxFeePerGas),
      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
      maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
      nonce,
      signature,
      to,
      index,
      type,
      value: toJson(this.value)
    };
  }
  async getBlock() {
    let blockNumber = this.blockNumber;
    if (blockNumber == null) {
      const tx = await this.getTransaction();
      if (tx) {
        blockNumber = tx.blockNumber;
      }
    }
    if (blockNumber == null) {
      return null;
    }
    const block = this.provider.getBlock(blockNumber);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx, blockNumber: blockNumber2 } = await resolveProperties({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      if (tx == null || tx.blockNumber == null) {
        return 0;
      }
      return blockNumber2 - tx.blockNumber + 1;
    }
    const blockNumber = await this.provider.getBlockNumber();
    return blockNumber - this.blockNumber + 1;
  }
  async wait(_confirms, _timeout) {
    const confirms = _confirms == null ? 1 : _confirms;
    const timeout = _timeout == null ? 0 : _timeout;
    let startBlock = this.#startBlock;
    let nextScan = -1;
    let stopScanning = startBlock === -1 ? true : false;
    const checkReplacement = async () => {
      if (stopScanning) {
        return null;
      }
      const { blockNumber, nonce } = await resolveProperties({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (nonce < this.nonce) {
        startBlock = blockNumber;
        return;
      }
      if (stopScanning) {
        return null;
      }
      const mined = await this.getTransaction();
      if (mined && mined.blockNumber != null) {
        return;
      }
      if (nextScan === -1) {
        nextScan = startBlock - 3;
        if (nextScan < this.#startBlock) {
          nextScan = this.#startBlock;
        }
      }
      while (nextScan <= blockNumber) {
        if (stopScanning) {
          return null;
        }
        const block = await this.provider.getBlock(nextScan, true);
        if (block == null) {
          return;
        }
        for (const hash2 of block) {
          if (hash2 === this.hash) {
            return;
          }
        }
        for (let i = 0;i < block.length; i++) {
          const tx = await block.getTransaction(i);
          if (tx.from === this.from && tx.nonce === this.nonce) {
            if (stopScanning) {
              return null;
            }
            const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
            if (receipt2 == null) {
              return;
            }
            if (blockNumber - receipt2.blockNumber + 1 < confirms) {
              return;
            }
            let reason = "replaced";
            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
              reason = "repriced";
            } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_09) {
              reason = "cancelled";
            }
            assert(false, "transaction was replaced", "TRANSACTION_REPLACED", {
              cancelled: reason === "replaced" || reason === "cancelled",
              reason,
              replacement: tx.replaceableTransaction(startBlock),
              hash: tx.hash,
              receipt: receipt2
            });
          }
        }
        nextScan++;
      }
      return;
    };
    const checkReceipt = (receipt2) => {
      if (receipt2 == null || receipt2.status !== 0) {
        return receipt2;
      }
      assert(false, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: receipt2.to,
          from: receipt2.from,
          data: ""
        },
        receipt: receipt2
      });
    };
    const receipt = await this.provider.getTransactionReceipt(this.hash);
    if (confirms === 0) {
      return checkReceipt(receipt);
    }
    if (receipt) {
      if (confirms === 1 || await receipt.confirmations() >= confirms) {
        return checkReceipt(receipt);
      }
    } else {
      await checkReplacement();
      if (confirms === 0) {
        return null;
      }
    }
    const waiter = new Promise((resolve, reject) => {
      const cancellers = [];
      const cancel = () => {
        cancellers.forEach((c) => c());
      };
      cancellers.push(() => {
        stopScanning = true;
      });
      if (timeout > 0) {
        const timer = setTimeout(() => {
          cancel();
          reject(makeError("wait for transaction timeout", "TIMEOUT"));
        }, timeout);
        cancellers.push(() => {
          clearTimeout(timer);
        });
      }
      const txListener = async (receipt2) => {
        if (await receipt2.confirmations() >= confirms) {
          cancel();
          try {
            resolve(checkReceipt(receipt2));
          } catch (error) {
            reject(error);
          }
        }
      };
      cancellers.push(() => {
        this.provider.off(this.hash, txListener);
      });
      this.provider.on(this.hash, txListener);
      if (startBlock >= 0) {
        const replaceListener = async () => {
          try {
            await checkReplacement();
          } catch (error) {
            if (isError(error, "TRANSACTION_REPLACED")) {
              cancel();
              reject(error);
              return;
            }
          }
          if (!stopScanning) {
            this.provider.once("block", replaceListener);
          }
        };
        cancellers.push(() => {
          this.provider.off("block", replaceListener);
        });
        this.provider.once("block", replaceListener);
      }
    });
    return await waiter;
  }
  isMined() {
    return this.blockHash != null;
  }
  isLegacy() {
    return this.type === 0;
  }
  isBerlin() {
    return this.type === 1;
  }
  isLondon() {
    return this.type === 2;
  }
  isCancun() {
    return this.type === 3;
  }
  removedEvent() {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createRemovedTransactionFilter(this);
  }
  reorderedEvent(other) {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    assert(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createReorderedTransactionFilter(this, other);
  }
  replaceableTransaction(startBlock) {
    assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
    const tx = new TransactionResponse(this, this.provider);
    tx.#startBlock = startBlock;
    return tx;
  }
}
function createOrphanedBlockFilter(block) {
  return { orphan: "drop-block", hash: block.hash, number: block.number };
}
function createReorderedTransactionFilter(tx, other) {
  return { orphan: "reorder-transaction", tx, other };
}
function createRemovedTransactionFilter(tx) {
  return { orphan: "drop-transaction", tx };
}
function createRemovedLogFilter(log) {
  return { orphan: "drop-log", log: {
    transactionHash: log.transactionHash,
    blockHash: log.blockHash,
    blockNumber: log.blockNumber,
    address: log.address,
    data: log.data,
    topics: Object.freeze(log.topics.slice()),
    index: log.index
  } };
}

// node_modules/ethers/lib.esm/contract/wrappers.js
class EventLog extends Log {
  interface;
  fragment;
  args;
  constructor(log, iface, fragment) {
    super(log, log.provider);
    const args = iface.decodeEventLog(fragment, log.data, log.topics);
    defineProperties(this, { args, fragment, interface: iface });
  }
  get eventName() {
    return this.fragment.name;
  }
  get eventSignature() {
    return this.fragment.format();
  }
}

class UndecodedEventLog extends Log {
  error;
  constructor(log, error) {
    super(log, log.provider);
    defineProperties(this, { error });
  }
}

class ContractTransactionReceipt extends TransactionReceipt {
  #iface;
  constructor(iface, provider, tx) {
    super(tx, provider);
    this.#iface = iface;
  }
  get logs() {
    return super.logs.map((log) => {
      const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
      if (fragment) {
        try {
          return new EventLog(log, this.#iface, fragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return log;
    });
  }
}

class ContractTransactionResponse extends TransactionResponse {
  #iface;
  constructor(iface, provider, tx) {
    super(tx, provider);
    this.#iface = iface;
  }
  async wait(confirms, timeout) {
    const receipt = await super.wait(confirms, timeout);
    if (receipt == null) {
      return null;
    }
    return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
  }
}

class ContractUnknownEventPayload extends EventPayload {
  log;
  constructor(contract, listener, filter, log) {
    super(contract, listener, filter);
    defineProperties(this, { log });
  }
  async getBlock() {
    return await this.log.getBlock();
  }
  async getTransaction() {
    return await this.log.getTransaction();
  }
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
}

class ContractEventPayload extends ContractUnknownEventPayload {
  constructor(contract, listener, filter, fragment, _log) {
    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
    defineProperties(this, { args, fragment });
  }
  get eventName() {
    return this.fragment.name;
  }
  get eventSignature() {
    return this.fragment.format();
  }
}

// node_modules/ethers/lib.esm/contract/contract.js
var BN_010 = BigInt(0);
function canCall(value) {
  return value && typeof value.call === "function";
}
function canEstimate(value) {
  return value && typeof value.estimateGas === "function";
}
function canResolve(value) {
  return value && typeof value.resolveName === "function";
}
function canSend(value) {
  return value && typeof value.sendTransaction === "function";
}
function getResolver(value) {
  if (value != null) {
    if (canResolve(value)) {
      return value;
    }
    if (value.provider) {
      return value.provider;
    }
  }
  return;
}

class PreparedTopicFilter {
  #filter;
  fragment;
  constructor(contract, fragment, args) {
    defineProperties(this, { fragment });
    if (fragment.inputs.length < args.length) {
      throw new Error("too many arguments");
    }
    const runner = getRunner(contract.runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    this.#filter = async function() {
      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
        const arg = args[index];
        if (arg == null) {
          return null;
        }
        return param.walkAsync(args[index], (type, value) => {
          if (type === "address") {
            if (Array.isArray(value)) {
              return Promise.all(value.map((v3) => resolveAddress(v3, resolver)));
            }
            return resolveAddress(value, resolver);
          }
          return value;
        });
      }));
      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
    }();
  }
  getTopicFilter() {
    return this.#filter;
  }
}
function getRunner(value, feature) {
  if (value == null) {
    return null;
  }
  if (typeof value[feature] === "function") {
    return value;
  }
  if (value.provider && typeof value.provider[feature] === "function") {
    return value.provider;
  }
  return null;
}
function getProvider(value) {
  if (value == null) {
    return null;
  }
  return value.provider || null;
}
async function copyOverrides(arg, allowed) {
  const _overrides = Typed.dereference(arg, "overrides");
  assertArgument(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
  const overrides = copyRequest(_overrides);
  assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
  assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
  if (overrides.from) {
    overrides.from = overrides.from;
  }
  return overrides;
}
async function resolveArgs(_runner, inputs, args) {
  const runner = getRunner(_runner, "resolveName");
  const resolver = canResolve(runner) ? runner : null;
  return await Promise.all(inputs.map((param, index) => {
    return param.walkAsync(args[index], (type, value) => {
      value = Typed.dereference(value, type);
      if (type === "address") {
        return resolveAddress(value, resolver);
      }
      return value;
    });
  }));
}
function buildWrappedFallback(contract) {
  const populateTransaction = async function(overrides) {
    const tx = await copyOverrides(overrides, ["data"]);
    tx.to = await contract.getAddress();
    if (tx.from) {
      tx.from = await resolveAddress(tx.from, getResolver(contract.runner));
    }
    const iface = contract.interface;
    const noValue = getBigInt(tx.value || BN_010, "overrides.value") === BN_010;
    const noData = (tx.data || "0x") === "0x";
    if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
      assertArgument(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
    }
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    const payable = iface.receive || iface.fallback && iface.fallback.payable;
    assertArgument(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    return tx;
  };
  const staticCall = async function(overrides) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(overrides);
    try {
      return await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
  };
  const send = async function(overrides) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(overrides));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(overrides) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(overrides));
  };
  const method = async (overrides) => {
    return await send(overrides);
  };
  defineProperties(method, {
    _contract: contract,
    estimateGas,
    populateTransaction,
    send,
    staticCall
  });
  return method;
}
function buildWrappedMethod(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getFunction(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const populateTransaction = async function(...args) {
    const fragment = getFragment(...args);
    let overrides = {};
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
      if (overrides.from) {
        overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));
      }
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    }
    const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
    return Object.assign({}, overrides, await resolveProperties({
      to: contract.getAddress(),
      data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
    }));
  };
  const staticCall = async function(...args) {
    const result = await staticCallResult(...args);
    if (result.length === 1) {
      return result[0];
    }
    return result;
  };
  const send = async function(...args) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(...args));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(...args) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(...args));
  };
  const staticCallResult = async function(...args) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(...args);
    let result = "0x";
    try {
      result = await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
    const fragment = getFragment(...args);
    return contract.interface.decodeFunctionResult(fragment, result);
  };
  const method = async (...args) => {
    const fragment = getFragment(...args);
    if (fragment.constant) {
      return await staticCall(...args);
    }
    return await send(...args);
  };
  defineProperties(method, {
    name: contract.interface.getFunctionName(key),
    _contract: contract,
    _key: key,
    getFragment,
    estimateGas,
    populateTransaction,
    send,
    staticCall,
    staticCallResult
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getFunction(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
function buildWrappedEvent(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getEvent(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const method = function(...args) {
    return new PreparedTopicFilter(contract, getFragment(...args), args);
  };
  defineProperties(method, {
    name: contract.interface.getEventName(key),
    _contract: contract,
    _key: key,
    getFragment
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getEvent(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
var internal2 = Symbol.for("_ethersInternal_contract");
var internalValues = new WeakMap;
function setInternal(contract, values) {
  internalValues.set(contract[internal2], values);
}
function getInternal(contract) {
  return internalValues.get(contract[internal2]);
}
function isDeferred(value) {
  return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
}
async function getSubInfo(contract, event) {
  let topics;
  let fragment = null;
  if (Array.isArray(event)) {
    const topicHashify = function(name) {
      if (isHexString(name, 32)) {
        return name;
      }
      const fragment2 = contract.interface.getEvent(name);
      assertArgument(fragment2, "unknown fragment", "name", name);
      return fragment2.topicHash;
    };
    topics = event.map((e) => {
      if (e == null) {
        return null;
      }
      if (Array.isArray(e)) {
        return e.map(topicHashify);
      }
      return topicHashify(e);
    });
  } else if (event === "*") {
    topics = [null];
  } else if (typeof event === "string") {
    if (isHexString(event, 32)) {
      topics = [event];
    } else {
      fragment = contract.interface.getEvent(event);
      assertArgument(fragment, "unknown fragment", "event", event);
      topics = [fragment.topicHash];
    }
  } else if (isDeferred(event)) {
    topics = await event.getTopicFilter();
  } else if ("fragment" in event) {
    fragment = event.fragment;
    topics = [fragment.topicHash];
  } else {
    assertArgument(false, "unknown event name", "event", event);
  }
  topics = topics.map((t) => {
    if (t == null) {
      return null;
    }
    if (Array.isArray(t)) {
      const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
      if (items.length === 1) {
        return items[0];
      }
      items.sort();
      return items;
    }
    return t.toLowerCase();
  });
  const tag = topics.map((t) => {
    if (t == null) {
      return "null";
    }
    if (Array.isArray(t)) {
      return t.join("|");
    }
    return t;
  }).join("&");
  return { fragment, tag, topics };
}
async function hasSub(contract, event) {
  const { subs } = getInternal(contract);
  return subs.get((await getSubInfo(contract, event)).tag) || null;
}
async function getSub(contract, operation, event) {
  const provider = getProvider(contract.runner);
  assert(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
  const { fragment, tag, topics } = await getSubInfo(contract, event);
  const { addr, subs } = getInternal(contract);
  let sub = subs.get(tag);
  if (!sub) {
    const address = addr ? addr : contract;
    const filter = { address, topics };
    const listener = (log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = contract.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        const _foundFragment = foundFragment;
        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
        emit(contract, event, args, (listener2) => {
          return new ContractEventPayload(contract, listener2, event, _foundFragment, log);
        });
      } else {
        emit(contract, event, [], (listener2) => {
          return new ContractUnknownEventPayload(contract, listener2, event, log);
        });
      }
    };
    let starting = [];
    const start = () => {
      if (starting.length) {
        return;
      }
      starting.push(provider.on(filter, listener));
    };
    const stop = async () => {
      if (starting.length == 0) {
        return;
      }
      let started = starting;
      starting = [];
      await Promise.all(started);
      provider.off(filter, listener);
    };
    sub = { tag, listeners: [], start, stop };
    subs.set(tag, sub);
  }
  return sub;
}
var lastEmit = Promise.resolve();
async function _emit(contract, event, args, payloadFunc) {
  await lastEmit;
  const sub = await hasSub(contract, event);
  if (!sub) {
    return false;
  }
  const count = sub.listeners.length;
  sub.listeners = sub.listeners.filter(({ listener, once }) => {
    const passArgs = Array.from(args);
    if (payloadFunc) {
      passArgs.push(payloadFunc(once ? null : listener));
    }
    try {
      listener.call(contract, ...passArgs);
    } catch (error) {
    }
    return !once;
  });
  if (sub.listeners.length === 0) {
    sub.stop();
    getInternal(contract).subs.delete(sub.tag);
  }
  return count > 0;
}
async function emit(contract, event, args, payloadFunc) {
  try {
    await lastEmit;
  } catch (error) {
  }
  const resultPromise = _emit(contract, event, args, payloadFunc);
  lastEmit = resultPromise;
  return await resultPromise;
}
var passProperties2 = ["then"];

class BaseContract {
  target;
  interface;
  runner;
  filters;
  [internal2];
  fallback;
  constructor(target, abi, runner, _deployTx) {
    assertArgument(typeof target === "string" || isAddressable(target), "invalid value for Contract target", "target", target);
    if (runner == null) {
      runner = null;
    }
    const iface = Interface.from(abi);
    defineProperties(this, { target, runner, interface: iface });
    Object.defineProperty(this, internal2, { value: {} });
    let addrPromise;
    let addr = null;
    let deployTx = null;
    if (_deployTx) {
      const provider = getProvider(runner);
      deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
    }
    let subs = new Map;
    if (typeof target === "string") {
      if (isHexString(target)) {
        addr = target;
        addrPromise = Promise.resolve(target);
      } else {
        const resolver = getRunner(runner, "resolveName");
        if (!canResolve(resolver)) {
          throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        }
        addrPromise = resolver.resolveName(target).then((addr2) => {
          if (addr2 == null) {
            throw makeError("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: target
            });
          }
          getInternal(this).addr = addr2;
          return addr2;
        });
      }
    } else {
      addrPromise = target.getAddress().then((addr2) => {
        if (addr2 == null) {
          throw new Error("TODO");
        }
        getInternal(this).addr = addr2;
        return addr2;
      });
    }
    setInternal(this, { addrPromise, addr, deployTx, subs });
    const filters = new Proxy({}, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return this.getEvent(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return;
      },
      has: (target2, prop) => {
        if (passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
      }
    });
    defineProperties(this, { filters });
    defineProperties(this, {
      fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
    });
    return new Proxy(this, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return target2.getFunction(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return;
      },
      has: (target2, prop) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return target2.interface.hasFunction(prop);
      }
    });
  }
  connect(runner) {
    return new BaseContract(this.target, this.interface, runner);
  }
  attach(target) {
    return new BaseContract(target, this.interface, this.runner);
  }
  async getAddress() {
    return await getInternal(this).addrPromise;
  }
  async getDeployedCode() {
    const provider = getProvider(this.runner);
    assert(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const code = await provider.getCode(await this.getAddress());
    if (code === "0x") {
      return null;
    }
    return code;
  }
  async waitForDeployment() {
    const deployTx = this.deploymentTransaction();
    if (deployTx) {
      await deployTx.wait();
      return this;
    }
    const code = await this.getDeployedCode();
    if (code != null) {
      return this;
    }
    const provider = getProvider(this.runner);
    assert(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
    return new Promise((resolve, reject) => {
      const checkCode = async () => {
        try {
          const code2 = await this.getDeployedCode();
          if (code2 != null) {
            return resolve(this);
          }
          provider.once("block", checkCode);
        } catch (error) {
          reject(error);
        }
      };
      checkCode();
    });
  }
  deploymentTransaction() {
    return getInternal(this).deployTx;
  }
  getFunction(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    const func = buildWrappedMethod(this, key);
    return func;
  }
  getEvent(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    return buildWrappedEvent(this, key);
  }
  async queryTransaction(hash2) {
    throw new Error("@TODO");
  }
  async queryFilter(event, fromBlock, toBlock) {
    if (fromBlock == null) {
      fromBlock = 0;
    }
    if (toBlock == null) {
      toBlock = "latest";
    }
    const { addr, addrPromise } = getInternal(this);
    const address = addr ? addr : await addrPromise;
    const { fragment, topics } = await getSubInfo(this, event);
    const filter = { address, topics, fromBlock, toBlock };
    const provider = getProvider(this.runner);
    assert(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
    return (await provider.getLogs(filter)).map((log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = this.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        try {
          return new EventLog(log, this.interface, foundFragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return new Log(log, provider);
    });
  }
  async on(event, listener) {
    const sub = await getSub(this, "on", event);
    sub.listeners.push({ listener, once: false });
    sub.start();
    return this;
  }
  async once(event, listener) {
    const sub = await getSub(this, "once", event);
    sub.listeners.push({ listener, once: true });
    sub.start();
    return this;
  }
  async emit(event, ...args) {
    return await emit(this, event, args, null);
  }
  async listenerCount(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return 0;
      }
      return sub.listeners.length;
    }
    const { subs } = getInternal(this);
    let total = 0;
    for (const { listeners } of subs.values()) {
      total += listeners.length;
    }
    return total;
  }
  async listeners(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return [];
      }
      return sub.listeners.map(({ listener }) => listener);
    }
    const { subs } = getInternal(this);
    let result = [];
    for (const { listeners } of subs.values()) {
      result = result.concat(listeners.map(({ listener }) => listener));
    }
    return result;
  }
  async off(event, listener) {
    const sub = await hasSub(this, event);
    if (!sub) {
      return this;
    }
    if (listener) {
      const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
      if (index >= 0) {
        sub.listeners.splice(index, 1);
      }
    }
    if (listener == null || sub.listeners.length === 0) {
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    }
    return this;
  }
  async removeAllListeners(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return this;
      }
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    } else {
      const { subs } = getInternal(this);
      for (const { tag, stop } of subs.values()) {
        stop();
        subs.delete(tag);
      }
    }
    return this;
  }
  async addListener(event, listener) {
    return await this.on(event, listener);
  }
  async removeListener(event, listener) {
    return await this.off(event, listener);
  }
  static buildClass(abi) {

    class CustomContract extends BaseContract {
      constructor(address, runner = null) {
        super(address, abi, runner);
      }
    }
    return CustomContract;
  }
  static from(target, abi, runner) {
    if (runner == null) {
      runner = null;
    }
    const contract = new this(target, abi, runner);
    return contract;
  }
}
function _ContractBase() {
  return BaseContract;
}

class Contract extends _ContractBase() {
}
// node_modules/ethers/lib.esm/contract/factory.js
class ContractFactory {
  interface;
  bytecode;
  runner;
  constructor(abi, bytecode, runner) {
    const iface = Interface.from(abi);
    if (bytecode instanceof Uint8Array) {
      bytecode = hexlify(getBytes(bytecode));
    } else {
      if (typeof bytecode === "object") {
        bytecode = bytecode.object;
      }
      if (!bytecode.startsWith("0x")) {
        bytecode = "0x" + bytecode;
      }
      bytecode = hexlify(getBytes(bytecode));
    }
    defineProperties(this, {
      bytecode,
      interface: iface,
      runner: runner || null
    });
  }
  attach(target) {
    return new BaseContract(target, this.interface, this.runner);
  }
  async getDeployTransaction(...args) {
    let overrides = {};
    const fragment = this.interface.deploy;
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("incorrect number of arguments to constructor");
    }
    const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);
    const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
    return Object.assign({}, overrides, { data });
  }
  async deploy(...args) {
    const tx = await this.getDeployTransaction(...args);
    assert(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
      operation: "sendTransaction"
    });
    const sentTx = await this.runner.sendTransaction(tx);
    const address = getCreateAddress(sentTx);
    return new BaseContract(address, this.interface, this.runner, sentTx);
  }
  connect(runner) {
    return new ContractFactory(this.interface, this.bytecode, runner);
  }
  static fromSolidity(output2, runner) {
    assertArgument(output2 != null, "bad compiler output", "output", output2);
    if (typeof output2 === "string") {
      output2 = JSON.parse(output2);
    }
    const abi = output2.abi;
    let bytecode = "";
    if (output2.bytecode) {
      bytecode = output2.bytecode;
    } else if (output2.evm && output2.evm.bytecode) {
      bytecode = output2.evm.bytecode;
    }
    return new this(abi, bytecode, runner);
  }
}
// node_modules/ethers/lib.esm/providers/ens-resolver.js
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    assertArgument(false, "unsupported IPFS format", "link", link);
  }
  return `https://gateway.ipfs.io/ipfs/${link}`;
}

class MulticoinProviderPlugin {
  name;
  constructor(name) {
    defineProperties(this, { name });
  }
  connect(proivder) {
    return this;
  }
  supportsCoinType(coinType) {
    return false;
  }
  async encodeAddress(coinType, address) {
    throw new Error("unsupported coin");
  }
  async decodeAddress(coinType, data) {
    throw new Error("unsupported coin");
  }
}
var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
var matchers = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  matcherIpfs,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];

class EnsResolver {
  provider;
  address;
  name;
  #supports2544;
  #resolver;
  constructor(provider, address, name) {
    defineProperties(this, { provider, address, name });
    this.#supports2544 = null;
    this.#resolver = new Contract(address, [
      "function supportsInterface(bytes4) view returns (bool)",
      "function resolve(bytes, bytes) view returns (bytes)",
      "function addr(bytes32) view returns (address)",
      "function addr(bytes32, uint) view returns (bytes)",
      "function text(bytes32, string) view returns (string)",
      "function contenthash(bytes32) view returns (bytes)"
    ], provider);
  }
  async supportsWildcard() {
    if (this.#supports2544 == null) {
      this.#supports2544 = (async () => {
        try {
          return await this.#resolver.supportsInterface("0x9061b923");
        } catch (error) {
          if (isError(error, "CALL_EXCEPTION")) {
            return false;
          }
          this.#supports2544 = null;
          throw error;
        }
      })();
    }
    return await this.#supports2544;
  }
  async#fetch(funcName, params) {
    params = (params || []).slice();
    const iface = this.#resolver.interface;
    params.unshift(namehash(this.name));
    let fragment = null;
    if (await this.supportsWildcard()) {
      fragment = iface.getFunction(funcName);
      assert(fragment, "missing fragment", "UNKNOWN_ERROR", {
        info: { funcName }
      });
      params = [
        dnsEncode(this.name, 255),
        iface.encodeFunctionData(fragment, params)
      ];
      funcName = "resolve(bytes,bytes)";
    }
    params.push({
      enableCcipRead: true
    });
    try {
      const result = await this.#resolver[funcName](...params);
      if (fragment) {
        return iface.decodeFunctionResult(fragment, result)[0];
      }
      return result;
    } catch (error) {
      if (!isError(error, "CALL_EXCEPTION")) {
        throw error;
      }
    }
    return null;
  }
  async getAddress(coinType) {
    if (coinType == null) {
      coinType = 60;
    }
    if (coinType === 60) {
      try {
        const result = await this.#fetch("addr(bytes32)");
        if (result == null || result === ZeroAddress) {
          return null;
        }
        return result;
      } catch (error) {
        if (isError(error, "CALL_EXCEPTION")) {
          return null;
        }
        throw error;
      }
    }
    if (coinType >= 0 && coinType < 2147483648) {
      let ethCoinType = coinType + 2147483648;
      const data2 = await this.#fetch("addr(bytes32,uint)", [ethCoinType]);
      if (isHexString(data2, 20)) {
        return getAddress(data2);
      }
    }
    let coinPlugin = null;
    for (const plugin of this.provider.plugins) {
      if (!(plugin instanceof MulticoinProviderPlugin)) {
        continue;
      }
      if (plugin.supportsCoinType(coinType)) {
        coinPlugin = plugin;
        break;
      }
    }
    if (coinPlugin == null) {
      return null;
    }
    const data = await this.#fetch("addr(bytes32,uint)", [coinType]);
    if (data == null || data === "0x") {
      return null;
    }
    const address = await coinPlugin.decodeAddress(coinType, data);
    if (address != null) {
      return address;
    }
    assert(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
      operation: `getAddress(${coinType})`,
      info: { coinType, data }
    });
  }
  async getText(key) {
    const data = await this.#fetch("text(bytes32,string)", [key]);
    if (data == null || data === "0x") {
      return null;
    }
    return data;
  }
  async getContentHash() {
    const data = await this.#fetch("contenthash(bytes32)");
    if (data == null || data === "0x") {
      return null;
    }
    const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
    if (ipfs) {
      const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
      const length = parseInt(ipfs[4], 16);
      if (ipfs[5].length === length * 2) {
        return `${scheme}://${encodeBase58("0x" + ipfs[2])}`;
      }
    }
    const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
    if (swarm && swarm[1].length === 64) {
      return `bzz://${swarm[1]}`;
    }
    assert(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
      operation: "getContentHash()",
      info: { data }
    });
  }
  async getAvatar() {
    const avatar = await this._getAvatar();
    return avatar.url;
  }
  async _getAvatar() {
    const linkage = [{ type: "name", value: this.name }];
    try {
      const avatar = await this.getText("avatar");
      if (avatar == null) {
        linkage.push({ type: "!avatar", value: "" });
        return { url: null, linkage };
      }
      linkage.push({ type: "avatar", value: avatar });
      for (let i = 0;i < matchers.length; i++) {
        const match = avatar.match(matchers[i]);
        if (match == null) {
          continue;
        }
        const scheme = match[1].toLowerCase();
        switch (scheme) {
          case "https":
          case "data":
            linkage.push({ type: "url", value: avatar });
            return { linkage, url: avatar };
          case "ipfs": {
            const url = getIpfsLink(avatar);
            linkage.push({ type: "ipfs", value: avatar });
            linkage.push({ type: "url", value: url });
            return { linkage, url };
          }
          case "erc721":
          case "erc1155": {
            const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
            linkage.push({ type: scheme, value: avatar });
            const owner = await this.getAddress();
            if (owner == null) {
              linkage.push({ type: "!owner", value: "" });
              return { url: null, linkage };
            }
            const comps = (match[2] || "").split("/");
            if (comps.length !== 2) {
              linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
              return { url: null, linkage };
            }
            const tokenId = comps[1];
            const contract = new Contract(comps[0], [
              "function tokenURI(uint) view returns (string)",
              "function ownerOf(uint) view returns (address)",
              "function uri(uint) view returns (string)",
              "function balanceOf(address, uint256) view returns (uint)"
            ], this.provider);
            if (scheme === "erc721") {
              const tokenOwner = await contract.ownerOf(tokenId);
              if (owner !== tokenOwner) {
                linkage.push({ type: "!owner", value: tokenOwner });
                return { url: null, linkage };
              }
              linkage.push({ type: "owner", value: tokenOwner });
            } else if (scheme === "erc1155") {
              const balance = await contract.balanceOf(owner, tokenId);
              if (!balance) {
                linkage.push({ type: "!balance", value: "0" });
                return { url: null, linkage };
              }
              linkage.push({ type: "balance", value: balance.toString() });
            }
            let metadataUrl = await contract[selector](tokenId);
            if (metadataUrl == null || metadataUrl === "0x") {
              linkage.push({ type: "!metadata-url", value: "" });
              return { url: null, linkage };
            }
            linkage.push({ type: "metadata-url-base", value: metadataUrl });
            if (scheme === "erc1155") {
              metadataUrl = metadataUrl.replace("{id}", toBeHex(tokenId, 32).substring(2));
              linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
            }
            if (metadataUrl.match(/^ipfs:/i)) {
              metadataUrl = getIpfsLink(metadataUrl);
            }
            linkage.push({ type: "metadata-url", value: metadataUrl });
            let metadata = {};
            const response = await new FetchRequest(metadataUrl).send();
            response.assertOk();
            try {
              metadata = response.bodyJson;
            } catch (error) {
              try {
                linkage.push({ type: "!metadata", value: response.bodyText });
              } catch (error2) {
                const bytes2 = response.body;
                if (bytes2) {
                  linkage.push({ type: "!metadata", value: hexlify(bytes2) });
                }
                return { url: null, linkage };
              }
              return { url: null, linkage };
            }
            if (!metadata) {
              linkage.push({ type: "!metadata", value: "" });
              return { url: null, linkage };
            }
            linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
            let imageUrl = metadata.image;
            if (typeof imageUrl !== "string") {
              linkage.push({ type: "!imageUrl", value: "" });
              return { url: null, linkage };
            }
            if (imageUrl.match(/^(https:\/\/|data:)/i)) {
            } else {
              const ipfs = imageUrl.match(matcherIpfs);
              if (ipfs == null) {
                linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                return { url: null, linkage };
              }
              linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
              imageUrl = getIpfsLink(imageUrl);
            }
            linkage.push({ type: "url", value: imageUrl });
            return { linkage, url: imageUrl };
          }
        }
      }
    } catch (error) {
    }
    return { linkage, url: null };
  }
  static async getEnsAddress(provider) {
    const network = await provider.getNetwork();
    const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
    assert(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
      operation: "getEnsAddress",
      info: { network }
    });
    return ensPlugin.address;
  }
  static async#getResolver(provider, name) {
    const ensAddr = await EnsResolver.getEnsAddress(provider);
    try {
      const contract = new Contract(ensAddr, [
        "function resolver(bytes32) view returns (address)"
      ], provider);
      const addr = await contract.resolver(namehash(name), {
        enableCcipRead: true
      });
      if (addr === ZeroAddress) {
        return null;
      }
      return addr;
    } catch (error) {
      throw error;
    }
    return null;
  }
  static async fromName(provider, name) {
    let currentName = name;
    while (true) {
      if (currentName === "" || currentName === ".") {
        return null;
      }
      if (name !== "eth" && currentName === "eth") {
        return null;
      }
      const addr = await EnsResolver.#getResolver(provider, currentName);
      if (addr != null) {
        const resolver = new EnsResolver(provider, addr, name);
        if (currentName !== name && !await resolver.supportsWildcard()) {
          return null;
        }
        return resolver;
      }
      currentName = currentName.split(".").slice(1).join(".");
    }
  }
}

// node_modules/ethers/lib.esm/providers/format.js
var BN_011 = BigInt(0);
function allowNull(format, nullValue) {
  return function(value) {
    if (value == null) {
      return nullValue;
    }
    return format(value);
  };
}
function arrayOf(format, allowNull2) {
  return (array) => {
    if (allowNull2 && array == null) {
      return null;
    }
    if (!Array.isArray(array)) {
      throw new Error("not an array");
    }
    return array.map((i) => format(i));
  };
}
function object(format, altNames) {
  return (value) => {
    const result = {};
    for (const key in format) {
      let srcKey = key;
      if (altNames && key in altNames && !(srcKey in value)) {
        for (const altKey of altNames[key]) {
          if (altKey in value) {
            srcKey = altKey;
            break;
          }
        }
      }
      try {
        const nv = format[key](value[srcKey]);
        if (nv !== undefined) {
          result[key] = nv;
        }
      } catch (error) {
        const message = error instanceof Error ? error.message : "not-an-error";
        assert(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
      }
    }
    return result;
  };
}
function formatBoolean(value) {
  switch (value) {
    case true:
    case "true":
      return true;
    case false:
    case "false":
      return false;
  }
  assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
}
function formatData(value) {
  assertArgument(isHexString(value, true), "invalid data", "value", value);
  return value;
}
function formatHash(value) {
  assertArgument(isHexString(value, 32), "invalid hash", "value", value);
  return value;
}
var _formatLog = object({
  address: getAddress,
  blockHash: formatHash,
  blockNumber: getNumber,
  data: formatData,
  index: getNumber,
  removed: allowNull(formatBoolean, false),
  topics: arrayOf(formatHash),
  transactionHash: formatHash,
  transactionIndex: getNumber
}, {
  index: ["logIndex"]
});
function formatLog(value) {
  return _formatLog(value);
}
var _formatBlock = object({
  hash: allowNull(formatHash),
  parentHash: formatHash,
  parentBeaconBlockRoot: allowNull(formatHash, null),
  number: getNumber,
  timestamp: getNumber,
  nonce: allowNull(formatData),
  difficulty: getBigInt,
  gasLimit: getBigInt,
  gasUsed: getBigInt,
  stateRoot: allowNull(formatHash, null),
  receiptsRoot: allowNull(formatHash, null),
  blobGasUsed: allowNull(getBigInt, null),
  excessBlobGas: allowNull(getBigInt, null),
  miner: allowNull(getAddress),
  prevRandao: allowNull(formatHash, null),
  extraData: formatData,
  baseFeePerGas: allowNull(getBigInt)
}, {
  prevRandao: ["mixHash"]
});
function formatBlock(value) {
  const result = _formatBlock(value);
  result.transactions = value.transactions.map((tx) => {
    if (typeof tx === "string") {
      return tx;
    }
    return formatTransactionResponse(tx);
  });
  return result;
}
var _formatReceiptLog = object({
  transactionIndex: getNumber,
  blockNumber: getNumber,
  transactionHash: formatHash,
  address: getAddress,
  topics: arrayOf(formatHash),
  data: formatData,
  index: getNumber,
  blockHash: formatHash
}, {
  index: ["logIndex"]
});
function formatReceiptLog(value) {
  return _formatReceiptLog(value);
}
var _formatTransactionReceipt = object({
  to: allowNull(getAddress, null),
  from: allowNull(getAddress, null),
  contractAddress: allowNull(getAddress, null),
  index: getNumber,
  root: allowNull(hexlify),
  gasUsed: getBigInt,
  blobGasUsed: allowNull(getBigInt, null),
  logsBloom: allowNull(formatData),
  blockHash: formatHash,
  hash: formatHash,
  logs: arrayOf(formatReceiptLog),
  blockNumber: getNumber,
  cumulativeGasUsed: getBigInt,
  effectiveGasPrice: allowNull(getBigInt),
  blobGasPrice: allowNull(getBigInt, null),
  status: allowNull(getNumber),
  type: allowNull(getNumber, 0)
}, {
  effectiveGasPrice: ["gasPrice"],
  hash: ["transactionHash"],
  index: ["transactionIndex"]
});
function formatTransactionReceipt(value) {
  return _formatTransactionReceipt(value);
}
function formatTransactionResponse(value) {
  if (value.to && getBigInt(value.to) === BN_011) {
    value.to = "0x0000000000000000000000000000000000000000";
  }
  const result = object({
    hash: formatHash,
    index: allowNull(getNumber, undefined),
    type: (value2) => {
      if (value2 === "0x" || value2 == null) {
        return 0;
      }
      return getNumber(value2);
    },
    accessList: allowNull(accessListify, null),
    blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
    authorizationList: allowNull(arrayOf((v3) => {
      let sig;
      if (v3.signature) {
        sig = v3.signature;
      } else {
        let yParity = v3.yParity;
        if (yParity === "0x1b") {
          yParity = 0;
        } else if (yParity === "0x1c") {
          yParity = 1;
        }
        sig = Object.assign({}, v3, { yParity });
      }
      return {
        address: getAddress(v3.address),
        chainId: getBigInt(v3.chainId),
        nonce: getBigInt(v3.nonce),
        signature: Signature.from(sig)
      };
    }, false), null),
    blockHash: allowNull(formatHash, null),
    blockNumber: allowNull(getNumber, null),
    transactionIndex: allowNull(getNumber, null),
    from: getAddress,
    gasPrice: allowNull(getBigInt),
    maxPriorityFeePerGas: allowNull(getBigInt),
    maxFeePerGas: allowNull(getBigInt),
    maxFeePerBlobGas: allowNull(getBigInt, null),
    gasLimit: getBigInt,
    to: allowNull(getAddress, null),
    value: getBigInt,
    nonce: getNumber,
    data: formatData,
    creates: allowNull(getAddress, null),
    chainId: allowNull(getBigInt, null)
  }, {
    data: ["input"],
    gasLimit: ["gas"],
    index: ["transactionIndex"]
  })(value);
  if (result.to == null && result.creates == null) {
    result.creates = getCreateAddress(result);
  }
  if ((value.type === 1 || value.type === 2) && value.accessList == null) {
    result.accessList = [];
  }
  if (value.signature) {
    result.signature = Signature.from(value.signature);
  } else {
    result.signature = Signature.from(value);
  }
  if (result.chainId == null) {
    const chainId = result.signature.legacyChainId;
    if (chainId != null) {
      result.chainId = chainId;
    }
  }
  if (result.blockHash && getBigInt(result.blockHash) === BN_011) {
    result.blockHash = null;
  }
  return result;
}

// node_modules/ethers/lib.esm/providers/plugins-network.js
var EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";

class NetworkPlugin {
  name;
  constructor(name) {
    defineProperties(this, { name });
  }
  clone() {
    return new NetworkPlugin(this.name);
  }
}

class GasCostPlugin extends NetworkPlugin {
  effectiveBlock;
  txBase;
  txCreate;
  txDataZero;
  txDataNonzero;
  txAccessListStorageKey;
  txAccessListAddress;
  constructor(effectiveBlock, costs) {
    if (effectiveBlock == null) {
      effectiveBlock = 0;
    }
    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
    const props = { effectiveBlock };
    function set(name, nullish) {
      let value = (costs || {})[name];
      if (value == null) {
        value = nullish;
      }
      assertArgument(typeof value === "number", `invalud value for ${name}`, "costs", costs);
      props[name] = value;
    }
    set("txBase", 21000);
    set("txCreate", 32000);
    set("txDataZero", 4);
    set("txDataNonzero", 16);
    set("txAccessListStorageKey", 1900);
    set("txAccessListAddress", 2400);
    defineProperties(this, props);
  }
  clone() {
    return new GasCostPlugin(this.effectiveBlock, this);
  }
}

class EnsPlugin extends NetworkPlugin {
  address;
  targetNetwork;
  constructor(address, targetNetwork) {
    super("org.ethers.plugins.network.Ens");
    defineProperties(this, {
      address: address || EnsAddress,
      targetNetwork: targetNetwork == null ? 1 : targetNetwork
    });
  }
  clone() {
    return new EnsPlugin(this.address, this.targetNetwork);
  }
}

class FeeDataNetworkPlugin extends NetworkPlugin {
  #feeDataFunc;
  get feeDataFunc() {
    return this.#feeDataFunc;
  }
  constructor(feeDataFunc) {
    super("org.ethers.plugins.network.FeeData");
    this.#feeDataFunc = feeDataFunc;
  }
  async getFeeData(provider) {
    return await this.#feeDataFunc(provider);
  }
  clone() {
    return new FeeDataNetworkPlugin(this.#feeDataFunc);
  }
}

class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {
  #url;
  #processFunc;
  get url() {
    return this.#url;
  }
  get processFunc() {
    return this.#processFunc;
  }
  constructor(url, processFunc) {
    super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    this.#url = url;
    this.#processFunc = processFunc;
  }
  clone() {
    return this;
  }
}

// node_modules/ethers/lib.esm/providers/network.js
var Networks = new Map;

class Network {
  #name;
  #chainId;
  #plugins;
  constructor(name, chainId) {
    this.#name = name;
    this.#chainId = getBigInt(chainId);
    this.#plugins = new Map;
  }
  toJSON() {
    return { name: this.name, chainId: String(this.chainId) };
  }
  get name() {
    return this.#name;
  }
  set name(value) {
    this.#name = value;
  }
  get chainId() {
    return this.#chainId;
  }
  set chainId(value) {
    this.#chainId = getBigInt(value, "chainId");
  }
  matches(other) {
    if (other == null) {
      return false;
    }
    if (typeof other === "string") {
      try {
        return this.chainId === getBigInt(other);
      } catch (error) {
      }
      return this.name === other;
    }
    if (typeof other === "number" || typeof other === "bigint") {
      try {
        return this.chainId === getBigInt(other);
      } catch (error) {
      }
      return false;
    }
    if (typeof other === "object") {
      if (other.chainId != null) {
        try {
          return this.chainId === getBigInt(other.chainId);
        } catch (error) {
        }
        return false;
      }
      if (other.name != null) {
        return this.name === other.name;
      }
      return false;
    }
    return false;
  }
  get plugins() {
    return Array.from(this.#plugins.values());
  }
  attachPlugin(plugin) {
    if (this.#plugins.get(plugin.name)) {
      throw new Error(`cannot replace existing plugin: ${plugin.name} `);
    }
    this.#plugins.set(plugin.name, plugin.clone());
    return this;
  }
  getPlugin(name) {
    return this.#plugins.get(name) || null;
  }
  getPlugins(basename) {
    return this.plugins.filter((p) => p.name.split("#")[0] === basename);
  }
  clone() {
    const clone = new Network(this.name, this.chainId);
    this.plugins.forEach((plugin) => {
      clone.attachPlugin(plugin.clone());
    });
    return clone;
  }
  computeIntrinsicGas(tx) {
    const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new GasCostPlugin;
    let gas = costs.txBase;
    if (tx.to == null) {
      gas += costs.txCreate;
    }
    if (tx.data) {
      for (let i = 2;i < tx.data.length; i += 2) {
        if (tx.data.substring(i, i + 2) === "00") {
          gas += costs.txDataZero;
        } else {
          gas += costs.txDataNonzero;
        }
      }
    }
    if (tx.accessList) {
      const accessList = accessListify(tx.accessList);
      for (const addr in accessList) {
        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
      }
    }
    return gas;
  }
  static from(network) {
    injectCommonNetworks();
    if (network == null) {
      return Network.from("mainnet");
    }
    if (typeof network === "number") {
      network = BigInt(network);
    }
    if (typeof network === "string" || typeof network === "bigint") {
      const networkFunc = Networks.get(network);
      if (networkFunc) {
        return networkFunc();
      }
      if (typeof network === "bigint") {
        return new Network("unknown", network);
      }
      assertArgument(false, "unknown network", "network", network);
    }
    if (typeof network.clone === "function") {
      const clone = network.clone();
      return clone;
    }
    if (typeof network === "object") {
      assertArgument(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
      const custom = new Network(network.name, network.chainId);
      if (network.ensAddress || network.ensNetwork != null) {
        custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));
      }
      return custom;
    }
    assertArgument(false, "invalid network", "network", network);
  }
  static register(nameOrChainId, networkFunc) {
    if (typeof nameOrChainId === "number") {
      nameOrChainId = BigInt(nameOrChainId);
    }
    const existing = Networks.get(nameOrChainId);
    if (existing) {
      assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
    }
    Networks.set(nameOrChainId, networkFunc);
  }
}
function parseUnits2(_value, decimals) {
  const value = String(_value);
  if (!value.match(/^[0-9.]+$/)) {
    throw new Error(`invalid gwei value: ${_value}`);
  }
  const comps = value.split(".");
  if (comps.length === 1) {
    comps.push("");
  }
  if (comps.length !== 2) {
    throw new Error(`invalid gwei value: ${_value}`);
  }
  while (comps[1].length < decimals) {
    comps[1] += "0";
  }
  if (comps[1].length > 9) {
    let frac = BigInt(comps[1].substring(0, 9));
    if (!comps[1].substring(9).match(/^0+$/)) {
      frac++;
    }
    comps[1] = frac.toString();
  }
  return BigInt(comps[0] + comps[1]);
}
function getGasStationPlugin(url) {
  return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
    request.setHeader("User-Agent", "ethers");
    let response;
    try {
      const [_response, _feeData] = await Promise.all([
        request.send(),
        fetchFeeData()
      ]);
      response = _response;
      const payload = response.bodyJson.standard;
      const feeData = {
        gasPrice: _feeData.gasPrice,
        maxFeePerGas: parseUnits2(payload.maxFee, 9),
        maxPriorityFeePerGas: parseUnits2(payload.maxPriorityFee, 9)
      };
      return feeData;
    } catch (error) {
      assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
    }
  });
}
var injected = false;
function injectCommonNetworks() {
  if (injected) {
    return;
  }
  injected = true;
  function registerEth(name, chainId, options) {
    const func = function() {
      const network = new Network(name, chainId);
      if (options.ensNetwork != null) {
        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));
      }
      network.attachPlugin(new GasCostPlugin);
      (options.plugins || []).forEach((plugin) => {
        network.attachPlugin(plugin);
      });
      return network;
    };
    Network.register(name, func);
    Network.register(chainId, func);
    if (options.altNames) {
      options.altNames.forEach((name2) => {
        Network.register(name2, func);
      });
    }
  }
  registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
  registerEth("ropsten", 3, { ensNetwork: 3 });
  registerEth("rinkeby", 4, { ensNetwork: 4 });
  registerEth("goerli", 5, { ensNetwork: 5 });
  registerEth("kovan", 42, { ensNetwork: 42 });
  registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
  registerEth("holesky", 17000, { ensNetwork: 17000 });
  registerEth("classic", 61, {});
  registerEth("classicKotti", 6, {});
  registerEth("arbitrum", 42161, {
    ensNetwork: 1
  });
  registerEth("arbitrum-goerli", 421613, {});
  registerEth("arbitrum-sepolia", 421614, {});
  registerEth("base", 8453, { ensNetwork: 1 });
  registerEth("base-goerli", 84531, {});
  registerEth("base-sepolia", 84532, {});
  registerEth("bnb", 56, { ensNetwork: 1 });
  registerEth("bnbt", 97, {});
  registerEth("linea", 59144, { ensNetwork: 1 });
  registerEth("linea-goerli", 59140, {});
  registerEth("linea-sepolia", 59141, {});
  registerEth("matic", 137, {
    ensNetwork: 1,
    plugins: [
      getGasStationPlugin("https://gasstation.polygon.technology/v2")
    ]
  });
  registerEth("matic-amoy", 80002, {});
  registerEth("matic-mumbai", 80001, {
    altNames: ["maticMumbai", "maticmum"],
    plugins: [
      getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
    ]
  });
  registerEth("optimism", 10, {
    ensNetwork: 1,
    plugins: []
  });
  registerEth("optimism-goerli", 420, {});
  registerEth("optimism-sepolia", 11155420, {});
  registerEth("xdai", 100, { ensNetwork: 1 });
}

// node_modules/ethers/lib.esm/providers/subscriber-polling.js
function copy(obj) {
  return JSON.parse(JSON.stringify(obj));
}
class PollingBlockSubscriber {
  #provider;
  #poller;
  #interval;
  #blockNumber;
  constructor(provider) {
    this.#provider = provider;
    this.#poller = null;
    this.#interval = 4000;
    this.#blockNumber = -2;
  }
  get pollingInterval() {
    return this.#interval;
  }
  set pollingInterval(value) {
    this.#interval = value;
  }
  async#poll() {
    try {
      const blockNumber = await this.#provider.getBlockNumber();
      if (this.#blockNumber === -2) {
        this.#blockNumber = blockNumber;
        return;
      }
      if (blockNumber !== this.#blockNumber) {
        for (let b4 = this.#blockNumber + 1;b4 <= blockNumber; b4++) {
          if (this.#poller == null) {
            return;
          }
          await this.#provider.emit("block", b4);
        }
        this.#blockNumber = blockNumber;
      }
    } catch (error) {
    }
    if (this.#poller == null) {
      return;
    }
    this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
  }
  start() {
    if (this.#poller) {
      return;
    }
    this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
    this.#poll();
  }
  stop() {
    if (!this.#poller) {
      return;
    }
    this.#provider._clearTimeout(this.#poller);
    this.#poller = null;
  }
  pause(dropWhilePaused) {
    this.stop();
    if (dropWhilePaused) {
      this.#blockNumber = -2;
    }
  }
  resume() {
    this.start();
  }
}

class OnBlockSubscriber {
  #provider;
  #poll;
  #running;
  constructor(provider) {
    this.#provider = provider;
    this.#running = false;
    this.#poll = (blockNumber) => {
      this._poll(blockNumber, this.#provider);
    };
  }
  async _poll(blockNumber, provider) {
    throw new Error("sub-classes must override this");
  }
  start() {
    if (this.#running) {
      return;
    }
    this.#running = true;
    this.#poll(-2);
    this.#provider.on("block", this.#poll);
  }
  stop() {
    if (!this.#running) {
      return;
    }
    this.#running = false;
    this.#provider.off("block", this.#poll);
  }
  pause(dropWhilePaused) {
    this.stop();
  }
  resume() {
    this.start();
  }
}

class PollingBlockTagSubscriber extends OnBlockSubscriber {
  #tag;
  #lastBlock;
  constructor(provider, tag) {
    super(provider);
    this.#tag = tag;
    this.#lastBlock = -2;
  }
  pause(dropWhilePaused) {
    if (dropWhilePaused) {
      this.#lastBlock = -2;
    }
    super.pause(dropWhilePaused);
  }
  async _poll(blockNumber, provider) {
    const block = await provider.getBlock(this.#tag);
    if (block == null) {
      return;
    }
    if (this.#lastBlock === -2) {
      this.#lastBlock = block.number;
    } else if (block.number > this.#lastBlock) {
      provider.emit(this.#tag, block.number);
      this.#lastBlock = block.number;
    }
  }
}

class PollingOrphanSubscriber extends OnBlockSubscriber {
  #filter;
  constructor(provider, filter) {
    super(provider);
    this.#filter = copy(filter);
  }
  async _poll(blockNumber, provider) {
    throw new Error("@TODO");
    console.log(this.#filter);
  }
}

class PollingTransactionSubscriber extends OnBlockSubscriber {
  #hash;
  constructor(provider, hash2) {
    super(provider);
    this.#hash = hash2;
  }
  async _poll(blockNumber, provider) {
    const tx = await provider.getTransactionReceipt(this.#hash);
    if (tx) {
      provider.emit(this.#hash, tx);
    }
  }
}

class PollingEventSubscriber {
  #provider;
  #filter;
  #poller;
  #running;
  #blockNumber;
  constructor(provider, filter) {
    this.#provider = provider;
    this.#filter = copy(filter);
    this.#poller = this.#poll.bind(this);
    this.#running = false;
    this.#blockNumber = -2;
  }
  async#poll(blockNumber) {
    if (this.#blockNumber === -2) {
      return;
    }
    const filter = copy(this.#filter);
    filter.fromBlock = this.#blockNumber + 1;
    filter.toBlock = blockNumber;
    const logs = await this.#provider.getLogs(filter);
    if (logs.length === 0) {
      if (this.#blockNumber < blockNumber - 60) {
        this.#blockNumber = blockNumber - 60;
      }
      return;
    }
    for (const log of logs) {
      this.#provider.emit(this.#filter, log);
      this.#blockNumber = log.blockNumber;
    }
  }
  start() {
    if (this.#running) {
      return;
    }
    this.#running = true;
    if (this.#blockNumber === -2) {
      this.#provider.getBlockNumber().then((blockNumber) => {
        this.#blockNumber = blockNumber;
      });
    }
    this.#provider.on("block", this.#poller);
  }
  stop() {
    if (!this.#running) {
      return;
    }
    this.#running = false;
    this.#provider.off("block", this.#poller);
  }
  pause(dropWhilePaused) {
    this.stop();
    if (dropWhilePaused) {
      this.#blockNumber = -2;
    }
  }
  resume() {
    this.start();
  }
}

// node_modules/ethers/lib.esm/providers/abstract-provider.js
var BN_23 = BigInt(2);
var MAX_CCIP_REDIRECTS = 10;
function isPromise(value) {
  return value && typeof value.then === "function";
}
function getTag(prefix, value) {
  return prefix + ":" + JSON.stringify(value, (k, v3) => {
    if (v3 == null) {
      return "null";
    }
    if (typeof v3 === "bigint") {
      return `bigint:${v3.toString()}`;
    }
    if (typeof v3 === "string") {
      return v3.toLowerCase();
    }
    if (typeof v3 === "object" && !Array.isArray(v3)) {
      const keys = Object.keys(v3);
      keys.sort();
      return keys.reduce((accum, key) => {
        accum[key] = v3[key];
        return accum;
      }, {});
    }
    return v3;
  });
}

class UnmanagedSubscriber {
  name;
  constructor(name) {
    defineProperties(this, { name });
  }
  start() {
  }
  stop() {
  }
  pause(dropWhilePaused) {
  }
  resume() {
  }
}
function copy2(value) {
  return JSON.parse(JSON.stringify(value));
}
function concisify(items) {
  items = Array.from(new Set(items).values());
  items.sort();
  return items;
}
async function getSubscription(_event, provider) {
  if (_event == null) {
    throw new Error("invalid event");
  }
  if (Array.isArray(_event)) {
    _event = { topics: _event };
  }
  if (typeof _event === "string") {
    switch (_event) {
      case "block":
      case "debug":
      case "error":
      case "finalized":
      case "network":
      case "pending":
      case "safe": {
        return { type: _event, tag: _event };
      }
    }
  }
  if (isHexString(_event, 32)) {
    const hash2 = _event.toLowerCase();
    return { type: "transaction", tag: getTag("tx", { hash: hash2 }), hash: hash2 };
  }
  if (_event.orphan) {
    const event = _event;
    return { type: "orphan", tag: getTag("orphan", event), filter: copy2(event) };
  }
  if (_event.address || _event.topics) {
    const event = _event;
    const filter = {
      topics: (event.topics || []).map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          return concisify(t.map((t2) => t2.toLowerCase()));
        }
        return t.toLowerCase();
      })
    };
    if (event.address) {
      const addresses = [];
      const promises = [];
      const addAddress = (addr) => {
        if (isHexString(addr)) {
          addresses.push(addr);
        } else {
          promises.push((async () => {
            addresses.push(await resolveAddress(addr, provider));
          })());
        }
      };
      if (Array.isArray(event.address)) {
        event.address.forEach(addAddress);
      } else {
        addAddress(event.address);
      }
      if (promises.length) {
        await Promise.all(promises);
      }
      filter.address = concisify(addresses.map((a2) => a2.toLowerCase()));
    }
    return { filter, tag: getTag("event", filter), type: "event" };
  }
  assertArgument(false, "unknown ProviderEvent", "event", _event);
}
function getTime2() {
  return new Date().getTime();
}
var defaultOptions = {
  cacheTimeout: 250,
  pollingInterval: 4000
};

class AbstractProvider {
  #subs;
  #plugins;
  #pausedState;
  #destroyed;
  #networkPromise;
  #anyNetwork;
  #performCache;
  #lastBlockNumber;
  #nextTimer;
  #timers;
  #disableCcipRead;
  #options;
  constructor(_network, options) {
    this.#options = Object.assign({}, defaultOptions, options || {});
    if (_network === "any") {
      this.#anyNetwork = true;
      this.#networkPromise = null;
    } else if (_network) {
      const network = Network.from(_network);
      this.#anyNetwork = false;
      this.#networkPromise = Promise.resolve(network);
      setTimeout(() => {
        this.emit("network", network, null);
      }, 0);
    } else {
      this.#anyNetwork = false;
      this.#networkPromise = null;
    }
    this.#lastBlockNumber = -1;
    this.#performCache = new Map;
    this.#subs = new Map;
    this.#plugins = new Map;
    this.#pausedState = null;
    this.#destroyed = false;
    this.#nextTimer = 1;
    this.#timers = new Map;
    this.#disableCcipRead = false;
  }
  get pollingInterval() {
    return this.#options.pollingInterval;
  }
  get provider() {
    return this;
  }
  get plugins() {
    return Array.from(this.#plugins.values());
  }
  attachPlugin(plugin) {
    if (this.#plugins.get(plugin.name)) {
      throw new Error(`cannot replace existing plugin: ${plugin.name} `);
    }
    this.#plugins.set(plugin.name, plugin.connect(this));
    return this;
  }
  getPlugin(name) {
    return this.#plugins.get(name) || null;
  }
  get disableCcipRead() {
    return this.#disableCcipRead;
  }
  set disableCcipRead(value) {
    this.#disableCcipRead = !!value;
  }
  async#perform(req) {
    const timeout = this.#options.cacheTimeout;
    if (timeout < 0) {
      return await this._perform(req);
    }
    const tag = getTag(req.method, req);
    let perform = this.#performCache.get(tag);
    if (!perform) {
      perform = this._perform(req);
      this.#performCache.set(tag, perform);
      setTimeout(() => {
        if (this.#performCache.get(tag) === perform) {
          this.#performCache.delete(tag);
        }
      }, timeout);
    }
    return await perform;
  }
  async ccipReadFetch(tx, calldata, urls) {
    if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
      return null;
    }
    const sender = tx.to.toLowerCase();
    const data = calldata.toLowerCase();
    const errorMessages = [];
    for (let i = 0;i < urls.length; i++) {
      const url = urls[i];
      const href = url.replace("{sender}", sender).replace("{data}", data);
      const request = new FetchRequest(href);
      if (url.indexOf("{data}") === -1) {
        request.body = { data, sender };
      }
      this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
      let errorMessage = "unknown error";
      let resp;
      try {
        resp = await request.send();
      } catch (error) {
        errorMessages.push(error.message);
        this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
        continue;
      }
      try {
        const result = resp.bodyJson;
        if (result.data) {
          this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
          return result.data;
        }
        if (result.message) {
          errorMessage = result.message;
        }
        this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
      } catch (error) {
      }
      assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
      errorMessages.push(errorMessage);
    }
    assert(false, `error encountered during CCIP fetch: ${errorMessages.map((m2) => JSON.stringify(m2)).join(", ")}`, "OFFCHAIN_FAULT", {
      reason: "500_SERVER_ERROR",
      transaction: tx,
      info: { urls, errorMessages }
    });
  }
  _wrapBlock(value, network) {
    return new Block(formatBlock(value), this);
  }
  _wrapLog(value, network) {
    return new Log(formatLog(value), this);
  }
  _wrapTransactionReceipt(value, network) {
    return new TransactionReceipt(formatTransactionReceipt(value), this);
  }
  _wrapTransactionResponse(tx, network) {
    return new TransactionResponse(formatTransactionResponse(tx), this);
  }
  _detectNetwork() {
    assert(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
      operation: "_detectNetwork"
    });
  }
  async _perform(req) {
    assert(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
      operation: req.method,
      info: req
    });
  }
  async getBlockNumber() {
    const blockNumber = getNumber(await this.#perform({ method: "getBlockNumber" }), "%response");
    if (this.#lastBlockNumber >= 0) {
      this.#lastBlockNumber = blockNumber;
    }
    return blockNumber;
  }
  _getAddress(address) {
    return resolveAddress(address, this);
  }
  _getBlockTag(blockTag) {
    if (blockTag == null) {
      return "latest";
    }
    switch (blockTag) {
      case "earliest":
        return "0x0";
      case "finalized":
      case "latest":
      case "pending":
      case "safe":
        return blockTag;
    }
    if (isHexString(blockTag)) {
      if (isHexString(blockTag, 32)) {
        return blockTag;
      }
      return toQuantity(blockTag);
    }
    if (typeof blockTag === "bigint") {
      blockTag = getNumber(blockTag, "blockTag");
    }
    if (typeof blockTag === "number") {
      if (blockTag >= 0) {
        return toQuantity(blockTag);
      }
      if (this.#lastBlockNumber >= 0) {
        return toQuantity(this.#lastBlockNumber + blockTag);
      }
      return this.getBlockNumber().then((b4) => toQuantity(b4 + blockTag));
    }
    assertArgument(false, "invalid blockTag", "blockTag", blockTag);
  }
  _getFilter(filter) {
    const topics = (filter.topics || []).map((t) => {
      if (t == null) {
        return null;
      }
      if (Array.isArray(t)) {
        return concisify(t.map((t2) => t2.toLowerCase()));
      }
      return t.toLowerCase();
    });
    const blockHash = "blockHash" in filter ? filter.blockHash : undefined;
    const resolve = (_address, fromBlock2, toBlock2) => {
      let address2 = undefined;
      switch (_address.length) {
        case 0:
          break;
        case 1:
          address2 = _address[0];
          break;
        default:
          _address.sort();
          address2 = _address;
      }
      if (blockHash) {
        if (fromBlock2 != null || toBlock2 != null) {
          throw new Error("invalid filter");
        }
      }
      const filter2 = {};
      if (address2) {
        filter2.address = address2;
      }
      if (topics.length) {
        filter2.topics = topics;
      }
      if (fromBlock2) {
        filter2.fromBlock = fromBlock2;
      }
      if (toBlock2) {
        filter2.toBlock = toBlock2;
      }
      if (blockHash) {
        filter2.blockHash = blockHash;
      }
      return filter2;
    };
    let address = [];
    if (filter.address) {
      if (Array.isArray(filter.address)) {
        for (const addr of filter.address) {
          address.push(this._getAddress(addr));
        }
      } else {
        address.push(this._getAddress(filter.address));
      }
    }
    let fromBlock = undefined;
    if ("fromBlock" in filter) {
      fromBlock = this._getBlockTag(filter.fromBlock);
    }
    let toBlock = undefined;
    if ("toBlock" in filter) {
      toBlock = this._getBlockTag(filter.toBlock);
    }
    if (address.filter((a2) => typeof a2 !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
      return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
        return resolve(result[0], result[1], result[2]);
      });
    }
    return resolve(address, fromBlock, toBlock);
  }
  _getTransactionRequest(_request) {
    const request = copyRequest(_request);
    const promises = [];
    ["to", "from"].forEach((key) => {
      if (request[key] == null) {
        return;
      }
      const addr = resolveAddress(request[key], this);
      if (isPromise(addr)) {
        promises.push(async function() {
          request[key] = await addr;
        }());
      } else {
        request[key] = addr;
      }
    });
    if (request.blockTag != null) {
      const blockTag = this._getBlockTag(request.blockTag);
      if (isPromise(blockTag)) {
        promises.push(async function() {
          request.blockTag = await blockTag;
        }());
      } else {
        request.blockTag = blockTag;
      }
    }
    if (promises.length) {
      return async function() {
        await Promise.all(promises);
        return request;
      }();
    }
    return request;
  }
  async getNetwork() {
    if (this.#networkPromise == null) {
      const detectNetwork = (async () => {
        try {
          const network = await this._detectNetwork();
          this.emit("network", network, null);
          return network;
        } catch (error) {
          if (this.#networkPromise === detectNetwork) {
            this.#networkPromise = null;
          }
          throw error;
        }
      })();
      this.#networkPromise = detectNetwork;
      return (await detectNetwork).clone();
    }
    const networkPromise = this.#networkPromise;
    const [expected, actual] = await Promise.all([
      networkPromise,
      this._detectNetwork()
    ]);
    if (expected.chainId !== actual.chainId) {
      if (this.#anyNetwork) {
        this.emit("network", actual, expected);
        if (this.#networkPromise === networkPromise) {
          this.#networkPromise = Promise.resolve(actual);
        }
      } else {
        assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
          event: "changed"
        });
      }
    }
    return expected.clone();
  }
  async getFeeData() {
    const network = await this.getNetwork();
    const getFeeDataFunc = async () => {
      const { _block, gasPrice, priorityFee } = await resolveProperties({
        _block: this.#getBlock("latest", false),
        gasPrice: (async () => {
          try {
            const value = await this.#perform({ method: "getGasPrice" });
            return getBigInt(value, "%response");
          } catch (error) {
          }
          return null;
        })(),
        priorityFee: (async () => {
          try {
            const value = await this.#perform({ method: "getPriorityFee" });
            return getBigInt(value, "%response");
          } catch (error) {
          }
          return null;
        })()
      });
      let maxFeePerGas = null;
      let maxPriorityFeePerGas = null;
      const block = this._wrapBlock(_block, network);
      if (block && block.baseFeePerGas) {
        maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
        maxFeePerGas = block.baseFeePerGas * BN_23 + maxPriorityFeePerGas;
      }
      return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
    };
    const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    if (plugin) {
      const req = new FetchRequest(plugin.url);
      const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
      return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
    }
    return await getFeeDataFunc();
  }
  async estimateGas(_tx) {
    let tx = this._getTransactionRequest(_tx);
    if (isPromise(tx)) {
      tx = await tx;
    }
    return getBigInt(await this.#perform({
      method: "estimateGas",
      transaction: tx
    }), "%response");
  }
  async#call(tx, blockTag, attempt) {
    assert(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
      reason: "TOO_MANY_REDIRECTS",
      transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
    });
    const transaction = copyRequest(tx);
    try {
      return hexlify(await this._perform({ method: "call", transaction, blockTag }));
    } catch (error) {
      if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && dataSlice(error.data, 0, 4) === "0x556f1830") {
        const data = error.data;
        const txSender = await resolveAddress(transaction.to, this);
        let ccipArgs;
        try {
          ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));
        } catch (error2) {
          assert(false, error2.message, "OFFCHAIN_FAULT", {
            reason: "BAD_DATA",
            transaction,
            info: { data }
          });
        }
        assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
          action: "call",
          data,
          reason: "OffchainLookup",
          transaction,
          invocation: null,
          revert: {
            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
            name: "OffchainLookup",
            args: ccipArgs.errorArgs
          }
        });
        const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
        assert(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
          reason: "FETCH_FAILED",
          transaction,
          info: { data: error.data, errorArgs: ccipArgs.errorArgs }
        });
        const tx2 = {
          to: txSender,
          data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
        };
        this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
        try {
          const result = await this.#call(tx2, blockTag, attempt + 1);
          this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
          return result;
        } catch (error2) {
          this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
          throw error2;
        }
      }
      throw error;
    }
  }
  async#checkNetwork(promise) {
    const { value } = await resolveProperties({
      network: this.getNetwork(),
      value: promise
    });
    return value;
  }
  async call(_tx) {
    const { tx, blockTag } = await resolveProperties({
      tx: this._getTransactionRequest(_tx),
      blockTag: this._getBlockTag(_tx.blockTag)
    });
    return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));
  }
  async#getAccountValue(request, _address, _blockTag) {
    let address = this._getAddress(_address);
    let blockTag = this._getBlockTag(_blockTag);
    if (typeof address !== "string" || typeof blockTag !== "string") {
      [address, blockTag] = await Promise.all([address, blockTag]);
    }
    return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));
  }
  async getBalance(address, blockTag) {
    return getBigInt(await this.#getAccountValue({ method: "getBalance" }, address, blockTag), "%response");
  }
  async getTransactionCount(address, blockTag) {
    return getNumber(await this.#getAccountValue({ method: "getTransactionCount" }, address, blockTag), "%response");
  }
  async getCode(address, blockTag) {
    return hexlify(await this.#getAccountValue({ method: "getCode" }, address, blockTag));
  }
  async getStorage(address, _position, blockTag) {
    const position = getBigInt(_position, "position");
    return hexlify(await this.#getAccountValue({ method: "getStorage", position }, address, blockTag));
  }
  async broadcastTransaction(signedTx) {
    const { blockNumber, hash: hash2, network } = await resolveProperties({
      blockNumber: this.getBlockNumber(),
      hash: this._perform({
        method: "broadcastTransaction",
        signedTransaction: signedTx
      }),
      network: this.getNetwork()
    });
    const tx = Transaction.from(signedTx);
    if (tx.hash !== hash2) {
      throw new Error("@TODO: the returned hash did not match");
    }
    return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
  }
  async#getBlock(block, includeTransactions) {
    if (isHexString(block, 32)) {
      return await this.#perform({
        method: "getBlock",
        blockHash: block,
        includeTransactions
      });
    }
    let blockTag = this._getBlockTag(block);
    if (typeof blockTag !== "string") {
      blockTag = await blockTag;
    }
    return await this.#perform({
      method: "getBlock",
      blockTag,
      includeTransactions
    });
  }
  async getBlock(block, prefetchTxs) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#getBlock(block, !!prefetchTxs)
    });
    if (params == null) {
      return null;
    }
    return this._wrapBlock(params, network);
  }
  async getTransaction(hash2) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#perform({ method: "getTransaction", hash: hash2 })
    });
    if (params == null) {
      return null;
    }
    return this._wrapTransactionResponse(params, network);
  }
  async getTransactionReceipt(hash2) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#perform({ method: "getTransactionReceipt", hash: hash2 })
    });
    if (params == null) {
      return null;
    }
    if (params.gasPrice == null && params.effectiveGasPrice == null) {
      const tx = await this.#perform({ method: "getTransaction", hash: hash2 });
      if (tx == null) {
        throw new Error("report this; could not find tx or effectiveGasPrice");
      }
      params.effectiveGasPrice = tx.gasPrice;
    }
    return this._wrapTransactionReceipt(params, network);
  }
  async getTransactionResult(hash2) {
    const { result } = await resolveProperties({
      network: this.getNetwork(),
      result: this.#perform({ method: "getTransactionResult", hash: hash2 })
    });
    if (result == null) {
      return null;
    }
    return hexlify(result);
  }
  async getLogs(_filter) {
    let filter = this._getFilter(_filter);
    if (isPromise(filter)) {
      filter = await filter;
    }
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#perform({ method: "getLogs", filter })
    });
    return params.map((p) => this._wrapLog(p, network));
  }
  _getProvider(chainId) {
    assert(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
      operation: "_getProvider()"
    });
  }
  async getResolver(name) {
    return await EnsResolver.fromName(this, name);
  }
  async getAvatar(name) {
    const resolver = await this.getResolver(name);
    if (resolver) {
      return await resolver.getAvatar();
    }
    return null;
  }
  async resolveName(name) {
    const resolver = await this.getResolver(name);
    if (resolver) {
      return await resolver.getAddress();
    }
    return null;
  }
  async lookupAddress(address) {
    address = getAddress(address);
    const node = namehash(address.substring(2).toLowerCase() + ".addr.reverse");
    try {
      const ensAddr = await EnsResolver.getEnsAddress(this);
      const ensContract = new Contract(ensAddr, [
        "function resolver(bytes32) view returns (address)"
      ], this);
      const resolver = await ensContract.resolver(node);
      if (resolver == null || resolver === ZeroAddress) {
        return null;
      }
      const resolverContract = new Contract(resolver, [
        "function name(bytes32) view returns (string)"
      ], this);
      const name = await resolverContract.name(node);
      const check = await this.resolveName(name);
      if (check !== address) {
        return null;
      }
      return name;
    } catch (error) {
      if (isError(error, "BAD_DATA") && error.value === "0x") {
        return null;
      }
      if (isError(error, "CALL_EXCEPTION")) {
        return null;
      }
      throw error;
    }
    return null;
  }
  async waitForTransaction(hash2, _confirms, timeout) {
    const confirms = _confirms != null ? _confirms : 1;
    if (confirms === 0) {
      return this.getTransactionReceipt(hash2);
    }
    return new Promise(async (resolve, reject) => {
      let timer = null;
      const listener = async (blockNumber) => {
        try {
          const receipt = await this.getTransactionReceipt(hash2);
          if (receipt != null) {
            if (blockNumber - receipt.blockNumber + 1 >= confirms) {
              resolve(receipt);
              if (timer) {
                clearTimeout(timer);
                timer = null;
              }
              return;
            }
          }
        } catch (error) {
          console.log("EEE", error);
        }
        this.once("block", listener);
      };
      if (timeout != null) {
        timer = setTimeout(() => {
          if (timer == null) {
            return;
          }
          timer = null;
          this.off("block", listener);
          reject(makeError("timeout", "TIMEOUT", { reason: "timeout" }));
        }, timeout);
      }
      listener(await this.getBlockNumber());
    });
  }
  async waitForBlock(blockTag) {
    assert(false, "not implemented yet", "NOT_IMPLEMENTED", {
      operation: "waitForBlock"
    });
  }
  _clearTimeout(timerId) {
    const timer = this.#timers.get(timerId);
    if (!timer) {
      return;
    }
    if (timer.timer) {
      clearTimeout(timer.timer);
    }
    this.#timers.delete(timerId);
  }
  _setTimeout(_func, timeout) {
    if (timeout == null) {
      timeout = 0;
    }
    const timerId = this.#nextTimer++;
    const func = () => {
      this.#timers.delete(timerId);
      _func();
    };
    if (this.paused) {
      this.#timers.set(timerId, { timer: null, func, time: timeout });
    } else {
      const timer = setTimeout(func, timeout);
      this.#timers.set(timerId, { timer, func, time: getTime2() });
    }
    return timerId;
  }
  _forEachSubscriber(func) {
    for (const sub of this.#subs.values()) {
      func(sub.subscriber);
    }
  }
  _getSubscriber(sub) {
    switch (sub.type) {
      case "debug":
      case "error":
      case "network":
        return new UnmanagedSubscriber(sub.type);
      case "block": {
        const subscriber = new PollingBlockSubscriber(this);
        subscriber.pollingInterval = this.pollingInterval;
        return subscriber;
      }
      case "safe":
      case "finalized":
        return new PollingBlockTagSubscriber(this, sub.type);
      case "event":
        return new PollingEventSubscriber(this, sub.filter);
      case "transaction":
        return new PollingTransactionSubscriber(this, sub.hash);
      case "orphan":
        return new PollingOrphanSubscriber(this, sub.filter);
    }
    throw new Error(`unsupported event: ${sub.type}`);
  }
  _recoverSubscriber(oldSub, newSub) {
    for (const sub of this.#subs.values()) {
      if (sub.subscriber === oldSub) {
        if (sub.started) {
          sub.subscriber.stop();
        }
        sub.subscriber = newSub;
        if (sub.started) {
          newSub.start();
        }
        if (this.#pausedState != null) {
          newSub.pause(this.#pausedState);
        }
        break;
      }
    }
  }
  async#hasSub(event, emitArgs) {
    let sub = await getSubscription(event, this);
    if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
      sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
    }
    return this.#subs.get(sub.tag) || null;
  }
  async#getSub(event) {
    const subscription = await getSubscription(event, this);
    const tag = subscription.tag;
    let sub = this.#subs.get(tag);
    if (!sub) {
      const subscriber = this._getSubscriber(subscription);
      const addressableMap = new WeakMap;
      const nameMap = new Map;
      sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
      this.#subs.set(tag, sub);
    }
    return sub;
  }
  async on(event, listener) {
    const sub = await this.#getSub(event);
    sub.listeners.push({ listener, once: false });
    if (!sub.started) {
      sub.subscriber.start();
      sub.started = true;
      if (this.#pausedState != null) {
        sub.subscriber.pause(this.#pausedState);
      }
    }
    return this;
  }
  async once(event, listener) {
    const sub = await this.#getSub(event);
    sub.listeners.push({ listener, once: true });
    if (!sub.started) {
      sub.subscriber.start();
      sub.started = true;
      if (this.#pausedState != null) {
        sub.subscriber.pause(this.#pausedState);
      }
    }
    return this;
  }
  async emit(event, ...args) {
    const sub = await this.#hasSub(event, args);
    if (!sub || sub.listeners.length === 0) {
      return false;
    }
    const count = sub.listeners.length;
    sub.listeners = sub.listeners.filter(({ listener, once }) => {
      const payload = new EventPayload(this, once ? null : listener, event);
      try {
        listener.call(this, ...args, payload);
      } catch (error) {
      }
      return !once;
    });
    if (sub.listeners.length === 0) {
      if (sub.started) {
        sub.subscriber.stop();
      }
      this.#subs.delete(sub.tag);
    }
    return count > 0;
  }
  async listenerCount(event) {
    if (event) {
      const sub = await this.#hasSub(event);
      if (!sub) {
        return 0;
      }
      return sub.listeners.length;
    }
    let total = 0;
    for (const { listeners } of this.#subs.values()) {
      total += listeners.length;
    }
    return total;
  }
  async listeners(event) {
    if (event) {
      const sub = await this.#hasSub(event);
      if (!sub) {
        return [];
      }
      return sub.listeners.map(({ listener }) => listener);
    }
    let result = [];
    for (const { listeners } of this.#subs.values()) {
      result = result.concat(listeners.map(({ listener }) => listener));
    }
    return result;
  }
  async off(event, listener) {
    const sub = await this.#hasSub(event);
    if (!sub) {
      return this;
    }
    if (listener) {
      const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
      if (index >= 0) {
        sub.listeners.splice(index, 1);
      }
    }
    if (!listener || sub.listeners.length === 0) {
      if (sub.started) {
        sub.subscriber.stop();
      }
      this.#subs.delete(sub.tag);
    }
    return this;
  }
  async removeAllListeners(event) {
    if (event) {
      const { tag, started, subscriber } = await this.#getSub(event);
      if (started) {
        subscriber.stop();
      }
      this.#subs.delete(tag);
    } else {
      for (const [tag, { started, subscriber }] of this.#subs) {
        if (started) {
          subscriber.stop();
        }
        this.#subs.delete(tag);
      }
    }
    return this;
  }
  async addListener(event, listener) {
    return await this.on(event, listener);
  }
  async removeListener(event, listener) {
    return this.off(event, listener);
  }
  get destroyed() {
    return this.#destroyed;
  }
  destroy() {
    this.removeAllListeners();
    for (const timerId of this.#timers.keys()) {
      this._clearTimeout(timerId);
    }
    this.#destroyed = true;
  }
  get paused() {
    return this.#pausedState != null;
  }
  set paused(pause) {
    if (!!pause === this.paused) {
      return;
    }
    if (this.paused) {
      this.resume();
    } else {
      this.pause(false);
    }
  }
  pause(dropWhilePaused) {
    this.#lastBlockNumber = -1;
    if (this.#pausedState != null) {
      if (this.#pausedState == !!dropWhilePaused) {
        return;
      }
      assert(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
        operation: "pause"
      });
    }
    this._forEachSubscriber((s) => s.pause(dropWhilePaused));
    this.#pausedState = !!dropWhilePaused;
    for (const timer of this.#timers.values()) {
      if (timer.timer) {
        clearTimeout(timer.timer);
      }
      timer.time = getTime2() - timer.time;
    }
  }
  resume() {
    if (this.#pausedState == null) {
      return;
    }
    this._forEachSubscriber((s) => s.resume());
    this.#pausedState = null;
    for (const timer of this.#timers.values()) {
      let timeout = timer.time;
      if (timeout < 0) {
        timeout = 0;
      }
      timer.time = getTime2();
      setTimeout(timer.func, timeout);
    }
  }
}
function _parseString(result, start) {
  try {
    const bytes2 = _parseBytes(result, start);
    if (bytes2) {
      return toUtf8String(bytes2);
    }
  } catch (error) {
  }
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  try {
    const offset = getNumber(dataSlice(result, start, start + 32));
    const length = getNumber(dataSlice(result, offset, offset + 32));
    return dataSlice(result, offset + 32, offset + 32 + length);
  } catch (error) {
  }
  return null;
}
function numPad(value) {
  const result = toBeArray(value);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }
  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
}
var empty = new Uint8Array([]);
function encodeBytes(datas) {
  const result = [];
  let byteCount = 0;
  for (let i = 0;i < datas.length; i++) {
    result.push(empty);
    byteCount += 32;
  }
  for (let i = 0;i < datas.length; i++) {
    const data = getBytes(datas[i]);
    result[i] = numPad(byteCount);
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return concat(result);
}
var zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
function parseOffchainLookup(data) {
  const result = {
    sender: "",
    urls: [],
    calldata: "",
    selector: "",
    extraData: "",
    errorArgs: []
  };
  assert(dataLength(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
    reason: "insufficient OffchainLookup data"
  });
  const sender = dataSlice(data, 0, 32);
  assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup sender"
  });
  result.sender = dataSlice(sender, 12);
  try {
    const urls = [];
    const urlsOffset = getNumber(dataSlice(data, 32, 64));
    const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));
    const urlsData = dataSlice(data, urlsOffset + 32);
    for (let u = 0;u < urlsLength; u++) {
      const url = _parseString(urlsData, u * 32);
      if (url == null) {
        throw new Error("abort");
      }
      urls.push(url);
    }
    result.urls = urls;
  } catch (error) {
    assert(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup urls"
    });
  }
  try {
    const calldata = _parseBytes(data, 64);
    if (calldata == null) {
      throw new Error("abort");
    }
    result.calldata = calldata;
  } catch (error) {
    assert(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup calldata"
    });
  }
  assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup callbaackSelector"
  });
  result.selector = dataSlice(data, 96, 100);
  try {
    const extraData = _parseBytes(data, 128);
    if (extraData == null) {
      throw new Error("abort");
    }
    result.extraData = extraData;
  } catch (error) {
    assert(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup extraData"
    });
  }
  result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
  return result;
}
// node_modules/ethers/lib.esm/providers/abstract-signer.js
function checkProvider(signer, operation) {
  if (signer.provider) {
    return signer.provider;
  }
  assert(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
}
async function populate(signer, tx) {
  let pop = copyRequest(tx);
  if (pop.to != null) {
    pop.to = resolveAddress(pop.to, signer);
  }
  if (pop.from != null) {
    const from = pop.from;
    pop.from = Promise.all([
      signer.getAddress(),
      resolveAddress(from, signer)
    ]).then(([address, from2]) => {
      assertArgument(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
      return address;
    });
  } else {
    pop.from = signer.getAddress();
  }
  return await resolveProperties(pop);
}

class AbstractSigner {
  provider;
  constructor(provider) {
    defineProperties(this, { provider: provider || null });
  }
  async getNonce(blockTag) {
    return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
  }
  async populateCall(tx) {
    const pop = await populate(this, tx);
    return pop;
  }
  async populateTransaction(tx) {
    const provider = checkProvider(this, "populateTransaction");
    const pop = await populate(this, tx);
    if (pop.nonce == null) {
      pop.nonce = await this.getNonce("pending");
    }
    if (pop.gasLimit == null) {
      pop.gasLimit = await this.estimateGas(pop);
    }
    const network = await this.provider.getNetwork();
    if (pop.chainId != null) {
      const chainId = getBigInt(pop.chainId);
      assertArgument(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
    } else {
      pop.chainId = network.chainId;
    }
    const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
    if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
      assertArgument(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
    } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
      assertArgument(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
    }
    if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
      pop.type = 2;
    } else if (pop.type === 0 || pop.type === 1) {
      const feeData = await provider.getFeeData();
      assert(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
        operation: "getGasPrice"
      });
      if (pop.gasPrice == null) {
        pop.gasPrice = feeData.gasPrice;
      }
    } else {
      const feeData = await provider.getFeeData();
      if (pop.type == null) {
        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
          if (pop.authorizationList && pop.authorizationList.length) {
            pop.type = 4;
          } else {
            pop.type = 2;
          }
          if (pop.gasPrice != null) {
            const gasPrice = pop.gasPrice;
            delete pop.gasPrice;
            pop.maxFeePerGas = gasPrice;
            pop.maxPriorityFeePerGas = gasPrice;
          } else {
            if (pop.maxFeePerGas == null) {
              pop.maxFeePerGas = feeData.maxFeePerGas;
            }
            if (pop.maxPriorityFeePerGas == null) {
              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
            }
          }
        } else if (feeData.gasPrice != null) {
          assert(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
            operation: "populateTransaction"
          });
          if (pop.gasPrice == null) {
            pop.gasPrice = feeData.gasPrice;
          }
          pop.type = 0;
        } else {
          assert(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
            operation: "signer.getFeeData"
          });
        }
      } else if (pop.type === 2 || pop.type === 3 || pop.type === 4) {
        if (pop.maxFeePerGas == null) {
          pop.maxFeePerGas = feeData.maxFeePerGas;
        }
        if (pop.maxPriorityFeePerGas == null) {
          pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
        }
      }
    }
    return await resolveProperties(pop);
  }
  async populateAuthorization(_auth) {
    const auth = Object.assign({}, _auth);
    if (auth.chainId == null) {
      auth.chainId = (await checkProvider(this, "getNetwork").getNetwork()).chainId;
    }
    if (auth.nonce == null) {
      auth.nonce = await this.getNonce();
    }
    return auth;
  }
  async estimateGas(tx) {
    return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
  }
  async call(tx) {
    return checkProvider(this, "call").call(await this.populateCall(tx));
  }
  async resolveName(name) {
    const provider = checkProvider(this, "resolveName");
    return await provider.resolveName(name);
  }
  async sendTransaction(tx) {
    const provider = checkProvider(this, "sendTransaction");
    const pop = await this.populateTransaction(tx);
    delete pop.from;
    const txObj = Transaction.from(pop);
    return await provider.broadcastTransaction(await this.signTransaction(txObj));
  }
  authorize(authorization) {
    assert(false, "authorization not implemented for this signer", "UNSUPPORTED_OPERATION", { operation: "authorize" });
  }
}

class VoidSigner extends AbstractSigner {
  address;
  constructor(address, provider) {
    super(provider);
    defineProperties(this, { address });
  }
  async getAddress() {
    return this.address;
  }
  connect(provider) {
    return new VoidSigner(this.address, provider);
  }
  #throwUnsupported(suffix, operation) {
    assert(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
  }
  async signTransaction(tx) {
    this.#throwUnsupported("transactions", "signTransaction");
  }
  async signMessage(message) {
    this.#throwUnsupported("messages", "signMessage");
  }
  async signTypedData(domain, types, value) {
    this.#throwUnsupported("typed-data", "signTypedData");
  }
}
// node_modules/ethers/lib.esm/providers/community.js
var shown = new Set;
function showThrottleMessage(service) {
  if (shown.has(service)) {
    return;
  }
  shown.add(service);
  console.log("========= NOTICE =========");
  console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.org/api-keys/");
  console.log("==========================");
}
// node_modules/ethers/lib.esm/providers/subscriber-filterid.js
function copy3(obj) {
  return JSON.parse(JSON.stringify(obj));
}

class FilterIdSubscriber {
  #provider;
  #filterIdPromise;
  #poller;
  #running;
  #network;
  #hault;
  constructor(provider) {
    this.#provider = provider;
    this.#filterIdPromise = null;
    this.#poller = this.#poll.bind(this);
    this.#running = false;
    this.#network = null;
    this.#hault = false;
  }
  _subscribe(provider) {
    throw new Error("subclasses must override this");
  }
  _emitResults(provider, result) {
    throw new Error("subclasses must override this");
  }
  _recover(provider) {
    throw new Error("subclasses must override this");
  }
  async#poll(blockNumber) {
    try {
      if (this.#filterIdPromise == null) {
        this.#filterIdPromise = this._subscribe(this.#provider);
      }
      let filterId = null;
      try {
        filterId = await this.#filterIdPromise;
      } catch (error) {
        if (!isError(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
          throw error;
        }
      }
      if (filterId == null) {
        this.#filterIdPromise = null;
        this.#provider._recoverSubscriber(this, this._recover(this.#provider));
        return;
      }
      const network = await this.#provider.getNetwork();
      if (!this.#network) {
        this.#network = network;
      }
      if (this.#network.chainId !== network.chainId) {
        throw new Error("chaid changed");
      }
      if (this.#hault) {
        return;
      }
      const result = await this.#provider.send("eth_getFilterChanges", [filterId]);
      await this._emitResults(this.#provider, result);
    } catch (error) {
      console.log("@TODO", error);
    }
    this.#provider.once("block", this.#poller);
  }
  #teardown() {
    const filterIdPromise = this.#filterIdPromise;
    if (filterIdPromise) {
      this.#filterIdPromise = null;
      filterIdPromise.then((filterId) => {
        if (this.#provider.destroyed) {
          return;
        }
        this.#provider.send("eth_uninstallFilter", [filterId]);
      });
    }
  }
  start() {
    if (this.#running) {
      return;
    }
    this.#running = true;
    this.#poll(-2);
  }
  stop() {
    if (!this.#running) {
      return;
    }
    this.#running = false;
    this.#hault = true;
    this.#teardown();
    this.#provider.off("block", this.#poller);
  }
  pause(dropWhilePaused) {
    if (dropWhilePaused) {
      this.#teardown();
    }
    this.#provider.off("block", this.#poller);
  }
  resume() {
    this.start();
  }
}

class FilterIdEventSubscriber extends FilterIdSubscriber {
  #event;
  constructor(provider, filter) {
    super(provider);
    this.#event = copy3(filter);
  }
  _recover(provider) {
    return new PollingEventSubscriber(provider, this.#event);
  }
  async _subscribe(provider) {
    const filterId = await provider.send("eth_newFilter", [this.#event]);
    return filterId;
  }
  async _emitResults(provider, results) {
    for (const result of results) {
      provider.emit(this.#event, provider._wrapLog(result, provider._network));
    }
  }
}

class FilterIdPendingSubscriber extends FilterIdSubscriber {
  async _subscribe(provider) {
    return await provider.send("eth_newPendingTransactionFilter", []);
  }
  async _emitResults(provider, results) {
    for (const result of results) {
      provider.emit("pending", result);
    }
  }
}

// node_modules/ethers/lib.esm/providers/provider-jsonrpc.js
var Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
function deepCopy(value) {
  if (value == null || Primitive.indexOf(typeof value) >= 0) {
    return value;
  }
  if (typeof value.getAddress === "function") {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(deepCopy);
  }
  if (typeof value === "object") {
    return Object.keys(value).reduce((accum, key) => {
      accum[key] = value[key];
      return accum;
    }, {});
  }
  throw new Error(`should not happen: ${value} (${typeof value})`);
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
function isPollable(value) {
  return value && typeof value.pollingInterval === "number";
}
var defaultOptions2 = {
  polling: false,
  staticNetwork: null,
  batchStallTime: 10,
  batchMaxSize: 1 << 20,
  batchMaxCount: 100,
  cacheTimeout: 250,
  pollingInterval: 4000
};

class JsonRpcSigner extends AbstractSigner {
  address;
  constructor(provider, address) {
    super(provider);
    address = getAddress(address);
    defineProperties(this, { address });
  }
  connect(provider) {
    assert(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
      operation: "signer.connect"
    });
  }
  async getAddress() {
    return this.address;
  }
  async populateTransaction(tx) {
    return await this.populateCall(tx);
  }
  async sendUncheckedTransaction(_tx) {
    const tx = deepCopy(_tx);
    const promises = [];
    if (tx.from) {
      const _from = tx.from;
      promises.push((async () => {
        const from = await resolveAddress(_from, this.provider);
        assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
        tx.from = from;
      })());
    } else {
      tx.from = this.address;
    }
    if (tx.gasLimit == null) {
      promises.push((async () => {
        tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
      })());
    }
    if (tx.to != null) {
      const _to = tx.to;
      promises.push((async () => {
        tx.to = await resolveAddress(_to, this.provider);
      })());
    }
    if (promises.length) {
      await Promise.all(promises);
    }
    const hexTx = this.provider.getRpcTransaction(tx);
    return this.provider.send("eth_sendTransaction", [hexTx]);
  }
  async sendTransaction(tx) {
    const blockNumber = await this.provider.getBlockNumber();
    const hash2 = await this.sendUncheckedTransaction(tx);
    return await new Promise((resolve, reject) => {
      const timeouts = [1000, 100];
      let invalids = 0;
      const checkTx = async () => {
        try {
          const tx2 = await this.provider.getTransaction(hash2);
          if (tx2 != null) {
            resolve(tx2.replaceableTransaction(blockNumber));
            return;
          }
        } catch (error) {
          if (isError(error, "CANCELLED") || isError(error, "BAD_DATA") || isError(error, "NETWORK_ERROR") || isError(error, "UNSUPPORTED_OPERATION")) {
            if (error.info == null) {
              error.info = {};
            }
            error.info.sendTransactionHash = hash2;
            reject(error);
            return;
          }
          if (isError(error, "INVALID_ARGUMENT")) {
            invalids++;
            if (error.info == null) {
              error.info = {};
            }
            error.info.sendTransactionHash = hash2;
            if (invalids > 10) {
              reject(error);
              return;
            }
          }
          this.provider.emit("error", makeError("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
        }
        this.provider._setTimeout(() => {
          checkTx();
        }, timeouts.pop() || 4000);
      };
      checkTx();
    });
  }
  async signTransaction(_tx) {
    const tx = deepCopy(_tx);
    if (tx.from) {
      const from = await resolveAddress(tx.from, this.provider);
      assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
      tx.from = from;
    } else {
      tx.from = this.address;
    }
    const hexTx = this.provider.getRpcTransaction(tx);
    return await this.provider.send("eth_signTransaction", [hexTx]);
  }
  async signMessage(_message) {
    const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
    return await this.provider.send("personal_sign", [
      hexlify(message),
      this.address.toLowerCase()
    ]);
  }
  async signTypedData(domain, types, _value) {
    const value = deepCopy(_value);
    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
      const address = await resolveAddress(value2);
      assertArgument(address != null, "TypedData does not support null address", "value", value2);
      return address;
    });
    return await this.provider.send("eth_signTypedData_v4", [
      this.address.toLowerCase(),
      JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
    ]);
  }
  async unlock(password) {
    return this.provider.send("personal_unlockAccount", [
      this.address.toLowerCase(),
      password,
      null
    ]);
  }
  async _legacySignMessage(_message) {
    const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
    return await this.provider.send("eth_sign", [
      this.address.toLowerCase(),
      hexlify(message)
    ]);
  }
}

class JsonRpcApiProvider extends AbstractProvider {
  #options;
  #nextId;
  #payloads;
  #drainTimer;
  #notReady;
  #network;
  #pendingDetectNetwork;
  #scheduleDrain() {
    if (this.#drainTimer) {
      return;
    }
    const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
    this.#drainTimer = setTimeout(() => {
      this.#drainTimer = null;
      const payloads = this.#payloads;
      this.#payloads = [];
      while (payloads.length) {
        const batch = [payloads.shift()];
        while (payloads.length) {
          if (batch.length === this.#options.batchMaxCount) {
            break;
          }
          batch.push(payloads.shift());
          const bytes2 = JSON.stringify(batch.map((p) => p.payload));
          if (bytes2.length > this.#options.batchMaxSize) {
            payloads.unshift(batch.pop());
            break;
          }
        }
        (async () => {
          const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
          this.emit("debug", { action: "sendRpcPayload", payload });
          try {
            const result = await this._send(payload);
            this.emit("debug", { action: "receiveRpcResult", result });
            for (const { resolve, reject, payload: payload2 } of batch) {
              if (this.destroyed) {
                reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                continue;
              }
              const resp = result.filter((r) => r.id === payload2.id)[0];
              if (resp == null) {
                const error = makeError("missing response for request", "BAD_DATA", {
                  value: result,
                  info: { payload: payload2 }
                });
                this.emit("error", error);
                reject(error);
                continue;
              }
              if ("error" in resp) {
                reject(this.getRpcError(payload2, resp));
                continue;
              }
              resolve(resp.result);
            }
          } catch (error) {
            this.emit("debug", { action: "receiveRpcError", error });
            for (const { reject } of batch) {
              reject(error);
            }
          }
        })();
      }
    }, stallTime);
  }
  constructor(network, options) {
    super(network, options);
    this.#nextId = 1;
    this.#options = Object.assign({}, defaultOptions2, options || {});
    this.#payloads = [];
    this.#drainTimer = null;
    this.#network = null;
    this.#pendingDetectNetwork = null;
    {
      let resolve = null;
      const promise = new Promise((_resolve) => {
        resolve = _resolve;
      });
      this.#notReady = { promise, resolve };
    }
    const staticNetwork = this._getOption("staticNetwork");
    if (typeof staticNetwork === "boolean") {
      assertArgument(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
      if (staticNetwork && network != null) {
        this.#network = Network.from(network);
      }
    } else if (staticNetwork) {
      assertArgument(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
      this.#network = staticNetwork;
    }
  }
  _getOption(key) {
    return this.#options[key];
  }
  get _network() {
    assert(this.#network, "network is not available yet", "NETWORK_ERROR");
    return this.#network;
  }
  async _perform(req) {
    if (req.method === "call" || req.method === "estimateGas") {
      let tx = req.transaction;
      if (tx && tx.type != null && getBigInt(tx.type)) {
        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
          const feeData = await this.getFeeData();
          if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
            req = Object.assign({}, req, {
              transaction: Object.assign({}, tx, { type: undefined })
            });
          }
        }
      }
    }
    const request = this.getRpcRequest(req);
    if (request != null) {
      return await this.send(request.method, request.args);
    }
    return super._perform(req);
  }
  async _detectNetwork() {
    const network = this._getOption("staticNetwork");
    if (network) {
      if (network === true) {
        if (this.#network) {
          return this.#network;
        }
      } else {
        return network;
      }
    }
    if (this.#pendingDetectNetwork) {
      return await this.#pendingDetectNetwork;
    }
    if (this.ready) {
      this.#pendingDetectNetwork = (async () => {
        try {
          const result = Network.from(getBigInt(await this.send("eth_chainId", [])));
          this.#pendingDetectNetwork = null;
          return result;
        } catch (error) {
          this.#pendingDetectNetwork = null;
          throw error;
        }
      })();
      return await this.#pendingDetectNetwork;
    }
    this.#pendingDetectNetwork = (async () => {
      const payload = {
        id: this.#nextId++,
        method: "eth_chainId",
        params: [],
        jsonrpc: "2.0"
      };
      this.emit("debug", { action: "sendRpcPayload", payload });
      let result;
      try {
        result = (await this._send(payload))[0];
        this.#pendingDetectNetwork = null;
      } catch (error) {
        this.#pendingDetectNetwork = null;
        this.emit("debug", { action: "receiveRpcError", error });
        throw error;
      }
      this.emit("debug", { action: "receiveRpcResult", result });
      if ("result" in result) {
        return Network.from(getBigInt(result.result));
      }
      throw this.getRpcError(payload, result);
    })();
    return await this.#pendingDetectNetwork;
  }
  _start() {
    if (this.#notReady == null || this.#notReady.resolve == null) {
      return;
    }
    this.#notReady.resolve();
    this.#notReady = null;
    (async () => {
      while (this.#network == null && !this.destroyed) {
        try {
          this.#network = await this._detectNetwork();
        } catch (error) {
          if (this.destroyed) {
            break;
          }
          console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
          this.emit("error", makeError("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
          await stall(1000);
        }
      }
      this.#scheduleDrain();
    })();
  }
  async _waitUntilReady() {
    if (this.#notReady == null) {
      return;
    }
    return await this.#notReady.promise;
  }
  _getSubscriber(sub) {
    if (sub.type === "pending") {
      return new FilterIdPendingSubscriber(this);
    }
    if (sub.type === "event") {
      if (this._getOption("polling")) {
        return new PollingEventSubscriber(this, sub.filter);
      }
      return new FilterIdEventSubscriber(this, sub.filter);
    }
    if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
      return new UnmanagedSubscriber("orphan");
    }
    return super._getSubscriber(sub);
  }
  get ready() {
    return this.#notReady == null;
  }
  getRpcTransaction(tx) {
    const result = {};
    ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
      if (tx[key] == null) {
        return;
      }
      let dstKey = key;
      if (key === "gasLimit") {
        dstKey = "gas";
      }
      result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));
    });
    ["from", "to", "data"].forEach((key) => {
      if (tx[key] == null) {
        return;
      }
      result[key] = hexlify(tx[key]);
    });
    if (tx.accessList) {
      result["accessList"] = accessListify(tx.accessList);
    }
    if (tx.blobVersionedHashes) {
      result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h2) => h2.toLowerCase());
    }
    if (tx.authorizationList) {
      result["authorizationList"] = tx.authorizationList.map((_a) => {
        const a2 = authorizationify(_a);
        return {
          address: a2.address,
          nonce: toQuantity(a2.nonce),
          chainId: toQuantity(a2.chainId),
          yParity: toQuantity(a2.signature.yParity),
          r: toQuantity(a2.signature.r),
          s: toQuantity(a2.signature.s)
        };
      });
    }
    return result;
  }
  getRpcRequest(req) {
    switch (req.method) {
      case "chainId":
        return { method: "eth_chainId", args: [] };
      case "getBlockNumber":
        return { method: "eth_blockNumber", args: [] };
      case "getGasPrice":
        return { method: "eth_gasPrice", args: [] };
      case "getPriorityFee":
        return { method: "eth_maxPriorityFeePerGas", args: [] };
      case "getBalance":
        return {
          method: "eth_getBalance",
          args: [getLowerCase(req.address), req.blockTag]
        };
      case "getTransactionCount":
        return {
          method: "eth_getTransactionCount",
          args: [getLowerCase(req.address), req.blockTag]
        };
      case "getCode":
        return {
          method: "eth_getCode",
          args: [getLowerCase(req.address), req.blockTag]
        };
      case "getStorage":
        return {
          method: "eth_getStorageAt",
          args: [
            getLowerCase(req.address),
            "0x" + req.position.toString(16),
            req.blockTag
          ]
        };
      case "broadcastTransaction":
        return {
          method: "eth_sendRawTransaction",
          args: [req.signedTransaction]
        };
      case "getBlock":
        if ("blockTag" in req) {
          return {
            method: "eth_getBlockByNumber",
            args: [req.blockTag, !!req.includeTransactions]
          };
        } else if ("blockHash" in req) {
          return {
            method: "eth_getBlockByHash",
            args: [req.blockHash, !!req.includeTransactions]
          };
        }
        break;
      case "getTransaction":
        return {
          method: "eth_getTransactionByHash",
          args: [req.hash]
        };
      case "getTransactionReceipt":
        return {
          method: "eth_getTransactionReceipt",
          args: [req.hash]
        };
      case "call":
        return {
          method: "eth_call",
          args: [this.getRpcTransaction(req.transaction), req.blockTag]
        };
      case "estimateGas": {
        return {
          method: "eth_estimateGas",
          args: [this.getRpcTransaction(req.transaction)]
        };
      }
      case "getLogs":
        if (req.filter && req.filter.address != null) {
          if (Array.isArray(req.filter.address)) {
            req.filter.address = req.filter.address.map(getLowerCase);
          } else {
            req.filter.address = getLowerCase(req.filter.address);
          }
        }
        return { method: "eth_getLogs", args: [req.filter] };
    }
    return null;
  }
  getRpcError(payload, _error) {
    const { method } = payload;
    const { error } = _error;
    if (method === "eth_estimateGas" && error.message) {
      const msg = error.message;
      if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
        return makeError("insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: payload.params[0],
          info: { payload, error }
        });
      } else if (msg.match(/nonce/i) && msg.match(/too low/i)) {
        return makeError("nonce has already been used", "NONCE_EXPIRED", {
          transaction: payload.params[0],
          info: { payload, error }
        });
      }
    }
    if (method === "eth_call" || method === "eth_estimateGas") {
      const result = spelunkData(error);
      const e = AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
      e.info = { error, payload };
      return e;
    }
    const message = JSON.stringify(spelunkMessage(error));
    if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
      const actionMap = {
        eth_sign: "signMessage",
        personal_sign: "signMessage",
        eth_signTypedData_v4: "signTypedData",
        eth_signTransaction: "signTransaction",
        eth_sendTransaction: "sendTransaction",
        eth_requestAccounts: "requestAccess",
        wallet_requestAccounts: "requestAccess"
      };
      return makeError(`user rejected action`, "ACTION_REJECTED", {
        action: actionMap[method] || "unknown",
        reason: "rejected",
        info: { payload, error }
      });
    }
    if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
      const transaction = payload.params[0];
      if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
        return makeError("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
          transaction,
          info: { error }
        });
      }
      if (message.match(/nonce/i) && message.match(/too low/i)) {
        return makeError("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
      }
      if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
        return makeError("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
      }
      if (message.match(/only replay-protected/i)) {
        return makeError("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
          operation: method,
          info: { transaction, info: { error } }
        });
      }
    }
    let unsupported = !!message.match(/the method .* does not exist/i);
    if (!unsupported) {
      if (error && error.details && error.details.startsWith("Unauthorized method:")) {
        unsupported = true;
      }
    }
    if (unsupported) {
      return makeError("unsupported operation", "UNSUPPORTED_OPERATION", {
        operation: payload.method,
        info: { error, payload }
      });
    }
    return makeError("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
  }
  send(method, params) {
    if (this.destroyed) {
      return Promise.reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
    }
    const id2 = this.#nextId++;
    const promise = new Promise((resolve, reject) => {
      this.#payloads.push({
        resolve,
        reject,
        payload: { method, params, id: id2, jsonrpc: "2.0" }
      });
    });
    this.#scheduleDrain();
    return promise;
  }
  async getSigner(address) {
    if (address == null) {
      address = 0;
    }
    const accountsPromise = this.send("eth_accounts", []);
    if (typeof address === "number") {
      const accounts2 = await accountsPromise;
      if (address >= accounts2.length) {
        throw new Error("no such account");
      }
      return new JsonRpcSigner(this, accounts2[address]);
    }
    const { accounts } = await resolveProperties({
      network: this.getNetwork(),
      accounts: accountsPromise
    });
    address = getAddress(address);
    for (const account of accounts) {
      if (getAddress(account) === address) {
        return new JsonRpcSigner(this, address);
      }
    }
    throw new Error("invalid account");
  }
  async listAccounts() {
    const accounts = await this.send("eth_accounts", []);
    return accounts.map((a2) => new JsonRpcSigner(this, a2));
  }
  destroy() {
    if (this.#drainTimer) {
      clearTimeout(this.#drainTimer);
      this.#drainTimer = null;
    }
    for (const { payload, reject } of this.#payloads) {
      reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
    }
    this.#payloads = [];
    super.destroy();
  }
}

class JsonRpcApiPollingProvider extends JsonRpcApiProvider {
  #pollingInterval;
  constructor(network, options) {
    super(network, options);
    let pollingInterval = this._getOption("pollingInterval");
    if (pollingInterval == null) {
      pollingInterval = defaultOptions2.pollingInterval;
    }
    this.#pollingInterval = pollingInterval;
  }
  _getSubscriber(sub) {
    const subscriber = super._getSubscriber(sub);
    if (isPollable(subscriber)) {
      subscriber.pollingInterval = this.#pollingInterval;
    }
    return subscriber;
  }
  get pollingInterval() {
    return this.#pollingInterval;
  }
  set pollingInterval(value) {
    if (!Number.isInteger(value) || value < 0) {
      throw new Error("invalid interval");
    }
    this.#pollingInterval = value;
    this._forEachSubscriber((sub) => {
      if (isPollable(sub)) {
        sub.pollingInterval = this.#pollingInterval;
      }
    });
  }
}

class JsonRpcProvider extends JsonRpcApiPollingProvider {
  #connect;
  constructor(url, network, options) {
    if (url == null) {
      url = "http://localhost:8545";
    }
    super(network, options);
    if (typeof url === "string") {
      this.#connect = new FetchRequest(url);
    } else {
      this.#connect = url.clone();
    }
  }
  _getConnection() {
    return this.#connect.clone();
  }
  async send(method, params) {
    await this._start();
    return await super.send(method, params);
  }
  async _send(payload) {
    const request = this._getConnection();
    request.body = JSON.stringify(payload);
    request.setHeader("content-type", "application/json");
    const response = await request.send();
    response.assertOk();
    let resp = response.bodyJson;
    if (!Array.isArray(resp)) {
      resp = [resp];
    }
    return resp;
  }
}
function spelunkData(value) {
  if (value == null) {
    return null;
  }
  if (typeof value.message === "string" && value.message.match(/revert/i) && isHexString(value.data)) {
    return { message: value.message, data: value.data };
  }
  if (typeof value === "object") {
    for (const key in value) {
      const result = spelunkData(value[key]);
      if (result) {
        return result;
      }
    }
    return null;
  }
  if (typeof value === "string") {
    try {
      return spelunkData(JSON.parse(value));
    } catch (error) {
    }
  }
  return null;
}
function _spelunkMessage(value, result) {
  if (value == null) {
    return;
  }
  if (typeof value.message === "string") {
    result.push(value.message);
  }
  if (typeof value === "object") {
    for (const key in value) {
      _spelunkMessage(value[key], result);
    }
  }
  if (typeof value === "string") {
    try {
      return _spelunkMessage(JSON.parse(value), result);
    } catch (error) {
    }
  }
}
function spelunkMessage(value) {
  const result = [];
  _spelunkMessage(value, result);
  return result;
}

// node_modules/ethers/lib.esm/providers/provider-ankr.js
var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
function getHost(name) {
  switch (name) {
    case "mainnet":
      return "rpc.ankr.com/eth";
    case "goerli":
      return "rpc.ankr.com/eth_goerli";
    case "sepolia":
      return "rpc.ankr.com/eth_sepolia";
    case "arbitrum":
      return "rpc.ankr.com/arbitrum";
    case "base":
      return "rpc.ankr.com/base";
    case "base-goerli":
      return "rpc.ankr.com/base_goerli";
    case "base-sepolia":
      return "rpc.ankr.com/base_sepolia";
    case "bnb":
      return "rpc.ankr.com/bsc";
    case "bnbt":
      return "rpc.ankr.com/bsc_testnet_chapel";
    case "matic":
      return "rpc.ankr.com/polygon";
    case "matic-mumbai":
      return "rpc.ankr.com/polygon_mumbai";
    case "optimism":
      return "rpc.ankr.com/optimism";
    case "optimism-goerli":
      return "rpc.ankr.com/optimism_testnet";
    case "optimism-sepolia":
      return "rpc.ankr.com/optimism_sepolia";
  }
  assertArgument(false, "unsupported network", "network", name);
}

class AnkrProvider extends JsonRpcProvider {
  apiKey;
  constructor(_network, apiKey) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    if (apiKey == null) {
      apiKey = defaultApiKey;
    }
    const options = { polling: true, staticNetwork: network };
    const request = AnkrProvider.getRequest(network, apiKey);
    super(request, network, options);
    defineProperties(this, { apiKey });
  }
  _getProvider(chainId) {
    try {
      return new AnkrProvider(chainId, this.apiKey);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  static getRequest(network, apiKey) {
    if (apiKey == null) {
      apiKey = defaultApiKey;
    }
    const request = new FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
    request.allowGzip = true;
    if (apiKey === defaultApiKey) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("AnkrProvider");
        return true;
      };
    }
    return request;
  }
  getRpcError(payload, error) {
    if (payload.method === "eth_sendRawTransaction") {
      if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
        error.error.message = "replacement transaction underpriced";
      }
    }
    return super.getRpcError(payload, error);
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }
}

// node_modules/ethers/lib.esm/providers/provider-alchemy.js
var defaultApiKey2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
function getHost2(name) {
  switch (name) {
    case "mainnet":
      return "eth-mainnet.alchemyapi.io";
    case "goerli":
      return "eth-goerli.g.alchemy.com";
    case "sepolia":
      return "eth-sepolia.g.alchemy.com";
    case "arbitrum":
      return "arb-mainnet.g.alchemy.com";
    case "arbitrum-goerli":
      return "arb-goerli.g.alchemy.com";
    case "arbitrum-sepolia":
      return "arb-sepolia.g.alchemy.com";
    case "base":
      return "base-mainnet.g.alchemy.com";
    case "base-goerli":
      return "base-goerli.g.alchemy.com";
    case "base-sepolia":
      return "base-sepolia.g.alchemy.com";
    case "matic":
      return "polygon-mainnet.g.alchemy.com";
    case "matic-amoy":
      return "polygon-amoy.g.alchemy.com";
    case "matic-mumbai":
      return "polygon-mumbai.g.alchemy.com";
    case "optimism":
      return "opt-mainnet.g.alchemy.com";
    case "optimism-goerli":
      return "opt-goerli.g.alchemy.com";
    case "optimism-sepolia":
      return "opt-sepolia.g.alchemy.com";
  }
  assertArgument(false, "unsupported network", "network", name);
}

class AlchemyProvider extends JsonRpcProvider {
  apiKey;
  constructor(_network, apiKey) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    if (apiKey == null) {
      apiKey = defaultApiKey2;
    }
    const request = AlchemyProvider.getRequest(network, apiKey);
    super(request, network, { staticNetwork: network });
    defineProperties(this, { apiKey });
  }
  _getProvider(chainId) {
    try {
      return new AlchemyProvider(chainId, this.apiKey);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  async _perform(req) {
    if (req.method === "getTransactionResult") {
      const { trace, tx } = await resolveProperties({
        trace: this.send("trace_transaction", [req.hash]),
        tx: this.getTransaction(req.hash)
      });
      if (trace == null || tx == null) {
        return null;
      }
      let data;
      let error = false;
      try {
        data = trace[0].result.output;
        error = trace[0].error === "Reverted";
      } catch (error2) {
      }
      if (data) {
        assert(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
          action: "getTransactionResult",
          data,
          reason: null,
          transaction: tx,
          invocation: null,
          revert: null
        });
        return data;
      }
      assert(false, "could not parse trace result", "BAD_DATA", { value: trace });
    }
    return await super._perform(req);
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey2;
  }
  static getRequest(network, apiKey) {
    if (apiKey == null) {
      apiKey = defaultApiKey2;
    }
    const request = new FetchRequest(`https://${getHost2(network.name)}/v2/${apiKey}`);
    request.allowGzip = true;
    if (apiKey === defaultApiKey2) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("alchemy");
        return true;
      };
    }
    return request;
  }
}

// node_modules/ethers/lib.esm/providers/provider-chainstack.js
function getApiKey(name) {
  switch (name) {
    case "mainnet":
      return "39f1d67cedf8b7831010a665328c9197";
    case "arbitrum":
      return "0550c209db33c3abf4cc927e1e18cea1";
    case "bnb":
      return "98b5a77e531614387366f6fc5da097f8";
    case "matic":
      return "cd9d4d70377471aa7c142ec4a4205249";
  }
  assertArgument(false, "unsupported network", "network", name);
}
function getHost3(name) {
  switch (name) {
    case "mainnet":
      return "ethereum-mainnet.core.chainstack.com";
    case "arbitrum":
      return "arbitrum-mainnet.core.chainstack.com";
    case "bnb":
      return "bsc-mainnet.core.chainstack.com";
    case "matic":
      return "polygon-mainnet.core.chainstack.com";
  }
  assertArgument(false, "unsupported network", "network", name);
}

class ChainstackProvider extends JsonRpcProvider {
  apiKey;
  constructor(_network, apiKey) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    if (apiKey == null) {
      apiKey = getApiKey(network.name);
    }
    const request = ChainstackProvider.getRequest(network, apiKey);
    super(request, network, { staticNetwork: network });
    defineProperties(this, { apiKey });
  }
  _getProvider(chainId) {
    try {
      return new ChainstackProvider(chainId, this.apiKey);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  isCommunityResource() {
    return this.apiKey === getApiKey(this._network.name);
  }
  static getRequest(network, apiKey) {
    if (apiKey == null) {
      apiKey = getApiKey(network.name);
    }
    const request = new FetchRequest(`https://${getHost3(network.name)}/${apiKey}`);
    request.allowGzip = true;
    if (apiKey === getApiKey(network.name)) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("ChainstackProvider");
        return true;
      };
    }
    return request;
  }
}

// node_modules/ethers/lib.esm/providers/provider-cloudflare.js
class CloudflareProvider extends JsonRpcProvider {
  constructor(_network) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    assertArgument(network.name === "mainnet", "unsupported network", "network", _network);
    super("https://cloudflare-eth.com/", network, { staticNetwork: network });
  }
}

// node_modules/ethers/lib.esm/providers/provider-etherscan.js
var THROTTLE = 2000;
function isPromise2(value) {
  return value && typeof value.then === "function";
}
var EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";

class EtherscanPlugin extends NetworkPlugin {
  baseUrl;
  constructor(baseUrl) {
    super(EtherscanPluginId);
    defineProperties(this, { baseUrl });
  }
  clone() {
    return new EtherscanPlugin(this.baseUrl);
  }
}
var skipKeys = ["enableCcipRead"];
var nextId = 1;

class EtherscanProvider extends AbstractProvider {
  network;
  apiKey;
  #plugin;
  constructor(_network, _apiKey) {
    const apiKey = _apiKey != null ? _apiKey : null;
    super();
    const network = Network.from(_network);
    this.#plugin = network.getPlugin(EtherscanPluginId);
    defineProperties(this, { apiKey, network });
  }
  getBaseUrl() {
    if (this.#plugin) {
      return this.#plugin.baseUrl;
    }
    switch (this.network.name) {
      case "mainnet":
        return "https://api.etherscan.io";
      case "goerli":
        return "https://api-goerli.etherscan.io";
      case "sepolia":
        return "https://api-sepolia.etherscan.io";
      case "holesky":
        return "https://api-holesky.etherscan.io";
      case "arbitrum":
        return "https://api.arbiscan.io";
      case "arbitrum-goerli":
        return "https://api-goerli.arbiscan.io";
      case "base":
        return "https://api.basescan.org";
      case "base-sepolia":
        return "https://api-sepolia.basescan.org";
      case "bnb":
        return "https://api.bscscan.com";
      case "bnbt":
        return "https://api-testnet.bscscan.com";
      case "matic":
        return "https://api.polygonscan.com";
      case "matic-amoy":
        return "https://api-amoy.polygonscan.com";
      case "matic-mumbai":
        return "https://api-testnet.polygonscan.com";
      case "optimism":
        return "https://api-optimistic.etherscan.io";
      case "optimism-goerli":
        return "https://api-goerli-optimistic.etherscan.io";
      default:
    }
    assertArgument(false, "unsupported network", "network", this.network);
  }
  getUrl(module, params) {
    let query = Object.keys(params).reduce((accum, key) => {
      const value = params[key];
      if (value != null) {
        accum += `&${key}=${value}`;
      }
      return accum;
    }, "");
    if (this.apiKey) {
      query += `&apikey=${this.apiKey}`;
    }
    return `https://api.etherscan.io/v2/api?chainid=${this.network.chainId}&module=${module}${query}`;
  }
  getPostUrl() {
    return `https://api.etherscan.io/v2/api?chainid=${this.network.chainId}`;
  }
  getPostData(module, params) {
    params.module = module;
    params.apikey = this.apiKey;
    params.chainid = this.network.chainId;
    return params;
  }
  async detectNetwork() {
    return this.network;
  }
  async fetch(module, params, post) {
    const id2 = nextId++;
    const url = post ? this.getPostUrl() : this.getUrl(module, params);
    const payload = post ? this.getPostData(module, params) : null;
    this.emit("debug", { action: "sendRequest", id: id2, url, payload });
    const request = new FetchRequest(url);
    request.setThrottleParams({ slotInterval: 1000 });
    request.retryFunc = (req, resp, attempt) => {
      if (this.isCommunityResource()) {
        showThrottleMessage("Etherscan");
      }
      return Promise.resolve(true);
    };
    request.processFunc = async (request2, response2) => {
      const result2 = response2.hasBody() ? JSON.parse(toUtf8String(response2.body)) : {};
      const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
      if (module === "proxy") {
        if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
          this.emit("debug", { action: "receiveError", id: id2, reason: "proxy-NOTOK", error: result2 });
          response2.throwThrottleError(result2.result, THROTTLE);
        }
      } else {
        if (throttle) {
          this.emit("debug", { action: "receiveError", id: id2, reason: "null result", error: result2.result });
          response2.throwThrottleError(result2.result, THROTTLE);
        }
      }
      return response2;
    };
    if (payload) {
      request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
      request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
    }
    const response = await request.send();
    try {
      response.assertOk();
    } catch (error) {
      this.emit("debug", { action: "receiveError", id: id2, error, reason: "assertOk" });
      assert(false, "response error", "SERVER_ERROR", { request, response });
    }
    if (!response.hasBody()) {
      this.emit("debug", { action: "receiveError", id: id2, error: "missing body", reason: "null body" });
      assert(false, "missing response", "SERVER_ERROR", { request, response });
    }
    const result = JSON.parse(toUtf8String(response.body));
    if (module === "proxy") {
      if (result.jsonrpc != "2.0") {
        this.emit("debug", { action: "receiveError", id: id2, result, reason: "invalid JSON-RPC" });
        assert(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
      }
      if (result.error) {
        this.emit("debug", { action: "receiveError", id: id2, result, reason: "JSON-RPC error" });
        assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
      }
      this.emit("debug", { action: "receiveRequest", id: id2, result });
      return result.result;
    } else {
      if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
        this.emit("debug", { action: "receiveRequest", id: id2, result });
        return result.result;
      }
      if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
        this.emit("debug", { action: "receiveError", id: id2, result });
        assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
      }
      this.emit("debug", { action: "receiveRequest", id: id2, result });
      return result.result;
    }
  }
  _getTransactionPostData(transaction) {
    const result = {};
    for (let key in transaction) {
      if (skipKeys.indexOf(key) >= 0) {
        continue;
      }
      if (transaction[key] == null) {
        continue;
      }
      let value = transaction[key];
      if (key === "type" && value === 0) {
        continue;
      }
      if (key === "blockTag" && value === "latest") {
        continue;
      }
      if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
        value = toQuantity(value);
      } else if (key === "accessList") {
        value = "[" + accessListify(value).map((set) => {
          return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
        }).join(",") + "]";
      } else if (key === "blobVersionedHashes") {
        if (value.length === 0) {
          continue;
        }
        assert(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
          operation: "_getTransactionPostData",
          info: { transaction }
        });
      } else {
        value = hexlify(value);
      }
      result[key] = value;
    }
    return result;
  }
  _checkError(req, error, transaction) {
    let message = "";
    if (isError(error, "SERVER_ERROR")) {
      try {
        message = error.info.result.error.message;
      } catch (e) {
      }
      if (!message) {
        try {
          message = error.info.message;
        } catch (e) {
        }
      }
    }
    if (req.method === "estimateGas") {
      if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
        assert(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: req.transaction
        });
      }
    }
    if (req.method === "call" || req.method === "estimateGas") {
      if (message.match(/execution reverted/i)) {
        let data = "";
        try {
          data = error.info.result.error.data;
        } catch (error2) {
        }
        const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
        e.info = { request: req, error };
        throw e;
      }
    }
    if (message) {
      if (req.method === "broadcastTransaction") {
        const transaction2 = Transaction.from(req.signedTransaction);
        if (message.match(/replacement/i) && message.match(/underpriced/i)) {
          assert(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
            transaction: transaction2
          });
        }
        if (message.match(/insufficient funds/)) {
          assert(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
            transaction: transaction2
          });
        }
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
          assert(false, "nonce has already been used", "NONCE_EXPIRED", {
            transaction: transaction2
          });
        }
      }
    }
    throw error;
  }
  async _detectNetwork() {
    return this.network;
  }
  async _perform(req) {
    switch (req.method) {
      case "chainId":
        return this.network.chainId;
      case "getBlockNumber":
        return this.fetch("proxy", { action: "eth_blockNumber" });
      case "getGasPrice":
        return this.fetch("proxy", { action: "eth_gasPrice" });
      case "getPriorityFee":
        if (this.network.name === "mainnet") {
          return "1000000000";
        } else if (this.network.name === "optimism") {
          return "1000000";
        } else {
          throw new Error("fallback onto the AbstractProvider default");
        }
      case "getBalance":
        return this.fetch("account", {
          action: "balance",
          address: req.address,
          tag: req.blockTag
        });
      case "getTransactionCount":
        return this.fetch("proxy", {
          action: "eth_getTransactionCount",
          address: req.address,
          tag: req.blockTag
        });
      case "getCode":
        return this.fetch("proxy", {
          action: "eth_getCode",
          address: req.address,
          tag: req.blockTag
        });
      case "getStorage":
        return this.fetch("proxy", {
          action: "eth_getStorageAt",
          address: req.address,
          position: req.position,
          tag: req.blockTag
        });
      case "broadcastTransaction":
        return this.fetch("proxy", {
          action: "eth_sendRawTransaction",
          hex: req.signedTransaction
        }, true).catch((error) => {
          return this._checkError(req, error, req.signedTransaction);
        });
      case "getBlock":
        if ("blockTag" in req) {
          return this.fetch("proxy", {
            action: "eth_getBlockByNumber",
            tag: req.blockTag,
            boolean: req.includeTransactions ? "true" : "false"
          });
        }
        assert(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
          operation: "getBlock(blockHash)"
        });
      case "getTransaction":
        return this.fetch("proxy", {
          action: "eth_getTransactionByHash",
          txhash: req.hash
        });
      case "getTransactionReceipt":
        return this.fetch("proxy", {
          action: "eth_getTransactionReceipt",
          txhash: req.hash
        });
      case "call": {
        if (req.blockTag !== "latest") {
          throw new Error("EtherscanProvider does not support blockTag for call");
        }
        const postData = this._getTransactionPostData(req.transaction);
        postData.module = "proxy";
        postData.action = "eth_call";
        try {
          return await this.fetch("proxy", postData, true);
        } catch (error) {
          return this._checkError(req, error, req.transaction);
        }
      }
      case "estimateGas": {
        const postData = this._getTransactionPostData(req.transaction);
        postData.module = "proxy";
        postData.action = "eth_estimateGas";
        try {
          return await this.fetch("proxy", postData, true);
        } catch (error) {
          return this._checkError(req, error, req.transaction);
        }
      }
      default:
        break;
    }
    return super._perform(req);
  }
  async getNetwork() {
    return this.network;
  }
  async getEtherPrice() {
    if (this.network.name !== "mainnet") {
      return 0;
    }
    return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
  }
  async getContract(_address) {
    let address = this._getAddress(_address);
    if (isPromise2(address)) {
      address = await address;
    }
    try {
      const resp = await this.fetch("contract", {
        action: "getabi",
        address
      });
      const abi = JSON.parse(resp);
      return new Contract(address, abi, this);
    } catch (error) {
      return null;
    }
  }
  isCommunityResource() {
    return this.apiKey == null;
  }
}

// node_modules/ethers/lib.esm/providers/ws-browser.js
function getGlobal2() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
var _WebSocket = getGlobal2().WebSocket;

// node_modules/ethers/lib.esm/providers/provider-socket.js
class SocketSubscriber {
  #provider;
  #filter;
  get filter() {
    return JSON.parse(this.#filter);
  }
  #filterId;
  #paused;
  #emitPromise;
  constructor(provider, filter) {
    this.#provider = provider;
    this.#filter = JSON.stringify(filter);
    this.#filterId = null;
    this.#paused = null;
    this.#emitPromise = null;
  }
  start() {
    this.#filterId = this.#provider.send("eth_subscribe", this.filter).then((filterId) => {
      this.#provider._register(filterId, this);
      return filterId;
    });
  }
  stop() {
    this.#filterId.then((filterId) => {
      if (this.#provider.destroyed) {
        return;
      }
      this.#provider.send("eth_unsubscribe", [filterId]);
    });
    this.#filterId = null;
  }
  pause(dropWhilePaused) {
    assert(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
    this.#paused = !!dropWhilePaused;
  }
  resume() {
    this.#paused = null;
  }
  _handleMessage(message) {
    if (this.#filterId == null) {
      return;
    }
    if (this.#paused === null) {
      let emitPromise = this.#emitPromise;
      if (emitPromise == null) {
        emitPromise = this._emit(this.#provider, message);
      } else {
        emitPromise = emitPromise.then(async () => {
          await this._emit(this.#provider, message);
        });
      }
      this.#emitPromise = emitPromise.then(() => {
        if (this.#emitPromise === emitPromise) {
          this.#emitPromise = null;
        }
      });
    }
  }
  async _emit(provider, message) {
    throw new Error("sub-classes must implemente this; _emit");
  }
}

class SocketBlockSubscriber extends SocketSubscriber {
  constructor(provider) {
    super(provider, ["newHeads"]);
  }
  async _emit(provider, message) {
    provider.emit("block", parseInt(message.number));
  }
}

class SocketPendingSubscriber extends SocketSubscriber {
  constructor(provider) {
    super(provider, ["newPendingTransactions"]);
  }
  async _emit(provider, message) {
    provider.emit("pending", message);
  }
}

class SocketEventSubscriber extends SocketSubscriber {
  #logFilter;
  get logFilter() {
    return JSON.parse(this.#logFilter);
  }
  constructor(provider, filter) {
    super(provider, ["logs", filter]);
    this.#logFilter = JSON.stringify(filter);
  }
  async _emit(provider, message) {
    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
  }
}

class SocketProvider extends JsonRpcApiProvider {
  #callbacks;
  #subs;
  #pending;
  constructor(network, _options) {
    const options = Object.assign({}, _options != null ? _options : {});
    assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
    options.batchMaxCount = 1;
    if (options.staticNetwork == null) {
      options.staticNetwork = true;
    }
    super(network, options);
    this.#callbacks = new Map;
    this.#subs = new Map;
    this.#pending = new Map;
  }
  _getSubscriber(sub) {
    switch (sub.type) {
      case "close":
        return new UnmanagedSubscriber("close");
      case "block":
        return new SocketBlockSubscriber(this);
      case "pending":
        return new SocketPendingSubscriber(this);
      case "event":
        return new SocketEventSubscriber(this, sub.filter);
      case "orphan":
        if (sub.filter.orphan === "drop-log") {
          return new UnmanagedSubscriber("drop-log");
        }
    }
    return super._getSubscriber(sub);
  }
  _register(filterId, subscriber) {
    this.#subs.set(filterId, subscriber);
    const pending = this.#pending.get(filterId);
    if (pending) {
      for (const message of pending) {
        subscriber._handleMessage(message);
      }
      this.#pending.delete(filterId);
    }
  }
  async _send(payload) {
    assertArgument(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
    const promise = new Promise((resolve, reject) => {
      this.#callbacks.set(payload.id, { payload, resolve, reject });
    });
    await this._waitUntilReady();
    await this._write(JSON.stringify(payload));
    return [await promise];
  }
  async _processMessage(message) {
    const result = JSON.parse(message);
    if (result && typeof result === "object" && "id" in result) {
      const callback = this.#callbacks.get(result.id);
      if (callback == null) {
        this.emit("error", makeError("received result for unknown id", "UNKNOWN_ERROR", {
          reasonCode: "UNKNOWN_ID",
          result
        }));
        return;
      }
      this.#callbacks.delete(result.id);
      callback.resolve(result);
    } else if (result && result.method === "eth_subscription") {
      const filterId = result.params.subscription;
      const subscriber = this.#subs.get(filterId);
      if (subscriber) {
        subscriber._handleMessage(result.params.result);
      } else {
        let pending = this.#pending.get(filterId);
        if (pending == null) {
          pending = [];
          this.#pending.set(filterId, pending);
        }
        pending.push(result.params.result);
      }
    } else {
      this.emit("error", makeError("received unexpected message", "UNKNOWN_ERROR", {
        reasonCode: "UNEXPECTED_MESSAGE",
        result
      }));
      return;
    }
  }
  async _write(message) {
    throw new Error("sub-classes must override this");
  }
}

// node_modules/ethers/lib.esm/providers/provider-websocket.js
class WebSocketProvider extends SocketProvider {
  #connect;
  #websocket;
  get websocket() {
    if (this.#websocket == null) {
      throw new Error("websocket closed");
    }
    return this.#websocket;
  }
  constructor(url, network, options) {
    super(network, options);
    if (typeof url === "string") {
      this.#connect = () => {
        return new _WebSocket(url);
      };
      this.#websocket = this.#connect();
    } else if (typeof url === "function") {
      this.#connect = url;
      this.#websocket = url();
    } else {
      this.#connect = null;
      this.#websocket = url;
    }
    this.websocket.onopen = async () => {
      try {
        await this._start();
        this.resume();
      } catch (error) {
        console.log("failed to start WebsocketProvider", error);
      }
    };
    this.websocket.onmessage = (message) => {
      this._processMessage(message.data);
    };
  }
  async _write(message) {
    this.websocket.send(message);
  }
  async destroy() {
    if (this.#websocket != null) {
      this.#websocket.close();
      this.#websocket = null;
    }
    super.destroy();
  }
}

// node_modules/ethers/lib.esm/providers/provider-infura.js
var defaultProjectId = "84842078b09946638c03157f83405213";
function getHost4(name) {
  switch (name) {
    case "mainnet":
      return "mainnet.infura.io";
    case "goerli":
      return "goerli.infura.io";
    case "sepolia":
      return "sepolia.infura.io";
    case "arbitrum":
      return "arbitrum-mainnet.infura.io";
    case "arbitrum-goerli":
      return "arbitrum-goerli.infura.io";
    case "arbitrum-sepolia":
      return "arbitrum-sepolia.infura.io";
    case "base":
      return "base-mainnet.infura.io";
    case "base-goerlia":
    case "base-goerli":
      return "base-goerli.infura.io";
    case "base-sepolia":
      return "base-sepolia.infura.io";
    case "bnb":
      return "bsc-mainnet.infura.io";
    case "bnbt":
      return "bsc-testnet.infura.io";
    case "linea":
      return "linea-mainnet.infura.io";
    case "linea-goerli":
      return "linea-goerli.infura.io";
    case "linea-sepolia":
      return "linea-sepolia.infura.io";
    case "matic":
      return "polygon-mainnet.infura.io";
    case "matic-amoy":
      return "polygon-amoy.infura.io";
    case "matic-mumbai":
      return "polygon-mumbai.infura.io";
    case "optimism":
      return "optimism-mainnet.infura.io";
    case "optimism-goerli":
      return "optimism-goerli.infura.io";
    case "optimism-sepolia":
      return "optimism-sepolia.infura.io";
  }
  assertArgument(false, "unsupported network", "network", name);
}

class InfuraWebSocketProvider extends WebSocketProvider {
  projectId;
  projectSecret;
  constructor(network, projectId) {
    const provider = new InfuraProvider(network, projectId);
    const req = provider._getConnection();
    assert(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
    const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
    super(url, provider._network);
    defineProperties(this, {
      projectId: provider.projectId,
      projectSecret: provider.projectSecret
    });
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
}

class InfuraProvider extends JsonRpcProvider {
  projectId;
  projectSecret;
  constructor(_network, projectId, projectSecret) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    if (projectId == null) {
      projectId = defaultProjectId;
    }
    if (projectSecret == null) {
      projectSecret = null;
    }
    const request = InfuraProvider.getRequest(network, projectId, projectSecret);
    super(request, network, { staticNetwork: network });
    defineProperties(this, { projectId, projectSecret });
  }
  _getProvider(chainId) {
    try {
      return new InfuraProvider(chainId, this.projectId, this.projectSecret);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
  static getWebSocketProvider(network, projectId) {
    return new InfuraWebSocketProvider(network, projectId);
  }
  static getRequest(network, projectId, projectSecret) {
    if (projectId == null) {
      projectId = defaultProjectId;
    }
    if (projectSecret == null) {
      projectSecret = null;
    }
    const request = new FetchRequest(`https://${getHost4(network.name)}/v3/${projectId}`);
    request.allowGzip = true;
    if (projectSecret) {
      request.setCredentials("", projectSecret);
    }
    if (projectId === defaultProjectId) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("InfuraProvider");
        return true;
      };
    }
    return request;
  }
}

// node_modules/ethers/lib.esm/providers/provider-quicknode.js
var defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
function getHost5(name) {
  switch (name) {
    case "mainnet":
      return "ethers.quiknode.pro";
    case "goerli":
      return "ethers.ethereum-goerli.quiknode.pro";
    case "sepolia":
      return "ethers.ethereum-sepolia.quiknode.pro";
    case "holesky":
      return "ethers.ethereum-holesky.quiknode.pro";
    case "arbitrum":
      return "ethers.arbitrum-mainnet.quiknode.pro";
    case "arbitrum-goerli":
      return "ethers.arbitrum-goerli.quiknode.pro";
    case "arbitrum-sepolia":
      return "ethers.arbitrum-sepolia.quiknode.pro";
    case "base":
      return "ethers.base-mainnet.quiknode.pro";
    case "base-goerli":
      return "ethers.base-goerli.quiknode.pro";
    case "base-spolia":
      return "ethers.base-sepolia.quiknode.pro";
    case "bnb":
      return "ethers.bsc.quiknode.pro";
    case "bnbt":
      return "ethers.bsc-testnet.quiknode.pro";
    case "matic":
      return "ethers.matic.quiknode.pro";
    case "matic-mumbai":
      return "ethers.matic-testnet.quiknode.pro";
    case "optimism":
      return "ethers.optimism.quiknode.pro";
    case "optimism-goerli":
      return "ethers.optimism-goerli.quiknode.pro";
    case "optimism-sepolia":
      return "ethers.optimism-sepolia.quiknode.pro";
    case "xdai":
      return "ethers.xdai.quiknode.pro";
  }
  assertArgument(false, "unsupported network", "network", name);
}

class QuickNodeProvider extends JsonRpcProvider {
  token;
  constructor(_network, token) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    if (token == null) {
      token = defaultToken;
    }
    const request = QuickNodeProvider.getRequest(network, token);
    super(request, network, { staticNetwork: network });
    defineProperties(this, { token });
  }
  _getProvider(chainId) {
    try {
      return new QuickNodeProvider(chainId, this.token);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  isCommunityResource() {
    return this.token === defaultToken;
  }
  static getRequest(network, token) {
    if (token == null) {
      token = defaultToken;
    }
    const request = new FetchRequest(`https://${getHost5(network.name)}/${token}`);
    request.allowGzip = true;
    if (token === defaultToken) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("QuickNodeProvider");
        return true;
      };
    }
    return request;
  }
}

// node_modules/ethers/lib.esm/providers/provider-fallback.js
var BN_16 = BigInt("1");
var BN_24 = BigInt("2");
function shuffle(array) {
  for (let i = array.length - 1;i > 0; i--) {
    const j2 = Math.floor(Math.random() * (i + 1));
    const tmp = array[i];
    array[i] = array[j2];
    array[j2] = tmp;
  }
}
function stall2(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function getTime3() {
  return new Date().getTime();
}
function stringify2(value) {
  return JSON.stringify(value, (key, value2) => {
    if (typeof value2 === "bigint") {
      return { type: "bigint", value: value2.toString() };
    }
    return value2;
  });
}
var defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
var defaultState = {
  blockNumber: -2,
  requests: 0,
  lateResponses: 0,
  errorResponses: 0,
  outOfSync: -1,
  unsupportedEvents: 0,
  rollingDuration: 0,
  score: 0,
  _network: null,
  _updateNumber: null,
  _totalTime: 0,
  _lastFatalError: null,
  _lastFatalErrorTimestamp: 0
};
async function waitForSync(config, blockNumber) {
  while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
    if (!config._updateNumber) {
      config._updateNumber = (async () => {
        try {
          const blockNumber2 = await config.provider.getBlockNumber();
          if (blockNumber2 > config.blockNumber) {
            config.blockNumber = blockNumber2;
          }
        } catch (error) {
          config.blockNumber = -2;
          config._lastFatalError = error;
          config._lastFatalErrorTimestamp = getTime3();
        }
        config._updateNumber = null;
      })();
    }
    await config._updateNumber;
    config.outOfSync++;
    if (config._lastFatalError) {
      break;
    }
  }
}
function _normalize(value) {
  if (value == null) {
    return "null";
  }
  if (Array.isArray(value)) {
    return "[" + value.map(_normalize).join(",") + "]";
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return _normalize(value.toJSON());
  }
  switch (typeof value) {
    case "boolean":
    case "symbol":
      return value.toString();
    case "bigint":
    case "number":
      return BigInt(value).toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
    }
  }
  console.log("Could not serialize", value);
  throw new Error("Hmm...");
}
function normalizeResult(method, value) {
  if ("error" in value) {
    const error = value.error;
    let tag;
    if (isError(error, "CALL_EXCEPTION")) {
      tag = _normalize(Object.assign({}, error, {
        shortMessage: undefined,
        reason: undefined,
        info: undefined
      }));
    } else {
      tag = _normalize(error);
    }
    return { tag, value: error };
  }
  const result = value.result;
  return { tag: _normalize(result), value: result };
}
function checkQuorum(quorum, results) {
  const tally = new Map;
  for (const { value, tag, weight } of results) {
    const t = tally.get(tag) || { value, weight: 0 };
    t.weight += weight;
    tally.set(tag, t);
  }
  let best = null;
  for (const r of tally.values()) {
    if (r.weight >= quorum && (!best || r.weight > best.weight)) {
      best = r;
    }
  }
  if (best) {
    return best.value;
  }
  return;
}
function getMedian(quorum, results) {
  let resultWeight = 0;
  const errorMap = new Map;
  let bestError = null;
  const values = [];
  for (const { value, tag, weight } of results) {
    if (value instanceof Error) {
      const e = errorMap.get(tag) || { value, weight: 0 };
      e.weight += weight;
      errorMap.set(tag, e);
      if (bestError == null || e.weight > bestError.weight) {
        bestError = e;
      }
    } else {
      values.push(BigInt(value));
      resultWeight += weight;
    }
  }
  if (resultWeight < quorum) {
    if (bestError && bestError.weight >= quorum) {
      return bestError.value;
    }
    return;
  }
  values.sort((a2, b4) => a2 < b4 ? -1 : b4 > a2 ? 1 : 0);
  const mid = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[mid];
  }
  return (values[mid - 1] + values[mid] + BN_16) / BN_24;
}
function getAnyResult(quorum, results) {
  const result = checkQuorum(quorum, results);
  if (result !== undefined) {
    return result;
  }
  for (const r of results) {
    if (r.value) {
      return r.value;
    }
  }
  return;
}
function getFuzzyMode(quorum, results) {
  if (quorum === 1) {
    return getNumber(getMedian(quorum, results), "%internal");
  }
  const tally = new Map;
  const add2 = (result, weight) => {
    const t = tally.get(result) || { result, weight: 0 };
    t.weight += weight;
    tally.set(result, t);
  };
  for (const { weight, value } of results) {
    const r = getNumber(value);
    add2(r - 1, weight);
    add2(r, weight);
    add2(r + 1, weight);
  }
  let bestWeight = 0;
  let bestResult = undefined;
  for (const { weight, result } of tally.values()) {
    if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
      bestWeight = weight;
      bestResult = result;
    }
  }
  return bestResult;
}

class FallbackProvider extends AbstractProvider {
  quorum;
  eventQuorum;
  eventWorkers;
  #configs;
  #height;
  #initialSyncPromise;
  constructor(providers, network, options) {
    super(network, options);
    this.#configs = providers.map((p) => {
      if (p instanceof AbstractProvider) {
        return Object.assign({ provider: p }, defaultConfig, defaultState);
      } else {
        return Object.assign({}, defaultConfig, p, defaultState);
      }
    });
    this.#height = -2;
    this.#initialSyncPromise = null;
    if (options && options.quorum != null) {
      this.quorum = options.quorum;
    } else {
      this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {
        accum += config.weight;
        return accum;
      }, 0) / 2);
    }
    this.eventQuorum = 1;
    this.eventWorkers = 1;
    assertArgument(this.quorum <= this.#configs.reduce((a2, c) => a2 + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
  }
  get providerConfigs() {
    return this.#configs.map((c) => {
      const result = Object.assign({}, c);
      for (const key in result) {
        if (key[0] === "_") {
          delete result[key];
        }
      }
      return result;
    });
  }
  async _detectNetwork() {
    return Network.from(getBigInt(await this._perform({ method: "chainId" })));
  }
  async _translatePerform(provider, req) {
    switch (req.method) {
      case "broadcastTransaction":
        return await provider.broadcastTransaction(req.signedTransaction);
      case "call":
        return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
      case "chainId":
        return (await provider.getNetwork()).chainId;
      case "estimateGas":
        return await provider.estimateGas(req.transaction);
      case "getBalance":
        return await provider.getBalance(req.address, req.blockTag);
      case "getBlock": {
        const block = "blockHash" in req ? req.blockHash : req.blockTag;
        return await provider.getBlock(block, req.includeTransactions);
      }
      case "getBlockNumber":
        return await provider.getBlockNumber();
      case "getCode":
        return await provider.getCode(req.address, req.blockTag);
      case "getGasPrice":
        return (await provider.getFeeData()).gasPrice;
      case "getPriorityFee":
        return (await provider.getFeeData()).maxPriorityFeePerGas;
      case "getLogs":
        return await provider.getLogs(req.filter);
      case "getStorage":
        return await provider.getStorage(req.address, req.position, req.blockTag);
      case "getTransaction":
        return await provider.getTransaction(req.hash);
      case "getTransactionCount":
        return await provider.getTransactionCount(req.address, req.blockTag);
      case "getTransactionReceipt":
        return await provider.getTransactionReceipt(req.hash);
      case "getTransactionResult":
        return await provider.getTransactionResult(req.hash);
    }
  }
  #getNextConfig(running) {
    const configs = Array.from(running).map((r) => r.config);
    const allConfigs = this.#configs.slice();
    shuffle(allConfigs);
    allConfigs.sort((a2, b4) => a2.priority - b4.priority);
    for (const config of allConfigs) {
      if (config._lastFatalError) {
        continue;
      }
      if (configs.indexOf(config) === -1) {
        return config;
      }
    }
    return null;
  }
  #addRunner(running, req) {
    const config = this.#getNextConfig(running);
    if (config == null) {
      return null;
    }
    const runner = {
      config,
      result: null,
      didBump: false,
      perform: null,
      staller: null
    };
    const now = getTime3();
    runner.perform = (async () => {
      try {
        config.requests++;
        const result = await this._translatePerform(config.provider, req);
        runner.result = { result };
      } catch (error) {
        config.errorResponses++;
        runner.result = { error };
      }
      const dt = getTime3() - now;
      config._totalTime += dt;
      config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
      runner.perform = null;
    })();
    runner.staller = (async () => {
      await stall2(config.stallTimeout);
      runner.staller = null;
    })();
    running.add(runner);
    return runner;
  }
  async#initialSync() {
    let initialSync = this.#initialSyncPromise;
    if (!initialSync) {
      const promises = [];
      this.#configs.forEach((config) => {
        promises.push((async () => {
          await waitForSync(config, 0);
          if (!config._lastFatalError) {
            config._network = await config.provider.getNetwork();
          }
        })());
      });
      this.#initialSyncPromise = initialSync = (async () => {
        await Promise.all(promises);
        let chainId = null;
        for (const config of this.#configs) {
          if (config._lastFatalError) {
            continue;
          }
          const network = config._network;
          if (chainId == null) {
            chainId = network.chainId;
          } else if (network.chainId !== chainId) {
            assert(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
              operation: "new FallbackProvider"
            });
          }
        }
      })();
    }
    await initialSync;
  }
  async#checkQuorum(running, req) {
    const results = [];
    for (const runner of running) {
      if (runner.result != null) {
        const { tag, value } = normalizeResult(req.method, runner.result);
        results.push({ tag, value, weight: runner.config.weight });
      }
    }
    if (results.reduce((a2, r) => a2 + r.weight, 0) < this.quorum) {
      return;
    }
    switch (req.method) {
      case "getBlockNumber": {
        if (this.#height === -2) {
          this.#height = Math.ceil(getNumber(getMedian(this.quorum, this.#configs.filter((c) => !c._lastFatalError).map((c) => ({
            value: c.blockNumber,
            tag: getNumber(c.blockNumber).toString(),
            weight: c.weight
          })))));
        }
        const mode = getFuzzyMode(this.quorum, results);
        if (mode === undefined) {
          return;
        }
        if (mode > this.#height) {
          this.#height = mode;
        }
        return this.#height;
      }
      case "getGasPrice":
      case "getPriorityFee":
      case "estimateGas":
        return getMedian(this.quorum, results);
      case "getBlock":
        if ("blockTag" in req && req.blockTag === "pending") {
          return getAnyResult(this.quorum, results);
        }
        return checkQuorum(this.quorum, results);
      case "call":
      case "chainId":
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
      case "getStorage":
      case "getTransaction":
      case "getTransactionReceipt":
      case "getLogs":
        return checkQuorum(this.quorum, results);
      case "broadcastTransaction":
        return getAnyResult(this.quorum, results);
    }
    assert(false, "unsupported method", "UNSUPPORTED_OPERATION", {
      operation: `_perform(${stringify2(req.method)})`
    });
  }
  async#waitForQuorum(running, req) {
    if (running.size === 0) {
      throw new Error("no runners?!");
    }
    const interesting = [];
    let newRunners = 0;
    for (const runner of running) {
      if (runner.perform) {
        interesting.push(runner.perform);
      }
      if (runner.staller) {
        interesting.push(runner.staller);
        continue;
      }
      if (runner.didBump) {
        continue;
      }
      runner.didBump = true;
      newRunners++;
    }
    const value = await this.#checkQuorum(running, req);
    if (value !== undefined) {
      if (value instanceof Error) {
        throw value;
      }
      return value;
    }
    for (let i = 0;i < newRunners; i++) {
      this.#addRunner(running, req);
    }
    assert(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
      request: "%sub-requests",
      info: { request: req, results: Array.from(running).map((r) => stringify2(r.result)) }
    });
    await Promise.race(interesting);
    return await this.#waitForQuorum(running, req);
  }
  async _perform(req) {
    if (req.method === "broadcastTransaction") {
      const results = this.#configs.map((c) => null);
      const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {
        try {
          const result3 = await provider._perform(req);
          results[index] = Object.assign(normalizeResult(req.method, { result: result3 }), { weight });
        } catch (error) {
          results[index] = Object.assign(normalizeResult(req.method, { error }), { weight });
        }
      });
      while (true) {
        const done = results.filter((r) => r != null);
        for (const { value } of done) {
          if (!(value instanceof Error)) {
            return value;
          }
        }
        const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
        if (isError(result3, "INSUFFICIENT_FUNDS")) {
          throw result3;
        }
        const waiting = broadcasts.filter((b4, i) => results[i] == null);
        if (waiting.length === 0) {
          break;
        }
        await Promise.race(waiting);
      }
      const result2 = getAnyResult(this.quorum, results);
      assert(result2 !== undefined, "problem multi-broadcasting", "SERVER_ERROR", {
        request: "%sub-requests",
        info: { request: req, results: results.map(stringify2) }
      });
      if (result2 instanceof Error) {
        throw result2;
      }
      return result2;
    }
    await this.#initialSync();
    const running = new Set;
    let inflightQuorum = 0;
    while (true) {
      const runner = this.#addRunner(running, req);
      if (runner == null) {
        break;
      }
      inflightQuorum += runner.config.weight;
      if (inflightQuorum >= this.quorum) {
        break;
      }
    }
    const result = await this.#waitForQuorum(running, req);
    for (const runner of running) {
      if (runner.perform && runner.result == null) {
        runner.config.lateResponses++;
      }
    }
    return result;
  }
  async destroy() {
    for (const { provider } of this.#configs) {
      provider.destroy();
    }
    super.destroy();
  }
}

// node_modules/ethers/lib.esm/providers/default-provider.js
function isWebSocketLike(value) {
  return value && typeof value.send === "function" && typeof value.close === "function";
}
var Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
function getDefaultProvider(network, options) {
  if (options == null) {
    options = {};
  }
  const allowService = (name) => {
    if (options[name] === "-") {
      return false;
    }
    if (typeof options.exclusive === "string") {
      return name === options.exclusive;
    }
    if (Array.isArray(options.exclusive)) {
      return options.exclusive.indexOf(name) !== -1;
    }
    return true;
  };
  if (typeof network === "string" && network.match(/^https?:/)) {
    return new JsonRpcProvider(network);
  }
  if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
    return new WebSocketProvider(network);
  }
  let staticNetwork = null;
  try {
    staticNetwork = Network.from(network);
  } catch (error) {
  }
  const providers = [];
  if (allowService("publicPolygon") && staticNetwork) {
    if (staticNetwork.name === "matic") {
      providers.push(new JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
    } else if (staticNetwork.name === "matic-amoy") {
      providers.push(new JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
    }
  }
  if (allowService("alchemy")) {
    try {
      providers.push(new AlchemyProvider(network, options.alchemy));
    } catch (error) {
    }
  }
  if (allowService("ankr") && options.ankr != null) {
    try {
      providers.push(new AnkrProvider(network, options.ankr));
    } catch (error) {
    }
  }
  if (allowService("chainstack")) {
    try {
      providers.push(new ChainstackProvider(network, options.chainstack));
    } catch (error) {
    }
  }
  if (allowService("cloudflare")) {
    try {
      providers.push(new CloudflareProvider(network));
    } catch (error) {
    }
  }
  if (allowService("etherscan")) {
    try {
      providers.push(new EtherscanProvider(network, options.etherscan));
    } catch (error) {
    }
  }
  if (allowService("infura")) {
    try {
      let projectId = options.infura;
      let projectSecret = undefined;
      if (typeof projectId === "object") {
        projectSecret = projectId.projectSecret;
        projectId = projectId.projectId;
      }
      providers.push(new InfuraProvider(network, projectId, projectSecret));
    } catch (error) {
    }
  }
  if (allowService("quicknode")) {
    try {
      let token = options.quicknode;
      providers.push(new QuickNodeProvider(network, token));
    } catch (error) {
    }
  }
  assert(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
    operation: "getDefaultProvider"
  });
  if (providers.length === 1) {
    return providers[0];
  }
  let quorum = Math.floor(providers.length / 2);
  if (quorum > 2) {
    quorum = 2;
  }
  if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
    quorum = 1;
  }
  if (options && options.quorum) {
    quorum = options.quorum;
  }
  return new FallbackProvider(providers, undefined, { quorum });
}
// node_modules/ethers/lib.esm/providers/signer-noncemanager.js
class NonceManager extends AbstractSigner {
  signer;
  #noncePromise;
  #delta;
  constructor(signer) {
    super(signer.provider);
    defineProperties(this, { signer });
    this.#noncePromise = null;
    this.#delta = 0;
  }
  async getAddress() {
    return this.signer.getAddress();
  }
  connect(provider) {
    return new NonceManager(this.signer.connect(provider));
  }
  async getNonce(blockTag) {
    if (blockTag === "pending") {
      if (this.#noncePromise == null) {
        this.#noncePromise = super.getNonce("pending");
      }
      const delta = this.#delta;
      return await this.#noncePromise + delta;
    }
    return super.getNonce(blockTag);
  }
  increment() {
    this.#delta++;
  }
  reset() {
    this.#delta = 0;
    this.#noncePromise = null;
  }
  async sendTransaction(tx) {
    const noncePromise = this.getNonce("pending");
    this.increment();
    tx = await this.signer.populateTransaction(tx);
    tx.nonce = await noncePromise;
    return await this.signer.sendTransaction(tx);
  }
  signTransaction(tx) {
    return this.signer.signTransaction(tx);
  }
  signMessage(message) {
    return this.signer.signMessage(message);
  }
  signTypedData(domain, types, value) {
    return this.signer.signTypedData(domain, types, value);
  }
}
// node_modules/ethers/lib.esm/providers/provider-browser.js
class BrowserProvider extends JsonRpcApiPollingProvider {
  #request;
  #providerInfo;
  constructor(ethereum, network, _options) {
    const options = Object.assign({}, _options != null ? _options : {}, { batchMaxCount: 1 });
    assertArgument(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
    super(network, options);
    this.#providerInfo = null;
    if (_options && _options.providerInfo) {
      this.#providerInfo = _options.providerInfo;
    }
    this.#request = async (method, params) => {
      const payload = { method, params };
      this.emit("debug", { action: "sendEip1193Request", payload });
      try {
        const result = await ethereum.request(payload);
        this.emit("debug", { action: "receiveEip1193Result", result });
        return result;
      } catch (e) {
        const error = new Error(e.message);
        error.code = e.code;
        error.data = e.data;
        error.payload = payload;
        this.emit("debug", { action: "receiveEip1193Error", error });
        throw error;
      }
    };
  }
  get providerInfo() {
    return this.#providerInfo;
  }
  async send(method, params) {
    await this._start();
    return await super.send(method, params);
  }
  async _send(payload) {
    assertArgument(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
    try {
      const result = await this.#request(payload.method, payload.params || []);
      return [{ id: payload.id, result }];
    } catch (e) {
      return [{
        id: payload.id,
        error: { code: e.code, data: e.data, message: e.message }
      }];
    }
  }
  getRpcError(payload, error) {
    error = JSON.parse(JSON.stringify(error));
    switch (error.error.code || -1) {
      case 4001:
        error.error.message = `ethers-user-denied: ${error.error.message}`;
        break;
      case 4200:
        error.error.message = `ethers-unsupported: ${error.error.message}`;
        break;
    }
    return super.getRpcError(payload, error);
  }
  async hasSigner(address) {
    if (address == null) {
      address = 0;
    }
    const accounts = await this.send("eth_accounts", []);
    if (typeof address === "number") {
      return accounts.length > address;
    }
    address = address.toLowerCase();
    return accounts.filter((a2) => a2.toLowerCase() === address).length !== 0;
  }
  async getSigner(address) {
    if (address == null) {
      address = 0;
    }
    if (!await this.hasSigner(address)) {
      try {
        await this.#request("eth_requestAccounts", []);
      } catch (error) {
        const payload = error.payload;
        throw this.getRpcError(payload, { id: payload.id, error });
      }
    }
    return await super.getSigner(address);
  }
  static async discover(options) {
    if (options == null) {
      options = {};
    }
    if (options.provider) {
      return new BrowserProvider(options.provider);
    }
    const context = options.window ? options.window : typeof window !== "undefined" ? window : null;
    if (context == null) {
      return null;
    }
    const anyProvider = options.anyProvider;
    if (anyProvider && context.ethereum) {
      return new BrowserProvider(context.ethereum);
    }
    if (!(("addEventListener" in context) && ("dispatchEvent" in context) && ("removeEventListener" in context))) {
      return null;
    }
    const timeout = options.timeout ? options.timeout : 300;
    if (timeout === 0) {
      return null;
    }
    return await new Promise((resolve, reject) => {
      let found = [];
      const addProvider = (event) => {
        found.push(event.detail);
        if (anyProvider) {
          finalize();
        }
      };
      const finalize = () => {
        clearTimeout(timer);
        if (found.length) {
          if (options && options.filter) {
            const filtered = options.filter(found.map((i) => Object.assign({}, i.info)));
            if (filtered == null) {
              resolve(null);
            } else if (filtered instanceof BrowserProvider) {
              resolve(filtered);
            } else {
              let match = null;
              if (filtered.uuid) {
                const matches = found.filter((f2) => filtered.uuid === f2.info.uuid);
                match = matches[0];
              }
              if (match) {
                const { provider, info } = match;
                resolve(new BrowserProvider(provider, undefined, {
                  providerInfo: info
                }));
              } else {
                reject(makeError("filter returned unknown info", "UNSUPPORTED_OPERATION", {
                  value: filtered
                }));
              }
            }
          } else {
            const { provider, info } = found[0];
            resolve(new BrowserProvider(provider, undefined, {
              providerInfo: info
            }));
          }
        } else {
          resolve(null);
        }
        context.removeEventListener("eip6963:announceProvider", addProvider);
      };
      const timer = setTimeout(() => {
        finalize();
      }, timeout);
      context.addEventListener("eip6963:announceProvider", addProvider);
      context.dispatchEvent(new Event("eip6963:requestProvider"));
    });
  }
}
// node_modules/ethers/lib.esm/providers/provider-blockscout.js
function getUrl(name) {
  switch (name) {
    case "mainnet":
      return "https://eth.blockscout.com/api/eth-rpc";
    case "sepolia":
      return "https://eth-sepolia.blockscout.com/api/eth-rpc";
    case "holesky":
      return "https://eth-holesky.blockscout.com/api/eth-rpc";
    case "classic":
      return "https://etc.blockscout.com/api/eth-rpc";
    case "arbitrum":
      return "https://arbitrum.blockscout.com/api/eth-rpc";
    case "base":
      return "https://base.blockscout.com/api/eth-rpc";
    case "base-sepolia":
      return "https://base-sepolia.blockscout.com/api/eth-rpc";
    case "matic":
      return "https://polygon.blockscout.com/api/eth-rpc";
    case "optimism":
      return "https://optimism.blockscout.com/api/eth-rpc";
    case "optimism-sepolia":
      return "https://optimism-sepolia.blockscout.com/api/eth-rpc";
    case "xdai":
      return "https://gnosis.blockscout.com/api/eth-rpc";
  }
  assertArgument(false, "unsupported network", "network", name);
}

class BlockscoutProvider extends JsonRpcProvider {
  apiKey;
  constructor(_network, apiKey) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    if (apiKey == null) {
      apiKey = null;
    }
    const request = BlockscoutProvider.getRequest(network);
    super(request, network, { staticNetwork: network });
    defineProperties(this, { apiKey });
  }
  _getProvider(chainId) {
    try {
      return new BlockscoutProvider(chainId, this.apiKey);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  isCommunityResource() {
    return this.apiKey === null;
  }
  getRpcRequest(req) {
    const resp = super.getRpcRequest(req);
    if (resp && resp.method === "eth_estimateGas" && resp.args.length == 1) {
      resp.args = resp.args.slice();
      resp.args.push("latest");
    }
    return resp;
  }
  getRpcError(payload, _error) {
    const error = _error ? _error.error : null;
    if (error && error.code === -32015 && !isHexString(error.data || "", true)) {
      const panicCodes = {
        "assert(false)": "01",
        "arithmetic underflow or overflow": "11",
        "division or modulo by zero": "12",
        "out-of-bounds array access; popping on an empty array": "31",
        "out-of-bounds access of an array or bytesN": "32"
      };
      let panicCode = "";
      if (error.message === "VM execution error.") {
        panicCode = panicCodes[error.data] || "";
      } else if (panicCodes[error.message || ""]) {
        panicCode = panicCodes[error.message || ""];
      }
      if (panicCode) {
        error.message += ` (reverted: ${error.data})`;
        error.data = "0x4e487b7100000000000000000000000000000000000000000000000000000000000000" + panicCode;
      }
    } else if (error && error.code === -32000) {
      if (error.message === "wrong transaction nonce") {
        error.message += " (nonce too low)";
      }
    }
    return super.getRpcError(payload, _error);
  }
  static getRequest(network) {
    const request = new FetchRequest(getUrl(network.name));
    request.allowGzip = true;
    return request;
  }
}
// node_modules/ethers/lib.esm/providers/provider-pocket.js
var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
function getHost6(name) {
  switch (name) {
    case "mainnet":
      return "eth-mainnet.gateway.pokt.network";
    case "goerli":
      return "eth-goerli.gateway.pokt.network";
    case "matic":
      return "poly-mainnet.gateway.pokt.network";
    case "matic-mumbai":
      return "polygon-mumbai-rpc.gateway.pokt.network";
  }
  assertArgument(false, "unsupported network", "network", name);
}

class PocketProvider extends JsonRpcProvider {
  applicationId;
  applicationSecret;
  constructor(_network, applicationId, applicationSecret) {
    if (_network == null) {
      _network = "mainnet";
    }
    const network = Network.from(_network);
    if (applicationId == null) {
      applicationId = defaultApplicationId;
    }
    if (applicationSecret == null) {
      applicationSecret = null;
    }
    const options = { staticNetwork: network };
    const request = PocketProvider.getRequest(network, applicationId, applicationSecret);
    super(request, network, options);
    defineProperties(this, { applicationId, applicationSecret });
  }
  _getProvider(chainId) {
    try {
      return new PocketProvider(chainId, this.applicationId, this.applicationSecret);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  static getRequest(network, applicationId, applicationSecret) {
    if (applicationId == null) {
      applicationId = defaultApplicationId;
    }
    const request = new FetchRequest(`https://${getHost6(network.name)}/v1/lb/${applicationId}`);
    request.allowGzip = true;
    if (applicationSecret) {
      request.setCredentials("", applicationSecret);
    }
    if (applicationId === defaultApplicationId) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("PocketProvider");
        return true;
      };
    }
    return request;
  }
  isCommunityResource() {
    return this.applicationId === defaultApplicationId;
  }
}
// node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js
var IpcSocketProvider = undefined;
// node_modules/ethers/lib.esm/wallet/base-wallet.js
class BaseWallet extends AbstractSigner {
  address;
  #signingKey;
  constructor(privateKey, provider) {
    super(provider);
    assertArgument(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
    this.#signingKey = privateKey;
    const address = computeAddress(this.signingKey.publicKey);
    defineProperties(this, { address });
  }
  get signingKey() {
    return this.#signingKey;
  }
  get privateKey() {
    return this.signingKey.privateKey;
  }
  async getAddress() {
    return this.address;
  }
  connect(provider) {
    return new BaseWallet(this.#signingKey, provider);
  }
  async signTransaction(tx) {
    tx = copyRequest(tx);
    const { to, from } = await resolveProperties({
      to: tx.to ? resolveAddress(tx.to, this) : undefined,
      from: tx.from ? resolveAddress(tx.from, this) : undefined
    });
    if (to != null) {
      tx.to = to;
    }
    if (from != null) {
      tx.from = from;
    }
    if (tx.from != null) {
      assertArgument(getAddress(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
      delete tx.from;
    }
    const btx = Transaction.from(tx);
    btx.signature = this.signingKey.sign(btx.unsignedHash);
    return btx.serialized;
  }
  async signMessage(message) {
    return this.signMessageSync(message);
  }
  signMessageSync(message) {
    return this.signingKey.sign(hashMessage(message)).serialized;
  }
  authorizeSync(auth) {
    assertArgument(typeof auth.address === "string", "invalid address for authorizeSync", "auth.address", auth);
    const signature = this.signingKey.sign(hashAuthorization(auth));
    return Object.assign({}, {
      address: getAddress(auth.address),
      nonce: getBigInt(auth.nonce || 0),
      chainId: getBigInt(auth.chainId || 0)
    }, { signature });
  }
  async authorize(auth) {
    auth = Object.assign({}, auth, {
      address: await resolveAddress(auth.address, this)
    });
    return this.authorizeSync(await this.populateAuthorization(auth));
  }
  async signTypedData(domain, types, value) {
    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
      assert(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
        operation: "resolveName",
        info: { name }
      });
      const address = await this.provider.resolveName(name);
      assert(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
        value: name
      });
      return address;
    });
    return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
  }
}
// node_modules/ethers/lib.esm/wordlists/decode-owl.js
var subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
var Word = /^[a-z]*$/i;
function unfold(words, sep) {
  let initial = 97;
  return words.reduce((accum, word) => {
    if (word === sep) {
      initial++;
    } else if (word.match(Word)) {
      accum.push(String.fromCharCode(initial) + word);
    } else {
      initial = 97;
      accum.push(word);
    }
    return accum;
  }, []);
}
function decode2(data, subs) {
  for (let i = subsChrs.length - 1;i >= 0; i--) {
    data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
  }
  const clumps = [];
  const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
    if (semi) {
      for (let i = parseInt(semi);i >= 0; i--) {
        clumps.push(";");
      }
    } else {
      clumps.push(item.toLowerCase());
    }
    return "";
  });
  if (leftover) {
    throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
  }
  return unfold(unfold(clumps, ";"), ":");
}
function decodeOwl(data) {
  assertArgument(data[0] === "0", "unsupported auwl data", "data", data);
  return decode2(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
}

// node_modules/ethers/lib.esm/wordlists/wordlist.js
class Wordlist {
  locale;
  constructor(locale) {
    defineProperties(this, { locale });
  }
  split(phrase) {
    return phrase.toLowerCase().split(/\s+/g);
  }
  join(words) {
    return words.join(" ");
  }
}

// node_modules/ethers/lib.esm/wordlists/wordlist-owl.js
class WordlistOwl extends Wordlist {
  #data;
  #checksum;
  constructor(locale, data, checksum) {
    super(locale);
    this.#data = data;
    this.#checksum = checksum;
    this.#words = null;
  }
  get _data() {
    return this.#data;
  }
  _decodeWords() {
    return decodeOwl(this.#data);
  }
  #words;
  #loadWords() {
    if (this.#words == null) {
      const words = this._decodeWords();
      const checksum = id(words.join(`
`) + `
`);
      if (checksum !== this.#checksum) {
        throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
      }
      this.#words = words;
    }
    return this.#words;
  }
  getWord(index) {
    const words = this.#loadWords();
    assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
    return words[index];
  }
  getWordIndex(word) {
    return this.#loadWords().indexOf(word);
  }
}

// node_modules/ethers/lib.esm/wordlists/lang-en.js
var words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
var checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
var wordlist = null;

class LangEn extends WordlistOwl {
  constructor() {
    super("en", words, checksum);
  }
  static wordlist() {
    if (wordlist == null) {
      wordlist = new LangEn;
    }
    return wordlist;
  }
}

// node_modules/ethers/lib.esm/wallet/mnemonic.js
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits & 255;
}
function getLowerMask(bits) {
  return (1 << bits) - 1 & 255;
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  assertNormalize("NFKD");
  if (wordlist2 == null) {
    wordlist2 = LangEn.wordlist();
  }
  const words2 = wordlist2.split(mnemonic);
  assertArgument(words2.length % 3 === 0 && words2.length >= 12 && words2.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
  const entropy = new Uint8Array(Math.ceil(11 * words2.length / 8));
  let offset = 0;
  for (let i = 0;i < words2.length; i++) {
    let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
    assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
    for (let bit = 0;bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum2 = getBytes(sha2562(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  assertArgument(checksum2 === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  assertArgument(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
  if (wordlist2 == null) {
    wordlist2 = LangEn.wordlist();
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i = 0;i < entropy.length; i++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum2 = parseInt(sha2562(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum2 >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}
var _guard5 = {};

class Mnemonic {
  phrase;
  password;
  wordlist;
  entropy;
  constructor(guard, entropy, phrase, password, wordlist2) {
    if (password == null) {
      password = "";
    }
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    assertPrivate(guard, _guard5, "Mnemonic");
    defineProperties(this, { phrase, password, wordlist: wordlist2, entropy });
  }
  computeSeed() {
    const salt = toUtf8Bytes("mnemonic" + this.password, "NFKD");
    return pbkdf22(toUtf8Bytes(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
  }
  static fromPhrase(phrase, password, wordlist2) {
    const entropy = mnemonicToEntropy(phrase, wordlist2);
    phrase = entropyToMnemonic(getBytes(entropy), wordlist2);
    return new Mnemonic(_guard5, entropy, phrase, password, wordlist2);
  }
  static fromEntropy(_entropy, password, wordlist2) {
    const entropy = getBytes(_entropy, "entropy");
    const phrase = entropyToMnemonic(entropy, wordlist2);
    return new Mnemonic(_guard5, hexlify(entropy), phrase, password, wordlist2);
  }
  static entropyToPhrase(_entropy, wordlist2) {
    const entropy = getBytes(_entropy, "entropy");
    return entropyToMnemonic(entropy, wordlist2);
  }
  static phraseToEntropy(phrase, wordlist2) {
    return mnemonicToEntropy(phrase, wordlist2);
  }
  static isValidMnemonic(phrase, wordlist2) {
    try {
      mnemonicToEntropy(phrase, wordlist2);
      return true;
    } catch (error) {
    }
    return false;
  }
}

// node_modules/aes-js/lib.esm/aes.js
/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
var __classPrivateFieldGet = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var __classPrivateFieldSet = function(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
};
var _AES_key;
var _AES_Kd;
var _AES_Ke;
var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
var T12 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239000, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998000, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239000, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998000, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
function convertToInt32(bytes2) {
  const result = [];
  for (let i = 0;i < bytes2.length; i += 4) {
    result.push(bytes2[i] << 24 | bytes2[i + 1] << 16 | bytes2[i + 2] << 8 | bytes2[i + 3]);
  }
  return result;
}

class AES {
  get key() {
    return __classPrivateFieldGet(this, _AES_key, "f").slice();
  }
  constructor(key) {
    _AES_key.set(this, undefined);
    _AES_Kd.set(this, undefined);
    _AES_Ke.set(this, undefined);
    if (!(this instanceof AES)) {
      throw Error("AES must be instanitated with `new`");
    }
    __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), "f");
    const rounds = numberOfRounds[this.key.length];
    if (rounds == null) {
      throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
    }
    __classPrivateFieldSet(this, _AES_Ke, [], "f");
    __classPrivateFieldSet(this, _AES_Kd, [], "f");
    for (let i = 0;i <= rounds; i++) {
      __classPrivateFieldGet(this, _AES_Ke, "f").push([0, 0, 0, 0]);
      __classPrivateFieldGet(this, _AES_Kd, "f").push([0, 0, 0, 0]);
    }
    const roundKeyCount = (rounds + 1) * 4;
    const KC = this.key.length / 4;
    const tk = convertToInt32(this.key);
    let index;
    for (let i = 0;i < KC; i++) {
      index = i >> 2;
      __classPrivateFieldGet(this, _AES_Ke, "f")[index][i % 4] = tk[i];
      __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
    }
    let rconpointer = 0;
    let t = KC, tt;
    while (t < roundKeyCount) {
      tt = tk[KC - 1];
      tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
      rconpointer += 1;
      if (KC != 8) {
        for (let i2 = 1;i2 < KC; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
      } else {
        for (let i2 = 1;i2 < KC / 2; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
        tt = tk[KC / 2 - 1];
        tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
        for (let i2 = KC / 2 + 1;i2 < KC; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
      }
      let i = 0, r, c;
      while (i < KC && t < roundKeyCount) {
        r = t >> 2;
        c = t % 4;
        __classPrivateFieldGet(this, _AES_Ke, "f")[r][c] = tk[i];
        __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
        t++;
      }
    }
    for (let r = 1;r < rounds; r++) {
      for (let c = 0;c < 4; c++) {
        tt = __classPrivateFieldGet(this, _AES_Kd, "f")[r][c];
        __classPrivateFieldGet(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
      }
    }
  }
  encrypt(plaintext) {
    if (plaintext.length != 16) {
      throw new TypeError("invalid plaintext size (must be 16 bytes)");
    }
    const rounds = __classPrivateFieldGet(this, _AES_Ke, "f").length - 1;
    const a2 = [0, 0, 0, 0];
    let t = convertToInt32(plaintext);
    for (let i = 0;i < 4; i++) {
      t[i] ^= __classPrivateFieldGet(this, _AES_Ke, "f")[0][i];
    }
    for (let r = 1;r < rounds; r++) {
      for (let i = 0;i < 4; i++) {
        a2[i] = T12[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Ke, "f")[r][i];
      }
      t = a2.slice();
    }
    const result = new Uint8Array(16);
    let tt = 0;
    for (let i = 0;i < 4; i++) {
      tt = __classPrivateFieldGet(this, _AES_Ke, "f")[rounds][i];
      result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
      result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
      result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
      result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
    }
    return result;
  }
  decrypt(ciphertext) {
    if (ciphertext.length != 16) {
      throw new TypeError("invalid ciphertext size (must be 16 bytes)");
    }
    const rounds = __classPrivateFieldGet(this, _AES_Kd, "f").length - 1;
    const a2 = [0, 0, 0, 0];
    let t = convertToInt32(ciphertext);
    for (let i = 0;i < 4; i++) {
      t[i] ^= __classPrivateFieldGet(this, _AES_Kd, "f")[0][i];
    }
    for (let r = 1;r < rounds; r++) {
      for (let i = 0;i < 4; i++) {
        a2[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Kd, "f")[r][i];
      }
      t = a2.slice();
    }
    const result = new Uint8Array(16);
    let tt = 0;
    for (let i = 0;i < 4; i++) {
      tt = __classPrivateFieldGet(this, _AES_Kd, "f")[rounds][i];
      result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
      result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
      result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
      result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
    }
    return result;
  }
}
_AES_key = new WeakMap, _AES_Kd = new WeakMap, _AES_Ke = new WeakMap;

// node_modules/aes-js/lib.esm/mode.js
class ModeOfOperation {
  constructor(name, key, cls) {
    if (cls && !(this instanceof cls)) {
      throw new Error(`${name} must be instantiated with "new"`);
    }
    Object.defineProperties(this, {
      aes: { enumerable: true, value: new AES(key) },
      name: { enumerable: true, value: name }
    });
  }
}

// node_modules/aes-js/lib.esm/mode-cbc.js
var __classPrivateFieldSet2 = function(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet2 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var _CBC_iv;
var _CBC_lastBlock;

class CBC extends ModeOfOperation {
  constructor(key, iv) {
    super("ECC", key, CBC);
    _CBC_iv.set(this, undefined);
    _CBC_lastBlock.set(this, undefined);
    if (iv) {
      if (iv.length % 16) {
        throw new TypeError("invalid iv size (must be 16 bytes)");
      }
      __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
    } else {
      __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
    }
    __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
  }
  get iv() {
    return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
  }
  encrypt(plaintext) {
    if (plaintext.length % 16) {
      throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
    }
    const ciphertext = new Uint8Array(plaintext.length);
    for (let i = 0;i < plaintext.length; i += 16) {
      for (let j2 = 0;j2 < 16; j2++) {
        __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j2] ^= plaintext[i + j2];
      }
      __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
      ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
    }
    return ciphertext;
  }
  decrypt(ciphertext) {
    if (ciphertext.length % 16) {
      throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
    }
    const plaintext = new Uint8Array(ciphertext.length);
    for (let i = 0;i < ciphertext.length; i += 16) {
      const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
      for (let j2 = 0;j2 < 16; j2++) {
        plaintext[i + j2] = block[j2] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j2];
        __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j2] = ciphertext[i + j2];
      }
    }
    return plaintext;
  }
}
_CBC_iv = new WeakMap, _CBC_lastBlock = new WeakMap;
// node_modules/aes-js/lib.esm/mode-ctr.js
var __classPrivateFieldSet3 = function(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet3 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var _CTR_remaining;
var _CTR_remainingIndex;
var _CTR_counter;

class CTR extends ModeOfOperation {
  constructor(key, initialValue) {
    super("CTR", key, CTR);
    _CTR_remaining.set(this, undefined);
    _CTR_remainingIndex.set(this, undefined);
    _CTR_counter.set(this, undefined);
    __classPrivateFieldSet3(this, _CTR_counter, new Uint8Array(16), "f");
    __classPrivateFieldGet3(this, _CTR_counter, "f").fill(0);
    __classPrivateFieldSet3(this, _CTR_remaining, __classPrivateFieldGet3(this, _CTR_counter, "f"), "f");
    __classPrivateFieldSet3(this, _CTR_remainingIndex, 16, "f");
    if (initialValue == null) {
      initialValue = 1;
    }
    if (typeof initialValue === "number") {
      this.setCounterValue(initialValue);
    } else {
      this.setCounterBytes(initialValue);
    }
  }
  get counter() {
    return new Uint8Array(__classPrivateFieldGet3(this, _CTR_counter, "f"));
  }
  setCounterValue(value) {
    if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
      throw new TypeError("invalid counter initial integer value");
    }
    for (let index = 15;index >= 0; --index) {
      __classPrivateFieldGet3(this, _CTR_counter, "f")[index] = value % 256;
      value = Math.floor(value / 256);
    }
  }
  setCounterBytes(value) {
    if (value.length !== 16) {
      throw new TypeError("invalid counter initial Uint8Array value length");
    }
    __classPrivateFieldGet3(this, _CTR_counter, "f").set(value);
  }
  increment() {
    for (let i = 15;i >= 0; i--) {
      if (__classPrivateFieldGet3(this, _CTR_counter, "f")[i] === 255) {
        __classPrivateFieldGet3(this, _CTR_counter, "f")[i] = 0;
      } else {
        __classPrivateFieldGet3(this, _CTR_counter, "f")[i]++;
        break;
      }
    }
  }
  encrypt(plaintext) {
    var _a, _b;
    const crypttext = new Uint8Array(plaintext);
    for (let i = 0;i < crypttext.length; i++) {
      if (__classPrivateFieldGet3(this, _CTR_remainingIndex, "f") === 16) {
        __classPrivateFieldSet3(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet3(this, _CTR_counter, "f")), "f");
        __classPrivateFieldSet3(this, _CTR_remainingIndex, 0, "f");
        this.increment();
      }
      crypttext[i] ^= __classPrivateFieldGet3(this, _CTR_remaining, "f")[__classPrivateFieldSet3(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet3(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
    }
    return crypttext;
  }
  decrypt(ciphertext) {
    return this.encrypt(ciphertext);
  }
}
_CTR_remaining = new WeakMap, _CTR_remainingIndex = new WeakMap, _CTR_counter = new WeakMap;
// node_modules/aes-js/lib.esm/padding.js
function pkcs7Strip(data) {
  if (data.length < 16) {
    throw new TypeError("PKCS#7 invalid length");
  }
  const padder = data[data.length - 1];
  if (padder > 16) {
    throw new TypeError("PKCS#7 padding byte out of range");
  }
  const length = data.length - padder;
  for (let i = 0;i < padder; i++) {
    if (data[length + i] !== padder) {
      throw new TypeError("PKCS#7 invalid padding byte");
    }
  }
  return new Uint8Array(data.subarray(0, length));
}
// node_modules/ethers/lib.esm/wallet/utils.js
function looseArrayify(hexString) {
  if (typeof hexString === "string" && !hexString.startsWith("0x")) {
    hexString = "0x" + hexString;
  }
  return getBytesCopy(hexString);
}
function zpad(value, length) {
  value = String(value);
  while (value.length < length) {
    value = "0" + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, "NFKC");
  }
  return getBytesCopy(password);
}
function spelunk(object2, _path) {
  const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
  assertArgument(match != null, "invalid path", "path", _path);
  const path = match[1];
  const type = match[3];
  const reqd = match[4] === "!";
  let cur = object2;
  for (const comp of path.toLowerCase().split(".")) {
    if (Array.isArray(cur)) {
      if (!comp.match(/^[0-9]+$/)) {
        break;
      }
      cur = cur[parseInt(comp)];
    } else if (typeof cur === "object") {
      let found = null;
      for (const key in cur) {
        if (key.toLowerCase() === comp) {
          found = cur[key];
          break;
        }
      }
      cur = found;
    } else {
      cur = null;
    }
    if (cur == null) {
      break;
    }
  }
  assertArgument(!reqd || cur != null, "missing required value", "path", path);
  if (type && cur != null) {
    if (type === "int") {
      if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
        return parseInt(cur);
      } else if (Number.isSafeInteger(cur)) {
        return cur;
      }
    }
    if (type === "number") {
      if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
        return parseFloat(cur);
      }
    }
    if (type === "data") {
      if (typeof cur === "string") {
        return looseArrayify(cur);
      }
    }
    if (type === "array" && Array.isArray(cur)) {
      return cur;
    }
    if (type === typeof cur) {
      return cur;
    }
    assertArgument(false, `wrong type found for ${type} `, "path", path);
  }
  return cur;
}

// node_modules/ethers/lib.esm/wallet/json-keystore.js
var defaultPath = "m/44'/60'/0'/0/0";
function isKeystoreJson(json) {
  try {
    const data = JSON.parse(json);
    const version2 = data.version != null ? parseInt(data.version) : 0;
    if (version2 === 3) {
      return true;
    }
  } catch (error) {
  }
  return false;
}
function decrypt(data, key, ciphertext) {
  const cipher = spelunk(data, "crypto.cipher:string");
  if (cipher === "aes-128-ctr") {
    const iv = spelunk(data, "crypto.cipherparams.iv:data!");
    const aesCtr = new CTR(key, iv);
    return hexlify(aesCtr.decrypt(ciphertext));
  }
  assert(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
    operation: "decrypt"
  });
}
function getAccount(data, _key) {
  const key = getBytes(_key);
  const ciphertext = spelunk(data, "crypto.ciphertext:data!");
  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
  assertArgument(computedMAC === spelunk(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
  const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (!check.startsWith("0x")) {
      check = "0x" + check;
    }
    assertArgument(getAddress(check) === address, "keystore address/privateKey mismatch", "address", data.address);
  }
  const account = { address, privateKey };
  const version2 = spelunk(data, "x-ethers.version:string");
  if (version2 === "0.1") {
    const mnemonicKey = key.slice(32, 64);
    const mnemonicCiphertext = spelunk(data, "x-ethers.mnemonicCiphertext:data!");
    const mnemonicIv = spelunk(data, "x-ethers.mnemonicCounter:data!");
    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
    account.mnemonic = {
      path: spelunk(data, "x-ethers.path:string") || defaultPath,
      locale: spelunk(data, "x-ethers.locale:string") || "en",
      entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
    };
  }
  return account;
}
function getDecryptKdfParams(data) {
  const kdf = spelunk(data, "crypto.kdf:string");
  if (kdf && typeof kdf === "string") {
    if (kdf.toLowerCase() === "scrypt") {
      const salt = spelunk(data, "crypto.kdfparams.salt:data!");
      const N3 = spelunk(data, "crypto.kdfparams.n:int!");
      const r = spelunk(data, "crypto.kdfparams.r:int!");
      const p = spelunk(data, "crypto.kdfparams.p:int!");
      assertArgument(N3 > 0 && (N3 & N3 - 1) === 0, "invalid kdf.N", "kdf.N", N3);
      assertArgument(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
      const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
      assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
      return { name: "scrypt", salt, N: N3, r, p, dkLen: 64 };
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = spelunk(data, "crypto.kdfparams.salt:data!");
      const prf = spelunk(data, "crypto.kdfparams.prf:string!");
      const algorithm = prf.split("-").pop();
      assertArgument(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
      const count = spelunk(data, "crypto.kdfparams.c:int!");
      const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
      assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
      return { name: "pbkdf2", salt, count, dkLen, algorithm };
    }
  }
  assertArgument(false, "unsupported key-derivation function", "kdf", kdf);
}
function decryptKeystoreJsonSync(json, _password) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const params = getDecryptKdfParams(data);
  if (params.name === "pbkdf2") {
    const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
    const key2 = pbkdf22(password, salt2, count, dkLen2, algorithm);
    return getAccount(data, key2);
  }
  assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
  const { salt, N: N3, r, p, dkLen } = params;
  const key = scryptSync(password, salt, N3, r, p, dkLen);
  return getAccount(data, key);
}
function stall3(duration) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, duration);
  });
}
async function decryptKeystoreJson(json, _password, progress) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const params = getDecryptKdfParams(data);
  if (params.name === "pbkdf2") {
    if (progress) {
      progress(0);
      await stall3(0);
    }
    const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
    const key2 = pbkdf22(password, salt2, count, dkLen2, algorithm);
    if (progress) {
      progress(1);
      await stall3(0);
    }
    return getAccount(data, key2);
  }
  assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
  const { salt, N: N3, r, p, dkLen } = params;
  const key = await scrypt2(password, salt, N3, r, p, dkLen, progress);
  return getAccount(data, key);
}
function getEncryptKdfParams(options) {
  const salt = options.salt != null ? getBytes(options.salt, "options.salt") : randomBytes3(32);
  let N3 = 1 << 17, r = 8, p = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N3 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p = options.scrypt.p;
    }
  }
  assertArgument(typeof N3 === "number" && N3 > 0 && Number.isSafeInteger(N3) && (BigInt(N3) & BigInt(N3 - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N3);
  assertArgument(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
  assertArgument(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
  return { name: "scrypt", dkLen: 32, salt, N: N3, r, p };
}
function _encryptKeystore(key, kdf, account, options) {
  const privateKey = getBytes(account.privateKey, "privateKey");
  const iv = options.iv != null ? getBytes(options.iv, "options.iv") : randomBytes3(16);
  assertArgument(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
  const uuidRandom = options.uuid != null ? getBytes(options.uuid, "options.uuid") : randomBytes3(16);
  assertArgument(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
  const derivedKey = key.slice(0, 16);
  const macPrefix = key.slice(16, 32);
  const aesCtr = new CTR(derivedKey, iv);
  const ciphertext = getBytes(aesCtr.encrypt(privateKey));
  const mac = keccak256(concat([macPrefix, ciphertext]));
  const data = {
    address: account.address.substring(2).toLowerCase(),
    id: uuidV4(uuidRandom),
    version: 3,
    Crypto: {
      cipher: "aes-128-ctr",
      cipherparams: {
        iv: hexlify(iv).substring(2)
      },
      ciphertext: hexlify(ciphertext).substring(2),
      kdf: "scrypt",
      kdfparams: {
        salt: hexlify(kdf.salt).substring(2),
        n: kdf.N,
        dklen: 32,
        p: kdf.p,
        r: kdf.r
      },
      mac: mac.substring(2)
    }
  };
  if (account.mnemonic) {
    const client = options.client != null ? options.client : `ethers/${version}`;
    const path = account.mnemonic.path || defaultPath;
    const locale = account.mnemonic.locale || "en";
    const mnemonicKey = key.slice(32, 64);
    const entropy = getBytes(account.mnemonic.entropy, "account.mnemonic.entropy");
    const mnemonicIv = randomBytes3(16);
    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
    const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));
    const now = new Date;
    const timestamp = now.getUTCFullYear() + "-" + zpad(now.getUTCMonth() + 1, 2) + "-" + zpad(now.getUTCDate(), 2) + "T" + zpad(now.getUTCHours(), 2) + "-" + zpad(now.getUTCMinutes(), 2) + "-" + zpad(now.getUTCSeconds(), 2) + ".0Z";
    const gethFilename = "UTC--" + timestamp + "--" + data.address;
    data["x-ethers"] = {
      client,
      gethFilename,
      path,
      locale,
      mnemonicCounter: hexlify(mnemonicIv).substring(2),
      mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
      version: "0.1"
    };
  }
  return JSON.stringify(data);
}
function encryptKeystoreJsonSync(account, password, options) {
  if (options == null) {
    options = {};
  }
  const passwordBytes = getPassword(password);
  const kdf = getEncryptKdfParams(options);
  const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
  return _encryptKeystore(getBytes(key), kdf, account, options);
}
async function encryptKeystoreJson(account, password, options) {
  if (options == null) {
    options = {};
  }
  const passwordBytes = getPassword(password);
  const kdf = getEncryptKdfParams(options);
  const key = await scrypt2(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
  return _encryptKeystore(getBytes(key), kdf, account, options);
}

// node_modules/ethers/lib.esm/wallet/hdwallet.js
var defaultPath2 = "m/44'/60'/0'/0/0";
var MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
var HardenedBit = 2147483648;
var N3 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var Nibbles2 = "0123456789abcdef";
function zpad2(value, length) {
  let result = "";
  while (value) {
    result = Nibbles2[value % 16] + result;
    value = Math.trunc(value / 16);
  }
  while (result.length < length * 2) {
    result = "0" + result;
  }
  return "0x" + result;
}
function encodeBase58Check(_value) {
  const value = getBytes(_value);
  const check = dataSlice(sha2562(sha2562(value)), 0, 4);
  const bytes2 = concat([value, check]);
  return encodeBase58(bytes2);
}
var _guard6 = {};
function ser_I(index, chainCode, publicKey, privateKey) {
  const data = new Uint8Array(37);
  if (index & HardenedBit) {
    assert(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
      operation: "deriveChild"
    });
    data.set(getBytes(privateKey), 1);
  } else {
    data.set(getBytes(publicKey));
  }
  for (let i = 24;i >= 0; i -= 8) {
    data[33 + (i >> 3)] = index >> 24 - i & 255;
  }
  const I = getBytes(computeHmac("sha512", chainCode, data));
  return { IL: I.slice(0, 32), IR: I.slice(32) };
}
function derivePath(node, path) {
  const components = path.split("/");
  assertArgument(components.length > 0, "invalid path", "path", path);
  if (components[0] === "m") {
    assertArgument(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
    components.shift();
  }
  let result = node;
  for (let i = 0;i < components.length; i++) {
    const component = components[i];
    if (component.match(/^[0-9]+'$/)) {
      const index = parseInt(component.substring(0, component.length - 1));
      assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
      result = result.deriveChild(HardenedBit + index);
    } else if (component.match(/^[0-9]+$/)) {
      const index = parseInt(component);
      assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
      result = result.deriveChild(index);
    } else {
      assertArgument(false, "invalid path component", `path[${i}]`, component);
    }
  }
  return result;
}

class HDNodeWallet extends BaseWallet {
  publicKey;
  fingerprint;
  parentFingerprint;
  mnemonic;
  chainCode;
  path;
  index;
  depth;
  constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
    super(signingKey, provider);
    assertPrivate(guard, _guard6, "HDNodeWallet");
    defineProperties(this, { publicKey: signingKey.compressedPublicKey });
    const fingerprint = dataSlice(ripemd1602(sha2562(this.publicKey)), 0, 4);
    defineProperties(this, {
      parentFingerprint,
      fingerprint,
      chainCode,
      path,
      index,
      depth
    });
    defineProperties(this, { mnemonic });
  }
  connect(provider) {
    return new HDNodeWallet(_guard6, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
  }
  #account() {
    const account = { address: this.address, privateKey: this.privateKey };
    const m2 = this.mnemonic;
    if (this.path && m2 && m2.wordlist.locale === "en" && m2.password === "") {
      account.mnemonic = {
        path: this.path,
        locale: "en",
        entropy: m2.entropy
      };
    }
    return account;
  }
  async encrypt(password, progressCallback) {
    return await encryptKeystoreJson(this.#account(), password, { progressCallback });
  }
  encryptSync(password) {
    return encryptKeystoreJsonSync(this.#account(), password);
  }
  get extendedKey() {
    assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
    return encodeBase58Check(concat([
      "0x0488ADE4",
      zpad2(this.depth, 1),
      this.parentFingerprint,
      zpad2(this.index, 4),
      this.chainCode,
      concat(["0x00", this.privateKey])
    ]));
  }
  hasPath() {
    return this.path != null;
  }
  neuter() {
    return new HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
  }
  deriveChild(_index) {
    const index = getNumber(_index, "index");
    assertArgument(index <= 4294967295, "invalid index", "index", index);
    let path = this.path;
    if (path) {
      path += "/" + (index & ~HardenedBit);
      if (index & HardenedBit) {
        path += "'";
      }
    }
    const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
    const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N3, 32));
    return new HDNodeWallet(_guard6, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
  }
  derivePath(path) {
    return derivePath(this, path);
  }
  static #fromSeed(_seed, mnemonic) {
    assertArgument(isBytesLike(_seed), "invalid seed", "seed", "[REDACTED]");
    const seed = getBytes(_seed, "seed");
    assertArgument(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
    const I = getBytes(computeHmac("sha512", MasterSecret, seed));
    const signingKey = new SigningKey(hexlify(I.slice(0, 32)));
    return new HDNodeWallet(_guard6, signingKey, "0x00000000", hexlify(I.slice(32)), "m", 0, 0, mnemonic, null);
  }
  static fromExtendedKey(extendedKey) {
    const bytes2 = toBeArray(decodeBase58(extendedKey));
    assertArgument(bytes2.length === 82 || encodeBase58Check(bytes2.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
    const depth = bytes2[4];
    const parentFingerprint = hexlify(bytes2.slice(5, 9));
    const index = parseInt(hexlify(bytes2.slice(9, 13)).substring(2), 16);
    const chainCode = hexlify(bytes2.slice(13, 45));
    const key = bytes2.slice(45, 78);
    switch (hexlify(bytes2.slice(0, 4))) {
      case "0x0488b21e":
      case "0x043587cf": {
        const publicKey = hexlify(key);
        return new HDNodeVoidWallet(_guard6, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
      }
      case "0x0488ade4":
      case "0x04358394 ":
        if (key[0] !== 0) {
          break;
        }
        return new HDNodeWallet(_guard6, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
    }
    assertArgument(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
  }
  static createRandom(password, path, wordlist2) {
    if (password == null) {
      password = "";
    }
    if (path == null) {
      path = defaultPath2;
    }
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const mnemonic = Mnemonic.fromEntropy(randomBytes3(16), password, wordlist2);
    return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
  }
  static fromMnemonic(mnemonic, path) {
    if (!path) {
      path = defaultPath2;
    }
    return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
  }
  static fromPhrase(phrase, password, path, wordlist2) {
    if (password == null) {
      password = "";
    }
    if (path == null) {
      path = defaultPath2;
    }
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist2);
    return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
  }
  static fromSeed(seed) {
    return HDNodeWallet.#fromSeed(seed, null);
  }
}

class HDNodeVoidWallet extends VoidSigner {
  publicKey;
  fingerprint;
  parentFingerprint;
  chainCode;
  path;
  index;
  depth;
  constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
    super(address, provider);
    assertPrivate(guard, _guard6, "HDNodeVoidWallet");
    defineProperties(this, { publicKey });
    const fingerprint = dataSlice(ripemd1602(sha2562(publicKey)), 0, 4);
    defineProperties(this, {
      publicKey,
      fingerprint,
      parentFingerprint,
      chainCode,
      path,
      index,
      depth
    });
  }
  connect(provider) {
    return new HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
  }
  get extendedKey() {
    assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
    return encodeBase58Check(concat([
      "0x0488B21E",
      zpad2(this.depth, 1),
      this.parentFingerprint,
      zpad2(this.index, 4),
      this.chainCode,
      this.publicKey
    ]));
  }
  hasPath() {
    return this.path != null;
  }
  deriveChild(_index) {
    const index = getNumber(_index, "index");
    assertArgument(index <= 4294967295, "invalid index", "index", index);
    let path = this.path;
    if (path) {
      path += "/" + (index & ~HardenedBit);
      if (index & HardenedBit) {
        path += "'";
      }
    }
    const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
    const Ki = SigningKey.addPoints(IL, this.publicKey, true);
    const address = computeAddress(Ki);
    return new HDNodeVoidWallet(_guard6, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);
  }
  derivePath(path) {
    return derivePath(this, path);
  }
}
function getAccountPath(_index) {
  const index = getNumber(_index, "index");
  assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
  return `m/44'/60'/${index}'/0/0`;
}
function getIndexedAccountPath(_index) {
  const index = getNumber(_index, "index");
  assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
  return `m/44'/60'/0'/0/${index}`;
}
// node_modules/ethers/lib.esm/wallet/json-crowdsale.js
function isCrowdsaleJson(json) {
  try {
    const data = JSON.parse(json);
    if (data.encseed) {
      return true;
    }
  } catch (error) {
  }
  return false;
}
function decryptCrowdsaleJson(json, _password) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const address = getAddress(spelunk(data, "ethaddr:string!"));
  const encseed = looseArrayify(spelunk(data, "encseed:string!"));
  assertArgument(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
  const key = getBytes(pbkdf22(password, password, 2000, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new CBC(key, iv);
  const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i = 0;i < seed.length; i++) {
    seedHex += String.fromCharCode(seed[i]);
  }
  return { address, privateKey: id(seedHex) };
}
// node_modules/ethers/lib.esm/wallet/wallet.js
function stall4(duration) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, duration);
  });
}

class Wallet extends BaseWallet {
  constructor(key, provider) {
    if (typeof key === "string" && !key.startsWith("0x")) {
      key = "0x" + key;
    }
    let signingKey = typeof key === "string" ? new SigningKey(key) : key;
    super(signingKey, provider);
  }
  connect(provider) {
    return new Wallet(this.signingKey, provider);
  }
  async encrypt(password, progressCallback) {
    const account = { address: this.address, privateKey: this.privateKey };
    return await encryptKeystoreJson(account, password, { progressCallback });
  }
  encryptSync(password) {
    const account = { address: this.address, privateKey: this.privateKey };
    return encryptKeystoreJsonSync(account, password);
  }
  static #fromAccount(account) {
    assertArgument(account, "invalid JSON wallet", "json", "[ REDACTED ]");
    if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
      const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);
      const wallet2 = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
      if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
        return wallet2;
      }
      console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
    }
    const wallet = new Wallet(account.privateKey);
    assertArgument(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
    return wallet;
  }
  static async fromEncryptedJson(json, password, progress) {
    let account = null;
    if (isKeystoreJson(json)) {
      account = await decryptKeystoreJson(json, password, progress);
    } else if (isCrowdsaleJson(json)) {
      if (progress) {
        progress(0);
        await stall4(0);
      }
      account = decryptCrowdsaleJson(json, password);
      if (progress) {
        progress(1);
        await stall4(0);
      }
    }
    return Wallet.#fromAccount(account);
  }
  static fromEncryptedJsonSync(json, password) {
    let account = null;
    if (isKeystoreJson(json)) {
      account = decryptKeystoreJsonSync(json, password);
    } else if (isCrowdsaleJson(json)) {
      account = decryptCrowdsaleJson(json, password);
    } else {
      assertArgument(false, "invalid JSON wallet", "json", "[ REDACTED ]");
    }
    return Wallet.#fromAccount(account);
  }
  static createRandom(provider) {
    const wallet = HDNodeWallet.createRandom();
    if (provider) {
      return wallet.connect(provider);
    }
    return wallet;
  }
  static fromPhrase(phrase, provider) {
    const wallet = HDNodeWallet.fromPhrase(phrase);
    if (provider) {
      return wallet.connect(provider);
    }
    return wallet;
  }
}
// node_modules/ethers/lib.esm/wordlists/bit-reader.js
var Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
function decodeBits(width, data) {
  const maxValue2 = (1 << width) - 1;
  const result = [];
  let accum = 0, bits = 0, flood = 0;
  for (let i = 0;i < data.length; i++) {
    accum = accum << 6 | Base64.indexOf(data[i]);
    bits += 6;
    while (bits >= width) {
      const value = accum >> bits - width;
      accum &= (1 << bits - width) - 1;
      bits -= width;
      if (value === 0) {
        flood += maxValue2;
      } else {
        result.push(value + flood);
        flood = 0;
      }
    }
  }
  return result;
}

// node_modules/ethers/lib.esm/wordlists/decode-owla.js
function decodeOwlA(data, accents) {
  let words2 = decodeOwl(data).join(",");
  accents.split(/,/g).forEach((accent) => {
    const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
    assertArgument(match !== null, "internal error parsing accents", "accents", accents);
    let posOffset = 0;
    const positions = decodeBits(parseInt(match[3]), match[4]);
    const charCode = parseInt(match[2]);
    const regex = new RegExp(`([${match[1]}])`, "g");
    words2 = words2.replace(regex, (all, letter) => {
      const rem = --positions[posOffset];
      if (rem === 0) {
        letter = String.fromCharCode(letter.charCodeAt(0), charCode);
        posOffset++;
      }
      return letter;
    });
  });
  return words2.split(",");
}

// node_modules/ethers/lib.esm/wordlists/wordlist-owla.js
class WordlistOwlA extends WordlistOwl {
  #accent;
  constructor(locale, data, accent, checksum2) {
    super(locale, data, checksum2);
    this.#accent = accent;
  }
  get _accent() {
    return this.#accent;
  }
  _decodeWords() {
    return decodeOwlA(this._data, this._accent);
  }
}
// node_modules/ethers/lib.esm/wordlists/wordlists-browser.js
var wordlists = {
  en: LangEn.wordlist()
};
// src/server.ts
var fs = (() => ({}));

// ../../../../bun-vfs$$/node_modules/path/index.js
var L2 = Object.create;
var h2 = Object.defineProperty;
var D2 = Object.getOwnPropertyDescriptor;
var T = Object.getOwnPropertyNames;
var _2 = Object.getPrototypeOf;
var E2 = Object.prototype.hasOwnProperty;
var R2 = (s, e) => () => (e || s((e = { exports: {} }).exports, e), e.exports);
var N4 = (s, e, r, t) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let i of T(e))
      !E2.call(s, i) && i !== r && h2(s, i, { get: () => e[i], enumerable: !(t = D2(e, i)) || t.enumerable });
  return s;
};
var j2 = (s, e, r) => (r = s != null ? L2(_2(s)) : {}, N4(e || !s || !s.__esModule ? h2(r, "default", { value: s, enumerable: true }) : r, s));
var k = R2((W, w3) => {
  function v3(s) {
    if (typeof s != "string")
      throw new TypeError("Path must be a string. Received " + JSON.stringify(s));
  }
  function C2(s, e) {
    for (var r = "", t = 0, i = -1, a2 = 0, n2, l2 = 0;l2 <= s.length; ++l2) {
      if (l2 < s.length)
        n2 = s.charCodeAt(l2);
      else {
        if (n2 === 47)
          break;
        n2 = 47;
      }
      if (n2 === 47) {
        if (!(i === l2 - 1 || a2 === 1))
          if (i !== l2 - 1 && a2 === 2) {
            if (r.length < 2 || t !== 2 || r.charCodeAt(r.length - 1) !== 46 || r.charCodeAt(r.length - 2) !== 46) {
              if (r.length > 2) {
                var f2 = r.lastIndexOf("/");
                if (f2 !== r.length - 1) {
                  f2 === -1 ? (r = "", t = 0) : (r = r.slice(0, f2), t = r.length - 1 - r.lastIndexOf("/")), i = l2, a2 = 0;
                  continue;
                }
              } else if (r.length === 2 || r.length === 1) {
                r = "", t = 0, i = l2, a2 = 0;
                continue;
              }
            }
            e && (r.length > 0 ? r += "/.." : r = "..", t = 2);
          } else
            r.length > 0 ? r += "/" + s.slice(i + 1, l2) : r = s.slice(i + 1, l2), t = l2 - i - 1;
        i = l2, a2 = 0;
      } else
        n2 === 46 && a2 !== -1 ? ++a2 : a2 = -1;
    }
    return r;
  }
  function F(s, e) {
    var r = e.dir || e.root, t = e.base || (e.name || "") + (e.ext || "");
    return r ? r === e.root ? r + t : r + s + t : t;
  }
  var m2 = { resolve: function() {
    for (var e = "", r = false, t, i = arguments.length - 1;i >= -1 && !r; i--) {
      var a2;
      i >= 0 ? a2 = arguments[i] : (t === undefined && (t = process.cwd()), a2 = t), v3(a2), a2.length !== 0 && (e = a2 + "/" + e, r = a2.charCodeAt(0) === 47);
    }
    return e = C2(e, !r), r ? e.length > 0 ? "/" + e : "/" : e.length > 0 ? e : ".";
  }, normalize: function(e) {
    if (v3(e), e.length === 0)
      return ".";
    var r = e.charCodeAt(0) === 47, t = e.charCodeAt(e.length - 1) === 47;
    return e = C2(e, !r), e.length === 0 && !r && (e = "."), e.length > 0 && t && (e += "/"), r ? "/" + e : e;
  }, isAbsolute: function(e) {
    return v3(e), e.length > 0 && e.charCodeAt(0) === 47;
  }, join: function() {
    if (arguments.length === 0)
      return ".";
    for (var e, r = 0;r < arguments.length; ++r) {
      var t = arguments[r];
      v3(t), t.length > 0 && (e === undefined ? e = t : e += "/" + t);
    }
    return e === undefined ? "." : m2.normalize(e);
  }, relative: function(e, r) {
    if (v3(e), v3(r), e === r || (e = m2.resolve(e), r = m2.resolve(r), e === r))
      return "";
    for (var t = 1;t < e.length && e.charCodeAt(t) === 47; ++t)
      ;
    for (var i = e.length, a2 = i - t, n2 = 1;n2 < r.length && r.charCodeAt(n2) === 47; ++n2)
      ;
    for (var l2 = r.length, f2 = l2 - n2, c = a2 < f2 ? a2 : f2, d2 = -1, o2 = 0;o2 <= c; ++o2) {
      if (o2 === c) {
        if (f2 > c) {
          if (r.charCodeAt(n2 + o2) === 47)
            return r.slice(n2 + o2 + 1);
          if (o2 === 0)
            return r.slice(n2 + o2);
        } else
          a2 > c && (e.charCodeAt(t + o2) === 47 ? d2 = o2 : o2 === 0 && (d2 = 0));
        break;
      }
      var A2 = e.charCodeAt(t + o2), z = r.charCodeAt(n2 + o2);
      if (A2 !== z)
        break;
      A2 === 47 && (d2 = o2);
    }
    var b4 = "";
    for (o2 = t + d2 + 1;o2 <= i; ++o2)
      (o2 === i || e.charCodeAt(o2) === 47) && (b4.length === 0 ? b4 += ".." : b4 += "/..");
    return b4.length > 0 ? b4 + r.slice(n2 + d2) : (n2 += d2, r.charCodeAt(n2) === 47 && ++n2, r.slice(n2));
  }, _makeLong: function(e) {
    return e;
  }, dirname: function(e) {
    if (v3(e), e.length === 0)
      return ".";
    for (var r = e.charCodeAt(0), t = r === 47, i = -1, a2 = true, n2 = e.length - 1;n2 >= 1; --n2)
      if (r = e.charCodeAt(n2), r === 47) {
        if (!a2) {
          i = n2;
          break;
        }
      } else
        a2 = false;
    return i === -1 ? t ? "/" : "." : t && i === 1 ? "//" : e.slice(0, i);
  }, basename: function(e, r) {
    if (r !== undefined && typeof r != "string")
      throw new TypeError('"ext" argument must be a string');
    v3(e);
    var t = 0, i = -1, a2 = true, n2;
    if (r !== undefined && r.length > 0 && r.length <= e.length) {
      if (r.length === e.length && r === e)
        return "";
      var l2 = r.length - 1, f2 = -1;
      for (n2 = e.length - 1;n2 >= 0; --n2) {
        var c = e.charCodeAt(n2);
        if (c === 47) {
          if (!a2) {
            t = n2 + 1;
            break;
          }
        } else
          f2 === -1 && (a2 = false, f2 = n2 + 1), l2 >= 0 && (c === r.charCodeAt(l2) ? --l2 === -1 && (i = n2) : (l2 = -1, i = f2));
      }
      return t === i ? i = f2 : i === -1 && (i = e.length), e.slice(t, i);
    } else {
      for (n2 = e.length - 1;n2 >= 0; --n2)
        if (e.charCodeAt(n2) === 47) {
          if (!a2) {
            t = n2 + 1;
            break;
          }
        } else
          i === -1 && (a2 = false, i = n2 + 1);
      return i === -1 ? "" : e.slice(t, i);
    }
  }, extname: function(e) {
    v3(e);
    for (var r = -1, t = 0, i = -1, a2 = true, n2 = 0, l2 = e.length - 1;l2 >= 0; --l2) {
      var f2 = e.charCodeAt(l2);
      if (f2 === 47) {
        if (!a2) {
          t = l2 + 1;
          break;
        }
        continue;
      }
      i === -1 && (a2 = false, i = l2 + 1), f2 === 46 ? r === -1 ? r = l2 : n2 !== 1 && (n2 = 1) : r !== -1 && (n2 = -1);
    }
    return r === -1 || i === -1 || n2 === 0 || n2 === 1 && r === i - 1 && r === t + 1 ? "" : e.slice(r, i);
  }, format: function(e) {
    if (e === null || typeof e != "object")
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof e);
    return F("/", e);
  }, parse: function(e) {
    v3(e);
    var r = { root: "", dir: "", base: "", ext: "", name: "" };
    if (e.length === 0)
      return r;
    var t = e.charCodeAt(0), i = t === 47, a2;
    i ? (r.root = "/", a2 = 1) : a2 = 0;
    for (var n2 = -1, l2 = 0, f2 = -1, c = true, d2 = e.length - 1, o2 = 0;d2 >= a2; --d2) {
      if (t = e.charCodeAt(d2), t === 47) {
        if (!c) {
          l2 = d2 + 1;
          break;
        }
        continue;
      }
      f2 === -1 && (c = false, f2 = d2 + 1), t === 46 ? n2 === -1 ? n2 = d2 : o2 !== 1 && (o2 = 1) : n2 !== -1 && (o2 = -1);
    }
    return n2 === -1 || f2 === -1 || o2 === 0 || o2 === 1 && n2 === f2 - 1 && n2 === l2 + 1 ? f2 !== -1 && (l2 === 0 && i ? r.base = r.name = e.slice(1, f2) : r.base = r.name = e.slice(l2, f2)) : (l2 === 0 && i ? (r.name = e.slice(1, n2), r.base = e.slice(1, f2)) : (r.name = e.slice(l2, n2), r.base = e.slice(l2, f2)), r.ext = e.slice(n2, f2)), l2 > 0 ? r.dir = e.slice(0, l2 - 1) : i && (r.dir = "/"), r;
  }, sep: "/", delimiter: ":", win32: null, posix: null };
  m2.posix = m2;
  w3.exports = m2;
});
var x3 = j2(k());
var u = x3;
var J = x3;
var P3 = function(s) {
  return s;
};
var S2 = function() {
  throw new Error("Not implemented");
};
u.parse ??= S2;
J.parse ??= S2;
var g2 = { resolve: u.resolve.bind(u), normalize: u.normalize.bind(u), isAbsolute: u.isAbsolute.bind(u), join: u.join.bind(u), relative: u.relative.bind(u), toNamespacedPath: P3, dirname: u.dirname.bind(u), basename: u.basename.bind(u), extname: u.extname.bind(u), format: u.format.bind(u), parse: u.parse.bind(u), sep: "/", delimiter: ":", win32: undefined, posix: undefined, _makeLong: P3 };
var y2 = { sep: "\\", delimiter: ";", win32: undefined, ...g2, posix: g2 };
g2.win32 = y2.win32 = y2;
g2.posix = g2;
var { resolve: B, normalize: G, isAbsolute: H, join: K2, relative: Q, toNamespacedPath: U, dirname: V, basename: X, extname: Y, format: Z, parse: $2, sep: I, delimiter: O2 } = g2;

// src/server.ts
var isBrowser = typeof window !== "undefined";
var createHash2 = isBrowser ? (algorithm) => ({
  update: (data) => ({
    digest: (encoding) => {
      let hash2 = 0;
      for (let i = 0;i < data.length; i++) {
        const char = data.charCodeAt(i);
        hash2 = (hash2 << 5) - hash2 + char;
        hash2 = hash2 & hash2;
      }
      const hashStr = Math.abs(hash2).toString(16).padStart(8, "0");
      return encoding === "hex" ? hashStr : Buffer2.from(hashStr);
    }
  })
}) : (init_crypto(), __toCommonJS(exports_crypto)).createHash;
var randomBytes4 = isBrowser ? (size) => {
  const array = new Uint8Array(size);
  crypto.getRandomValues(array);
  return array;
} : (init_crypto(), __toCommonJS(exports_crypto)).randomBytes;
var getBuffer = () => {
  if (isBrowser) {
    return {
      from: (data, encoding = "utf8") => {
        if (typeof data === "string") {
          return new TextEncoder().encode(data);
        }
        return new Uint8Array(data);
      }
    };
  }
  return (init_buffer(), __toCommonJS(exports_buffer)).Buffer;
};
var Buffer2 = getBuffer();
if (isBrowser) {
  Uint8Array.prototype.toString = function(encoding = "utf8") {
    return new TextDecoder().decode(this);
  };
  window.Buffer = Buffer2;
}
var createDebug = (namespace) => {
  const shouldLog = namespace.includes("state") || namespace.includes("tx") || namespace.includes("block") || namespace.includes("error") || namespace.includes("diff") || namespace.includes("info");
  return shouldLog ? console.log.bind(console, `[${namespace}]`) : () => {
  };
};
var debug = isBrowser ? createDebug : require_browser();
var log = {
  state: debug("state:\uD83D\uDD35"),
  tx: debug("tx:\uD83D\uDFE1"),
  block: debug("block:\uD83D\uDFE2"),
  error: debug("error:\uD83D\uDD34"),
  diff: debug("diff:\uD83D\uDFE3"),
  info: debug("info:ℹ️")
};
var db2 = new $Level("xln-snapshots", { valueEncoding: "buffer", keyEncoding: "binary" });
var clearDatabase = async () => {
  console.log("Clearing database and resetting history...");
  await db2.clear();
  resetHistory();
  console.log("Database cleared.");
};
var DEBUG = true;
var encodeBoard = (config) => {
  const delegates = config.validators.map((validator) => ({
    entityId: validator,
    votingPower: Number(config.shares[validator] || 1n)
  }));
  const board = {
    votingThreshold: Number(config.threshold),
    delegates
  };
  return JSON.stringify(board, Object.keys(board).sort());
};
var hashBoard = (encodedBoard) => {
  return exports_ethers.keccak256(exports_ethers.toUtf8Bytes(encodedBoard));
};
var generateLazyEntityId = (validators, threshold) => {
  let validatorData;
  if (typeof validators[0] === "string") {
    validatorData = validators.map((name) => ({ name, weight: 1 }));
  } else {
    validatorData = validators;
  }
  const sortedValidators = validatorData.slice().sort((a2, b4) => a2.name.localeCompare(b4.name));
  const quorumData = {
    validators: sortedValidators,
    threshold: threshold.toString()
  };
  const serialized = JSON.stringify(quorumData);
  return hashBoard(serialized);
};
var generateNumberedEntityId = (entityNumber) => {
  return `0x${entityNumber.toString(16).padStart(64, "0")}`;
};
var generateNamedEntityId = (name) => {
  return hashBoard(name);
};
var detectEntityType = (entityId) => {
  if (entityId.startsWith("0x") && entityId.length === 66) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return "numbered";
      }
      return "lazy";
    } catch {
      return "lazy";
    }
  }
  if (/^[0-9]+$/.test(entityId)) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return "numbered";
      }
      return "lazy";
    } catch {
      return "lazy";
    }
  }
  return "lazy";
};
var extractNumberFromEntityId = (entityId) => {
  if (entityId.startsWith("0x") && entityId.length === 66) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return Number(num);
      }
      return null;
    } catch {
      return null;
    }
  }
  if (/^[0-9]+$/.test(entityId)) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return Number(num);
      }
      return null;
    } catch {
      return null;
    }
  }
  return null;
};
var createLazyEntity = (name, validators, threshold, jurisdiction) => {
  const entityId = generateLazyEntityId(validators, threshold);
  if (DEBUG)
    console.log(`\uD83D\uDD12 Creating lazy entity: ${name}`);
  if (DEBUG)
    console.log(`   EntityID: ${entityId} (quorum hash)`);
  if (DEBUG)
    console.log(`   Validators: ${validators.join(", ")}`);
  if (DEBUG)
    console.log(`   Threshold: ${threshold}`);
  if (DEBUG)
    console.log(`   \uD83C\uDD93 FREE - No gas required`);
  const shares = {};
  validators.forEach((validator) => {
    shares[validator] = 1n;
  });
  return {
    mode: "proposer-based",
    threshold,
    validators,
    shares,
    jurisdiction
  };
};
var createNumberedEntity = async (name, validators, threshold, jurisdiction) => {
  if (!jurisdiction) {
    throw new Error("Jurisdiction required for numbered entity registration");
  }
  const boardHash = hashBoard(encodeBoard({
    mode: "proposer-based",
    threshold,
    validators,
    shares: validators.reduce((acc, v4) => ({ ...acc, [v4]: 1n }), {}),
    jurisdiction
  }));
  if (DEBUG)
    console.log(`\uD83D\uDD22 Creating numbered entity: ${name}`);
  if (DEBUG)
    console.log(`   Board Hash: ${boardHash}`);
  if (DEBUG)
    console.log(`   Jurisdiction: ${jurisdiction.name}`);
  if (DEBUG)
    console.log(`   \uD83D\uDCB8 Gas required for registration`);
  const entityNumber = Math.floor(Math.random() * 1e6) + 1;
  const entityId = generateNumberedEntityId(entityNumber);
  if (DEBUG)
    console.log(`   ✅ Assigned Entity Number: ${entityNumber}`);
  if (DEBUG)
    console.log(`   EntityID: ${entityId}`);
  const shares = {};
  validators.forEach((validator) => {
    shares[validator] = 1n;
  });
  const config = {
    mode: "proposer-based",
    threshold,
    validators,
    shares,
    jurisdiction
  };
  return { config, entityNumber };
};
var requestNamedEntity = async (name, entityNumber, jurisdiction) => {
  if (!jurisdiction) {
    throw new Error("Jurisdiction required for named entity");
  }
  if (DEBUG)
    console.log(`\uD83C\uDFF7️ Requesting named entity assignment`);
  if (DEBUG)
    console.log(`   Name: ${name}`);
  if (DEBUG)
    console.log(`   Target Entity Number: ${entityNumber}`);
  if (DEBUG)
    console.log(`   Jurisdiction: ${jurisdiction.name}`);
  if (DEBUG)
    console.log(`   \uD83D\uDC51 Requires admin approval`);
  const requestId = `req_${Math.random().toString(16).substring(2, 10)}`;
  if (DEBUG)
    console.log(`   \uD83D\uDCDD Name assignment request submitted: ${requestId}`);
  if (DEBUG)
    console.log(`   ⏳ Waiting for admin approval...`);
  return requestId;
};
var resolveEntityIdentifier = async (identifier) => {
  if (identifier.startsWith("#")) {
    const number2 = parseInt(identifier.slice(1));
    return {
      entityId: generateNumberedEntityId(number2),
      type: "numbered"
    };
  } else if (/^\d+$/.test(identifier)) {
    const number2 = parseInt(identifier);
    return {
      entityId: generateNumberedEntityId(number2),
      type: "numbered"
    };
  } else if (identifier.startsWith("0x")) {
    return {
      entityId: identifier,
      type: detectEntityType(identifier)
    };
  } else {
    if (DEBUG)
      console.log(`\uD83D\uDD0D Looking up named entity: ${identifier}`);
    const simulatedNumber = identifier === "coinbase" ? 42 : 0;
    if (simulatedNumber > 0) {
      return {
        entityId: generateNumberedEntityId(simulatedNumber),
        type: "named"
      };
    } else {
      throw new Error(`Named entity "${identifier}" not found`);
    }
  }
};
var ENTITY_PROVIDER_ABI = [
  "function registerNumberedEntity(bytes32 boardHash) external returns (uint256 entityNumber)",
  "function assignName(string memory name, uint256 entityNumber) external",
  "function transferName(string memory name, uint256 newEntityNumber) external",
  "function entities(bytes32 entityId) external view returns (tuple(uint256 boardHash, uint8 status, uint256 activationTime))",
  "function nameToNumber(string memory name) external view returns (uint256)",
  "function numberToName(uint256 entityNumber) external view returns (string memory)",
  "function nextNumber() external view returns (uint256)",
  "event EntityRegistered(bytes32 indexed entityId, uint256 indexed entityNumber, bytes32 boardHash)",
  "event NameAssigned(string indexed name, uint256 indexed entityNumber)",
  "event NameTransferred(string indexed name, uint256 indexed oldEntityNumber, uint256 indexed newEntityNumber)"
];
var connectToEthereum = async (rpcUrl = "http://localhost:8545", contractAddress) => {
  const port = rpcUrl.split(":").pop() || "8545";
  const finalContractAddress = contractAddress || await getContractAddress(port);
  if (!finalContractAddress) {
    throw new Error(`No contract address found for network port ${port}`);
  }
  try {
    const provider = new exports_ethers.JsonRpcProvider(rpcUrl);
    const signer = await provider.getSigner(0);
    const entityProvider = new exports_ethers.Contract(finalContractAddress, ENTITY_PROVIDER_ABI, signer);
    return { provider, signer, entityProvider };
  } catch (error) {
    console.error(`Failed to connect to Ethereum at ${rpcUrl}:`, error);
    throw error;
  }
};
var registerNumberedEntityOnChain = async (config, name) => {
  if (!config.jurisdiction) {
    throw new Error("Jurisdiction required for on-chain registration");
  }
  try {
    const { entityProvider } = await connectToEthereum();
    const encodedBoard = encodeBoard(config);
    const boardHash = hashBoard(encodedBoard);
    if (DEBUG)
      console.log(`\uD83C\uDFDB️ Registering numbered entity "${name}" on chain`);
    if (DEBUG)
      console.log(`   Jurisdiction: ${config.jurisdiction.name}`);
    if (DEBUG)
      console.log(`   EntityProvider: ${config.jurisdiction.entityProviderAddress}`);
    if (DEBUG)
      console.log(`   Board Hash: ${boardHash}`);
    const tx = await entityProvider.registerNumberedEntity(boardHash);
    if (DEBUG)
      console.log(`   \uD83D\uDCE4 Transaction sent: ${tx.hash}`);
    const receipt = await tx.wait();
    if (DEBUG)
      console.log(`   ✅ Transaction confirmed in block ${receipt.blockNumber}`);
    const event = receipt.logs.find((log2) => {
      try {
        const parsed = entityProvider.interface.parseLog(log2);
        return parsed?.name === "EntityRegistered";
      } catch {
        return false;
      }
    });
    if (!event) {
      throw new Error("EntityRegistered event not found in transaction logs");
    }
    const parsedEvent = entityProvider.interface.parseLog(event);
    const entityId = parsedEvent?.args[0];
    const entityNumber = Number(parsedEvent?.args[1]);
    if (DEBUG)
      console.log(`✅ Numbered entity registered!`);
    if (DEBUG)
      console.log(`   TX: ${tx.hash}`);
    if (DEBUG)
      console.log(`   Entity Number: ${entityNumber}`);
    return { txHash: tx.hash, entityNumber };
  } catch (error) {
    console.error("❌ Blockchain registration failed:", error);
    if (DEBUG)
      console.log("   \uD83D\uDD04 Falling back to simulation...");
    const txHash = `0x${Math.random().toString(16).substring(2, 66)}`;
    const entityNumber = Math.floor(Math.random() * 1e6) + 1;
    if (DEBUG)
      console.log(`   ✅ Simulated registration completed`);
    if (DEBUG)
      console.log(`   TX: ${txHash}`);
    if (DEBUG)
      console.log(`   Entity Number: ${entityNumber}`);
    return { txHash, entityNumber };
  }
};
var assignNameOnChain = async (name, entityNumber) => {
  try {
    const { entityProvider } = await connectToEthereum();
    if (DEBUG)
      console.log(`\uD83C\uDFF7️  Assigning name "${name}" to entity #${entityNumber}`);
    const tx = await entityProvider.assignName(name, entityNumber);
    if (DEBUG)
      console.log(`   \uD83D\uDCE4 Transaction sent: ${tx.hash}`);
    const receipt = await tx.wait();
    if (DEBUG)
      console.log(`   ✅ Transaction confirmed in block ${receipt.blockNumber}`);
    if (DEBUG)
      console.log(`✅ Name assigned successfully!`);
    if (DEBUG)
      console.log(`   TX: ${tx.hash}`);
    return { txHash: tx.hash };
  } catch (error) {
    console.error("❌ Name assignment failed:", error);
    throw error;
  }
};
var getEntityInfoFromChain = async (entityId) => {
  try {
    const { entityProvider } = await connectToEthereum();
    const entityInfo = await entityProvider.entities(entityId);
    if (entityInfo.status === 0) {
      return { exists: false };
    }
    const entityType = detectEntityType(entityId);
    let entityNumber;
    let name;
    if (entityType === "numbered") {
      const extractedNumber = extractNumberFromEntityId(entityId);
      if (extractedNumber !== null) {
        entityNumber = extractedNumber;
        try {
          const retrievedName = await entityProvider.numberToName(entityNumber);
          name = retrievedName || undefined;
        } catch {
        }
      }
    }
    return { exists: true, entityNumber, name };
  } catch (error) {
    console.error("❌ Failed to get entity info from chain:", error);
    return { exists: false };
  }
};
var getNextEntityNumber = async (port = "8545") => {
  try {
    const rpcUrl = `http://localhost:${port}`;
    const contractAddress = await getContractAddress(port);
    const { entityProvider } = await connectToEthereum(rpcUrl, contractAddress);
    if (DEBUG)
      console.log(`\uD83D\uDD0D Fetching next entity number from ${contractAddress} (port ${port})`);
    const nextNumber = await entityProvider.nextNumber();
    const result = Number(nextNumber);
    if (DEBUG)
      console.log(`\uD83D\uDD22 Next entity number: ${result}`);
    return result;
  } catch (error) {
    console.error("❌ Failed to get next entity number:", error);
    try {
      const rpcUrl = `http://localhost:${port}`;
      const contractAddress = await getContractAddress(port);
      const { provider } = await connectToEthereum(rpcUrl, contractAddress);
      const code = await provider.getCode(contractAddress);
      if (code === "0x") {
        console.error("❌ Contract not deployed at address:", contractAddress);
      } else {
        console.log("✅ Contract exists, but nextNumber() call failed");
      }
    } catch (checkError) {
      console.error("❌ Failed to check contract:", checkError);
    }
    return 1;
  }
};
var transferNameBetweenEntities = async (name, fromNumber, toNumber2, jurisdiction) => {
  if (DEBUG)
    console.log(`\uD83D\uDD04 Transferring name "${name}" from #${fromNumber} to #${toNumber2}`);
  const txHash = `0x${Math.random().toString(16).substring(2, 66)}`;
  if (DEBUG)
    console.log(`✅ Name transferred! TX: ${txHash}`);
  return txHash;
};
var isEntityRegistered = async (entityId) => {
  const type = detectEntityType(entityId);
  if (type === "lazy") {
    return false;
  }
  if (!/^[0-9]+$/.test(entityId)) {
    return false;
  }
  try {
    const num = BigInt(entityId);
    return num > 0n && num < 1000000n;
  } catch {
    return false;
  }
};
var envHistory = [];
var deepCloneReplica = (replica) => {
  const cloneMap = (map) => new Map(map);
  const cloneArray = (arr) => [...arr];
  return {
    entityId: replica.entityId,
    signerId: replica.signerId,
    state: {
      height: replica.state.height,
      timestamp: replica.state.timestamp,
      nonces: cloneMap(replica.state.nonces),
      messages: cloneArray(replica.state.messages),
      proposals: new Map(Array.from(replica.state.proposals.entries()).map(([id2, proposal]) => [
        id2,
        { ...proposal, votes: cloneMap(proposal.votes) }
      ])),
      config: replica.state.config
    },
    mempool: cloneArray(replica.mempool),
    proposal: replica.proposal ? {
      height: replica.proposal.height,
      txs: cloneArray(replica.proposal.txs),
      hash: replica.proposal.hash,
      newState: replica.proposal.newState,
      signatures: cloneMap(replica.proposal.signatures)
    } : undefined,
    lockedFrame: replica.lockedFrame ? {
      height: replica.lockedFrame.height,
      txs: cloneArray(replica.lockedFrame.txs),
      hash: replica.lockedFrame.hash,
      newState: replica.lockedFrame.newState,
      signatures: cloneMap(replica.lockedFrame.signatures)
    } : undefined,
    isProposer: replica.isProposer
  };
};
var captureSnapshot = (env, serverInput, serverOutputs, description) => {
  const snapshot = {
    height: env.height,
    timestamp: env.timestamp,
    replicas: new Map(Array.from(env.replicas.entries()).map(([key, replica]) => [
      key,
      deepCloneReplica(replica)
    ])),
    serverInput: {
      serverTxs: [...serverInput.serverTxs],
      entityInputs: serverInput.entityInputs.map((input) => ({
        ...input,
        entityTxs: input.entityTxs ? [...input.entityTxs] : undefined,
        precommits: input.precommits ? new Map(input.precommits) : undefined
      }))
    },
    serverOutputs: serverOutputs.map((output2) => ({
      ...output2,
      entityTxs: output2.entityTxs ? [...output2.entityTxs] : undefined,
      precommits: output2.precommits ? new Map(output2.precommits) : undefined
    })),
    description
  };
  envHistory.push(snapshot);
  const batch = db2.batch();
  batch.put(Buffer2.from(`snapshot:${snapshot.height}`), encode(snapshot));
  batch.put(Buffer2.from("latest_height"), Buffer2.from(snapshot.height.toString()));
  batch.write().catch((err) => {
    console.error(`\uD83D\uDD25 Failed to save snapshot ${snapshot.height} to LevelDB`, err);
  });
  if (DEBUG) {
    console.log(`\uD83D\uDCF8 Snapshot captured: "${description}" (${envHistory.length} total)`);
    if (serverInput.serverTxs.length > 0) {
      console.log(`    \uD83D\uDDA5️  ServerTxs: ${serverInput.serverTxs.length}`);
      serverInput.serverTxs.forEach((tx, i) => {
        console.log(`      ${i + 1}. ${tx.type} ${tx.entityId}:${tx.signerId} (${tx.data.isProposer ? "proposer" : "validator"})`);
      });
    }
    if (serverInput.entityInputs.length > 0) {
      console.log(`    \uD83D\uDCE8 EntityInputs: ${serverInput.entityInputs.length}`);
      serverInput.entityInputs.forEach((input, i) => {
        const parts = [];
        if (input.entityTxs?.length)
          parts.push(`${input.entityTxs.length} txs`);
        if (input.precommits?.size)
          parts.push(`${input.precommits.size} precommits`);
        if (input.proposedFrame)
          parts.push(`frame: ${input.proposedFrame.hash.slice(0, 10)}...`);
        console.log(`      ${i + 1}. ${input.entityId}:${input.signerId} (${parts.join(", ") || "empty"})`);
      });
    }
  }
};
var calculateQuorumPower = (config, signers) => {
  return signers.reduce((sum, signerId) => sum + (config.shares[signerId] ?? 0n), 0n);
};
var sortSignatures = (signatures, config) => {
  const sortedEntries = Array.from(signatures.entries()).sort(([a2], [b4]) => {
    const indexA = config.validators.indexOf(a2);
    const indexB = config.validators.indexOf(b4);
    return indexA - indexB;
  });
  return new Map(sortedEntries);
};
var mergeEntityInputs = (entityInputs) => {
  const merged = new Map;
  let mergeCount = 0;
  entityInputs.forEach((input) => {
    const key = `${input.entityId}:${input.signerId}`;
    const existing = merged.get(key);
    if (existing) {
      mergeCount++;
      if (DEBUG)
        console.log(`    \uD83D\uDD04 Merging inputs for ${key}: txs=${input.entityTxs?.length || 0}, precommits=${input.precommits?.size || 0}, frame=${!!input.proposedFrame}`);
      if (input.entityTxs?.length) {
        existing.entityTxs = [...existing.entityTxs || [], ...input.entityTxs];
      }
      if (input.precommits?.size) {
        if (!existing.precommits)
          existing.precommits = new Map;
        input.precommits.forEach((value, key2) => existing.precommits.set(key2, value));
      }
      if (input.proposedFrame) {
        existing.proposedFrame = input.proposedFrame;
      }
    } else {
      merged.set(key, {
        ...input,
        precommits: input.precommits ? new Map(input.precommits) : undefined
      });
    }
  });
  if (DEBUG && mergeCount > 0) {
    console.log(`    ⚠️  CORNER CASE: Merged ${mergeCount} duplicate inputs (${entityInputs.length} → ${merged.size})`);
  }
  return Array.from(merged.values());
};
var generateJurisdictions = () => {
  const jurisdictions = new Map;
  if (isBrowser) {
    console.log("\uD83C\uDF10 Browser detected - jurisdictions will be loaded dynamically");
    return jurisdictions;
  }
  let networks;
  try {
    const configPath = K2(process.cwd(), "contract-addresses.json");
    const configData = fs.readFileSync(configPath, "utf8");
    const config = JSON.parse(configData);
    console.log("✅ Loaded contract addresses from config file");
    networks = config.networks;
  } catch (error) {
    console.error("❌ CRITICAL: Could not load contract-addresses.json");
    console.error("   Please run: ./deploy-contracts.sh");
    throw new Error("Contract addresses configuration file not found or invalid");
  }
  if (networks["8545"]) {
    const network = networks["8545"];
    if (!network.entityProvider) {
      throw new Error("Missing entityProvider address for Ethereum network (8545)");
    }
    jurisdictions.set("ethereum", {
      address: network.rpc,
      name: network.name,
      entityProviderAddress: network.entityProvider,
      depositoryAddress: network.depository,
      chainId: network.chainId
    });
  }
  if (networks["8546"]) {
    const network = networks["8546"];
    if (!network.entityProvider) {
      throw new Error("Missing entityProvider address for Polygon network (8546)");
    }
    jurisdictions.set("polygon", {
      address: network.rpc,
      name: network.name,
      entityProviderAddress: network.entityProvider,
      depositoryAddress: network.depository,
      chainId: network.chainId
    });
  }
  if (networks["8547"]) {
    const network = networks["8547"];
    if (!network.entityProvider) {
      throw new Error("Missing entityProvider address for Arbitrum network (8547)");
    }
    jurisdictions.set("arbitrum", {
      address: network.rpc,
      name: network.name,
      entityProviderAddress: network.entityProvider,
      depositoryAddress: network.depository,
      chainId: network.chainId
    });
  }
  return jurisdictions;
};
var DEFAULT_JURISDICTIONS = generateJurisdictions();
var getAvailableJurisdictions = () => {
  return Array.from(DEFAULT_JURISDICTIONS.values());
};
var getJurisdictionByAddress = (address) => {
  return DEFAULT_JURISDICTIONS.get(address);
};
var registerEntityInJurisdiction = async (entityId, config, jurisdiction) => {
  try {
    if (DEBUG) {
      console.log(`\uD83C\uDFDB️  Registering entity "${entityId}" in jurisdiction "${jurisdiction.name}"`);
      console.log(`    EntityProvider: ${jurisdiction.entityProviderAddress}`);
      console.log(`    Validators: ${config.validators.join(", ")}`);
      console.log(`    Threshold: ${config.threshold}/${Object.values(config.shares).reduce((a2, b4) => a2 + b4, 0n)}`);
    }
    const mockTxHash = `0x${Math.random().toString(16).slice(2)}${Math.random().toString(16).slice(2)}`;
    if (DEBUG) {
      console.log(`✅ Entity registration simulated successfully`);
      console.log(`    Transaction Hash: ${mockTxHash}`);
      console.log(`    Entity can now interact with jurisdiction contracts`);
    }
    return {
      success: true,
      transactionHash: mockTxHash
    };
  } catch (error) {
    if (DEBUG) {
      console.error(`❌ Entity registration failed:`, error);
    }
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error"
    };
  }
};
var generateProposalId = (action, proposer, entityState) => {
  const proposalData = JSON.stringify({
    type: action.type,
    data: action.data,
    proposer,
    timestamp: entityState.timestamp
  });
  const hash2 = createHash2("sha256").update(proposalData).digest("hex");
  return `prop_${hash2.slice(0, 12)}`;
};
var executeProposal = (entityState, proposal) => {
  if (proposal.action.type === "collective_message") {
    const message = `[COLLECTIVE] ${proposal.action.data.message}`;
    if (DEBUG)
      console.log(`    \uD83C\uDFDB️  Executing collective proposal: "${message}"`);
    const newMessages = [...entityState.messages, message];
    if (newMessages.length > 10) {
      newMessages.shift();
    }
    return {
      ...entityState,
      messages: newMessages
    };
  }
  return entityState;
};
var applyEntityTx = (env, entityState, entityTx) => {
  if (entityTx.type === "chat") {
    const { from, message } = entityTx.data;
    const currentNonce = entityState.nonces.get(from) || 0;
    const newEntityState = {
      ...entityState,
      nonces: new Map(entityState.nonces),
      messages: [...entityState.messages],
      proposals: new Map(entityState.proposals)
    };
    newEntityState.nonces.set(from, currentNonce + 1);
    newEntityState.messages.push(`${from}: ${message}`);
    if (newEntityState.messages.length > 10) {
      newEntityState.messages.shift();
    }
    return newEntityState;
  }
  if (entityTx.type === "propose") {
    const { action, proposer } = entityTx.data;
    const proposalId = generateProposalId(action, proposer, entityState);
    if (DEBUG)
      console.log(`    \uD83D\uDCDD Creating proposal ${proposalId} by ${proposer}: ${action.data.message}`);
    const proposal = {
      id: proposalId,
      proposer,
      action,
      votes: new Map([[proposer, "yes"]]),
      status: "pending",
      created: entityState.timestamp
    };
    const proposerPower = entityState.config.shares[proposer] || BigInt(0);
    const shouldExecuteImmediately = proposerPower >= entityState.config.threshold;
    let newEntityState = {
      ...entityState,
      nonces: new Map(entityState.nonces),
      messages: [...entityState.messages],
      proposals: new Map(entityState.proposals)
    };
    if (shouldExecuteImmediately) {
      proposal.status = "executed";
      newEntityState = executeProposal(newEntityState, proposal);
      if (DEBUG)
        console.log(`    ⚡ Proposal executed immediately - proposer has ${proposerPower} >= ${entityState.config.threshold} threshold`);
    } else {
      if (DEBUG)
        console.log(`    ⏳ Proposal pending votes - proposer has ${proposerPower} < ${entityState.config.threshold} threshold`);
    }
    newEntityState.proposals.set(proposalId, proposal);
    return newEntityState;
  }
  if (entityTx.type === "vote") {
    const { proposalId, voter, choice } = entityTx.data;
    const proposal = entityState.proposals.get(proposalId);
    if (!proposal || proposal.status !== "pending") {
      if (DEBUG)
        console.log(`    ❌ Vote ignored - proposal ${proposalId.slice(0, 12)}... not found or not pending`);
      return entityState;
    }
    if (DEBUG)
      console.log(`    \uD83D\uDDF3️  Vote by ${voter}: ${choice} on proposal ${proposalId.slice(0, 12)}...`);
    const newEntityState = {
      ...entityState,
      nonces: new Map(entityState.nonces),
      messages: [...entityState.messages],
      proposals: new Map(entityState.proposals)
    };
    const updatedProposal = {
      ...proposal,
      votes: new Map(proposal.votes)
    };
    updatedProposal.votes.set(voter, choice);
    const yesVoters = Array.from(updatedProposal.votes.entries()).filter(([_4, vote]) => vote === "yes").map(([voter2, _4]) => voter2);
    const totalYesPower = calculateQuorumPower(entityState.config, yesVoters);
    if (DEBUG) {
      const totalShares = Object.values(entityState.config.shares).reduce((sum, val) => sum + val, BigInt(0));
      const percentage = (Number(totalYesPower) / Number(entityState.config.threshold) * 100).toFixed(1);
      log.info(`    \uD83D\uDD0D Proposal votes: ${totalYesPower} / ${totalShares} [${percentage}% threshold${Number(totalYesPower) >= Number(entityState.config.threshold) ? "+" : ""}]`);
    }
    if (totalYesPower >= entityState.config.threshold) {
      updatedProposal.status = "executed";
      const executedState = executeProposal(newEntityState, updatedProposal);
      executedState.proposals.set(proposalId, updatedProposal);
      return executedState;
    }
    newEntityState.proposals.set(proposalId, updatedProposal);
    return newEntityState;
  }
  return entityState;
};
var applyEntityFrame = (env, entityState, entityTxs) => {
  return entityTxs.reduce((currentEntityState, entityTx) => applyEntityTx(env, currentEntityState, entityTx), entityState);
};
var processEntityInput = (env, entityReplica, entityInput) => {
  if (!entityReplica) {
    log.error("Invalid entityReplica provided");
    return [];
  }
  if (!entityInput.entityId || !entityInput.signerId) {
    log.error("Invalid entityInput: missing required fields");
    return [];
  }
  const entityOutbox = [];
  if (entityInput.entityTxs?.length) {
    entityReplica.mempool.push(...entityInput.entityTxs);
    if (DEBUG)
      console.log(`    → Added ${entityInput.entityTxs.length} txs to mempool (total: ${entityReplica.mempool.length})`);
    if (DEBUG && entityInput.entityTxs.length > 3) {
      console.log(`    ⚠️  CORNER CASE: Large batch of ${entityInput.entityTxs.length} transactions`);
    }
  } else if (entityInput.entityTxs && entityInput.entityTxs.length === 0) {
    if (DEBUG)
      console.log(`    ⚠️  CORNER CASE: Empty transaction array received - no mempool changes`);
  }
  if (entityInput.precommits?.size && entityInput.proposedFrame && !entityReplica.proposal) {
    const signers = Array.from(entityInput.precommits.keys());
    const totalPower = calculateQuorumPower(entityReplica.state.config, signers);
    if (totalPower >= entityReplica.state.config.threshold) {
      if (DEBUG)
        console.log(`    → Received commit notification with ${entityInput.precommits.size} signatures`);
      entityReplica.state = {
        ...entityInput.proposedFrame.newState,
        height: entityReplica.state.height + 1
      };
      entityReplica.mempool.length = 0;
      entityReplica.lockedFrame = undefined;
      if (DEBUG)
        console.log(`    → Applied commit, new state: ${entityReplica.state.messages.length} messages, height: ${entityReplica.state.height}`);
      return entityOutbox;
    }
  }
  if (entityInput.proposedFrame && (!entityReplica.proposal || entityReplica.state.config.mode === "gossip-based" && entityReplica.isProposer)) {
    const frameSignature = `sig_${entityReplica.signerId}_${entityInput.proposedFrame.hash}`;
    const config = entityReplica.state.config;
    entityReplica.lockedFrame = entityInput.proposedFrame;
    if (DEBUG)
      console.log(`    → Validator locked to frame ${entityInput.proposedFrame.hash.slice(0, 10)}...`);
    if (config.mode === "gossip-based") {
      config.validators.forEach((validatorId) => {
        entityOutbox.push({
          entityId: entityInput.entityId,
          signerId: validatorId,
          precommits: new Map([[entityReplica.signerId, frameSignature]])
        });
      });
      if (DEBUG)
        console.log(`    → Signed proposal, gossiping precommit to ${config.validators.length} validators`);
    } else {
      const proposerId = config.validators[0];
      entityOutbox.push({
        entityId: entityInput.entityId,
        signerId: proposerId,
        precommits: new Map([[entityReplica.signerId, frameSignature]])
      });
      if (DEBUG)
        console.log(`    → Signed proposal, sending precommit to ${proposerId}`);
    }
  }
  if (entityInput.precommits?.size && entityReplica.proposal) {
    for (const [signerId, signature] of entityInput.precommits) {
      entityReplica.proposal.signatures.set(signerId, signature);
    }
    if (DEBUG)
      console.log(`    → Collected ${entityInput.precommits.size} signatures (total: ${entityReplica.proposal.signatures.size})`);
    const signers = Array.from(entityReplica.proposal.signatures.keys());
    const totalPower = calculateQuorumPower(entityReplica.state.config, signers);
    if (DEBUG) {
      const totalShares = Object.values(entityReplica.state.config.shares).reduce((sum, val) => sum + val, BigInt(0));
      const percentage = (Number(totalPower) / Number(entityReplica.state.config.threshold) * 100).toFixed(1);
      log.info(`    \uD83D\uDD0D Threshold check: ${totalPower} / ${totalShares} [${percentage}% threshold${Number(totalPower) >= Number(entityReplica.state.config.threshold) ? "+" : ""}]`);
      if (entityReplica.state.config.mode === "gossip-based") {
        console.log(`    ⚠️  CORNER CASE: Gossip mode - all validators receive precommits`);
      }
    }
    if (totalPower >= entityReplica.state.config.threshold) {
      entityReplica.state = {
        ...entityReplica.proposal.newState,
        height: entityReplica.state.height + 1
      };
      if (DEBUG)
        console.log(`    → Threshold reached! Committing frame, height: ${entityReplica.state.height}`);
      const sortedSignatures = sortSignatures(entityReplica.proposal.signatures, entityReplica.state.config);
      const committedFrame = entityReplica.proposal;
      entityReplica.mempool.length = 0;
      entityReplica.proposal = undefined;
      entityReplica.lockedFrame = undefined;
      entityReplica.state.config.validators.forEach((validatorId) => {
        entityOutbox.push({
          entityId: entityInput.entityId,
          signerId: validatorId,
          precommits: sortedSignatures,
          proposedFrame: committedFrame
        });
      });
      if (DEBUG)
        console.log(`    → Sending commit notifications to ${entityReplica.state.config.validators.length} validators`);
    }
  }
  if (entityReplica.isProposer && entityReplica.mempool.length > 0 && !entityReplica.proposal) {
    if (DEBUG)
      console.log(`    \uD83D\uDE80 Auto-propose triggered: mempool=${entityReplica.mempool.length}, isProposer=${entityReplica.isProposer}, hasProposal=${!!entityReplica.proposal}`);
    const newEntityState = applyEntityFrame(env, entityReplica.state, entityReplica.mempool);
    const newTimestamp = env.timestamp;
    const frameHash = `frame_${entityReplica.state.height + 1}_${newTimestamp}`;
    const selfSignature = `sig_${entityReplica.signerId}_${frameHash}`;
    entityReplica.proposal = {
      height: entityReplica.state.height + 1,
      txs: [...entityReplica.mempool],
      hash: frameHash,
      newState: {
        ...newEntityState,
        height: entityReplica.state.height + 1,
        timestamp: newTimestamp
      },
      signatures: new Map([[entityReplica.signerId, selfSignature]])
    };
    if (DEBUG)
      console.log(`    → Auto-proposing frame ${entityReplica.proposal.hash} with ${entityReplica.proposal.txs.length} txs and self-signature.`);
    entityReplica.state.config.validators.forEach((validatorId) => {
      if (validatorId !== entityReplica.signerId) {
        entityOutbox.push({
          entityId: entityInput.entityId,
          signerId: validatorId,
          proposedFrame: entityReplica.proposal
        });
      }
    });
  } else if (entityReplica.isProposer && entityReplica.mempool.length === 0 && !entityReplica.proposal) {
    if (DEBUG)
      console.log(`    ⚠️  CORNER CASE: Proposer with empty mempool - no auto-propose`);
  } else if (!entityReplica.isProposer && entityReplica.mempool.length > 0) {
    if (DEBUG)
      console.log(`    → Non-proposer sending ${entityReplica.mempool.length} txs to proposer`);
    const proposerId = entityReplica.state.config.validators[0];
    entityOutbox.push({
      entityId: entityInput.entityId,
      signerId: proposerId,
      entityTxs: [...entityReplica.mempool]
    });
    entityReplica.mempool.length = 0;
  } else if (entityReplica.isProposer && entityReplica.proposal) {
    if (DEBUG)
      console.log(`    ⚠️  CORNER CASE: Proposer already has pending proposal - no new auto-propose`);
  }
  return entityOutbox;
};
var processServerInput = (env, serverInput) => {
  const startTime = Date.now();
  env.serverInput.serverTxs.push(...serverInput.serverTxs);
  env.serverInput.entityInputs.push(...serverInput.entityInputs);
  const mergedInputs = mergeEntityInputs(env.serverInput.entityInputs);
  const entityOutbox = [];
  if (DEBUG) {
    console.log(`
=== TICK ${env.height} ===`);
    console.log(`Server inputs: ${serverInput.serverTxs.length} new serverTxs, ${serverInput.entityInputs.length} new entityInputs`);
    console.log(`Total in env: ${env.serverInput.serverTxs.length} serverTxs, ${env.serverInput.entityInputs.length} entityInputs (merged to ${mergedInputs.length})`);
    if (mergedInputs.length > 0) {
      console.log(`\uD83D\uDD04 Processing merged inputs:`);
      mergedInputs.forEach((input, i) => {
        const parts = [];
        if (input.entityTxs?.length)
          parts.push(`${input.entityTxs.length} txs`);
        if (input.precommits?.size)
          parts.push(`${input.precommits.size} precommits`);
        if (input.proposedFrame)
          parts.push(`frame: ${input.proposedFrame.hash.slice(0, 10)}...`);
        console.log(`  ${i + 1}. ${input.entityId}:${input.signerId} (${parts.join(", ") || "empty"})`);
      });
    }
  }
  env.serverInput.serverTxs.forEach((serverTx) => {
    if (serverTx.type === "importReplica") {
      if (DEBUG)
        console.log(`Importing replica ${serverTx.entityId}:${serverTx.signerId} (proposer: ${serverTx.data.isProposer})`);
      const replicaKey = `${serverTx.entityId}:${serverTx.signerId}`;
      env.replicas.set(replicaKey, {
        entityId: serverTx.entityId,
        signerId: serverTx.signerId,
        state: {
          height: 0,
          timestamp: env.timestamp,
          nonces: new Map,
          messages: [],
          proposals: new Map,
          config: serverTx.data.config
        },
        mempool: [],
        isProposer: serverTx.data.isProposer
      });
    }
  });
  mergedInputs.forEach((entityInput) => {
    const replicaKey = `${entityInput.entityId}:${entityInput.signerId}`;
    const entityReplica = env.replicas.get(replicaKey);
    if (entityReplica) {
      if (DEBUG) {
        console.log(`Processing input for ${replicaKey}:`);
        if (entityInput.entityTxs?.length)
          console.log(`  → ${entityInput.entityTxs.length} transactions`);
        if (entityInput.proposedFrame)
          console.log(`  → Proposed frame: ${entityInput.proposedFrame.hash}`);
        if (entityInput.precommits?.size)
          console.log(`  → ${entityInput.precommits.size} precommits`);
      }
      const entityOutputs = processEntityInput(env, entityReplica, entityInput);
      entityOutbox.push(...entityOutputs);
    }
  });
  env.height++;
  env.timestamp = Date.now();
  const inputDescription = `Tick ${env.height - 1}: ${env.serverInput.serverTxs.length} serverTxs, ${env.serverInput.entityInputs.length} entityInputs → ${entityOutbox.length} outputs`;
  const processedInput = {
    serverTxs: [...env.serverInput.serverTxs],
    entityInputs: [...env.serverInput.entityInputs]
  };
  env.serverInput.serverTxs.length = 0;
  env.serverInput.entityInputs.length = 0;
  captureSnapshot(env, processedInput, entityOutbox, inputDescription);
  if (DEBUG && entityOutbox.length > 0) {
    console.log(`\uD83D\uDCE4 Outputs: ${entityOutbox.length} messages`);
    entityOutbox.forEach((output2, i) => {
      console.log(`  ${i + 1}. → ${output2.signerId} (${output2.entityTxs ? `${output2.entityTxs.length} txs` : ""}${output2.proposedFrame ? ` proposal: ${output2.proposedFrame.hash.slice(0, 10)}...` : ""}${output2.precommits ? ` ${output2.precommits.size} precommits` : ""})`);
    });
  } else if (DEBUG && entityOutbox.length === 0) {
    console.log(`\uD83D\uDCE4 No outputs generated`);
  }
  if (DEBUG) {
    console.log(`Replica states:`);
    env.replicas.forEach((replica, key) => {
      console.log(`  ${key}: mempool=${replica.mempool.length}, messages=${replica.state.messages.length}, proposal=${replica.proposal ? "✓" : "✗"}`);
    });
  }
  const endTime = Date.now();
  if (DEBUG) {
    console.log(`⏱️  Tick ${env.height - 1} completed in ${endTime - startTime}ms`);
  }
  return entityOutbox;
};
var processUntilEmpty = (env, inputs) => {
  let outputs = inputs;
  while (outputs.length > 0) {
    outputs = processServerInput(env, { serverTxs: [], entityInputs: outputs });
  }
};
var resetHistory = () => envHistory.length = 0;
var runDemo = (env) => {
  if (DEBUG) {
    console.log("\uD83D\uDE80 Starting XLN Consensus Demo - Multi-Entity Test");
    console.log("✨ Using deterministic hash-based proposal IDs (no randomness)");
    console.log("\uD83C\uDF0D Environment-based architecture with merged serverInput");
    console.log("\uD83D\uDDD1️ History cleared for fresh start");
  }
  console.log(`
\uD83D\uDCCB TEST 1: Chat Entity - Numbered Entity with Jurisdiction`);
  const chatValidators = ["alice", "bob", "carol"];
  const chatConfig = {
    mode: "proposer-based",
    threshold: BigInt(2),
    validators: chatValidators,
    shares: {
      alice: BigInt(1),
      bob: BigInt(1),
      carol: BigInt(1)
    },
    jurisdiction: DEFAULT_JURISDICTIONS.get("ethereum")
  };
  const chatEntityId = generateNumberedEntityId(1);
  processServerInput(env, {
    serverTxs: chatValidators.map((signerId, index) => ({
      type: "importReplica",
      entityId: chatEntityId,
      signerId,
      data: {
        config: chatConfig,
        isProposer: index === 0
      }
    })),
    entityInputs: []
  });
  console.log(`
\uD83D\uDCCB TEST 2: Trading Entity - Numbered Entity with Jurisdiction`);
  const tradingValidators = ["alice", "bob", "carol", "david"];
  const tradingConfig = {
    mode: "gossip-based",
    threshold: BigInt(7),
    validators: tradingValidators,
    shares: {
      alice: BigInt(4),
      bob: BigInt(3),
      carol: BigInt(2),
      david: BigInt(1)
    },
    jurisdiction: DEFAULT_JURISDICTIONS.get("ethereum")
  };
  const tradingEntityId = generateNumberedEntityId(2);
  processServerInput(env, {
    serverTxs: tradingValidators.map((signerId, index) => ({
      type: "importReplica",
      entityId: tradingEntityId,
      signerId,
      data: {
        config: tradingConfig,
        isProposer: index === 0
      }
    })),
    entityInputs: []
  });
  console.log(`
\uD83D\uDCCB TEST 3: Governance Entity - Lazy Entity with Jurisdiction`);
  const govValidators = ["alice", "bob", "carol", "david", "eve"];
  const govConfig = {
    mode: "proposer-based",
    threshold: BigInt(10),
    validators: govValidators,
    shares: {
      alice: BigInt(3),
      bob: BigInt(3),
      carol: BigInt(3),
      david: BigInt(3),
      eve: BigInt(3)
    },
    jurisdiction: DEFAULT_JURISDICTIONS.get("ethereum")
  };
  const govEntityId = generateLazyEntityId(govValidators, BigInt(10));
  processServerInput(env, {
    serverTxs: govValidators.map((signerId, index) => ({
      type: "importReplica",
      entityId: govEntityId,
      signerId,
      data: {
        config: govConfig,
        isProposer: index === 0
      }
    })),
    entityInputs: []
  });
  console.log(`
\uD83D\uDD25 CORNER CASE TESTS:`);
  console.log(`
⚠️  CORNER CASE 1: Single transaction in chat`);
  processUntilEmpty(env, [{
    entityId: chatEntityId,
    signerId: "alice",
    entityTxs: [{ type: "chat", data: { from: "alice", message: "First message in chat!" } }]
  }]);
  console.log(`
⚠️  CORNER CASE 2: Batch proposals in trading`);
  processUntilEmpty(env, [{
    entityId: tradingEntityId,
    signerId: "alice",
    entityTxs: [
      { type: "propose", data: { action: { type: "collective_message", data: { message: "Trading proposal 1: Set daily limit" } }, proposer: "alice" } },
      { type: "propose", data: { action: { type: "collective_message", data: { message: "Trading proposal 2: Update fees" } }, proposer: "bob" } },
      { type: "propose", data: { action: { type: "collective_message", data: { message: "Trading proposal 3: Add new pairs" } }, proposer: "carol" } }
    ]
  }]);
  console.log(`
⚠️  CORNER CASE 3: High threshold governance vote`);
  processUntilEmpty(env, [{
    entityId: govEntityId,
    signerId: "alice",
    entityTxs: [{ type: "propose", data: { action: { type: "collective_message", data: { message: "Governance proposal: Increase block size limit" } }, proposer: "alice" } }]
  }]);
  console.log(`
⚠️  CORNER CASE 4: Concurrent multi-entity activity`);
  processUntilEmpty(env, [
    {
      entityId: chatEntityId,
      signerId: "alice",
      entityTxs: [
        { type: "chat", data: { from: "bob", message: "Chat during trading!" } },
        { type: "chat", data: { from: "carol", message: "Exciting times!" } }
      ]
    },
    {
      entityId: tradingEntityId,
      signerId: "alice",
      entityTxs: [
        { type: "propose", data: { action: { type: "collective_message", data: { message: "Trading proposal: Cross-entity transfer protocol" } }, proposer: "david" } }
      ]
    },
    {
      entityId: govEntityId,
      signerId: "alice",
      entityTxs: [
        { type: "propose", data: { action: { type: "collective_message", data: { message: "Governance decision: Implement new voting system" } }, proposer: "bob" } },
        { type: "propose", data: { action: { type: "collective_message", data: { message: "Governance decision: Update treasury rules" } }, proposer: "carol" } }
      ]
    }
  ]);
  console.log(`
⚠️  CORNER CASE 5: Empty mempool test (no auto-propose)`);
  processUntilEmpty(env, [{
    entityId: chatEntityId,
    signerId: "alice",
    entityTxs: []
  }]);
  console.log(`
⚠️  CORNER CASE 6: Large message batch`);
  const largeBatch = Array.from({ length: 8 }, (_4, i) => ({
    type: "chat",
    data: { from: ["alice", "bob", "carol"][i % 3], message: `Batch message ${i + 1}` }
  }));
  processUntilEmpty(env, [{
    entityId: chatEntityId,
    signerId: "alice",
    entityTxs: largeBatch
  }]);
  console.log(`
⚠️  CORNER CASE 7: Proposal voting system`);
  processUntilEmpty(env, [{
    entityId: tradingEntityId,
    signerId: "alice",
    entityTxs: [
      { type: "propose", data: { action: { type: "collective_message", data: { message: "Major decision: Upgrade trading protocol" } }, proposer: "carol" } }
    ]
  }]);
  console.log(`
⚠️  CORNER CASE 7b: Voting on proposals (simulated)`);
  processUntilEmpty(env, [{
    entityId: govEntityId,
    signerId: "alice",
    entityTxs: [
      { type: "propose", data: { action: { type: "collective_message", data: { message: "Critical governance: Emergency protocol activation" } }, proposer: "eve" } }
    ]
  }]);
  if (DEBUG) {
    console.log(`
\uD83C\uDFAF === FINAL VERIFICATION ===`);
    console.log("✨ All proposal IDs are deterministic hashes of proposal data");
    console.log("\uD83C\uDF0D Environment-based architecture working correctly");
    const entitiesByType = new Map;
    env.replicas.forEach((replica, key) => {
      const entityType = replica.entityId;
      if (!entitiesByType.has(entityType)) {
        entitiesByType.set(entityType, []);
      }
      entitiesByType.get(entityType).push([key, replica]);
    });
    let allEntitiesConsensus = true;
    entitiesByType.forEach((replicas, entityType) => {
      console.log(`
\uD83D\uDCCA Entity: ${entityType.toUpperCase()}`);
      console.log(`   Mode: ${replicas[0][1].state.config.mode}`);
      console.log(`   Threshold: ${replicas[0][1].state.config.threshold}`);
      console.log(`   Validators: ${replicas[0][1].state.config.validators.length}`);
      const shares = replicas[0][1].state.config.shares;
      console.log(`   Voting Power:`);
      Object.entries(shares).forEach(([validator, power]) => {
        console.log(`     ${validator}: ${power} shares`);
      });
      const allMessages = [];
      const allProposals = [];
      replicas.forEach(([key, replica]) => {
        console.log(`   ${key}: ${replica.state.messages.length} messages, ${replica.state.proposals.size} proposals, height ${replica.state.height}`);
        if (replica.state.messages.length > 0) {
          replica.state.messages.forEach((msg, i) => console.log(`     ${i + 1}. ${msg}`));
        }
        if (replica.state.proposals.size > 0) {
          console.log(`     Proposals:`);
          replica.state.proposals.forEach((proposal, id2) => {
            const yesVotes = Array.from(proposal.votes.values()).filter((vote) => vote === "yes").length;
            const totalVotes = proposal.votes.size;
            console.log(`       ${id2} by ${proposal.proposer} [${proposal.status}] ${yesVotes}/${totalVotes} votes`);
            console.log(`         Action: ${proposal.action.data.message}`);
          });
        }
        allMessages.push([...replica.state.messages]);
        allProposals.push([...replica.state.proposals.values()]);
      });
      const firstMessages = allMessages[0];
      const messagesConsensus = allMessages.every((messages) => messages.length === firstMessages.length && messages.every((msg, i) => msg === firstMessages[i]));
      const firstProposals = allProposals[0];
      const proposalsConsensus = allProposals.every((proposals) => proposals.length === firstProposals.length && proposals.every((prop, i) => prop.id === firstProposals[i].id && prop.status === firstProposals[i].status && prop.votes.size === firstProposals[i].votes.size));
      const entityConsensus = messagesConsensus && proposalsConsensus;
      console.log(`   \uD83D\uDD0D Consensus: ${entityConsensus ? "✅ SUCCESS" : "❌ FAILED"} (messages: ${messagesConsensus ? "✅" : "❌"}, proposals: ${proposalsConsensus ? "✅" : "❌"})`);
      if (entityConsensus) {
        console.log(`   \uD83D\uDCC8 Total messages: ${firstMessages.length}, proposals: ${firstProposals.length}`);
        const totalShares = Object.values(shares).reduce((sum, val) => sum + val, BigInt(0));
        console.log(`   ⚖️  Total voting power: ${totalShares} (threshold: ${replicas[0][1].state.config.threshold})`);
      }
      allEntitiesConsensus = allEntitiesConsensus && entityConsensus;
    });
    console.log(`
\uD83C\uDFC6 === OVERALL RESULT ===`);
    console.log(`${allEntitiesConsensus ? "✅ SUCCESS" : "❌ FAILED"} - All entities achieved consensus`);
    console.log(`\uD83D\uDCCA Total entities tested: ${entitiesByType.size}`);
    console.log(`\uD83D\uDCCA Total replicas: ${env.replicas.size}`);
    console.log(`\uD83D\uDD04 Total server ticks: ${env.height}`);
    console.log("\uD83C\uDFAF Fully deterministic - no randomness used");
    console.log("\uD83C\uDF0D Environment-based architecture with clean function signatures");
    const modeCount = new Map;
    env.replicas.forEach((replica) => {
      const mode = replica.state.config.mode;
      modeCount.set(mode, (modeCount.get(mode) || 0) + 1);
    });
    console.log(`\uD83D\uDCE1 Mode distribution:`);
    modeCount.forEach((count, mode) => {
      console.log(`   ${mode}: ${count} replicas`);
    });
  }
  if (DEBUG) {
    console.log(`
\uD83C\uDFAF Demo completed successfully!`);
    console.log("\uD83D\uDCCA Check the dashboard for final entity states");
    console.log("\uD83D\uDD04 Use time machine to replay any step");
  }
  console.log(`
\uD83D\uDD17 BLOCKCHAIN DEMO: Creating numbered entities on Ethereum`);
  const ethereumJurisdiction = DEFAULT_JURISDICTIONS.get("ethereum");
  if (!ethereumJurisdiction) {
    console.warn("⚠️ Ethereum jurisdiction not found, skipping blockchain demo");
    return env;
  }
  setTimeout(async () => {
    try {
      const chatConfig2 = {
        mode: "proposer-based",
        threshold: BigInt(2),
        validators: chatValidators,
        shares: {
          alice: BigInt(1),
          bob: BigInt(1),
          carol: BigInt(1)
        },
        jurisdiction: ethereumJurisdiction
      };
      await registerNumberedEntityOnChain(chatConfig2, "Demo Chat");
      console.log("✅ Demo chat entity registered on Ethereum");
      const tradingConfigForChain = {
        mode: "gossip-based",
        threshold: BigInt(7),
        validators: tradingValidators,
        shares: {
          alice: BigInt(4),
          bob: BigInt(3),
          carol: BigInt(2),
          david: BigInt(1)
        },
        jurisdiction: ethereumJurisdiction
      };
      await registerNumberedEntityOnChain(tradingConfigForChain, "Demo Trading");
      console.log("✅ Demo trading entity registered on Ethereum");
      const govConfigForChain = {
        mode: "proposer-based",
        threshold: BigInt(10),
        validators: govValidators,
        shares: {
          alice: BigInt(3),
          bob: BigInt(3),
          carol: BigInt(3),
          david: BigInt(3),
          eve: BigInt(3)
        },
        jurisdiction: ethereumJurisdiction
      };
      await registerNumberedEntityOnChain(govConfigForChain, "Demo Governance");
      console.log("✅ Demo governance entity registered on Ethereum");
    } catch (error) {
      console.warn("⚠️ Demo blockchain registration failed:", error.message);
    }
  }, 1000);
  return env;
};
var main = async () => {
  let env = null;
  try {
    const latestHeightBuffer = await db2.get(Buffer2.from("latest_height"));
    const latestHeight = parseInt(latestHeightBuffer.toString(), 10);
    const snapshotPromises = Array.from({ length: latestHeight + 1 }, (_4, i) => db2.get(Buffer2.from(`snapshot:${i}`)).then(decode).catch(() => null));
    const snapshots = (await Promise.all(snapshotPromises)).filter(Boolean);
    envHistory = snapshots;
    if (snapshots.length > 0) {
      const latestSnapshot = snapshots[snapshots.length - 1];
      env = {
        replicas: latestSnapshot.replicas,
        height: latestSnapshot.height,
        timestamp: latestSnapshot.timestamp,
        serverInput: latestSnapshot.serverInput
      };
      console.log(`✅ History restored. Server is at height ${env.height} with ${envHistory.length} snapshots.`);
    }
  } catch (error) {
    if (error.code !== "LEVEL_NOT_FOUND") {
      console.error("An unexpected error occurred while loading state from LevelDB:", error);
    }
  }
  if (!env) {
    console.log("No saved state found, creating a new environment.");
    env = {
      replicas: new Map,
      height: 0,
      timestamp: Date.now(),
      serverInput: { serverTxs: [], entityInputs: [] }
    };
  }
  return env;
};
var getHistory = () => envHistory;
var getSnapshot = (index) => index >= 0 && index < envHistory.length ? envHistory[index] : null;
var getCurrentHistoryIndex = () => envHistory.length - 1;
var runTests = async () => {
  console.log("\uD83E\uDDEA Running XLN tests...");
  const env = await main();
  console.log("✅ Test 1: Environment initialization");
  console.log(`   Height: ${env.height}`);
  console.log(`   Replicas: ${env.replicas.size}`);
  console.log("✅ Test 2: Process simple input");
  const testInput = {
    serverTxs: [{
      type: "importReplica",
      entityId: "test",
      signerId: "alice",
      data: {
        config: {
          mode: "proposer-based",
          threshold: BigInt(1),
          validators: ["alice"],
          shares: { alice: BigInt(1) }
        },
        isProposer: true
      }
    }],
    entityInputs: []
  };
  const outputs = processServerInput(env, testInput);
  console.log(`   Outputs: ${outputs.length}`);
  console.log("✅ Test 3: State persistence");
  console.log(`   Snapshots: ${envHistory.length}`);
  console.log(`   Latest height: ${env.height}`);
  console.log("\uD83C\uDF89 All tests passed!");
  return env;
};
if (!isBrowser) {
  main().then(async (env) => {
    if (env) {
      console.log("✅ Node.js environment initialized. Running demo for local testing...");
      runDemo(env);
      setTimeout(async () => {
        await verifyJurisdictionRegistrations();
      }, 2000);
    }
  }).catch((error) => {
    console.error("❌ An error occurred during Node.js auto-execution:", error);
  });
}
var getContractAddress = async (port) => {
  let config;
  if (isBrowser) {
    try {
      const response = await fetch("/contract-addresses.json");
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      config = await response.json();
    } catch (error) {
      throw new Error(`Could not fetch contract address for port ${port} from server. Make sure server is running and contracts are deployed.`);
    }
  } else {
    try {
      const configPath = K2(process.cwd(), "contract-addresses.json");
      const configData = fs.readFileSync(configPath, "utf8");
      config = JSON.parse(configData);
    } catch (error) {
      throw new Error(`Could not load contract address for port ${port}. Please run: ./deploy-contracts.sh`);
    }
  }
  const address = config.networks[port]?.entityProvider;
  if (!address) {
    throw new Error(`No contract address found for network port ${port}. Please deploy contracts first.`);
  }
  return address;
};
var verifyJurisdictionRegistrations = async () => {
  console.log(`
\uD83D\uDD0D === JURISDICTION VERIFICATION ===`);
  console.log(`\uD83D\uDCCB Verifying entity registrations across all jurisdictions...
`);
  const jurisdictions = Array.from(DEFAULT_JURISDICTIONS.values());
  for (const jurisdiction of jurisdictions) {
    try {
      console.log(`\uD83C\uDFDB️ ${jurisdiction.name}:`);
      console.log(`   \uD83D\uDCE1 RPC: ${jurisdiction.address}`);
      console.log(`   \uD83D\uDCC4 Contract: ${jurisdiction.entityProviderAddress}`);
      const { entityProvider } = await connectToEthereum(jurisdiction.address, jurisdiction.entityProviderAddress);
      const nextNumber = await entityProvider.nextNumber();
      const registeredCount = Number(nextNumber) - 1;
      console.log(`   \uD83D\uDCCA Registered Entities: ${registeredCount}`);
      if (registeredCount > 0) {
        console.log(`   \uD83D\uDCDD Entity Details:`);
        for (let i = 1;i <= registeredCount; i++) {
          try {
            const entityId = generateNumberedEntityId(i);
            const entityInfo = await entityProvider.entities(entityId);
            console.log(`      #${i}: ${entityId.slice(0, 10)}... (Block: ${entityInfo.registrationBlock})`);
          } catch (error) {
            console.log(`      #${i}: Error reading entity data`);
          }
        }
      }
      console.log("");
    } catch (error) {
      console.error(`   ❌ Failed to verify ${jurisdiction.name}:`, error instanceof Error ? error.message : error);
      console.log("");
    }
  }
  console.log(`✅ Jurisdiction verification complete!
`);
};
export {
  transferNameBetweenEntities,
  runTests,
  runDemo,
  resolveEntityIdentifier,
  resetHistory,
  requestNamedEntity,
  registerNumberedEntityOnChain,
  registerEntityInJurisdiction,
  processServerInput,
  main,
  isEntityRegistered,
  hashBoard,
  getSnapshot,
  getNextEntityNumber,
  getJurisdictionByAddress,
  getHistory,
  getEntityInfoFromChain,
  getCurrentHistoryIndex,
  getAvailableJurisdictions,
  generateNumberedEntityId,
  generateNamedEntityId,
  generateLazyEntityId,
  encodeBoard,
  detectEntityType,
  createNumberedEntity,
  createLazyEntity,
  connectToEthereum,
  clearDatabase,
  assignNameOnChain
};
