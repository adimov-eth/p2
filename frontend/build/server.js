// @bun
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var __require = import.meta.require;

// node_modules/level-supports/index.js
var require_level_supports = __commonJS((exports) => {
  exports.supports = function supports(...manifests) {
    const manifest = manifests.reduce((acc, m) => Object.assign(acc, m), {});
    return Object.assign(manifest, {
      snapshots: manifest.snapshots || false,
      permanence: manifest.permanence || false,
      seek: manifest.seek || false,
      clear: manifest.clear || false,
      getMany: manifest.getMany || false,
      keyIterator: manifest.keyIterator || false,
      valueIterator: manifest.valueIterator || false,
      iteratorNextv: manifest.iteratorNextv || false,
      iteratorAll: manifest.iteratorAll || false,
      status: manifest.status || false,
      createIfMissing: manifest.createIfMissing || false,
      errorIfExists: manifest.errorIfExists || false,
      deferredOpen: manifest.deferredOpen || false,
      promises: manifest.promises || false,
      streams: manifest.streams || false,
      encodings: Object.assign({}, manifest.encodings),
      events: Object.assign({}, manifest.events),
      additionalMethods: Object.assign({}, manifest.additionalMethods)
    });
  };
});

// node_modules/module-error/index.js
var require_module_error = __commonJS((exports, module) => {
  module.exports = class ModuleError extends Error {
    constructor(message, options) {
      super(message || "");
      if (typeof options === "object" && options !== null) {
        if (options.code)
          this.code = String(options.code);
        if (options.expected)
          this.expected = true;
        if (options.transient)
          this.transient = true;
        if (options.cause)
          this.cause = options.cause;
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
    }
  };
});

// node_modules/level-transcoder/lib/text-endec.js
var require_text_endec = __commonJS((exports, module) => {
  var lazy = null;
  module.exports = function() {
    if (lazy === null) {
      lazy = {
        textEncoder: new TextEncoder,
        textDecoder: new TextDecoder
      };
    }
    return lazy;
  };
});

// node_modules/level-transcoder/lib/encoding.js
var require_encoding = __commonJS((exports) => {
  var ModuleError = require_module_error();
  var formats = new Set(["buffer", "view", "utf8"]);

  class Encoding {
    constructor(options) {
      this.encode = options.encode || this.encode;
      this.decode = options.decode || this.decode;
      this.name = options.name || this.name;
      this.format = options.format || this.format;
      if (typeof this.encode !== "function") {
        throw new TypeError("The 'encode' property must be a function");
      }
      if (typeof this.decode !== "function") {
        throw new TypeError("The 'decode' property must be a function");
      }
      this.encode = this.encode.bind(this);
      this.decode = this.decode.bind(this);
      if (typeof this.name !== "string" || this.name === "") {
        throw new TypeError("The 'name' property must be a string");
      }
      if (typeof this.format !== "string" || !formats.has(this.format)) {
        throw new TypeError("The 'format' property must be one of 'buffer', 'view', 'utf8'");
      }
      if (options.createViewTranscoder) {
        this.createViewTranscoder = options.createViewTranscoder;
      }
      if (options.createBufferTranscoder) {
        this.createBufferTranscoder = options.createBufferTranscoder;
      }
      if (options.createUTF8Transcoder) {
        this.createUTF8Transcoder = options.createUTF8Transcoder;
      }
    }
    get commonName() {
      return this.name.split("+")[0];
    }
    createBufferTranscoder() {
      throw new ModuleError(`Encoding '${this.name}' cannot be transcoded to 'buffer'`, {
        code: "LEVEL_ENCODING_NOT_SUPPORTED"
      });
    }
    createViewTranscoder() {
      throw new ModuleError(`Encoding '${this.name}' cannot be transcoded to 'view'`, {
        code: "LEVEL_ENCODING_NOT_SUPPORTED"
      });
    }
    createUTF8Transcoder() {
      throw new ModuleError(`Encoding '${this.name}' cannot be transcoded to 'utf8'`, {
        code: "LEVEL_ENCODING_NOT_SUPPORTED"
      });
    }
  }
  exports.Encoding = Encoding;
});

// node_modules/level-transcoder/lib/formats.js
var require_formats = __commonJS((exports) => {
  var { Buffer: Buffer2 } = __require("buffer") || {};
  var { Encoding } = require_encoding();
  var textEndec = require_text_endec();

  class BufferFormat extends Encoding {
    constructor(options) {
      super({ ...options, format: "buffer" });
    }
    createViewTranscoder() {
      return new ViewFormat({
        encode: this.encode,
        decode: (data) => this.decode(Buffer2.from(data.buffer, data.byteOffset, data.byteLength)),
        name: `${this.name}+view`
      });
    }
    createBufferTranscoder() {
      return this;
    }
  }

  class ViewFormat extends Encoding {
    constructor(options) {
      super({ ...options, format: "view" });
    }
    createBufferTranscoder() {
      return new BufferFormat({
        encode: (data) => {
          const view = this.encode(data);
          return Buffer2.from(view.buffer, view.byteOffset, view.byteLength);
        },
        decode: this.decode,
        name: `${this.name}+buffer`
      });
    }
    createViewTranscoder() {
      return this;
    }
  }

  class UTF8Format extends Encoding {
    constructor(options) {
      super({ ...options, format: "utf8" });
    }
    createBufferTranscoder() {
      return new BufferFormat({
        encode: (data) => Buffer2.from(this.encode(data), "utf8"),
        decode: (data) => this.decode(data.toString("utf8")),
        name: `${this.name}+buffer`
      });
    }
    createViewTranscoder() {
      const { textEncoder, textDecoder } = textEndec();
      return new ViewFormat({
        encode: (data) => textEncoder.encode(this.encode(data)),
        decode: (data) => this.decode(textDecoder.decode(data)),
        name: `${this.name}+view`
      });
    }
    createUTF8Transcoder() {
      return this;
    }
  }
  exports.BufferFormat = BufferFormat;
  exports.ViewFormat = ViewFormat;
  exports.UTF8Format = UTF8Format;
});

// node_modules/level-transcoder/lib/encodings.js
var require_encodings = __commonJS((exports) => {
  var { Buffer: Buffer2 } = __require("buffer") || { Buffer: { isBuffer: () => false } };
  var { textEncoder, textDecoder } = require_text_endec()();
  var { BufferFormat, ViewFormat, UTF8Format } = require_formats();
  var identity = (v) => v;
  exports.utf8 = new UTF8Format({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data.toString("utf8") : ArrayBuffer.isView(data) ? textDecoder.decode(data) : String(data);
    },
    decode: identity,
    name: "utf8",
    createViewTranscoder() {
      return new ViewFormat({
        encode: function(data) {
          return ArrayBuffer.isView(data) ? data : textEncoder.encode(data);
        },
        decode: function(data) {
          return textDecoder.decode(data);
        },
        name: `${this.name}+view`
      });
    },
    createBufferTranscoder() {
      return new BufferFormat({
        encode: function(data) {
          return Buffer2.isBuffer(data) ? data : ArrayBuffer.isView(data) ? Buffer2.from(data.buffer, data.byteOffset, data.byteLength) : Buffer2.from(String(data), "utf8");
        },
        decode: function(data) {
          return data.toString("utf8");
        },
        name: `${this.name}+buffer`
      });
    }
  });
  exports.json = new UTF8Format({
    encode: JSON.stringify,
    decode: JSON.parse,
    name: "json"
  });
  exports.buffer = new BufferFormat({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data : ArrayBuffer.isView(data) ? Buffer2.from(data.buffer, data.byteOffset, data.byteLength) : Buffer2.from(String(data), "utf8");
    },
    decode: identity,
    name: "buffer",
    createViewTranscoder() {
      return new ViewFormat({
        encode: function(data) {
          return ArrayBuffer.isView(data) ? data : Buffer2.from(String(data), "utf8");
        },
        decode: function(data) {
          return Buffer2.from(data.buffer, data.byteOffset, data.byteLength);
        },
        name: `${this.name}+view`
      });
    }
  });
  exports.view = new ViewFormat({
    encode: function(data) {
      return ArrayBuffer.isView(data) ? data : textEncoder.encode(data);
    },
    decode: identity,
    name: "view",
    createBufferTranscoder() {
      return new BufferFormat({
        encode: function(data) {
          return Buffer2.isBuffer(data) ? data : ArrayBuffer.isView(data) ? Buffer2.from(data.buffer, data.byteOffset, data.byteLength) : Buffer2.from(String(data), "utf8");
        },
        decode: identity,
        name: `${this.name}+buffer`
      });
    }
  });
  exports.hex = new BufferFormat({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data : Buffer2.from(String(data), "hex");
    },
    decode: function(buffer) {
      return buffer.toString("hex");
    },
    name: "hex"
  });
  exports.base64 = new BufferFormat({
    encode: function(data) {
      return Buffer2.isBuffer(data) ? data : Buffer2.from(String(data), "base64");
    },
    decode: function(buffer) {
      return buffer.toString("base64");
    },
    name: "base64"
  });
});

// node_modules/level-transcoder/index.js
var require_level_transcoder = __commonJS((exports) => {
  var ModuleError = require_module_error();
  var encodings = require_encodings();
  var { Encoding } = require_encoding();
  var { BufferFormat, ViewFormat, UTF8Format } = require_formats();
  var kFormats = Symbol("formats");
  var kEncodings = Symbol("encodings");
  var validFormats = new Set(["buffer", "view", "utf8"]);

  class Transcoder {
    constructor(formats) {
      if (!Array.isArray(formats)) {
        throw new TypeError("The first argument 'formats' must be an array");
      } else if (!formats.every((f) => validFormats.has(f))) {
        throw new TypeError("Format must be one of 'buffer', 'view', 'utf8'");
      }
      this[kEncodings] = new Map;
      this[kFormats] = new Set(formats);
      for (const k in encodings) {
        try {
          this.encoding(k);
        } catch (err) {
          if (err.code !== "LEVEL_ENCODING_NOT_SUPPORTED")
            throw err;
        }
      }
    }
    encodings() {
      return Array.from(new Set(this[kEncodings].values()));
    }
    encoding(encoding) {
      let resolved = this[kEncodings].get(encoding);
      if (resolved === undefined) {
        if (typeof encoding === "string" && encoding !== "") {
          resolved = lookup[encoding];
          if (!resolved) {
            throw new ModuleError(`Encoding '${encoding}' is not found`, {
              code: "LEVEL_ENCODING_NOT_FOUND"
            });
          }
        } else if (typeof encoding !== "object" || encoding === null) {
          throw new TypeError("First argument 'encoding' must be a string or object");
        } else {
          resolved = from(encoding);
        }
        const { name, format } = resolved;
        if (!this[kFormats].has(format)) {
          if (this[kFormats].has("view")) {
            resolved = resolved.createViewTranscoder();
          } else if (this[kFormats].has("buffer")) {
            resolved = resolved.createBufferTranscoder();
          } else if (this[kFormats].has("utf8")) {
            resolved = resolved.createUTF8Transcoder();
          } else {
            throw new ModuleError(`Encoding '${name}' cannot be transcoded`, {
              code: "LEVEL_ENCODING_NOT_SUPPORTED"
            });
          }
        }
        for (const k of [encoding, name, resolved.name, resolved.commonName]) {
          this[kEncodings].set(k, resolved);
        }
      }
      return resolved;
    }
  }
  exports.Transcoder = Transcoder;
  function from(options) {
    if (options instanceof Encoding) {
      return options;
    }
    const maybeType = "type" in options && typeof options.type === "string" ? options.type : undefined;
    const name = options.name || maybeType || `anonymous-${anonymousCount++}`;
    switch (detectFormat(options)) {
      case "view":
        return new ViewFormat({ ...options, name });
      case "utf8":
        return new UTF8Format({ ...options, name });
      case "buffer":
        return new BufferFormat({ ...options, name });
      default: {
        throw new TypeError("Format must be one of 'buffer', 'view', 'utf8'");
      }
    }
  }
  function detectFormat(options) {
    if ("format" in options && options.format !== undefined) {
      return options.format;
    } else if ("buffer" in options && typeof options.buffer === "boolean") {
      return options.buffer ? "buffer" : "utf8";
    } else if ("code" in options && Number.isInteger(options.code)) {
      return "view";
    } else {
      return "buffer";
    }
  }
  var aliases = {
    binary: encodings.buffer,
    "utf-8": encodings.utf8
  };
  var lookup = {
    ...encodings,
    ...aliases
  };
  var anonymousCount = 0;
});

// node_modules/catering/next-tick.js
var require_next_tick = __commonJS((exports, module) => {
  module.exports = process.nextTick.bind(process);
});

// node_modules/catering/index.js
var require_catering = __commonJS((exports) => {
  var nextTick = require_next_tick();
  exports.fromCallback = function(callback, symbol) {
    if (callback === undefined) {
      var promise = new Promise(function(resolve, reject) {
        callback = function(err, res) {
          if (err)
            reject(err);
          else
            resolve(res);
        };
      });
      callback[symbol !== undefined ? symbol : "promise"] = promise;
    } else if (typeof callback !== "function") {
      throw new TypeError("Callback must be a function");
    }
    return callback;
  };
  exports.fromPromise = function(promise, callback) {
    if (callback === undefined)
      return promise;
    promise.then(function(res) {
      nextTick(() => callback(null, res));
    }).catch(function(err) {
      nextTick(() => callback(err));
    });
  };
});

// node_modules/abstract-level/lib/common.js
var require_common = __commonJS((exports) => {
  exports.getCallback = function(options, callback) {
    return typeof options === "function" ? options : callback;
  };
  exports.getOptions = function(options, def) {
    if (typeof options === "object" && options !== null) {
      return options;
    }
    if (def !== undefined) {
      return def;
    }
    return {};
  };
});

// node_modules/abstract-level/abstract-iterator.js
var require_abstract_iterator = __commonJS((exports) => {
  var { fromCallback } = require_catering();
  var ModuleError = require_module_error();
  var { getOptions, getCallback } = require_common();
  var kPromise = Symbol("promise");
  var kCallback = Symbol("callback");
  var kWorking = Symbol("working");
  var kHandleOne = Symbol("handleOne");
  var kHandleMany = Symbol("handleMany");
  var kAutoClose = Symbol("autoClose");
  var kFinishWork = Symbol("finishWork");
  var kReturnMany = Symbol("returnMany");
  var kClosing = Symbol("closing");
  var kHandleClose = Symbol("handleClose");
  var kClosed = Symbol("closed");
  var kCloseCallbacks = Symbol("closeCallbacks");
  var kKeyEncoding = Symbol("keyEncoding");
  var kValueEncoding = Symbol("valueEncoding");
  var kAbortOnClose = Symbol("abortOnClose");
  var kLegacy = Symbol("legacy");
  var kKeys = Symbol("keys");
  var kValues = Symbol("values");
  var kLimit = Symbol("limit");
  var kCount = Symbol("count");
  var emptyOptions = Object.freeze({});
  var noop = () => {};
  var warnedEnd = false;

  class CommonIterator {
    constructor(db, options, legacy) {
      if (typeof db !== "object" || db === null) {
        const hint = db === null ? "null" : typeof db;
        throw new TypeError(`The first argument must be an abstract-level database, received ${hint}`);
      }
      if (typeof options !== "object" || options === null) {
        throw new TypeError("The second argument must be an options object");
      }
      this[kClosed] = false;
      this[kCloseCallbacks] = [];
      this[kWorking] = false;
      this[kClosing] = false;
      this[kAutoClose] = false;
      this[kCallback] = null;
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
      this[kHandleClose] = this[kHandleClose].bind(this);
      this[kKeyEncoding] = options[kKeyEncoding];
      this[kValueEncoding] = options[kValueEncoding];
      this[kLegacy] = legacy;
      this[kLimit] = Number.isInteger(options.limit) && options.limit >= 0 ? options.limit : Infinity;
      this[kCount] = 0;
      this[kAbortOnClose] = !!options.abortOnClose;
      this.db = db;
      this.db.attachResource(this);
      this.nextTick = db.nextTick;
    }
    get count() {
      return this[kCount];
    }
    get limit() {
      return this[kLimit];
    }
    next(callback) {
      let promise;
      if (callback === undefined) {
        promise = new Promise((resolve, reject) => {
          callback = (err, key, value) => {
            if (err)
              reject(err);
            else if (!this[kLegacy])
              resolve(key);
            else if (key === undefined && value === undefined)
              resolve();
            else
              resolve([key, value]);
          };
        });
      } else if (typeof callback !== "function") {
        throw new TypeError("Callback must be a function");
      }
      if (this[kClosing]) {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call next() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      } else if (this[kWorking]) {
        this.nextTick(callback, new ModuleError("Iterator is busy: cannot call next() until previous call has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        }));
      } else {
        this[kWorking] = true;
        this[kCallback] = callback;
        if (this[kCount] >= this[kLimit])
          this.nextTick(this[kHandleOne], null);
        else
          this._next(this[kHandleOne]);
      }
      return promise;
    }
    _next(callback) {
      this.nextTick(callback);
    }
    nextv(size, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, emptyOptions);
      if (!Number.isInteger(size)) {
        this.nextTick(callback, new TypeError("The first argument 'size' must be an integer"));
        return callback[kPromise];
      }
      if (this[kClosing]) {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call nextv() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      } else if (this[kWorking]) {
        this.nextTick(callback, new ModuleError("Iterator is busy: cannot call nextv() until previous call has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        }));
      } else {
        if (size < 1)
          size = 1;
        if (this[kLimit] < Infinity)
          size = Math.min(size, this[kLimit] - this[kCount]);
        this[kWorking] = true;
        this[kCallback] = callback;
        if (size <= 0)
          this.nextTick(this[kHandleMany], null, []);
        else
          this._nextv(size, options, this[kHandleMany]);
      }
      return callback[kPromise];
    }
    _nextv(size, options, callback) {
      const acc = [];
      const onnext = (err, key, value) => {
        if (err) {
          return callback(err);
        } else if (this[kLegacy] ? key === undefined && value === undefined : key === undefined) {
          return callback(null, acc);
        }
        acc.push(this[kLegacy] ? [key, value] : key);
        if (acc.length === size) {
          callback(null, acc);
        } else {
          this._next(onnext);
        }
      };
      this._next(onnext);
    }
    all(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, emptyOptions);
      if (this[kClosing]) {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call all() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      } else if (this[kWorking]) {
        this.nextTick(callback, new ModuleError("Iterator is busy: cannot call all() until previous call has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        }));
      } else {
        this[kWorking] = true;
        this[kCallback] = callback;
        this[kAutoClose] = true;
        if (this[kCount] >= this[kLimit])
          this.nextTick(this[kHandleMany], null, []);
        else
          this._all(options, this[kHandleMany]);
      }
      return callback[kPromise];
    }
    _all(options, callback) {
      let count = this[kCount];
      const acc = [];
      const nextv = () => {
        const size = this[kLimit] < Infinity ? Math.min(1000, this[kLimit] - count) : 1000;
        if (size <= 0) {
          this.nextTick(callback, null, acc);
        } else {
          this._nextv(size, emptyOptions, onnextv);
        }
      };
      const onnextv = (err, items) => {
        if (err) {
          callback(err);
        } else if (items.length === 0) {
          callback(null, acc);
        } else {
          acc.push.apply(acc, items);
          count += items.length;
          nextv();
        }
      };
      nextv();
    }
    [kFinishWork]() {
      const cb = this[kCallback];
      if (this[kAbortOnClose] && cb === null)
        return noop;
      this[kWorking] = false;
      this[kCallback] = null;
      if (this[kClosing])
        this._close(this[kHandleClose]);
      return cb;
    }
    [kReturnMany](cb, err, items) {
      if (this[kAutoClose]) {
        this.close(cb.bind(null, err, items));
      } else {
        cb(err, items);
      }
    }
    seek(target, options) {
      options = getOptions(options, emptyOptions);
      if (this[kClosing]) {} else if (this[kWorking]) {
        throw new ModuleError("Iterator is busy: cannot call seek() until next() has completed", {
          code: "LEVEL_ITERATOR_BUSY"
        });
      } else {
        const keyEncoding = this.db.keyEncoding(options.keyEncoding || this[kKeyEncoding]);
        const keyFormat = keyEncoding.format;
        if (options.keyEncoding !== keyFormat) {
          options = { ...options, keyEncoding: keyFormat };
        }
        const mapped = this.db.prefixKey(keyEncoding.encode(target), keyFormat);
        this._seek(mapped, options);
      }
    }
    _seek(target, options) {
      throw new ModuleError("Iterator does not support seek()", {
        code: "LEVEL_NOT_SUPPORTED"
      });
    }
    close(callback) {
      callback = fromCallback(callback, kPromise);
      if (this[kClosed]) {
        this.nextTick(callback);
      } else if (this[kClosing]) {
        this[kCloseCallbacks].push(callback);
      } else {
        this[kClosing] = true;
        this[kCloseCallbacks].push(callback);
        if (!this[kWorking]) {
          this._close(this[kHandleClose]);
        } else if (this[kAbortOnClose]) {
          const cb = this[kFinishWork]();
          cb(new ModuleError("Aborted on iterator close()", {
            code: "LEVEL_ITERATOR_NOT_OPEN"
          }));
        }
      }
      return callback[kPromise];
    }
    _close(callback) {
      this.nextTick(callback);
    }
    [kHandleClose]() {
      this[kClosed] = true;
      this.db.detachResource(this);
      const callbacks = this[kCloseCallbacks];
      this[kCloseCallbacks] = [];
      for (const cb of callbacks) {
        cb();
      }
    }
    async* [Symbol.asyncIterator]() {
      try {
        let item;
        while ((item = await this.next()) !== undefined) {
          yield item;
        }
      } finally {
        if (!this[kClosed])
          await this.close();
      }
    }
  }

  class AbstractIterator extends CommonIterator {
    constructor(db, options) {
      super(db, options, true);
      this[kKeys] = options.keys !== false;
      this[kValues] = options.values !== false;
    }
    [kHandleOne](err, key, value) {
      const cb = this[kFinishWork]();
      if (err)
        return cb(err);
      try {
        key = this[kKeys] && key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
        value = this[kValues] && value !== undefined ? this[kValueEncoding].decode(value) : undefined;
      } catch (err2) {
        return cb(new IteratorDecodeError("entry", err2));
      }
      if (!(key === undefined && value === undefined)) {
        this[kCount]++;
      }
      cb(null, key, value);
    }
    [kHandleMany](err, entries) {
      const cb = this[kFinishWork]();
      if (err)
        return this[kReturnMany](cb, err);
      try {
        for (const entry of entries) {
          const key = entry[0];
          const value = entry[1];
          entry[0] = this[kKeys] && key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
          entry[1] = this[kValues] && value !== undefined ? this[kValueEncoding].decode(value) : undefined;
        }
      } catch (err2) {
        return this[kReturnMany](cb, new IteratorDecodeError("entries", err2));
      }
      this[kCount] += entries.length;
      this[kReturnMany](cb, null, entries);
    }
    end(callback) {
      if (!warnedEnd && typeof console !== "undefined") {
        warnedEnd = true;
        console.warn(new ModuleError("The iterator.end() method was renamed to close() and end() is an alias that will be removed in a future version", { code: "LEVEL_LEGACY" }));
      }
      return this.close(callback);
    }
  }

  class AbstractKeyIterator extends CommonIterator {
    constructor(db, options) {
      super(db, options, false);
    }
    [kHandleOne](err, key) {
      const cb = this[kFinishWork]();
      if (err)
        return cb(err);
      try {
        key = key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
      } catch (err2) {
        return cb(new IteratorDecodeError("key", err2));
      }
      if (key !== undefined)
        this[kCount]++;
      cb(null, key);
    }
    [kHandleMany](err, keys) {
      const cb = this[kFinishWork]();
      if (err)
        return this[kReturnMany](cb, err);
      try {
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          keys[i] = key !== undefined ? this[kKeyEncoding].decode(key) : undefined;
        }
      } catch (err2) {
        return this[kReturnMany](cb, new IteratorDecodeError("keys", err2));
      }
      this[kCount] += keys.length;
      this[kReturnMany](cb, null, keys);
    }
  }

  class AbstractValueIterator extends CommonIterator {
    constructor(db, options) {
      super(db, options, false);
    }
    [kHandleOne](err, value) {
      const cb = this[kFinishWork]();
      if (err)
        return cb(err);
      try {
        value = value !== undefined ? this[kValueEncoding].decode(value) : undefined;
      } catch (err2) {
        return cb(new IteratorDecodeError("value", err2));
      }
      if (value !== undefined)
        this[kCount]++;
      cb(null, value);
    }
    [kHandleMany](err, values) {
      const cb = this[kFinishWork]();
      if (err)
        return this[kReturnMany](cb, err);
      try {
        for (let i = 0;i < values.length; i++) {
          const value = values[i];
          values[i] = value !== undefined ? this[kValueEncoding].decode(value) : undefined;
        }
      } catch (err2) {
        return this[kReturnMany](cb, new IteratorDecodeError("values", err2));
      }
      this[kCount] += values.length;
      this[kReturnMany](cb, null, values);
    }
  }

  class IteratorDecodeError extends ModuleError {
    constructor(subject, cause) {
      super(`Iterator could not decode ${subject}`, {
        code: "LEVEL_DECODE_ERROR",
        cause
      });
    }
  }
  for (const k of ["_ended property", "_nexting property", "_end method"]) {
    Object.defineProperty(AbstractIterator.prototype, k.split(" ")[0], {
      get() {
        throw new ModuleError(`The ${k} has been removed`, { code: "LEVEL_LEGACY" });
      },
      set() {
        throw new ModuleError(`The ${k} has been removed`, { code: "LEVEL_LEGACY" });
      }
    });
  }
  AbstractIterator.keyEncoding = kKeyEncoding;
  AbstractIterator.valueEncoding = kValueEncoding;
  exports.AbstractIterator = AbstractIterator;
  exports.AbstractKeyIterator = AbstractKeyIterator;
  exports.AbstractValueIterator = AbstractValueIterator;
});

// node_modules/abstract-level/lib/default-kv-iterator.js
var require_default_kv_iterator = __commonJS((exports) => {
  var { AbstractKeyIterator, AbstractValueIterator } = require_abstract_iterator();
  var kIterator = Symbol("iterator");
  var kCallback = Symbol("callback");
  var kHandleOne = Symbol("handleOne");
  var kHandleMany = Symbol("handleMany");

  class DefaultKeyIterator extends AbstractKeyIterator {
    constructor(db, options) {
      super(db, options);
      this[kIterator] = db.iterator({ ...options, keys: true, values: false });
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
    }
  }

  class DefaultValueIterator extends AbstractValueIterator {
    constructor(db, options) {
      super(db, options);
      this[kIterator] = db.iterator({ ...options, keys: false, values: true });
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
    }
  }
  for (const Iterator of [DefaultKeyIterator, DefaultValueIterator]) {
    const keys = Iterator === DefaultKeyIterator;
    const mapEntry = keys ? (entry) => entry[0] : (entry) => entry[1];
    Iterator.prototype._next = function(callback) {
      this[kCallback] = callback;
      this[kIterator].next(this[kHandleOne]);
    };
    Iterator.prototype[kHandleOne] = function(err, key, value) {
      const callback = this[kCallback];
      if (err)
        callback(err);
      else
        callback(null, keys ? key : value);
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      this[kCallback] = callback;
      this[kIterator].nextv(size, options, this[kHandleMany]);
    };
    Iterator.prototype._all = function(options, callback) {
      this[kCallback] = callback;
      this[kIterator].all(options, this[kHandleMany]);
    };
    Iterator.prototype[kHandleMany] = function(err, entries) {
      const callback = this[kCallback];
      if (err)
        callback(err);
      else
        callback(null, entries.map(mapEntry));
    };
    Iterator.prototype._seek = function(target, options) {
      this[kIterator].seek(target, options);
    };
    Iterator.prototype._close = function(callback) {
      this[kIterator].close(callback);
    };
  }
  exports.DefaultKeyIterator = DefaultKeyIterator;
  exports.DefaultValueIterator = DefaultValueIterator;
});

// node_modules/abstract-level/lib/deferred-iterator.js
var require_deferred_iterator = __commonJS((exports) => {
  var { AbstractIterator, AbstractKeyIterator, AbstractValueIterator } = require_abstract_iterator();
  var ModuleError = require_module_error();
  var kNut = Symbol("nut");
  var kUndefer = Symbol("undefer");
  var kFactory = Symbol("factory");

  class DeferredIterator extends AbstractIterator {
    constructor(db, options) {
      super(db, options);
      this[kNut] = null;
      this[kFactory] = () => db.iterator(options);
      this.db.defer(() => this[kUndefer]());
    }
  }

  class DeferredKeyIterator extends AbstractKeyIterator {
    constructor(db, options) {
      super(db, options);
      this[kNut] = null;
      this[kFactory] = () => db.keys(options);
      this.db.defer(() => this[kUndefer]());
    }
  }

  class DeferredValueIterator extends AbstractValueIterator {
    constructor(db, options) {
      super(db, options);
      this[kNut] = null;
      this[kFactory] = () => db.values(options);
      this.db.defer(() => this[kUndefer]());
    }
  }
  for (const Iterator of [DeferredIterator, DeferredKeyIterator, DeferredValueIterator]) {
    Iterator.prototype[kUndefer] = function() {
      if (this.db.status === "open") {
        this[kNut] = this[kFactory]();
      }
    };
    Iterator.prototype._next = function(callback) {
      if (this[kNut] !== null) {
        this[kNut].next(callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._next(callback));
      } else {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call next() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      }
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      if (this[kNut] !== null) {
        this[kNut].nextv(size, options, callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._nextv(size, options, callback));
      } else {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call nextv() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      }
    };
    Iterator.prototype._all = function(options, callback) {
      if (this[kNut] !== null) {
        this[kNut].all(callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._all(options, callback));
      } else {
        this.nextTick(callback, new ModuleError("Iterator is not open: cannot call all() after close()", {
          code: "LEVEL_ITERATOR_NOT_OPEN"
        }));
      }
    };
    Iterator.prototype._seek = function(target, options) {
      if (this[kNut] !== null) {
        this[kNut]._seek(target, options);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._seek(target, options));
      }
    };
    Iterator.prototype._close = function(callback) {
      if (this[kNut] !== null) {
        this[kNut].close(callback);
      } else if (this.db.status === "opening") {
        this.db.defer(() => this._close(callback));
      } else {
        this.nextTick(callback);
      }
    };
  }
  exports.DeferredIterator = DeferredIterator;
  exports.DeferredKeyIterator = DeferredKeyIterator;
  exports.DeferredValueIterator = DeferredValueIterator;
});

// node_modules/abstract-level/abstract-chained-batch.js
var require_abstract_chained_batch = __commonJS((exports) => {
  var { fromCallback } = require_catering();
  var ModuleError = require_module_error();
  var { getCallback, getOptions } = require_common();
  var kPromise = Symbol("promise");
  var kStatus = Symbol("status");
  var kOperations = Symbol("operations");
  var kFinishClose = Symbol("finishClose");
  var kCloseCallbacks = Symbol("closeCallbacks");

  class AbstractChainedBatch {
    constructor(db) {
      if (typeof db !== "object" || db === null) {
        const hint = db === null ? "null" : typeof db;
        throw new TypeError(`The first argument must be an abstract-level database, received ${hint}`);
      }
      this[kOperations] = [];
      this[kCloseCallbacks] = [];
      this[kStatus] = "open";
      this[kFinishClose] = this[kFinishClose].bind(this);
      this.db = db;
      this.db.attachResource(this);
      this.nextTick = db.nextTick;
    }
    get length() {
      return this[kOperations].length;
    }
    put(key, value, options) {
      if (this[kStatus] !== "open") {
        throw new ModuleError("Batch is not open: cannot call put() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        });
      }
      const err = this.db._checkKey(key) || this.db._checkValue(value);
      if (err)
        throw err;
      const db = options && options.sublevel != null ? options.sublevel : this.db;
      const original = options;
      const keyEncoding = db.keyEncoding(options && options.keyEncoding);
      const valueEncoding = db.valueEncoding(options && options.valueEncoding);
      const keyFormat = keyEncoding.format;
      options = { ...options, keyEncoding: keyFormat, valueEncoding: valueEncoding.format };
      if (db !== this.db) {
        options.sublevel = null;
      }
      const mappedKey = db.prefixKey(keyEncoding.encode(key), keyFormat);
      const mappedValue = valueEncoding.encode(value);
      this._put(mappedKey, mappedValue, options);
      this[kOperations].push({ ...original, type: "put", key, value });
      return this;
    }
    _put(key, value, options) {}
    del(key, options) {
      if (this[kStatus] !== "open") {
        throw new ModuleError("Batch is not open: cannot call del() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        });
      }
      const err = this.db._checkKey(key);
      if (err)
        throw err;
      const db = options && options.sublevel != null ? options.sublevel : this.db;
      const original = options;
      const keyEncoding = db.keyEncoding(options && options.keyEncoding);
      const keyFormat = keyEncoding.format;
      options = { ...options, keyEncoding: keyFormat };
      if (db !== this.db) {
        options.sublevel = null;
      }
      this._del(db.prefixKey(keyEncoding.encode(key), keyFormat), options);
      this[kOperations].push({ ...original, type: "del", key });
      return this;
    }
    _del(key, options) {}
    clear() {
      if (this[kStatus] !== "open") {
        throw new ModuleError("Batch is not open: cannot call clear() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        });
      }
      this._clear();
      this[kOperations] = [];
      return this;
    }
    _clear() {}
    write(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options);
      if (this[kStatus] !== "open") {
        this.nextTick(callback, new ModuleError("Batch is not open: cannot call write() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        }));
      } else if (this.length === 0) {
        this.close(callback);
      } else {
        this[kStatus] = "writing";
        this._write(options, (err) => {
          this[kStatus] = "closing";
          this[kCloseCallbacks].push(() => callback(err));
          if (!err)
            this.db.emit("batch", this[kOperations]);
          this._close(this[kFinishClose]);
        });
      }
      return callback[kPromise];
    }
    _write(options, callback) {}
    close(callback) {
      callback = fromCallback(callback, kPromise);
      if (this[kStatus] === "closing") {
        this[kCloseCallbacks].push(callback);
      } else if (this[kStatus] === "closed") {
        this.nextTick(callback);
      } else {
        this[kCloseCallbacks].push(callback);
        if (this[kStatus] !== "writing") {
          this[kStatus] = "closing";
          this._close(this[kFinishClose]);
        }
      }
      return callback[kPromise];
    }
    _close(callback) {
      this.nextTick(callback);
    }
    [kFinishClose]() {
      this[kStatus] = "closed";
      this.db.detachResource(this);
      const callbacks = this[kCloseCallbacks];
      this[kCloseCallbacks] = [];
      for (const cb of callbacks) {
        cb();
      }
    }
  }
  exports.AbstractChainedBatch = AbstractChainedBatch;
});

// node_modules/abstract-level/lib/default-chained-batch.js
var require_default_chained_batch = __commonJS((exports) => {
  var { AbstractChainedBatch } = require_abstract_chained_batch();
  var ModuleError = require_module_error();
  var kEncoded = Symbol("encoded");

  class DefaultChainedBatch extends AbstractChainedBatch {
    constructor(db) {
      super(db);
      this[kEncoded] = [];
    }
    _put(key, value, options) {
      this[kEncoded].push({ ...options, type: "put", key, value });
    }
    _del(key, options) {
      this[kEncoded].push({ ...options, type: "del", key });
    }
    _clear() {
      this[kEncoded] = [];
    }
    _write(options, callback) {
      if (this.db.status === "opening") {
        this.db.defer(() => this._write(options, callback));
      } else if (this.db.status === "open") {
        if (this[kEncoded].length === 0)
          this.nextTick(callback);
        else
          this.db._batch(this[kEncoded], options, callback);
      } else {
        this.nextTick(callback, new ModuleError("Batch is not open: cannot call write() after write() or close()", {
          code: "LEVEL_BATCH_NOT_OPEN"
        }));
      }
    }
  }
  exports.DefaultChainedBatch = DefaultChainedBatch;
});

// node_modules/abstract-level/lib/range-options.js
var require_range_options = __commonJS((exports, module) => {
  var ModuleError = require_module_error();
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var rangeOptions = new Set(["lt", "lte", "gt", "gte"]);
  module.exports = function(options, keyEncoding) {
    const result = {};
    for (const k in options) {
      if (!hasOwnProperty.call(options, k))
        continue;
      if (k === "keyEncoding" || k === "valueEncoding")
        continue;
      if (k === "start" || k === "end") {
        throw new ModuleError(`The legacy range option '${k}' has been removed`, {
          code: "LEVEL_LEGACY"
        });
      } else if (k === "encoding") {
        throw new ModuleError("The levelup-style 'encoding' alias has been removed, use 'valueEncoding' instead", {
          code: "LEVEL_LEGACY"
        });
      }
      if (rangeOptions.has(k)) {
        result[k] = keyEncoding.encode(options[k]);
      } else {
        result[k] = options[k];
      }
    }
    result.reverse = !!result.reverse;
    result.limit = Number.isInteger(result.limit) && result.limit >= 0 ? result.limit : -1;
    return result;
  };
});

// node_modules/abstract-level/lib/next-tick.js
var require_next_tick2 = __commonJS((exports, module) => {
  module.exports = process.nextTick;
});

// node_modules/abstract-level/lib/abstract-sublevel-iterator.js
var require_abstract_sublevel_iterator = __commonJS((exports) => {
  var { AbstractIterator, AbstractKeyIterator, AbstractValueIterator } = require_abstract_iterator();
  var kUnfix = Symbol("unfix");
  var kIterator = Symbol("iterator");
  var kHandleOne = Symbol("handleOne");
  var kHandleMany = Symbol("handleMany");
  var kCallback = Symbol("callback");

  class AbstractSublevelIterator extends AbstractIterator {
    constructor(db, options, iterator, unfix) {
      super(db, options);
      this[kIterator] = iterator;
      this[kUnfix] = unfix;
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
      this[kCallback] = null;
    }
    [kHandleOne](err, key, value) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      if (key !== undefined)
        key = this[kUnfix](key);
      callback(err, key, value);
    }
    [kHandleMany](err, entries) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      for (const entry of entries) {
        const key = entry[0];
        if (key !== undefined)
          entry[0] = this[kUnfix](key);
      }
      callback(err, entries);
    }
  }

  class AbstractSublevelKeyIterator extends AbstractKeyIterator {
    constructor(db, options, iterator, unfix) {
      super(db, options);
      this[kIterator] = iterator;
      this[kUnfix] = unfix;
      this[kHandleOne] = this[kHandleOne].bind(this);
      this[kHandleMany] = this[kHandleMany].bind(this);
      this[kCallback] = null;
    }
    [kHandleOne](err, key) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      if (key !== undefined)
        key = this[kUnfix](key);
      callback(err, key);
    }
    [kHandleMany](err, keys) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      for (let i = 0;i < keys.length; i++) {
        const key = keys[i];
        if (key !== undefined)
          keys[i] = this[kUnfix](key);
      }
      callback(err, keys);
    }
  }

  class AbstractSublevelValueIterator extends AbstractValueIterator {
    constructor(db, options, iterator) {
      super(db, options);
      this[kIterator] = iterator;
    }
  }
  for (const Iterator of [AbstractSublevelIterator, AbstractSublevelKeyIterator]) {
    Iterator.prototype._next = function(callback) {
      this[kCallback] = callback;
      this[kIterator].next(this[kHandleOne]);
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      this[kCallback] = callback;
      this[kIterator].nextv(size, options, this[kHandleMany]);
    };
    Iterator.prototype._all = function(options, callback) {
      this[kCallback] = callback;
      this[kIterator].all(options, this[kHandleMany]);
    };
  }
  for (const Iterator of [AbstractSublevelValueIterator]) {
    Iterator.prototype._next = function(callback) {
      this[kIterator].next(callback);
    };
    Iterator.prototype._nextv = function(size, options, callback) {
      this[kIterator].nextv(size, options, callback);
    };
    Iterator.prototype._all = function(options, callback) {
      this[kIterator].all(options, callback);
    };
  }
  for (const Iterator of [AbstractSublevelIterator, AbstractSublevelKeyIterator, AbstractSublevelValueIterator]) {
    Iterator.prototype._seek = function(target, options) {
      this[kIterator].seek(target, options);
    };
    Iterator.prototype._close = function(callback) {
      this[kIterator].close(callback);
    };
  }
  exports.AbstractSublevelIterator = AbstractSublevelIterator;
  exports.AbstractSublevelKeyIterator = AbstractSublevelKeyIterator;
  exports.AbstractSublevelValueIterator = AbstractSublevelValueIterator;
});

// node_modules/abstract-level/lib/abstract-sublevel.js
var require_abstract_sublevel = __commonJS((exports, module) => {
  var ModuleError = require_module_error();
  var { Buffer: Buffer2 } = __require("buffer") || {};
  var {
    AbstractSublevelIterator,
    AbstractSublevelKeyIterator,
    AbstractSublevelValueIterator
  } = require_abstract_sublevel_iterator();
  var kPrefix = Symbol("prefix");
  var kUpperBound = Symbol("upperBound");
  var kPrefixRange = Symbol("prefixRange");
  var kParent = Symbol("parent");
  var kUnfix = Symbol("unfix");
  var textEncoder = new TextEncoder;
  var defaults = { separator: "!" };
  module.exports = function({ AbstractLevel }) {

    class AbstractSublevel extends AbstractLevel {
      static defaults(options) {
        if (typeof options === "string") {
          throw new ModuleError("The subleveldown string shorthand for { separator } has been removed", {
            code: "LEVEL_LEGACY"
          });
        } else if (options && options.open) {
          throw new ModuleError("The subleveldown open option has been removed", {
            code: "LEVEL_LEGACY"
          });
        }
        if (options == null) {
          return defaults;
        } else if (!options.separator) {
          return { ...options, separator: "!" };
        } else {
          return options;
        }
      }
      constructor(db, name, options) {
        const { separator, manifest, ...forward } = AbstractSublevel.defaults(options);
        name = trim(name, separator);
        const reserved = separator.charCodeAt(0) + 1;
        const parent = db[kParent] || db;
        if (!textEncoder.encode(name).every((x) => x > reserved && x < 127)) {
          throw new ModuleError(`Prefix must use bytes > ${reserved} < ${127}`, {
            code: "LEVEL_INVALID_PREFIX"
          });
        }
        super(mergeManifests(parent, manifest), forward);
        const prefix = (db.prefix || "") + separator + name + separator;
        const upperBound = prefix.slice(0, -1) + String.fromCharCode(reserved);
        this[kParent] = parent;
        this[kPrefix] = new MultiFormat(prefix);
        this[kUpperBound] = new MultiFormat(upperBound);
        this[kUnfix] = new Unfixer;
        this.nextTick = parent.nextTick;
      }
      prefixKey(key, keyFormat) {
        if (keyFormat === "utf8") {
          return this[kPrefix].utf8 + key;
        } else if (key.byteLength === 0) {
          return this[kPrefix][keyFormat];
        } else if (keyFormat === "view") {
          const view = this[kPrefix].view;
          const result = new Uint8Array(view.byteLength + key.byteLength);
          result.set(view, 0);
          result.set(key, view.byteLength);
          return result;
        } else {
          const buffer = this[kPrefix].buffer;
          return Buffer2.concat([buffer, key], buffer.byteLength + key.byteLength);
        }
      }
      [kPrefixRange](range, keyFormat) {
        if (range.gte !== undefined) {
          range.gte = this.prefixKey(range.gte, keyFormat);
        } else if (range.gt !== undefined) {
          range.gt = this.prefixKey(range.gt, keyFormat);
        } else {
          range.gte = this[kPrefix][keyFormat];
        }
        if (range.lte !== undefined) {
          range.lte = this.prefixKey(range.lte, keyFormat);
        } else if (range.lt !== undefined) {
          range.lt = this.prefixKey(range.lt, keyFormat);
        } else {
          range.lte = this[kUpperBound][keyFormat];
        }
      }
      get prefix() {
        return this[kPrefix].utf8;
      }
      get db() {
        return this[kParent];
      }
      _open(options, callback) {
        this[kParent].open({ passive: true }, callback);
      }
      _put(key, value, options, callback) {
        this[kParent].put(key, value, options, callback);
      }
      _get(key, options, callback) {
        this[kParent].get(key, options, callback);
      }
      _getMany(keys, options, callback) {
        this[kParent].getMany(keys, options, callback);
      }
      _del(key, options, callback) {
        this[kParent].del(key, options, callback);
      }
      _batch(operations, options, callback) {
        this[kParent].batch(operations, options, callback);
      }
      _clear(options, callback) {
        this[kPrefixRange](options, options.keyEncoding);
        this[kParent].clear(options, callback);
      }
      _iterator(options) {
        this[kPrefixRange](options, options.keyEncoding);
        const iterator = this[kParent].iterator(options);
        const unfix = this[kUnfix].get(this[kPrefix].utf8.length, options.keyEncoding);
        return new AbstractSublevelIterator(this, options, iterator, unfix);
      }
      _keys(options) {
        this[kPrefixRange](options, options.keyEncoding);
        const iterator = this[kParent].keys(options);
        const unfix = this[kUnfix].get(this[kPrefix].utf8.length, options.keyEncoding);
        return new AbstractSublevelKeyIterator(this, options, iterator, unfix);
      }
      _values(options) {
        this[kPrefixRange](options, options.keyEncoding);
        const iterator = this[kParent].values(options);
        return new AbstractSublevelValueIterator(this, options, iterator);
      }
    }
    return { AbstractSublevel };
  };
  var mergeManifests = function(parent, manifest) {
    return {
      ...parent.supports,
      createIfMissing: false,
      errorIfExists: false,
      events: {},
      additionalMethods: {},
      ...manifest,
      encodings: {
        utf8: supportsEncoding(parent, "utf8"),
        buffer: supportsEncoding(parent, "buffer"),
        view: supportsEncoding(parent, "view")
      }
    };
  };
  var supportsEncoding = function(parent, encoding) {
    return parent.supports.encodings[encoding] ? parent.keyEncoding(encoding).name === encoding : false;
  };

  class MultiFormat {
    constructor(key) {
      this.utf8 = key;
      this.view = textEncoder.encode(key);
      this.buffer = Buffer2 ? Buffer2.from(this.view.buffer, 0, this.view.byteLength) : {};
    }
  }

  class Unfixer {
    constructor() {
      this.cache = new Map;
    }
    get(prefixLength, keyFormat) {
      let unfix = this.cache.get(keyFormat);
      if (unfix === undefined) {
        if (keyFormat === "view") {
          unfix = function(prefixLength2, key) {
            return key.subarray(prefixLength2);
          }.bind(null, prefixLength);
        } else {
          unfix = function(prefixLength2, key) {
            return key.slice(prefixLength2);
          }.bind(null, prefixLength);
        }
        this.cache.set(keyFormat, unfix);
      }
      return unfix;
    }
  }
  var trim = function(str, char) {
    let start = 0;
    let end = str.length;
    while (start < end && str[start] === char)
      start++;
    while (end > start && str[end - 1] === char)
      end--;
    return str.slice(start, end);
  };
});

// node_modules/abstract-level/abstract-level.js
var require_abstract_level = __commonJS((exports) => {
  var { supports } = require_level_supports();
  var { Transcoder } = require_level_transcoder();
  var { EventEmitter } = __require("events");
  var { fromCallback } = require_catering();
  var ModuleError = require_module_error();
  var { AbstractIterator } = require_abstract_iterator();
  var { DefaultKeyIterator, DefaultValueIterator } = require_default_kv_iterator();
  var { DeferredIterator, DeferredKeyIterator, DeferredValueIterator } = require_deferred_iterator();
  var { DefaultChainedBatch } = require_default_chained_batch();
  var { getCallback, getOptions } = require_common();
  var rangeOptions = require_range_options();
  var kPromise = Symbol("promise");
  var kLanded = Symbol("landed");
  var kResources = Symbol("resources");
  var kCloseResources = Symbol("closeResources");
  var kOperations = Symbol("operations");
  var kUndefer = Symbol("undefer");
  var kDeferOpen = Symbol("deferOpen");
  var kOptions = Symbol("options");
  var kStatus = Symbol("status");
  var kDefaultOptions = Symbol("defaultOptions");
  var kTranscoder = Symbol("transcoder");
  var kKeyEncoding = Symbol("keyEncoding");
  var kValueEncoding = Symbol("valueEncoding");
  var noop = () => {};

  class AbstractLevel extends EventEmitter {
    constructor(manifest, options) {
      super();
      if (typeof manifest !== "object" || manifest === null) {
        throw new TypeError("The first argument 'manifest' must be an object");
      }
      options = getOptions(options);
      const { keyEncoding, valueEncoding, passive, ...forward } = options;
      this[kResources] = new Set;
      this[kOperations] = [];
      this[kDeferOpen] = true;
      this[kOptions] = forward;
      this[kStatus] = "opening";
      this.supports = supports(manifest, {
        status: true,
        promises: true,
        clear: true,
        getMany: true,
        deferredOpen: true,
        snapshots: manifest.snapshots !== false,
        permanence: manifest.permanence !== false,
        keyIterator: true,
        valueIterator: true,
        iteratorNextv: true,
        iteratorAll: true,
        encodings: manifest.encodings || {},
        events: Object.assign({}, manifest.events, {
          opening: true,
          open: true,
          closing: true,
          closed: true,
          put: true,
          del: true,
          batch: true,
          clear: true
        })
      });
      this[kTranscoder] = new Transcoder(formats(this));
      this[kKeyEncoding] = this[kTranscoder].encoding(keyEncoding || "utf8");
      this[kValueEncoding] = this[kTranscoder].encoding(valueEncoding || "utf8");
      for (const encoding of this[kTranscoder].encodings()) {
        if (!this.supports.encodings[encoding.commonName]) {
          this.supports.encodings[encoding.commonName] = true;
        }
      }
      this[kDefaultOptions] = {
        empty: Object.freeze({}),
        entry: Object.freeze({
          keyEncoding: this[kKeyEncoding].commonName,
          valueEncoding: this[kValueEncoding].commonName
        }),
        key: Object.freeze({
          keyEncoding: this[kKeyEncoding].commonName
        })
      };
      this.nextTick(() => {
        if (this[kDeferOpen]) {
          this.open({ passive: false }, noop);
        }
      });
    }
    get status() {
      return this[kStatus];
    }
    keyEncoding(encoding) {
      return this[kTranscoder].encoding(encoding != null ? encoding : this[kKeyEncoding]);
    }
    valueEncoding(encoding) {
      return this[kTranscoder].encoding(encoding != null ? encoding : this[kValueEncoding]);
    }
    open(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = { ...this[kOptions], ...getOptions(options) };
      options.createIfMissing = options.createIfMissing !== false;
      options.errorIfExists = !!options.errorIfExists;
      const maybeOpened = (err) => {
        if (this[kStatus] === "closing" || this[kStatus] === "opening") {
          this.once(kLanded, err ? () => maybeOpened(err) : maybeOpened);
        } else if (this[kStatus] !== "open") {
          callback(new ModuleError("Database is not open", {
            code: "LEVEL_DATABASE_NOT_OPEN",
            cause: err
          }));
        } else {
          callback();
        }
      };
      if (options.passive) {
        if (this[kStatus] === "opening") {
          this.once(kLanded, maybeOpened);
        } else {
          this.nextTick(maybeOpened);
        }
      } else if (this[kStatus] === "closed" || this[kDeferOpen]) {
        this[kDeferOpen] = false;
        this[kStatus] = "opening";
        this.emit("opening");
        this._open(options, (err) => {
          if (err) {
            this[kStatus] = "closed";
            this[kCloseResources](() => {
              this.emit(kLanded);
              maybeOpened(err);
            });
            this[kUndefer]();
            return;
          }
          this[kStatus] = "open";
          this[kUndefer]();
          this.emit(kLanded);
          if (this[kStatus] === "open")
            this.emit("open");
          if (this[kStatus] === "open")
            this.emit("ready");
          maybeOpened();
        });
      } else if (this[kStatus] === "open") {
        this.nextTick(maybeOpened);
      } else {
        this.once(kLanded, () => this.open(options, callback));
      }
      return callback[kPromise];
    }
    _open(options, callback) {
      this.nextTick(callback);
    }
    close(callback) {
      callback = fromCallback(callback, kPromise);
      const maybeClosed = (err) => {
        if (this[kStatus] === "opening" || this[kStatus] === "closing") {
          this.once(kLanded, err ? maybeClosed(err) : maybeClosed);
        } else if (this[kStatus] !== "closed") {
          callback(new ModuleError("Database is not closed", {
            code: "LEVEL_DATABASE_NOT_CLOSED",
            cause: err
          }));
        } else {
          callback();
        }
      };
      if (this[kStatus] === "open") {
        this[kStatus] = "closing";
        this.emit("closing");
        const cancel = (err) => {
          this[kStatus] = "open";
          this[kUndefer]();
          this.emit(kLanded);
          maybeClosed(err);
        };
        this[kCloseResources](() => {
          this._close((err) => {
            if (err)
              return cancel(err);
            this[kStatus] = "closed";
            this[kUndefer]();
            this.emit(kLanded);
            if (this[kStatus] === "closed")
              this.emit("closed");
            maybeClosed();
          });
        });
      } else if (this[kStatus] === "closed") {
        this.nextTick(maybeClosed);
      } else {
        this.once(kLanded, () => this.close(callback));
      }
      return callback[kPromise];
    }
    [kCloseResources](callback) {
      if (this[kResources].size === 0) {
        return this.nextTick(callback);
      }
      let pending = this[kResources].size;
      let sync = true;
      const next = () => {
        if (--pending === 0) {
          if (sync)
            this.nextTick(callback);
          else
            callback();
        }
      };
      for (const resource of this[kResources]) {
        resource.close(next);
      }
      sync = false;
      this[kResources].clear();
    }
    _close(callback) {
      this.nextTick(callback);
    }
    get(key, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].entry);
      if (this[kStatus] === "opening") {
        this.defer(() => this.get(key, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const err = this._checkKey(key);
      if (err) {
        this.nextTick(callback, err);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const valueEncoding = this.valueEncoding(options.valueEncoding);
      const keyFormat = keyEncoding.format;
      const valueFormat = valueEncoding.format;
      if (options.keyEncoding !== keyFormat || options.valueEncoding !== valueFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat, valueEncoding: valueFormat });
      }
      this._get(this.prefixKey(keyEncoding.encode(key), keyFormat), options, (err2, value) => {
        if (err2) {
          if (err2.code === "LEVEL_NOT_FOUND" || err2.notFound || /NotFound/i.test(err2)) {
            if (!err2.code)
              err2.code = "LEVEL_NOT_FOUND";
            if (!err2.notFound)
              err2.notFound = true;
            if (!err2.status)
              err2.status = 404;
          }
          return callback(err2);
        }
        try {
          value = valueEncoding.decode(value);
        } catch (err3) {
          return callback(new ModuleError("Could not decode value", {
            code: "LEVEL_DECODE_ERROR",
            cause: err3
          }));
        }
        callback(null, value);
      });
      return callback[kPromise];
    }
    _get(key, options, callback) {
      this.nextTick(callback, new Error("NotFound"));
    }
    getMany(keys, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].entry);
      if (this[kStatus] === "opening") {
        this.defer(() => this.getMany(keys, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      if (!Array.isArray(keys)) {
        this.nextTick(callback, new TypeError("The first argument 'keys' must be an array"));
        return callback[kPromise];
      }
      if (keys.length === 0) {
        this.nextTick(callback, null, []);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const valueEncoding = this.valueEncoding(options.valueEncoding);
      const keyFormat = keyEncoding.format;
      const valueFormat = valueEncoding.format;
      if (options.keyEncoding !== keyFormat || options.valueEncoding !== valueFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat, valueEncoding: valueFormat });
      }
      const mappedKeys = new Array(keys.length);
      for (let i = 0;i < keys.length; i++) {
        const key = keys[i];
        const err = this._checkKey(key);
        if (err) {
          this.nextTick(callback, err);
          return callback[kPromise];
        }
        mappedKeys[i] = this.prefixKey(keyEncoding.encode(key), keyFormat);
      }
      this._getMany(mappedKeys, options, (err, values) => {
        if (err)
          return callback(err);
        try {
          for (let i = 0;i < values.length; i++) {
            if (values[i] !== undefined) {
              values[i] = valueEncoding.decode(values[i]);
            }
          }
        } catch (err2) {
          return callback(new ModuleError(`Could not decode one or more of ${values.length} value(s)`, {
            code: "LEVEL_DECODE_ERROR",
            cause: err2
          }));
        }
        callback(null, values);
      });
      return callback[kPromise];
    }
    _getMany(keys, options, callback) {
      this.nextTick(callback, null, new Array(keys.length).fill(undefined));
    }
    put(key, value, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].entry);
      if (this[kStatus] === "opening") {
        this.defer(() => this.put(key, value, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const err = this._checkKey(key) || this._checkValue(value);
      if (err) {
        this.nextTick(callback, err);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const valueEncoding = this.valueEncoding(options.valueEncoding);
      const keyFormat = keyEncoding.format;
      const valueFormat = valueEncoding.format;
      if (options.keyEncoding !== keyFormat || options.valueEncoding !== valueFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat, valueEncoding: valueFormat });
      }
      const mappedKey = this.prefixKey(keyEncoding.encode(key), keyFormat);
      const mappedValue = valueEncoding.encode(value);
      this._put(mappedKey, mappedValue, options, (err2) => {
        if (err2)
          return callback(err2);
        this.emit("put", key, value);
        callback();
      });
      return callback[kPromise];
    }
    _put(key, value, options, callback) {
      this.nextTick(callback);
    }
    del(key, options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].key);
      if (this[kStatus] === "opening") {
        this.defer(() => this.del(key, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const err = this._checkKey(key);
      if (err) {
        this.nextTick(callback, err);
        return callback[kPromise];
      }
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      const keyFormat = keyEncoding.format;
      if (options.keyEncoding !== keyFormat) {
        options = Object.assign({}, options, { keyEncoding: keyFormat });
      }
      this._del(this.prefixKey(keyEncoding.encode(key), keyFormat), options, (err2) => {
        if (err2)
          return callback(err2);
        this.emit("del", key);
        callback();
      });
      return callback[kPromise];
    }
    _del(key, options, callback) {
      this.nextTick(callback);
    }
    batch(operations, options, callback) {
      if (!arguments.length) {
        if (this[kStatus] === "opening")
          return new DefaultChainedBatch(this);
        if (this[kStatus] !== "open") {
          throw new ModuleError("Database is not open", {
            code: "LEVEL_DATABASE_NOT_OPEN"
          });
        }
        return this._chainedBatch();
      }
      if (typeof operations === "function")
        callback = operations;
      else
        callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].empty);
      if (this[kStatus] === "opening") {
        this.defer(() => this.batch(operations, options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      if (!Array.isArray(operations)) {
        this.nextTick(callback, new TypeError("The first argument 'operations' must be an array"));
        return callback[kPromise];
      }
      if (operations.length === 0) {
        this.nextTick(callback);
        return callback[kPromise];
      }
      const mapped = new Array(operations.length);
      const { keyEncoding: ke, valueEncoding: ve, ...forward } = options;
      for (let i = 0;i < operations.length; i++) {
        if (typeof operations[i] !== "object" || operations[i] === null) {
          this.nextTick(callback, new TypeError("A batch operation must be an object"));
          return callback[kPromise];
        }
        const op = Object.assign({}, operations[i]);
        if (op.type !== "put" && op.type !== "del") {
          this.nextTick(callback, new TypeError("A batch operation must have a type property that is 'put' or 'del'"));
          return callback[kPromise];
        }
        const err = this._checkKey(op.key);
        if (err) {
          this.nextTick(callback, err);
          return callback[kPromise];
        }
        const db = op.sublevel != null ? op.sublevel : this;
        const keyEncoding = db.keyEncoding(op.keyEncoding || ke);
        const keyFormat = keyEncoding.format;
        op.key = db.prefixKey(keyEncoding.encode(op.key), keyFormat);
        op.keyEncoding = keyFormat;
        if (op.type === "put") {
          const valueErr = this._checkValue(op.value);
          if (valueErr) {
            this.nextTick(callback, valueErr);
            return callback[kPromise];
          }
          const valueEncoding = db.valueEncoding(op.valueEncoding || ve);
          op.value = valueEncoding.encode(op.value);
          op.valueEncoding = valueEncoding.format;
        }
        if (db !== this) {
          op.sublevel = null;
        }
        mapped[i] = op;
      }
      this._batch(mapped, forward, (err) => {
        if (err)
          return callback(err);
        this.emit("batch", operations);
        callback();
      });
      return callback[kPromise];
    }
    _batch(operations, options, callback) {
      this.nextTick(callback);
    }
    sublevel(name, options) {
      return this._sublevel(name, AbstractSublevel.defaults(options));
    }
    _sublevel(name, options) {
      return new AbstractSublevel(this, name, options);
    }
    prefixKey(key, keyFormat) {
      return key;
    }
    clear(options, callback) {
      callback = getCallback(options, callback);
      callback = fromCallback(callback, kPromise);
      options = getOptions(options, this[kDefaultOptions].empty);
      if (this[kStatus] === "opening") {
        this.defer(() => this.clear(options, callback));
        return callback[kPromise];
      }
      if (maybeError(this, callback)) {
        return callback[kPromise];
      }
      const original = options;
      const keyEncoding = this.keyEncoding(options.keyEncoding);
      options = rangeOptions(options, keyEncoding);
      options.keyEncoding = keyEncoding.format;
      if (options.limit === 0) {
        this.nextTick(callback);
      } else {
        this._clear(options, (err) => {
          if (err)
            return callback(err);
          this.emit("clear", original);
          callback();
        });
      }
      return callback[kPromise];
    }
    _clear(options, callback) {
      this.nextTick(callback);
    }
    iterator(options) {
      const keyEncoding = this.keyEncoding(options && options.keyEncoding);
      const valueEncoding = this.valueEncoding(options && options.valueEncoding);
      options = rangeOptions(options, keyEncoding);
      options.keys = options.keys !== false;
      options.values = options.values !== false;
      options[AbstractIterator.keyEncoding] = keyEncoding;
      options[AbstractIterator.valueEncoding] = valueEncoding;
      options.keyEncoding = keyEncoding.format;
      options.valueEncoding = valueEncoding.format;
      if (this[kStatus] === "opening") {
        return new DeferredIterator(this, options);
      } else if (this[kStatus] !== "open") {
        throw new ModuleError("Database is not open", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        });
      }
      return this._iterator(options);
    }
    _iterator(options) {
      return new AbstractIterator(this, options);
    }
    keys(options) {
      const keyEncoding = this.keyEncoding(options && options.keyEncoding);
      const valueEncoding = this.valueEncoding(options && options.valueEncoding);
      options = rangeOptions(options, keyEncoding);
      options[AbstractIterator.keyEncoding] = keyEncoding;
      options[AbstractIterator.valueEncoding] = valueEncoding;
      options.keyEncoding = keyEncoding.format;
      options.valueEncoding = valueEncoding.format;
      if (this[kStatus] === "opening") {
        return new DeferredKeyIterator(this, options);
      } else if (this[kStatus] !== "open") {
        throw new ModuleError("Database is not open", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        });
      }
      return this._keys(options);
    }
    _keys(options) {
      return new DefaultKeyIterator(this, options);
    }
    values(options) {
      const keyEncoding = this.keyEncoding(options && options.keyEncoding);
      const valueEncoding = this.valueEncoding(options && options.valueEncoding);
      options = rangeOptions(options, keyEncoding);
      options[AbstractIterator.keyEncoding] = keyEncoding;
      options[AbstractIterator.valueEncoding] = valueEncoding;
      options.keyEncoding = keyEncoding.format;
      options.valueEncoding = valueEncoding.format;
      if (this[kStatus] === "opening") {
        return new DeferredValueIterator(this, options);
      } else if (this[kStatus] !== "open") {
        throw new ModuleError("Database is not open", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        });
      }
      return this._values(options);
    }
    _values(options) {
      return new DefaultValueIterator(this, options);
    }
    defer(fn) {
      if (typeof fn !== "function") {
        throw new TypeError("The first argument must be a function");
      }
      this[kOperations].push(fn);
    }
    [kUndefer]() {
      if (this[kOperations].length === 0) {
        return;
      }
      const operations = this[kOperations];
      this[kOperations] = [];
      for (const op of operations) {
        op();
      }
    }
    attachResource(resource) {
      if (typeof resource !== "object" || resource === null || typeof resource.close !== "function") {
        throw new TypeError("The first argument must be a resource object");
      }
      this[kResources].add(resource);
    }
    detachResource(resource) {
      this[kResources].delete(resource);
    }
    _chainedBatch() {
      return new DefaultChainedBatch(this);
    }
    _checkKey(key) {
      if (key === null || key === undefined) {
        return new ModuleError("Key cannot be null or undefined", {
          code: "LEVEL_INVALID_KEY"
        });
      }
    }
    _checkValue(value) {
      if (value === null || value === undefined) {
        return new ModuleError("Value cannot be null or undefined", {
          code: "LEVEL_INVALID_VALUE"
        });
      }
    }
  }
  AbstractLevel.prototype.nextTick = require_next_tick2();
  var { AbstractSublevel } = require_abstract_sublevel()({ AbstractLevel });
  exports.AbstractLevel = AbstractLevel;
  exports.AbstractSublevel = AbstractSublevel;
  var maybeError = function(db, callback) {
    if (db[kStatus] !== "open") {
      db.nextTick(callback, new ModuleError("Database is not open", {
        code: "LEVEL_DATABASE_NOT_OPEN"
      }));
      return true;
    }
    return false;
  };
  var formats = function(db) {
    return Object.keys(db.supports.encodings).filter((k) => !!db.supports.encodings[k]);
  };
});

// node_modules/abstract-level/index.js
var require_abstract_level2 = __commonJS((exports) => {
  exports.AbstractLevel = require_abstract_level().AbstractLevel;
  exports.AbstractSublevel = require_abstract_level().AbstractSublevel;
  exports.AbstractIterator = require_abstract_iterator().AbstractIterator;
  exports.AbstractKeyIterator = require_abstract_iterator().AbstractKeyIterator;
  exports.AbstractValueIterator = require_abstract_iterator().AbstractValueIterator;
  exports.AbstractChainedBatch = require_abstract_chained_batch().AbstractChainedBatch;
});

// node_modules/node-gyp-build/node-gyp-build.js
var require_node_gyp_build = __commonJS((exports, module) => {
  var fs = __require("fs");
  var path = __require("path");
  var os = __require("os");
  var runtimeRequire = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
  var vars = process.config && process.config.variables || {};
  var prebuildsOnly = !!process.env.PREBUILDS_ONLY;
  var abi = process.versions.modules;
  var runtime = isElectron() ? "electron" : isNwjs() ? "node-webkit" : "node";
  var arch = process.env.npm_config_arch || os.arch();
  var platform = process.env.npm_config_platform || os.platform();
  var libc = process.env.LIBC || (isAlpine(platform) ? "musl" : "glibc");
  var armv = process.env.ARM_VERSION || (arch === "arm64" ? "8" : vars.arm_version) || "";
  var uv = (process.versions.uv || "").split(".")[0];
  module.exports = load;
  function load(dir) {
    return runtimeRequire(load.resolve(dir));
  }
  load.resolve = load.path = function(dir) {
    dir = path.resolve(dir || ".");
    try {
      var name = runtimeRequire(path.join(dir, "package.json")).name.toUpperCase().replace(/-/g, "_");
      if (process.env[name + "_PREBUILD"])
        dir = process.env[name + "_PREBUILD"];
    } catch (err) {}
    if (!prebuildsOnly) {
      var release = getFirst(path.join(dir, "build/Release"), matchBuild);
      if (release)
        return release;
      var debug = getFirst(path.join(dir, "build/Debug"), matchBuild);
      if (debug)
        return debug;
    }
    var prebuild = resolve(dir);
    if (prebuild)
      return prebuild;
    var nearby = resolve(path.dirname(process.execPath));
    if (nearby)
      return nearby;
    var target = [
      "platform=" + platform,
      "arch=" + arch,
      "runtime=" + runtime,
      "abi=" + abi,
      "uv=" + uv,
      armv ? "armv=" + armv : "",
      "libc=" + libc,
      "node=" + process.versions.node,
      process.versions.electron ? "electron=" + process.versions.electron : "",
      typeof __webpack_require__ === "function" ? "webpack=true" : ""
    ].filter(Boolean).join(" ");
    throw new Error("No native build was found for " + target + `
    loaded from: ` + dir + `
`);
    function resolve(dir2) {
      var tuples = readdirSync(path.join(dir2, "prebuilds")).map(parseTuple);
      var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0];
      if (!tuple)
        return;
      var prebuilds = path.join(dir2, "prebuilds", tuple.name);
      var parsed = readdirSync(prebuilds).map(parseTags);
      var candidates = parsed.filter(matchTags(runtime, abi));
      var winner = candidates.sort(compareTags(runtime))[0];
      if (winner)
        return path.join(prebuilds, winner.file);
    }
  };
  function readdirSync(dir) {
    try {
      return fs.readdirSync(dir);
    } catch (err) {
      return [];
    }
  }
  function getFirst(dir, filter) {
    var files = readdirSync(dir).filter(filter);
    return files[0] && path.join(dir, files[0]);
  }
  function matchBuild(name) {
    return /\.node$/.test(name);
  }
  function parseTuple(name) {
    var arr = name.split("-");
    if (arr.length !== 2)
      return;
    var platform2 = arr[0];
    var architectures = arr[1].split("+");
    if (!platform2)
      return;
    if (!architectures.length)
      return;
    if (!architectures.every(Boolean))
      return;
    return { name, platform: platform2, architectures };
  }
  function matchTuple(platform2, arch2) {
    return function(tuple) {
      if (tuple == null)
        return false;
      if (tuple.platform !== platform2)
        return false;
      return tuple.architectures.includes(arch2);
    };
  }
  function compareTuples(a, b) {
    return a.architectures.length - b.architectures.length;
  }
  function parseTags(file) {
    var arr = file.split(".");
    var extension = arr.pop();
    var tags = { file, specificity: 0 };
    if (extension !== "node")
      return;
    for (var i = 0;i < arr.length; i++) {
      var tag = arr[i];
      if (tag === "node" || tag === "electron" || tag === "node-webkit") {
        tags.runtime = tag;
      } else if (tag === "napi") {
        tags.napi = true;
      } else if (tag.slice(0, 3) === "abi") {
        tags.abi = tag.slice(3);
      } else if (tag.slice(0, 2) === "uv") {
        tags.uv = tag.slice(2);
      } else if (tag.slice(0, 4) === "armv") {
        tags.armv = tag.slice(4);
      } else if (tag === "glibc" || tag === "musl") {
        tags.libc = tag;
      } else {
        continue;
      }
      tags.specificity++;
    }
    return tags;
  }
  function matchTags(runtime2, abi2) {
    return function(tags) {
      if (tags == null)
        return false;
      if (tags.runtime && tags.runtime !== runtime2 && !runtimeAgnostic(tags))
        return false;
      if (tags.abi && tags.abi !== abi2 && !tags.napi)
        return false;
      if (tags.uv && tags.uv !== uv)
        return false;
      if (tags.armv && tags.armv !== armv)
        return false;
      if (tags.libc && tags.libc !== libc)
        return false;
      return true;
    };
  }
  function runtimeAgnostic(tags) {
    return tags.runtime === "node" && tags.napi;
  }
  function compareTags(runtime2) {
    return function(a, b) {
      if (a.runtime !== b.runtime) {
        return a.runtime === runtime2 ? -1 : 1;
      } else if (a.abi !== b.abi) {
        return a.abi ? -1 : 1;
      } else if (a.specificity !== b.specificity) {
        return a.specificity > b.specificity ? -1 : 1;
      } else {
        return 0;
      }
    };
  }
  function isNwjs() {
    return !!(process.versions && process.versions.nw);
  }
  function isElectron() {
    if (process.versions && process.versions.electron)
      return true;
    if (process.env.ELECTRON_RUN_AS_NODE)
      return true;
    return typeof window !== "undefined" && window.process && window.process.type === "renderer";
  }
  function isAlpine(platform2) {
    return platform2 === "linux" && fs.existsSync("/etc/alpine-release");
  }
  load.parseTags = parseTags;
  load.matchTags = matchTags;
  load.compareTags = compareTags;
  load.parseTuple = parseTuple;
  load.matchTuple = matchTuple;
  load.compareTuples = compareTuples;
});

// node_modules/node-gyp-build/index.js
var require_node_gyp_build2 = __commonJS((exports, module) => {
  var runtimeRequire = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
  if (typeof runtimeRequire.addon === "function") {
    module.exports = runtimeRequire.addon.bind(runtimeRequire);
  } else {
    module.exports = require_node_gyp_build();
  }
});

// node_modules/classic-level/binding.js
var require_binding = __commonJS((exports, module) => {
  var __dirname = "/Users/egor/xln/node_modules/classic-level";
  module.exports = require_node_gyp_build2()(__dirname);
});

// node_modules/classic-level/chained-batch.js
var require_chained_batch = __commonJS((exports) => {
  var { AbstractChainedBatch } = require_abstract_level2();
  var binding = require_binding();
  var kContext = Symbol("context");

  class ChainedBatch extends AbstractChainedBatch {
    constructor(db, context) {
      super(db);
      this[kContext] = binding.batch_init(context);
    }
    _put(key, value) {
      binding.batch_put(this[kContext], key, value);
    }
    _del(key) {
      binding.batch_del(this[kContext], key);
    }
    _clear() {
      binding.batch_clear(this[kContext]);
    }
    _write(options, callback) {
      binding.batch_write(this[kContext], options, callback);
    }
    _close(callback) {
      process.nextTick(callback);
    }
  }
  exports.ChainedBatch = ChainedBatch;
});

// node_modules/classic-level/iterator.js
var require_iterator = __commonJS((exports) => {
  var { AbstractIterator } = require_abstract_level2();
  var binding = require_binding();
  var kContext = Symbol("context");
  var kCache = Symbol("cache");
  var kFinished = Symbol("finished");
  var kFirst = Symbol("first");
  var kPosition = Symbol("position");
  var kHandleNext = Symbol("handleNext");
  var kHandleNextv = Symbol("handleNextv");
  var kCallback = Symbol("callback");
  var empty = [];

  class Iterator extends AbstractIterator {
    constructor(db, context, options) {
      super(db, options);
      this[kContext] = binding.iterator_init(context, options);
      this[kHandleNext] = this[kHandleNext].bind(this);
      this[kHandleNextv] = this[kHandleNextv].bind(this);
      this[kCallback] = null;
      this[kFirst] = true;
      this[kCache] = empty;
      this[kFinished] = false;
      this[kPosition] = 0;
    }
    _seek(target, options) {
      this[kFirst] = true;
      this[kCache] = empty;
      this[kFinished] = false;
      this[kPosition] = 0;
      binding.iterator_seek(this[kContext], target);
    }
    _next(callback) {
      if (this[kPosition] < this[kCache].length) {
        const entry = this[kCache][this[kPosition]++];
        process.nextTick(callback, null, entry[0], entry[1]);
      } else if (this[kFinished]) {
        process.nextTick(callback);
      } else {
        this[kCallback] = callback;
        if (this[kFirst]) {
          this[kFirst] = false;
          binding.iterator_nextv(this[kContext], 1, this[kHandleNext]);
        } else {
          binding.iterator_nextv(this[kContext], 1000, this[kHandleNext]);
        }
      }
    }
    [kHandleNext](err, items, finished) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      this[kCache] = items;
      this[kFinished] = finished;
      this[kPosition] = 0;
      this._next(callback);
    }
    _nextv(size, options, callback) {
      if (this[kFinished]) {
        process.nextTick(callback, null, []);
      } else {
        this[kCallback] = callback;
        this[kFirst] = false;
        binding.iterator_nextv(this[kContext], size, this[kHandleNextv]);
      }
    }
    [kHandleNextv](err, items, finished) {
      const callback = this[kCallback];
      if (err)
        return callback(err);
      this[kFinished] = finished;
      callback(null, items);
    }
    _close(callback) {
      this[kCache] = empty;
      this[kCallback] = null;
      binding.iterator_close(this[kContext], callback);
    }
    get cached() {
      return this[kCache].length - this[kPosition];
    }
  }
  exports.Iterator = Iterator;
});

// node_modules/classic-level/index.js
var require_classic_level = __commonJS((exports) => {
  var { AbstractLevel } = require_abstract_level2();
  var ModuleError = require_module_error();
  var { fromCallback } = require_catering();
  var fs = __require("fs");
  var binding = require_binding();
  var { ChainedBatch } = require_chained_batch();
  var { Iterator } = require_iterator();
  var kPromise = Symbol("promise");
  var kContext = Symbol("context");
  var kLocation = Symbol("location");

  class ClassicLevel extends AbstractLevel {
    constructor(location, options, _) {
      if (typeof options === "function" || typeof _ === "function") {
        throw new ModuleError("The levelup-style callback argument has been removed", {
          code: "LEVEL_LEGACY"
        });
      }
      if (typeof location !== "string" || location === "") {
        throw new TypeError("The first argument 'location' must be a non-empty string");
      }
      super({
        encodings: {
          buffer: true,
          utf8: true,
          view: true
        },
        seek: true,
        createIfMissing: true,
        errorIfExists: true,
        additionalMethods: {
          approximateSize: true,
          compactRange: true
        }
      }, options);
      this[kLocation] = location;
      this[kContext] = binding.db_init();
    }
    get location() {
      return this[kLocation];
    }
    _open(options, callback) {
      if (options.createIfMissing) {
        fs.mkdir(this[kLocation], { recursive: true }, (err) => {
          if (err)
            return callback(err);
          binding.db_open(this[kContext], this[kLocation], options, callback);
        });
      } else {
        binding.db_open(this[kContext], this[kLocation], options, callback);
      }
    }
    _close(callback) {
      binding.db_close(this[kContext], callback);
    }
    _put(key, value, options, callback) {
      binding.db_put(this[kContext], key, value, options, callback);
    }
    _get(key, options, callback) {
      binding.db_get(this[kContext], key, options, callback);
    }
    _getMany(keys, options, callback) {
      binding.db_get_many(this[kContext], keys, options, callback);
    }
    _del(key, options, callback) {
      binding.db_del(this[kContext], key, options, callback);
    }
    _clear(options, callback) {
      binding.db_clear(this[kContext], options, callback);
    }
    _chainedBatch() {
      return new ChainedBatch(this, this[kContext]);
    }
    _batch(operations, options, callback) {
      binding.batch_do(this[kContext], operations, options, callback);
    }
    approximateSize(start, end, options, callback) {
      if (arguments.length < 2 || typeof start === "function" || typeof end === "function") {
        throw new TypeError("The arguments 'start' and 'end' are required");
      } else if (typeof options === "function") {
        callback = options;
        options = null;
      } else if (typeof options !== "object") {
        options = null;
      }
      callback = fromCallback(callback, kPromise);
      if (this.status === "opening") {
        this.defer(() => this.approximateSize(start, end, options, callback));
      } else if (this.status !== "open") {
        this.nextTick(callback, new ModuleError("Database is not open: cannot call approximateSize()", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        }));
      } else {
        const keyEncoding = this.keyEncoding(options && options.keyEncoding);
        start = keyEncoding.encode(start);
        end = keyEncoding.encode(end);
        binding.db_approximate_size(this[kContext], start, end, callback);
      }
      return callback[kPromise];
    }
    compactRange(start, end, options, callback) {
      if (arguments.length < 2 || typeof start === "function" || typeof end === "function") {
        throw new TypeError("The arguments 'start' and 'end' are required");
      } else if (typeof options === "function") {
        callback = options;
        options = null;
      } else if (typeof options !== "object") {
        options = null;
      }
      callback = fromCallback(callback, kPromise);
      if (this.status === "opening") {
        this.defer(() => this.compactRange(start, end, options, callback));
      } else if (this.status !== "open") {
        this.nextTick(callback, new ModuleError("Database is not open: cannot call compactRange()", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        }));
      } else {
        const keyEncoding = this.keyEncoding(options && options.keyEncoding);
        start = keyEncoding.encode(start);
        end = keyEncoding.encode(end);
        binding.db_compact_range(this[kContext], start, end, callback);
      }
      return callback[kPromise];
    }
    getProperty(property) {
      if (typeof property !== "string") {
        throw new TypeError("The first argument 'property' must be a string");
      }
      if (this.status !== "open") {
        throw new ModuleError("Database is not open", {
          code: "LEVEL_DATABASE_NOT_OPEN"
        });
      }
      return binding.db_get_property(this[kContext], property);
    }
    _iterator(options) {
      return new Iterator(this, this[kContext], options);
    }
    static destroy(location, callback) {
      if (typeof location !== "string" || location === "") {
        throw new TypeError("The first argument 'location' must be a non-empty string");
      }
      callback = fromCallback(callback, kPromise);
      binding.destroy_db(location, callback);
      return callback[kPromise];
    }
    static repair(location, callback) {
      if (typeof location !== "string" || location === "") {
        throw new TypeError("The first argument 'location' must be a non-empty string");
      }
      callback = fromCallback(callback, kPromise);
      binding.repair_db(location, callback);
      return callback[kPromise];
    }
  }
  exports.ClassicLevel = ClassicLevel;
});

// node_modules/canvas-renderer/lib/rasterization/edgeTable.js
var require_edgeTable = __commonJS((exports, module) => {
  function EdgeTable(width, height) {
    this.width = width;
    this.height = height;
    this.clear();
  }
  EdgeTable.prototype.clear = function EdgeTable_clear() {
    this.scanlines = [];
    this.scanlines.length = this.height;
    this.nextId = 1;
  };
  EdgeTable.prototype.add = function EdgeTable_add(edge) {
    var minY, maxY;
    if (edge.y0 == edge.y1) {
      return;
    } else if (edge.y0 < edge.y1) {
      minY = Math.floor(edge.y0);
      maxY = Math.floor(edge.y1 + 0.996);
    } else {
      minY = Math.floor(edge.y1);
      maxY = Math.floor(edge.y0 + 0.996);
    }
    if (maxY < 0 || minY >= this.scanlines.length) {
      return;
    }
    if (minY < 0) {
      minY = 0;
    }
    if (maxY > this.scanlines.length) {
      maxY = this.scanlines.length;
    }
    if (minY < maxY) {
      var y = minY;
      var x1 = edge.intersection(y);
      while (y < maxY) {
        var x2 = edge.intersection(y + 1);
        var fromX, width;
        if (x1 < x2) {
          fromX = Math.floor(x1);
          width = Math.floor(x2 + 0.9999) - fromX;
        } else {
          fromX = Math.floor(x2);
          width = Math.floor(x1 + 0.9999) - fromX;
        }
        if (fromX < 0) {
          width += fromX;
          fromX = 0;
          if (width < 0) {
            width = 0;
          }
        }
        if (fromX < this.width) {
          var scanline = this.scanlines[y];
          if (scanline == null) {
            this.scanlines[y] = scanline = [];
          }
          scanline.push({
            fromX,
            width,
            edge
          });
        }
        x1 = x2;
        y++;
      }
    }
  };
  EdgeTable.prototype.sort = function EdgeTable_sort() {
    for (var i = 0;i < this.scanlines.length; i++) {
      var arr = this.scanlines[i];
      if (arr) {
        arr.sort(function(x, y) {
          if (x.fromX < y.fromX) {
            return -1;
          }
          if (x.fromX > y.fromX) {
            return 1;
          }
          return 0;
        });
      }
    }
  };
  module.exports = EdgeTable;
});

// node_modules/canvas-renderer/lib/colorUtils.js
var require_colorUtils = __commonJS((exports, module) => {
  module.exports = {
    TRANSPARENT: 0,
    FORCE_TRANSPARENT: Infinity,
    from: colorUtils_from,
    alpha: colorUtils_alpha,
    red: colorUtils_red,
    green: colorUtils_green,
    blue: colorUtils_blue,
    parse: colorUtils_parse,
    mix: colorUtils_mix,
    format: function colorUtils_format(color) {
      color = colorUtils_parse(color);
      if (isFinite(color)) {
        return "#" + ("000000" + (color >>> 8).toString(16)).slice(-6) + ("00" + (color & 255).toString(16)).slice(-2);
      }
    },
    over: function colorUtils_over(fore, back) {
      var foreA = colorUtils_alpha(fore);
      if (foreA < 1) {
        return back;
      } else if (foreA > 254 || colorUtils_alpha(back) < 1) {
        return fore;
      }
      var forePA = foreA * 255;
      var backPA = colorUtils_alpha(back) * (255 - foreA);
      var pa = forePA + backPA;
      var b = Math.floor((forePA * colorUtils_blue(fore) + backPA * colorUtils_blue(back)) / pa);
      var g = Math.floor((forePA * colorUtils_green(fore) + backPA * colorUtils_green(back)) / pa);
      var r = Math.floor((forePA * colorUtils_red(fore) + backPA * colorUtils_red(back)) / pa);
      var a = Math.floor(pa / 255);
      return r << 24 | g << 16 | b << 8 | a;
    }
  };
  function colorUtils_mix(color1, color2, weight) {
    if (weight < 0) {
      weight = 0;
    } else if (weight > 1) {
      weight = 1;
    }
    var a = (color1 & 255) * (1 - weight) + (color2 & 255) * weight;
    if (a <= 0.1) {
      return 0;
    }
    var r = ((color1 >>> 24) * (color1 & 255) * (1 - weight) + (color2 >>> 24) * (color2 & 255) * weight) / a;
    var g = ((color1 >>> 16 & 255) * (color1 & 255) * (1 - weight) + (color2 >>> 16 & 255) * (color2 & 255) * weight) / a;
    var b = ((color1 >>> 8 & 255) * (color1 & 255) * (1 - weight) + (color2 >>> 8 & 255) * (color2 & 255) * weight) / a;
    if (a > 255)
      a = 255;
    if (r > 255)
      r = 255;
    if (g > 255)
      g = 255;
    if (b > 255)
      b = 255;
    return r << 24 | g << 16 | b << 8 | a;
  }
  function colorUtils_from(a, r, g, b) {
    return r << 24 | g << 16 | b << 8 | a;
  }
  function colorUtils_alpha(color) {
    return color & 255;
  }
  function colorUtils_red(color) {
    return color >>> 24;
  }
  function colorUtils_green(color) {
    return color >>> 16 & 255;
  }
  function colorUtils_blue(color) {
    return color >>> 8 & 255;
  }
  var NAMED_COLORS = {
    transparent: 0,
    antiquewhite: 4209760255,
    aqua: 16777215,
    aquamarine: 2147472639,
    azure: 4043309055,
    beige: 4126530815,
    bisque: 4293182719,
    black: 255,
    blanchedalmond: 4293643775,
    blue: 65535,
    blueviolet: 2318131967,
    brown: 2771004159,
    burlywood: 3736635391,
    cadetblue: 1604231423,
    chartreuse: 2147418367,
    chocolate: 3530104575,
    coral: 4286533887,
    cornflowerblue: 1687547391,
    cornsilk: 4294499583,
    crimson: 3692313855,
    cyan: 16777215,
    darkblue: 35839,
    darkcyan: 9145343,
    darkgoldenrod: 3095792639,
    darkgray: 2846468607,
    darkgreen: 6553855,
    darkgrey: 2846468607,
    darkkhaki: 3182914559,
    darkmagenta: 2332068863,
    darkolivegreen: 1433087999,
    darkorange: 4287365375,
    darkorchid: 2570243327,
    darkred: 2332033279,
    darksalmon: 3918953215,
    darkseagreen: 2411499519,
    darkslateblue: 1211993087,
    darkslategray: 793726975,
    darkslategrey: 793726975,
    darkturquoise: 13554175,
    darkviolet: 2483082239,
    deeppink: 4279538687,
    deepskyblue: 12582911,
    dimgray: 1768516095,
    dimgrey: 1768516095,
    dodgerblue: 512819199,
    firebrick: 2988581631,
    floralwhite: 4294635775,
    forestgreen: 579543807,
    fuchsia: 4278255615,
    gainsboro: 3705462015,
    ghostwhite: 4177068031,
    gold: 4292280575,
    goldenrod: 3668254975,
    gray: 2155905279,
    green: 8388863,
    greenyellow: 2919182335,
    grey: 2155905279,
    honeydew: 4043305215,
    hotpink: 4285117695,
    indianred: 3445382399,
    indigo: 1258324735,
    ivory: 4294963455,
    khaki: 4041641215,
    lavender: 3873897215,
    lavenderblush: 4293981695,
    lawngreen: 2096890111,
    lemonchiffon: 4294626815,
    lightblue: 2916673279,
    lightcoral: 4034953471,
    lightcyan: 3774873599,
    lightgoldenrodyellow: 4210742015,
    lightgray: 3553874943,
    lightgreen: 2431553791,
    lightgrey: 3553874943,
    lightpink: 4290167295,
    lightsalmon: 4288707327,
    lightseagreen: 548580095,
    lightskyblue: 2278488831,
    lightslategray: 2005441023,
    lightslategrey: 2005441023,
    lightsteelblue: 2965692159,
    lightyellow: 4294959359,
    lime: 16711935,
    limegreen: 852308735,
    linen: 4210091775,
    magenta: 4278255615,
    maroon: 2147483903,
    mediumaquamarine: 1724754687,
    mediumblue: 52735,
    mediumorchid: 3126187007,
    mediumpurple: 2473647103,
    mediumseagreen: 1018393087,
    mediumslateblue: 2070474495,
    mediumspringgreen: 16423679,
    mediumturquoise: 1221709055,
    mediumvioletred: 3340076543,
    midnightblue: 421097727,
    mintcream: 4127193855,
    mistyrose: 4293190143,
    moccasin: 4293178879,
    navajowhite: 4292783615,
    navy: 33023,
    oldlace: 4260751103,
    olive: 2155872511,
    olivedrab: 1804477439,
    orange: 4289003775,
    orangered: 4282712319,
    orchid: 3664828159,
    palegoldenrod: 4008225535,
    palegreen: 2566625535,
    paleturquoise: 2951671551,
    palevioletred: 3681588223,
    papayawhip: 4293907967,
    peachpuff: 4292524543,
    peru: 3448061951,
    pink: 4290825215,
    plum: 3718307327,
    powderblue: 2967529215,
    purple: 2147516671,
    rebeccapurple: 1714657791,
    red: 4278190335,
    rosybrown: 3163525119,
    royalblue: 1097458175,
    saddlebrown: 2336560127,
    salmon: 4202722047,
    sandybrown: 4104413439,
    seagreen: 780883967,
    seashell: 4294307583,
    sienna: 2689740287,
    silver: 3233857791,
    skyblue: 2278484991,
    slateblue: 1784335871,
    slategray: 1887473919,
    slategrey: 1887473919,
    snow: 4294638335,
    springgreen: 16744447,
    steelblue: 1182971135,
    tan: 3535047935,
    teal: 8421631,
    thistle: 3636451583,
    tomato: 4284696575,
    turquoise: 1088475391,
    violet: 4001558271,
    wheat: 4125012991,
    white: 4294967295,
    whitesmoke: 4126537215,
    yellow: 4294902015,
    yellowgreen: 2597139199
  };
  function parseRgbComponent(value) {
    var match = value.match(/^\s*(\d*(?:\.\d*)?)(%?)\s*$/);
    if (match) {
      var result = parseFloat(match[1]);
      if (isNaN(result)) {
        return NaN;
      }
      result = match[2] ? 255 * result / 100 : result;
      result = 0 | result;
      if (result < 0) {
        result = 0;
      }
      if (result > 255) {
        result = 255;
      }
      return result;
    }
    return NaN;
  }
  function parsePercent(value) {
    var match = value.match(/^\s*(\d*(?:\.\d*)?)%\s*$/);
    if (match) {
      var result = parseFloat(match[1]);
      if (isNaN(result)) {
        return NaN;
      }
      result = result / 100;
      return result < 0 ? 0 : result > 1 ? 1 : result;
    }
    return NaN;
  }
  function parseAlpha(value) {
    if (!value) {
      return 255;
    }
    var match = value.match(/^\s*(\d*(?:\.\d*)?)(%?)\s*$/);
    if (match) {
      var result = parseFloat(match[1]);
      if (isNaN(result)) {
        return NaN;
      }
      if (match[2]) {
        result = result / 100;
      }
      result = 0 | 255 * result;
      return result < 0 ? 0 : result > 255 ? 255 : result;
    }
    return NaN;
  }
  function hslToRgb(hue, sat, light) {
    if (light <= 0.5) {
      var t2 = light * (sat + 1);
    } else {
      var t2 = light + sat - light * sat;
    }
    var t1 = light * 2 - t2;
    var r = hueToRgb(t1, t2, hue + 2);
    var g = hueToRgb(t1, t2, hue);
    var b = hueToRgb(t1, t2, hue - 2);
    return [r, g, b];
  }
  function hueToRgb(t1, t2, hue) {
    if (hue < 0)
      hue += 6;
    if (hue >= 6)
      hue -= 6;
    if (hue < 1)
      return (t2 - t1) * hue + t1;
    else if (hue < 3)
      return t2;
    else if (hue < 4)
      return (t2 - t1) * (4 - hue) + t1;
    else
      return t1;
  }
  function hwbToRgb(hue, white, black) {
    var rgb = hslToRgb(hue, 1, 0.5);
    for (var i = 0;i < 3; i++) {
      rgb[i] *= 1 - white - black;
      rgb[i] += white;
    }
    return rgb;
  }
  function parseHsla(h, s, l, a) {
    if (isFinite(h = parseHue(h)) && isFinite(s = parsePercent(s)) && isFinite(l = parsePercent(l)) && isFinite(a = parseAlpha(a))) {
      var rgb = hslToRgb(h, s, l);
      return colorUtils_from(a, rgb[0] * 255 & 255, rgb[1] * 255 & 255, rgb[2] * 255 & 255);
    }
  }
  function parseRgba(r, g, b, a) {
    if (isFinite(r = parseRgbComponent(r)) && isFinite(g = parseRgbComponent(g)) && isFinite(b = parseRgbComponent(b)) && isFinite(a = parseAlpha(a))) {
      return colorUtils_from(a, r, g, b);
    }
  }
  function parseHue(value) {
    var match = value.match(/^\s*(\d*(?:\.\d*)?)(deg|grad|rad|turn|)\s*$/);
    if (match) {
      var result = parseFloat(match[1]);
      if (isNaN(result)) {
        return NaN;
      }
      switch (match[2]) {
        case "grad":
          result = 6 * result / 400;
          break;
        case "rad":
          result = 3 * result / Math.PI;
          break;
        case "turn":
          result = result * 6;
          break;
        default:
          result = result / 60;
          break;
      }
      result = result % 6;
      if (result < 0) {
        result += 6;
      }
      return result;
    }
    return NaN;
  }
  function parseHexColor(color) {
    var hexColor = color;
    if (hexColor.charAt(0) == "#") {
      hexColor = hexColor.substr(1);
    }
    var numeric = parseInt(hexColor, 16);
    switch (hexColor.length) {
      case 3:
        return (numeric & 3840) << 20 | (numeric & 3840) << 16 | (numeric & 240) << 16 | (numeric & 240) << 12 | (numeric & 15) << 12 | (numeric & 15) << 8 | 255;
      case 4:
        return (numeric & 61440) << 16 | (numeric & 61440) << 12 | (numeric & 3840) << 12 | (numeric & 3840) << 8 | (numeric & 240) << 8 | (numeric & 240) << 4 | (numeric & 15) << 4 | numeric & 15;
      case 6:
        return numeric << 8 | 255;
      case 8:
        return numeric & 4294967295;
    }
  }
  function parseHwb(h, w, b, a) {
    if (isFinite(h = parseHue(h)) && isFinite(w = parsePercent(w)) && isFinite(b = parsePercent(b)) && isFinite(a = parseAlpha(a))) {
      if (w + b > 1) {
        w = w / (w + b);
        b = 1 - w;
      }
      var rgb = hwbToRgb(h, w, b);
      return colorUtils_from(a, rgb[0] * 255 & 255, rgb[1] * 255 & 255, rgb[2] * 255 & 255);
    }
  }
  function colorUtils_parse(color) {
    if (typeof color == "number") {
      return color & 4294967295;
    }
    color = "" + color;
    if (/^#?[0-9a-f]{3,8}$/i.test(color)) {
      return parseHexColor(color);
    }
    color = color.toLowerCase();
    if (color in NAMED_COLORS) {
      return NAMED_COLORS[color] & 4294967295;
    }
    var rgba = color.match(/^rgba?\(([^,]+),([^,]+),([^,]+)(?:,([^,]+))?\)$/);
    if (rgba) {
      return parseRgba(rgba[1], rgba[2], rgba[3], rgba[4]);
    }
    var hsla = color.match(/^hsla?\(([^,]+),([^,]+),([^,]+)(?:,([^,]+))?\)$/);
    if (hsla) {
      return parseHsla(hsla[1], hsla[2], hsla[3], hsla[4]);
    }
    var hwb = color.match(/^hwb\(([^,]+),([^,]+),([^,]+)(?:,([^,]+))?\)$/);
    if (hwb) {
      return parseHwb(hwb[1], hwb[2], hwb[3], hwb[4]);
    }
    throw new Error("Invalid color " + color);
  }
});

// node_modules/canvas-renderer/lib/rasterization/bitmapWriter.js
var require_bitmapWriter = __commonJS((exports, module) => {
  var colorUtils = require_colorUtils();
  function BitmapWriter(backColor, width, height) {
    this.backColor = backColor;
    this.canvas = [];
  }
  BitmapWriter.prototype.write = function write(color, count) {
    if (count > 0) {
      this.canvas.push(count);
      this.canvas.push(colorUtils.over(color, this.backColor));
    }
  };
  BitmapWriter.prototype.skip = function skip(count) {
    if (count > 0) {
      this.canvas.push(count);
      this.canvas.push(this.backColor);
    }
  };
  module.exports = BitmapWriter;
});

// node_modules/canvas-renderer/lib/rasterization/layerManager.js
var require_layerManager = __commonJS((exports, module) => {
  var colorUtils = require_colorUtils();
  function LayerManager() {
    this._layers = [];
  }
  LayerManager.prototype.color = colorUtils.TRANSPARENT;
  LayerManager.prototype.clear = function LayerManager_clear() {
    this._layers = [];
    this.color = colorUtils.TRANSPARENT;
  };
  LayerManager.prototype.copyTo = function LayerManager_copyTo(other) {
    other.color = this.color;
    other._layers = [];
    for (var i = 0;i < this._layers.length; i++) {
      var layer = this._layers[i];
      other._layers[i] = {
        color: layer.color,
        inPath: layer.inPath,
        polygonId: layer.polygonId,
        winding: layer.winding
      };
    }
  };
  LayerManager.prototype.add = function LayerManager_add(edge) {
    var dwinding = edge.y0 < edge.y1 ? 1 : -1;
    var inserted = false;
    for (var i = this._layers.length - 1;i >= 0; i--) {
      if (this._layers[i].polygonId == edge.polygonId) {
        this._layers[i].winding += dwinding;
        if (!this._layers[i].inPath()) {
          this._layers.splice(i, 1);
        }
        inserted = true;
        break;
      } else if (this._layers[i].polygonId < edge.polygonId) {
        this._layers.splice(i + 1, 0, {
          polygonId: edge.polygonId,
          color: edge.color,
          winding: dwinding,
          inPath: edge.windingRule == "evenodd" ? inPath_evenOdd : inPath_nonZero
        });
        inserted = true;
        break;
      }
    }
    if (!inserted) {
      this._layers.splice(0, 0, {
        polygonId: edge.polygonId,
        color: edge.color,
        winding: dwinding,
        inPath: edge.windingRule == "evenodd" ? inPath_evenOdd : inPath_nonZero
      });
    }
    var color = colorUtils.TRANSPARENT;
    for (var i = this._layers.length - 1;i >= 0 && colorUtils.alpha(color) < 255; i--) {
      var layerColor = this._layers[i].color;
      if (layerColor === colorUtils.FORCE_TRANSPARENT) {
        break;
      }
      color = colorUtils.over(color, layerColor);
    }
    this.color = color;
  };
  module.exports = LayerManager;
  function inPath_evenOdd() {
    return this.winding % 2 == 1;
  }
  function inPath_nonZero() {
    return this.winding != 0;
  }
});

// node_modules/canvas-renderer/lib/rasterization/superSampleBuffer.js
var require_superSampleBuffer = __commonJS((exports, module) => {
  var colorUtils = require_colorUtils();
  var IDX_COUNT = 0;
  var IDX_A = 1;
  var IDX_R = 2;
  var IDX_G = 3;
  var IDX_B = 4;
  function SuperSampleBuffer(width, samplesPerPixel) {
    this._samples = new Uint16Array(width * 5);
    this._samplesPerPixel = samplesPerPixel;
    this._pixelOffset = 0;
    this._subPixelOffset = 0;
  }
  SuperSampleBuffer.prototype._add = function SuperSampleBuffer_add(count, a, r, g, b) {
    this._samples[this._pixelOffset * 5 + IDX_COUNT] += count;
    if (a > 0) {
      this._samples[this._pixelOffset * 5 + IDX_A] += 0 | a * count;
      this._samples[this._pixelOffset * 5 + IDX_R] += 0 | r * count * a / 255;
      this._samples[this._pixelOffset * 5 + IDX_G] += 0 | g * count * a / 255;
      this._samples[this._pixelOffset * 5 + IDX_B] += 0 | b * count * a / 255;
    }
  };
  SuperSampleBuffer.prototype.rewind = function SuperSampleBuffer_rewind() {
    this._pixelOffset = 0;
    this._subPixelOffset = 0;
  };
  SuperSampleBuffer.prototype.clear = function SuperSampleBuffer_clear() {
    this._pixelOffset = 0;
    this._subPixelOffset = 0;
    this._samples.fill(0);
  };
  SuperSampleBuffer.prototype.writeTo = function SuperSampleBuffer_writeTo(bitmapWriter, count) {
    for (var i = 0;i < count; i++) {
      var sampleCount = this._samples[i * 5 + IDX_COUNT], alphaSum = this._samples[i * 5 + IDX_A], color = sampleCount && alphaSum ? colorUtils.from(Math.floor(alphaSum / sampleCount), Math.floor(this._samples[i * 5 + IDX_R] * 255 / alphaSum), Math.floor(this._samples[i * 5 + IDX_G] * 255 / alphaSum), Math.floor(this._samples[i * 5 + IDX_B] * 255 / alphaSum)) : 0;
      bitmapWriter.write(color, 1);
    }
  };
  SuperSampleBuffer.prototype.getColorAt = function SuperSampleBuffer_getColorAt(index) {
    var sampleCount = this._samples[index * 5 + IDX_COUNT], alphaSum = this._samples[index * 5 + IDX_A];
    return sampleCount && alphaSum ? colorUtils.from(Math.floor(alphaSum / sampleCount), Math.floor(this._samples[index * 5 + IDX_R] * 255 / alphaSum), Math.floor(this._samples[index * 5 + IDX_G] * 255 / alphaSum), Math.floor(this._samples[index * 5 + IDX_B] * 255 / alphaSum)) : 0;
  };
  SuperSampleBuffer.prototype.add = function SuperSampleBuffer_add(color, untilX) {
    var samplesLeft = Math.floor(untilX * this._samplesPerPixel) - this._subPixelOffset - this._pixelOffset * this._samplesPerPixel;
    var a = colorUtils.alpha(color);
    var r = colorUtils.red(color);
    var g = colorUtils.green(color);
    var b = colorUtils.blue(color);
    if (this._subPixelOffset > 0) {
      var samples = this._samplesPerPixel - this._subPixelOffset;
      if (samples > samplesLeft) {
        samples = samplesLeft;
      }
      samplesLeft -= samples;
      this._add(samples, a, r, g, b);
      this._subPixelOffset += samples;
      if (this._subPixelOffset == this._samplesPerPixel) {
        this._subPixelOffset = 0;
        this._pixelOffset++;
      }
    }
    var fullPixels = Math.floor(samplesLeft / this._samplesPerPixel);
    if (fullPixels > 0) {
      for (var i = 0;i < fullPixels; i++) {
        this._add(this._samplesPerPixel, a, r, g, b);
        this._pixelOffset++;
      }
      samplesLeft -= fullPixels * this._samplesPerPixel;
    }
    if (samplesLeft > 0) {
      this._add(samplesLeft, a, r, g, b);
      this._subPixelOffset += samplesLeft;
      if (this._subPixelOffset == this._samplesPerPixel) {
        this._subPixelOffset = 0;
        this._pixelOffset++;
      }
    }
  };
  module.exports = SuperSampleBuffer;
});

// node_modules/canvas-renderer/lib/rasterization/rasterizer.js
var require_rasterizer = __commonJS((exports, module) => {
  var BitmapWriter = require_bitmapWriter();
  var LayerManager = require_layerManager();
  var SuperSampleBuffer = require_superSampleBuffer();
  var colorUtils = require_colorUtils();
  var SAMPLES_PER_PIXEL_X = 10;
  var SAMPLES_PER_PIXEL_Y = 4;
  var SAMPLE_HEIGHT = 1 / SAMPLES_PER_PIXEL_Y;
  module.exports = rasterize;
  function rasterize(edgeTable, backColor) {
    edgeTable.sort();
    var writer = new BitmapWriter(backColor, edgeTable.width, edgeTable.height);
    var superSampleBuffer = new SuperSampleBuffer(edgeTable.width + 1, SAMPLES_PER_PIXEL_X);
    var layers = [];
    var color = 0;
    var usedLayers = 0;
    for (var i = 0;i < SAMPLES_PER_PIXEL_Y; i++) {
      layers[i] = new LayerManager;
    }
    for (var ey = 0;ey < edgeTable.height; ey++) {
      var scanline = edgeTable.scanlines[ey];
      if (!scanline || !scanline.length) {
        writer.skip(edgeTable.width);
        continue;
      }
      for (var i = 0;i < usedLayers; i++) {
        layers[i].clear();
      }
      usedLayers = 1;
      var superSampleRanges = getSuperSampleRanges(scanline, edgeTable.width);
      writer.skip(superSampleRanges[0].fromX);
      for (var rangeIndex = 0;rangeIndex < superSampleRanges.length; rangeIndex++) {
        var superSampleRange = superSampleRanges[rangeIndex];
        if (superSampleRange.edges.length == 1 && (superSampleRange.edges[0].y0 <= ey && superSampleRange.edges[0].y1 >= ey + 1 || superSampleRange.edges[0].y0 >= ey + 1 && superSampleRange.edges[0].y1 <= ey)) {
          var edge = superSampleRange.edges[0];
          var xey = edge.intersection(ey);
          var xey1 = edge.intersection(ey + 1);
          var x0 = Math.min(xey, xey1);
          var x1 = Math.max(xey, xey1);
          var width = x1 - x0;
          for (var sy = 0;sy < usedLayers; sy++) {
            var subScanlineLayers = layers[sy];
            superSampleBuffer.add(subScanlineLayers.color, 1);
            subScanlineLayers.add(edge);
            superSampleBuffer.add(subScanlineLayers.color, 2);
            superSampleBuffer.rewind();
          }
          var fromColor = superSampleBuffer.getColorAt(0);
          color = superSampleBuffer.getColorAt(1);
          superSampleBuffer.clear();
          for (var x = superSampleRange.fromX;x < superSampleRange.toXExcl; x++) {
            if (x0 >= x + 1) {
              writer.write(fromColor, 1);
              continue;
            }
            if (x1 <= x) {
              writer.write(color, 1);
              continue;
            }
            var coverage = x1 < x + 1 ? x + 1 - x1 : 0;
            if (width > 0.001) {
              var integralFrom = Math.max(x0, x);
              var integralTo = Math.min(x1, x + 1);
              coverage += ((integralTo * integralTo - integralFrom * integralFrom) / 2 + x0 * (integralFrom - integralTo)) / width;
            }
            writer.write(colorUtils.mix(fromColor, color, coverage), 1);
          }
        } else {
          var y = ey + SAMPLE_HEIGHT / 2;
          while (usedLayers < SAMPLES_PER_PIXEL_Y) {
            layers[0].copyTo(layers[usedLayers]);
            usedLayers++;
          }
          for (var sy = 0;sy < SAMPLES_PER_PIXEL_Y; sy++, y += SAMPLE_HEIGHT) {
            var subScanlineLayers = layers[sy];
            color = subScanlineLayers.color;
            var intersections = getIntersections(superSampleRange.edges, y);
            for (var i = 0;i < intersections.length; i++) {
              var intersection = intersections[i];
              superSampleBuffer.add(color, intersection.x - superSampleRange.fromX);
              subScanlineLayers.add(intersection.edge);
              color = subScanlineLayers.color;
            }
            superSampleBuffer.add(color, superSampleRange.width + 1);
            superSampleBuffer.rewind();
          }
          color = superSampleBuffer.getColorAt(superSampleRange.width);
          superSampleBuffer.writeTo(writer, superSampleRange.width);
          superSampleBuffer.clear();
        }
        if (rangeIndex + 1 < superSampleRanges.length) {
          var nextRangeX = superSampleRanges[rangeIndex + 1].fromX;
          writer.write(color, nextRangeX - superSampleRange.toXExcl);
        } else {
          writer.write(color, edgeTable.width - superSampleRange.toXExcl);
        }
      }
    }
    return writer.canvas;
  }
  function getIntersections(edges, y) {
    var intersections = [];
    for (var i = 0;i < edges.length; i++) {
      var edge = edges[i];
      if (edge.y0 < y && edge.y1 >= y || edge.y0 >= y && edge.y1 < y) {
        var x = edge.x0 + (edge.x1 - edge.x0) * (y - edge.y0) / (edge.y1 - edge.y0);
        intersections.push({
          edge,
          x
        });
      }
    }
    intersections.sort(function(a, b) {
      return a.x - b.x;
    });
    return intersections;
  }
  function getSuperSampleRanges(scanline, width) {
    var superSampleRanges = [];
    var rangeIndex = 0;
    var superSampleRangeIndex = 0;
    while (rangeIndex < scanline.length) {
      var superSampleRange = {
        fromX: scanline[rangeIndex].fromX,
        toXExcl: scanline[rangeIndex].fromX + scanline[rangeIndex].width,
        edges: [scanline[rangeIndex].edge]
      };
      if (superSampleRange.fromX >= width) {
        break;
      }
      superSampleRanges.push(superSampleRange);
      rangeIndex++;
      for (var i = rangeIndex;i < scanline.length; i++) {
        if (scanline[i].fromX < superSampleRange.toXExcl) {
          superSampleRange.toXExcl = Math.max(superSampleRange.toXExcl, scanline[i].fromX + scanline[i].width);
          superSampleRange.edges.push(scanline[i].edge);
          rangeIndex++;
        } else {
          break;
        }
      }
      superSampleRange.toXExcl = Math.min(superSampleRange.toXExcl, width);
      superSampleRange.width = superSampleRange.toXExcl - superSampleRange.fromX;
    }
    return superSampleRanges;
  }
});

// node_modules/canvas-renderer/lib/png/pngPalette.js
var require_pngPalette = __commonJS((exports, module) => {
  var colorUtils = require_colorUtils();
  function PngPalette(colorRanges) {
    var lookup = {};
    var colors = [];
    var hasAlphaChannel = false;
    for (var i = 0;i + 1 < colorRanges.length && colors.length <= 256; i += 2) {
      var count = colorRanges[i + 0];
      var color = colorRanges[i + 1];
      if (!count) {
        continue;
      }
      if (color in lookup) {
        continue;
      }
      if (!hasAlphaChannel && colorUtils.alpha(color) < 255) {
        hasAlphaChannel = true;
      }
      lookup[color] = colors.length;
      colors.push(color);
    }
    this.hasAlphaChannel = hasAlphaChannel;
    this.colors = colors;
    this.lookup = lookup;
    this.isValid = colors.length <= 256;
  }
  PngPalette.prototype.isValid = false;
  PngPalette.prototype.hasAlphaChannel = false;
  PngPalette.prototype.colors = [];
  PngPalette.prototype.lookup = {};
  module.exports = PngPalette;
});

// node_modules/canvas-renderer/lib/png/crc32.js
var require_crc32 = __commonJS((exports, module) => {
  var CRC_TABLE = makeCrcTable();
  function Crc32() {}
  Crc32.prototype.value = 0;
  Crc32.prototype.update = function Crc32_update(buffer, bufferStart, bufferEnd) {
    var crc = this.value ^ 4294967295;
    if (typeof bufferStart !== "number") {
      bufferStart = 0;
    }
    if (typeof bufferEnd !== "number") {
      bufferEnd = buffer.length;
    }
    for (var i = bufferStart;i < bufferEnd; i++) {
      crc = CRC_TABLE[(crc ^ buffer[i]) & 255] ^ crc >>> 8;
    }
    this.value = crc ^ 4294967295;
  };
  module.exports = Crc32;
  function makeCrcTable() {
    var crcTable = [];
    for (var n = 0;n < 256; n++) {
      var c = n;
      for (var k = 0;k < 8; k++) {
        if ((c & 1) == 1)
          c = 3988292384 ^ c >>> 1;
        else
          c = c >>> 1;
      }
      crcTable[n] = c;
    }
    return crcTable;
  }
});

// node_modules/canvas-renderer/lib/png/pngBuffer.js
var require_pngBuffer = __commonJS((exports, module) => {
  var Crc32 = require_crc32();
  function PngBuffer() {
    this._buffer = Buffer.alloc(1024);
  }
  PngBuffer.prototype = {
    _buffer: null,
    _position: 0,
    _ensureCapacity: function _ensureCapacity(bytesNeeded) {
      var targetLength = this._position + bytesNeeded;
      if (this._buffer.length < targetLength) {
        var newCapacity = this._buffer.length + targetLength;
        var oldBuffer = this._buffer;
        this._buffer = Buffer.alloc(newCapacity);
        oldBuffer.copy(this._buffer);
      }
    },
    writeBuffer: function writeBuffer(buffer, bufferStart, bufferEnd) {
      if (typeof bufferStart == "undefined") {
        bufferStart = 0;
      }
      if (typeof bufferEnd == "undefined") {
        bufferEnd = buffer.length;
      }
      this._ensureCapacity(bufferEnd - bufferStart);
      buffer.copy(this._buffer, this._position, bufferStart, bufferEnd);
      this._position += bufferEnd - bufferStart;
    },
    writeString: function writeString(str) {
      const encodedStr = Buffer.from(str, "latin1");
      this.writeBuffer(encodedStr);
    },
    writeInt32BE: function writeInt32BE(value) {
      this._ensureCapacity(4);
      this._buffer.writeInt32BE(value, this._position);
      this._position += 4;
    },
    writeUInt32BE: function writeUInt32BE(value) {
      this._ensureCapacity(4);
      this._buffer.writeUInt32BE(value, this._position, true);
      this._position += 4;
    },
    writeInt8: function writeInt8(value) {
      this._ensureCapacity(1);
      this._buffer.writeInt8(value, this._position++);
    },
    writeUInt8: function writeUInt8(value) {
      this._ensureCapacity(1);
      this._buffer.writeUInt8(value, this._position++);
    },
    startChunk: function startChunk(type) {
      this._chunkStart = this._position;
      this._ensureCapacity(12);
      this._position += 4;
      this._buffer.write(type, this._position, 4, "ascii");
      this._position += 4;
    },
    endChunk: function endChunk() {
      var crc = new Crc32;
      crc.update(this._buffer, this._chunkStart + 4, this._position);
      var dataLength = this._position - (this._chunkStart + 8);
      this._buffer.writeInt32BE(dataLength, this._chunkStart);
      this.writeInt32BE(crc.value);
    },
    getBuffer: function getBuffer() {
      return this._buffer.slice(0, this._position);
    }
  };
  module.exports = PngBuffer;
});

// node_modules/canvas-renderer/lib/png/pngEncoder.js
var require_pngEncoder = __commonJS((exports, module) => {
  var zlib = __require("zlib");
  var PngBuffer = require_pngBuffer();
  var colorUtils = require_colorUtils();
  var SIGNATURE = Buffer.from([137, 80, 78, 71, 13, 10, 26, 10]);
  function PngEncoder() {
    this._buffer = new PngBuffer;
    this._buffer.writeBuffer(SIGNATURE);
  }
  PngEncoder.prototype.writeImageHeader = function PngEncoder_writeImageHeader(width, height, colorType) {
    this._buffer.startChunk("IHDR");
    this._buffer.writeUInt32BE(width);
    this._buffer.writeUInt32BE(height);
    this._buffer.writeUInt8(8);
    this._buffer.writeUInt8(colorType);
    this._buffer.writeUInt8(0);
    this._buffer.writeUInt8(0);
    this._buffer.writeUInt8(0);
    this._buffer.endChunk();
  };
  PngEncoder.prototype.writeImageGamma = function PngEncoder_writeImageGamma(gamma) {
    this._buffer.startChunk("gAMA");
    this._buffer.writeUInt32BE(gamma || 45455);
    this._buffer.endChunk();
  };
  PngEncoder.prototype.writeTrueColorWithAlpha = function PngEncoder_writeTrueColorWithAlpha(colorRanges, width, height) {
    this._buffer.startChunk("IDAT");
    var buffer = Buffer.alloc(width * height * 4 + height);
    var outputCursor = 0;
    var canvasCursor = 0;
    for (var y = 0;y < height; y++) {
      buffer.writeUInt8(0);
      outputCursor++;
      for (var x = 0;x < width; canvasCursor++) {
        var count = colorRanges[canvasCursor * 2 + 0];
        var color = colorRanges[canvasCursor * 2 + 1] & 4294967295;
        for (var i = 0;i < count; i++) {
          buffer.writeInt32BE(color, outputCursor);
          outputCursor += 4;
        }
        x += count;
      }
    }
    var compressed = zlib.deflateSync(buffer);
    this._buffer.writeBuffer(compressed);
    this._buffer.endChunk();
  };
  PngEncoder.prototype.writeIndexed = function PngEncoder_writeIndexed(colorRanges, palette, width, height) {
    this._buffer.startChunk("IDAT");
    var buffer = Buffer.alloc(width * height + height);
    var outputCursor = 0;
    var canvasCursor = 0;
    for (var y = 0;y < height; y++) {
      buffer.writeUInt8(0);
      outputCursor++;
      for (var x = 0;x < width; canvasCursor++) {
        var count = colorRanges[canvasCursor * 2 + 0];
        var color = colorRanges[canvasCursor * 2 + 1];
        var colorIndex = palette.lookup[color];
        for (var i = 0;i < count; i++) {
          buffer.writeUInt8(colorIndex, outputCursor);
          outputCursor++;
        }
        x += count;
      }
    }
    var compressed = zlib.deflateSync(buffer);
    this._buffer.writeBuffer(compressed);
    this._buffer.endChunk();
  };
  PngEncoder.prototype.writePalette = function PngEncoder_writePalette(palette) {
    if (palette && palette.isValid) {
      this._buffer.startChunk("PLTE");
      for (var i = 0;i < palette.colors.length; i++) {
        this._buffer.writeUInt8(colorUtils.red(palette.colors[i]));
        this._buffer.writeUInt8(colorUtils.green(palette.colors[i]));
        this._buffer.writeUInt8(colorUtils.blue(palette.colors[i]));
      }
      this._buffer.endChunk();
    }
  };
  PngEncoder.prototype.writeTransparency = function PngEncoder_writeTransparency(palette) {
    if (palette && palette.isValid && palette.hasAlphaChannel) {
      this._buffer.startChunk("tRNS");
      for (var i = 0;i < palette.colors.length; i++) {
        this._buffer.writeUInt8(colorUtils.alpha(palette.colors[i]));
      }
      this._buffer.endChunk();
    }
  };
  PngEncoder.prototype.writeTextualData = function PngEncoder_writeTextualData(key, value) {
    this._buffer.startChunk("tEXt");
    this._buffer.writeString(key);
    this._buffer.writeUInt8(0);
    this._buffer.writeString(value);
    this._buffer.endChunk();
  };
  PngEncoder.prototype.writeImageEnd = function PngEncoder_writeImageEnd() {
    this._buffer.startChunk("IEND");
    this._buffer.endChunk();
  };
  PngEncoder.prototype.getBuffer = function PngEncoder_getBuffer() {
    return this._buffer.getBuffer();
  };
  PngEncoder.GRAYSCALE = 0;
  PngEncoder.TRUE_COLOR = 2;
  PngEncoder.INDEXED_COLOR = 3;
  PngEncoder.GRAYSCALE_WITH_ALPHA = 4;
  PngEncoder.TRUE_COLOR_WITH_ALPHA = 6;
  module.exports = PngEncoder;
});

// node_modules/canvas-renderer/lib/rasterization/edge.js
var require_edge = __commonJS((exports, module) => {
  function Edge(polygonId, x0, y0, x1, y1, color, windingRule) {
    this.polygonId = polygonId;
    this.x0 = x0;
    this.x1 = x1;
    this.y0 = y0;
    this.y1 = y1;
    this.color = color;
    this.windingRule = windingRule;
  }
  Edge.prototype.intersection = function intersection(y) {
    var dx = (this.x1 - this.x0) * (this.y0 - y) / (this.y0 - this.y1);
    return this.x0 + dx;
  };
  module.exports = Edge;
});

// node_modules/canvas-renderer/lib/matrix.js
var require_matrix = __commonJS((exports, module) => {
  function Matrix(a, b, c, d, e, f) {
    this._a = a;
    this._b = b;
    this._c = c;
    this._d = d;
    this._e = e;
    this._f = f;
  }
  Matrix.prototype.hasSkewing = function Matrix_hasSkewing() {
    return this._b || this._c;
  };
  Matrix.prototype.hasTranslation = function Matrix_hasTranslation() {
    return this._e || this._f;
  };
  Matrix.prototype.hasScaling = function Matrix_hasScaling() {
    return this._a !== 1 || this._d !== 1;
  };
  Matrix.prototype.multiply = function Matrix_multiply(a, b, c, d, e, f) {
    return new Matrix(this._a * a + this._c * b, this._b * a + this._d * b, this._a * c + this._c * d, this._b * c + this._d * d, this._a * e + this._c * f + this._e, this._b * e + this._d * f + this._f);
  };
  Matrix.prototype.multiplyPoint = function Matrix_multiplyPoint(x, y) {
    return {
      x: this._a * x + this._c * y + this._e,
      y: this._b * x + this._d * y + this._f
    };
  };
  Matrix.prototype.rotate = function Matrix_rotate(angle) {
    var sin = Math.sin(angle), cos = Math.cos(angle);
    return this.multiply(cos, sin, -sin, cos, 0, 0);
  };
  Matrix.prototype.translate = function Matrix_translate(x, y) {
    return this.multiply(1, 0, 0, 1, x, y);
  };
  Matrix.prototype.scale = function Matrix_scale(x, y) {
    return this.multiply(x, 0, 0, y, 0, 0);
  };
  module.exports = Matrix;
});

// node_modules/canvas-renderer/lib/canvasState.js
var require_canvasState = __commonJS((exports, module) => {
  function canvasState_capture(ctx) {
    return {
      fillStyle: ctx.fillStyle,
      transform: ctx._transform
    };
  }
  function canvasState_restore(ctx, state) {
    ctx.fillStyle = state.fillStyle;
    ctx._transform = state.transform;
  }
  module.exports = {
    capture: canvasState_capture,
    restore: canvasState_restore
  };
});

// node_modules/canvas-renderer/lib/canvasContext.js
var require_canvasContext = __commonJS((exports, module) => {
  var Edge = require_edge();
  var colorUtils = require_colorUtils();
  var Matrix = require_matrix();
  var canvasState = require_canvasState();
  function CanvasContext(canvas) {
    this.canvas = canvas;
    this._edges = canvas._edges;
    this.beginPath();
    this._savedStates = [];
    this.resetTransform();
  }
  CanvasContext.prototype.fillStyle = 255;
  CanvasContext.prototype.save = function CanvasContext_save() {
    this._savedStates.push(canvasState.capture(this));
  };
  CanvasContext.prototype.restore = function CanvasContext_restore() {
    if (this._savedStates.length) {
      canvasState.restore(this, this._savedStates.pop());
    }
  };
  CanvasContext.prototype.resetTransform = function CanvasContext_resetTransform() {
    this._transform = new Matrix(1, 0, 0, 1, 0, 0);
  };
  CanvasContext.prototype.transform = function CanvasContext_transform(a, b, c, d, e, f) {
    if (!Number.isFinite(a) || !Number.isFinite(b) || !Number.isFinite(c) || !Number.isFinite(d) || !Number.isFinite(e) || !Number.isFinite(f)) {
      return;
    }
    this._transform = this._transform.multiply(a, b, c, d, e, f);
  };
  CanvasContext.prototype.setTransform = function CanvasContext_transform(a, b, c, d, e, f) {
    if (!Number.isFinite(a) || !Number.isFinite(b) || !Number.isFinite(c) || !Number.isFinite(d) || !Number.isFinite(e) || !Number.isFinite(f)) {
      return;
    }
    this._transform = new Matrix(a, b, c, d, e, f);
  };
  CanvasContext.prototype.translate = function CanvasContext_translate(x, y) {
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
      return;
    }
    this._transform = this._transform.translate(x, y);
  };
  CanvasContext.prototype.scale = function CanvasContext_scale(x, y) {
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
      return;
    }
    this._transform = this._transform.scale(x, y);
  };
  CanvasContext.prototype.rotate = function CanvasContext_rotate(angle) {
    if (!Number.isFinite(angle)) {
      return;
    }
    this._transform = this._transform.rotate(angle);
  };
  CanvasContext.prototype.beginPath = function CanvasContext_beginPath() {
    this._paths = [];
  };
  CanvasContext.prototype.closePath = function CanvasContext_closePath() {
    if (this._paths.length) {
      var path = this._paths[this._paths.length - 1];
      if (path.length > 2) {
        if (path[0] != path[path.length - 2] || path[1] != path[path.length - 1]) {
          path.push(path[0]);
          path.push(path[1]);
        }
        this._paths.push([path[0], path[1]]);
      }
    }
  };
  CanvasContext.prototype.moveTo = function CanvasContext_moveTo(x, y) {
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
      return;
    }
    var p = this._transform.multiplyPoint(x, y);
    this._paths.push([p.x, p.y]);
  };
  CanvasContext.prototype.lineTo = function CanvasContext_lineTo(x, y) {
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
      return;
    }
    if (!this._paths.length) {
      this._paths.push([]);
    }
    var p = this._transform.multiplyPoint(x, y);
    var path = this._paths[this._paths.length - 1];
    path.push(p.x);
    path.push(p.y);
  };
  CanvasContext.prototype.arc = function CanvasContext_arc(x, y, radius, startAngle, endAngle, anticlockwise) {
    if (!Number.isFinite(x) || !Number.isFinite(y) || !Number.isFinite(radius) || !Number.isFinite(startAngle) || !Number.isFinite(endAngle)) {
      return;
    }
    const TARGET_CHORD_LENGTH_PIXELS = 3;
    var sectors = Math.floor(Math.PI * radius * 2 / TARGET_CHORD_LENGTH_PIXELS);
    if (sectors < 9) {
      sectors = 9;
    }
    var sectorAngle = Math.PI * 2 / sectors;
    if (startAngle === endAngle) {
      return;
    }
    if (anticlockwise) {
      sectorAngle = -sectorAngle;
      if (startAngle - endAngle >= Math.PI * 2) {
        endAngle = startAngle - Math.PI * 2;
      } else {
        endAngle += Math.PI * 2 * Math.ceil((startAngle - endAngle) / (Math.PI * 2) - 1);
      }
    } else {
      if (endAngle - startAngle >= Math.PI * 2) {
        endAngle = startAngle + Math.PI * 2;
      } else {
        endAngle -= Math.PI * 2 * Math.ceil((endAngle - startAngle) / (Math.PI * 2) - 1);
      }
    }
    var dx, dy;
    sectors = (endAngle - startAngle) / sectorAngle;
    var angle = startAngle;
    for (var i = 0;i < sectors; i++) {
      dx = Math.cos(angle) * radius;
      dy = Math.sin(angle) * radius;
      this.lineTo(x + dx, y + dy);
      angle += sectorAngle;
    }
    dx = Math.cos(endAngle) * radius;
    dy = Math.sin(endAngle) * radius;
    this.lineTo(x + dx, y + dy);
  };
  CanvasContext.prototype.clearRect = function CanvasContext_clearRect(x, y, width, height) {
    var fullCanvas = false;
    if (!this._transform.hasSkewing()) {
      var topLeft = this._transform.multiplyPoint(x, y);
      if (topLeft.x <= 0 && topLeft.y <= 0) {
        var bottomRight = this._transform.multiplyPoint(x + width, y + height);
        if (bottomRight.x >= this.canvas.width && bottomRight.y >= this.canvas.height) {
          fullCanvas = true;
        }
      }
    }
    if (fullCanvas) {
      this._edges.clear();
    } else {
      this._fillRect(colorUtils.FORCE_TRANSPARENT, x, y, width, height);
    }
  };
  CanvasContext.prototype.fillRect = function CanvasContext_fillRect(x, y, width, height) {
    var fillColor = colorUtils.parse(this.fillStyle);
    this._fillRect(fillColor, x, y, width, height);
  };
  CanvasContext.prototype._fillRect = function CanvasContext__fillRect(fillColor, x, y, width, height) {
    if (!Number.isFinite(x) || !Number.isFinite(y) || !Number.isFinite(width) || !Number.isFinite(height) || !width || !height) {
      return;
    }
    var id = this._edges.nextId++;
    var points = [
      this._transform.multiplyPoint(x, y),
      this._transform.multiplyPoint(x + width, y),
      this._transform.multiplyPoint(x + width, y + height),
      this._transform.multiplyPoint(x, y + height),
      this._transform.multiplyPoint(x, y)
    ];
    for (var i = 1;i < points.length; i++) {
      this._edges.add(new Edge(id, points[i - 1].x, points[i - 1].y, points[i].x, points[i].y, fillColor));
    }
  };
  CanvasContext.prototype.fill = function CanvasContext_fill(windingRule) {
    var id = this._edges.nextId++;
    var fillColor = colorUtils.parse(this.fillStyle);
    for (var p = 0;p < this._paths.length; p++) {
      var points = this._paths[p];
      if (points.length <= 2) {
        continue;
      }
      for (var i = 2;i < points.length; i += 2) {
        this._edges.add(new Edge(id, points[i - 2], points[i - 1], points[i], points[i + 1], fillColor, windingRule));
      }
      if (points[0] != points[points.length - 2] || points[1] != points[points.length - 1]) {
        this._edges.add(new Edge(id, points[points.length - 2], points[points.length - 1], points[0], points[1], fillColor, windingRule));
      }
    }
  };
  module.exports = CanvasContext;
});

// node_modules/canvas-renderer/lib/canvas.js
var require_canvas = __commonJS((exports, module) => {
  var EdgeTable = require_edgeTable();
  var rasterizer = require_rasterizer();
  var PngPalette = require_pngPalette();
  var PngEncoder = require_pngEncoder();
  var CanvasContext = require_canvasContext();
  var colorUtils = require_colorUtils();
  function Canvas(width, height) {
    this.width = width;
    this.height = height;
    this._edges = new EdgeTable(width, height);
  }
  Canvas.prototype.width = 0;
  Canvas.prototype.height = 0;
  Canvas.prototype.backColor = 0;
  Canvas.prototype.getContext = function Canvas_getContext() {
    return new CanvasContext(this);
  };
  Canvas.prototype.toPng = function Canvas_toPng(keywords) {
    var backColor = colorUtils.parse(this.backColor);
    var colorRanges = rasterizer(this._edges, backColor);
    var palette = new PngPalette(colorRanges);
    var png = new PngEncoder;
    png.writeImageHeader(this.width, this.height, palette.isValid ? PngEncoder.INDEXED_COLOR : PngEncoder.TRUE_COLOR_WITH_ALPHA);
    png.writeImageGamma();
    if (keywords) {
      for (var key in keywords) {
        if (keywords.hasOwnProperty(key)) {
          png.writeTextualData(key, keywords[key]);
        }
      }
    }
    if (palette && palette.isValid) {
      png.writePalette(palette);
      png.writeTransparency(palette);
      png.writeIndexed(colorRanges, palette, this.width, this.height);
    } else {
      png.writeTrueColorWithAlpha(colorRanges, this.width, this.height);
    }
    png.writeImageEnd();
    return png.getBuffer();
  };
  Canvas.prototype.toDataURL = function Canvas_toDataURL() {
    if (this.width <= 0 || this.height <= 0) {
      return "data:,";
    }
    var png = this.toPng();
    return "data:image/png;base64," + png.toString("base64");
  };
  module.exports = Canvas;
});

// node_modules/canvas-renderer/index.js
var require_canvas_renderer = __commonJS((exports, module) => {
  var Canvas = require_canvas();
  module.exports = {
    createCanvas: function(width, height) {
      return new Canvas(width, height);
    }
  };
});

// node_modules/jdenticon/dist/jdenticon-node.mjs
function parseHex(hash, startPosition, octets) {
  return parseInt(hash.substr(startPosition, octets), 16);
}
function decToHex(v) {
  v |= 0;
  return v < 0 ? "00" : v < 16 ? "0" + v.toString(16) : v < 256 ? v.toString(16) : "ff";
}
function hueToRgb(m1, m2, h) {
  h = h < 0 ? h + 6 : h > 6 ? h - 6 : h;
  return decToHex(255 * (h < 1 ? m1 + (m2 - m1) * h : h < 3 ? m2 : h < 4 ? m1 + (m2 - m1) * (4 - h) : m1));
}
function parseColor(color) {
  if (/^#[0-9a-f]{3,8}$/i.test(color)) {
    let result;
    const colorLength = color.length;
    if (colorLength < 6) {
      const r = color[1], g = color[2], b = color[3], a = color[4] || "";
      result = "#" + r + r + g + g + b + b + a + a;
    }
    if (colorLength == 7 || colorLength > 8) {
      result = color;
    }
    return result;
  }
}
function hsl(hue, saturation, lightness) {
  let result;
  if (saturation == 0) {
    const partialHex = decToHex(lightness * 255);
    result = partialHex + partialHex + partialHex;
  } else {
    const m2 = lightness <= 0.5 ? lightness * (saturation + 1) : lightness + saturation - lightness * saturation, m1 = lightness * 2 - m2;
    result = hueToRgb(m1, m2, hue * 6 + 2) + hueToRgb(m1, m2, hue * 6) + hueToRgb(m1, m2, hue * 6 - 2);
  }
  return "#" + result;
}
function correctedHsl(hue, saturation, lightness) {
  const correctors = [0.55, 0.5, 0.5, 0.46, 0.6, 0.55, 0.55], corrector = correctors[hue * 6 + 0.5 | 0];
  lightness = lightness < 0.5 ? lightness * corrector * 2 : corrector + (lightness - 0.5) * (1 - corrector) * 2;
  return hsl(hue, saturation, lightness);
}
function getConfiguration(paddingOrLocalConfig, defaultPadding) {
  const configObject = typeof paddingOrLocalConfig == "object" && paddingOrLocalConfig || rootConfigurationHolder[CONFIG_PROPERTIES.MODULE] || GLOBAL[CONFIG_PROPERTIES.GLOBAL] || {}, lightnessConfig = configObject["lightness"] || {}, saturation = configObject["saturation"] || {}, colorSaturation = "color" in saturation ? saturation["color"] : saturation, grayscaleSaturation = saturation["grayscale"], backColor = configObject["backColor"], padding = configObject["padding"];
  function lightness(configName, defaultRange) {
    let range = lightnessConfig[configName];
    if (!(range && range.length > 1)) {
      range = defaultRange;
    }
    return function(value) {
      value = range[0] + value * (range[1] - range[0]);
      return value < 0 ? 0 : value > 1 ? 1 : value;
    };
  }
  function hueFunction(originalHue) {
    const hueConfig = configObject["hues"];
    let hue;
    if (hueConfig && hueConfig.length > 0) {
      hue = hueConfig[0 | 0.999 * originalHue * hueConfig.length];
    }
    return typeof hue == "number" ? (hue / 360 % 1 + 1) % 1 : originalHue;
  }
  return {
    hue: hueFunction,
    colorSaturation: typeof colorSaturation == "number" ? colorSaturation : 0.5,
    grayscaleSaturation: typeof grayscaleSaturation == "number" ? grayscaleSaturation : 0,
    colorLightness: lightness("color", [0.4, 0.8]),
    grayscaleLightness: lightness("grayscale", [0.3, 0.9]),
    backColor: parseColor(backColor),
    iconPadding: typeof paddingOrLocalConfig == "number" ? paddingOrLocalConfig : typeof padding == "number" ? padding : defaultPadding
  };
}

class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}

class Transform {
  constructor(x, y, size, rotation) {
    this._x = x;
    this._y = y;
    this._size = size;
    this._rotation = rotation;
  }
  transformIconPoint(x, y, w, h) {
    const right = this._x + this._size, bottom = this._y + this._size, rotation = this._rotation;
    return rotation === 1 ? new Point(right - y - (h || 0), this._y + x) : rotation === 2 ? new Point(right - x - (w || 0), bottom - y - (h || 0)) : rotation === 3 ? new Point(this._x + y, bottom - x - (w || 0)) : new Point(this._x + x, this._y + y);
  }
}

class Graphics {
  constructor(renderer) {
    this._renderer = renderer;
    this.currentTransform = NO_TRANSFORM;
  }
  addPolygon(points, invert) {
    const di = invert ? -2 : 2, transformedPoints = [];
    for (let i = invert ? points.length - 2 : 0;i < points.length && i >= 0; i += di) {
      transformedPoints.push(this.currentTransform.transformIconPoint(points[i], points[i + 1]));
    }
    this._renderer.addPolygon(transformedPoints);
  }
  addCircle(x, y, size, invert) {
    const p = this.currentTransform.transformIconPoint(x, y, size, size);
    this._renderer.addCircle(p, size, invert);
  }
  addRectangle(x, y, w, h, invert) {
    this.addPolygon([
      x,
      y,
      x + w,
      y,
      x + w,
      y + h,
      x,
      y + h
    ], invert);
  }
  addTriangle(x, y, w, h, r, invert) {
    const points = [
      x + w,
      y,
      x + w,
      y + h,
      x,
      y + h,
      x,
      y
    ];
    points.splice((r || 0) % 4 * 2, 2);
    this.addPolygon(points, invert);
  }
  addRhombus(x, y, w, h, invert) {
    this.addPolygon([
      x + w / 2,
      y,
      x + w,
      y + h / 2,
      x + w / 2,
      y + h,
      x,
      y + h / 2
    ], invert);
  }
}
function centerShape(index, g, cell, positionIndex) {
  index = index % 14;
  let k, m, w, h, inner, outer;
  !index ? (k = cell * 0.42, g.addPolygon([
    0,
    0,
    cell,
    0,
    cell,
    cell - k * 2,
    cell - k,
    cell,
    0,
    cell
  ])) : index == 1 ? (w = 0 | cell * 0.5, h = 0 | cell * 0.8, g.addTriangle(cell - w, 0, w, h, 2)) : index == 2 ? (w = 0 | cell / 3, g.addRectangle(w, w, cell - w, cell - w)) : index == 3 ? (inner = cell * 0.1, outer = cell < 6 ? 1 : cell < 8 ? 2 : 0 | cell * 0.25, inner = inner > 1 ? 0 | inner : inner > 0.5 ? 1 : inner, g.addRectangle(outer, outer, cell - inner - outer, cell - inner - outer)) : index == 4 ? (m = 0 | cell * 0.15, w = 0 | cell * 0.5, g.addCircle(cell - w - m, cell - w - m, w)) : index == 5 ? (inner = cell * 0.1, outer = inner * 4, outer > 3 && (outer = 0 | outer), g.addRectangle(0, 0, cell, cell), g.addPolygon([
    outer,
    outer,
    cell - inner,
    outer,
    outer + (cell - outer - inner) / 2,
    cell - inner
  ], true)) : index == 6 ? g.addPolygon([
    0,
    0,
    cell,
    0,
    cell,
    cell * 0.7,
    cell * 0.4,
    cell * 0.4,
    cell * 0.7,
    cell,
    0,
    cell
  ]) : index == 7 ? g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3) : index == 8 ? (g.addRectangle(0, 0, cell, cell / 2), g.addRectangle(0, cell / 2, cell / 2, cell / 2), g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 1)) : index == 9 ? (inner = cell * 0.14, outer = cell < 4 ? 1 : cell < 6 ? 2 : 0 | cell * 0.35, inner = cell < 8 ? inner : 0 | inner, g.addRectangle(0, 0, cell, cell), g.addRectangle(outer, outer, cell - outer - inner, cell - outer - inner, true)) : index == 10 ? (inner = cell * 0.12, outer = inner * 3, g.addRectangle(0, 0, cell, cell), g.addCircle(outer, outer, cell - inner - outer, true)) : index == 11 ? g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3) : index == 12 ? (m = cell * 0.25, g.addRectangle(0, 0, cell, cell), g.addRhombus(m, m, cell - m, cell - m, true)) : !positionIndex && (m = cell * 0.4, w = cell * 1.2, g.addCircle(m, m, w));
}
function outerShape(index, g, cell) {
  index = index % 4;
  let m;
  !index ? g.addTriangle(0, 0, cell, cell, 0) : index == 1 ? g.addTriangle(0, cell / 2, cell, cell / 2, 0) : index == 2 ? g.addRhombus(0, 0, cell, cell) : (m = cell / 6, g.addCircle(m, m, cell - 2 * m));
}
function colorTheme(hue, config) {
  hue = config.hue(hue);
  return [
    correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(0)),
    correctedHsl(hue, config.colorSaturation, config.colorLightness(0.5)),
    correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(1)),
    correctedHsl(hue, config.colorSaturation, config.colorLightness(1)),
    correctedHsl(hue, config.colorSaturation, config.colorLightness(0))
  ];
}
function iconGenerator(renderer, hash, config) {
  const parsedConfig = getConfiguration(config, 0.08);
  if (parsedConfig.backColor) {
    renderer.setBackground(parsedConfig.backColor);
  }
  let size = renderer.iconSize;
  const padding = 0.5 + size * parsedConfig.iconPadding | 0;
  size -= padding * 2;
  const graphics = new Graphics(renderer);
  const cell = 0 | size / 4;
  const x = 0 | padding + size / 2 - cell * 2;
  const y = 0 | padding + size / 2 - cell * 2;
  function renderShape(colorIndex, shapes, index2, rotationIndex, positions) {
    const shapeIndex = parseHex(hash, index2, 1);
    let r = rotationIndex ? parseHex(hash, rotationIndex, 1) : 0;
    renderer.beginShape(availableColors[selectedColorIndexes[colorIndex]]);
    for (let i = 0;i < positions.length; i++) {
      graphics.currentTransform = new Transform(x + positions[i][0] * cell, y + positions[i][1] * cell, cell, r++ % 4);
      shapes(shapeIndex, graphics, cell, i);
    }
    renderer.endShape();
  }
  const hue = parseHex(hash, -7) / 268435455, availableColors = colorTheme(hue, parsedConfig), selectedColorIndexes = [];
  let index;
  function isDuplicate(values) {
    if (values.indexOf(index) >= 0) {
      for (let i = 0;i < values.length; i++) {
        if (selectedColorIndexes.indexOf(values[i]) >= 0) {
          return true;
        }
      }
    }
  }
  for (let i = 0;i < 3; i++) {
    index = parseHex(hash, 8 + i, 1) % availableColors.length;
    if (isDuplicate([0, 4]) || isDuplicate([2, 3])) {
      index = 1;
    }
    selectedColorIndexes.push(index);
  }
  renderShape(0, outerShape, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);
  renderShape(1, outerShape, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);
  renderShape(2, centerShape, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);
  renderer.finish();
}
function sha1(message) {
  const HASH_SIZE_HALF_BYTES = 40;
  const BLOCK_SIZE_WORDS = 16;
  var i = 0, f = 0, urlEncodedMessage = encodeURI(message) + "%80", data = [], dataSize, hashBuffer = [], a = 1732584193, b = 4023233417, c = ~a, d = ~b, e = 3285377520, hash = [a, b, c, d, e], blockStartIndex = 0, hexHash = "";
  function rotl(value, shift) {
    return value << shift | value >>> 32 - shift;
  }
  for (;i < urlEncodedMessage.length; f++) {
    data[f >> 2] = data[f >> 2] | (urlEncodedMessage[i] == "%" ? parseInt(urlEncodedMessage.substring(i + 1, i += 3), 16) : urlEncodedMessage.charCodeAt(i++)) << (3 - (f & 3)) * 8;
  }
  dataSize = ((f + 7 >> 6) + 1) * BLOCK_SIZE_WORDS;
  data[dataSize - 1] = f * 8 - 8;
  for (;blockStartIndex < dataSize; blockStartIndex += BLOCK_SIZE_WORDS) {
    for (i = 0;i < 80; i++) {
      f = rotl(a, 5) + e + (i < 20 ? (b & c ^ ~b & d) + 1518500249 : i < 40 ? (b ^ c ^ d) + 1859775393 : i < 60 ? (b & c ^ b & d ^ c & d) + 2400959708 : (b ^ c ^ d) + 3395469782) + (hashBuffer[i] = i < BLOCK_SIZE_WORDS ? data[blockStartIndex + i] | 0 : rotl(hashBuffer[i - 3] ^ hashBuffer[i - 8] ^ hashBuffer[i - 14] ^ hashBuffer[i - 16], 1));
      e = d;
      d = c;
      c = rotl(b, 30);
      b = a;
      a = f;
    }
    hash[0] = a = hash[0] + a | 0;
    hash[1] = b = hash[1] + b | 0;
    hash[2] = c = hash[2] + c | 0;
    hash[3] = d = hash[3] + d | 0;
    hash[4] = e = hash[4] + e | 0;
  }
  for (i = 0;i < HASH_SIZE_HALF_BYTES; i++) {
    hexHash += (hash[i >> 3] >>> (7 - (i & 7)) * 4 & 15).toString(16);
  }
  return hexHash;
}
function isValidHash(hashCandidate) {
  return /^[0-9a-f]{11,}$/i.test(hashCandidate) && hashCandidate;
}
function computeHash(value) {
  return sha1(value == null ? "" : "" + value);
}
function svgValue(value) {
  return (value * 10 + 0.5 | 0) / 10;
}

class SvgPath {
  constructor() {
    this.dataString = "";
  }
  addPolygon(points) {
    let dataString = "";
    for (let i = 0;i < points.length; i++) {
      dataString += (i ? "L" : "M") + svgValue(points[i].x) + " " + svgValue(points[i].y);
    }
    this.dataString += dataString + "Z";
  }
  addCircle(point, diameter, counterClockwise) {
    const sweepFlag = counterClockwise ? 0 : 1, svgRadius = svgValue(diameter / 2), svgDiameter = svgValue(diameter), svgArc = "a" + svgRadius + "," + svgRadius + " 0 1," + sweepFlag + " ";
    this.dataString += "M" + svgValue(point.x) + " " + svgValue(point.y + diameter / 2) + svgArc + svgDiameter + ",0" + svgArc + -svgDiameter + ",0";
  }
}

class SvgRenderer {
  constructor(target) {
    this._path;
    this._pathsByColor = {};
    this._target = target;
    this.iconSize = target.iconSize;
  }
  setBackground(fillColor) {
    const match = /^(#......)(..)?/.exec(fillColor), opacity = match[2] ? parseHex(match[2], 0) / 255 : 1;
    this._target.setBackground(match[1], opacity);
  }
  beginShape(color) {
    this._path = this._pathsByColor[color] || (this._pathsByColor[color] = new SvgPath);
  }
  endShape() {}
  addPolygon(points) {
    this._path.addPolygon(points);
  }
  addCircle(point, diameter, counterClockwise) {
    this._path.addCircle(point, diameter, counterClockwise);
  }
  finish() {
    const pathsByColor = this._pathsByColor;
    for (let color in pathsByColor) {
      if (pathsByColor.hasOwnProperty(color)) {
        this._target.appendPath(color, pathsByColor[color].dataString);
      }
    }
  }
}

class SvgWriter {
  constructor(iconSize) {
    this.iconSize = iconSize;
    this._s = '<svg xmlns="' + SVG_CONSTANTS.XMLNS + '" width="' + iconSize + '" height="' + iconSize + '" viewBox="0 0 ' + iconSize + " " + iconSize + '">';
  }
  setBackground(fillColor, opacity) {
    if (opacity) {
      this._s += '<rect width="100%" height="100%" fill="' + fillColor + '" opacity="' + opacity.toFixed(2) + '"/>';
    }
  }
  appendPath(color, dataString) {
    this._s += '<path fill="' + color + '" d="' + dataString + '"/>';
  }
  toString() {
    return this._s + "</svg>";
  }
}
function toSvg(hashOrValue, size, config) {
  const writer = new SvgWriter(size);
  iconGenerator(new SvgRenderer(writer), isValidHash(hashOrValue) || computeHash(hashOrValue), config);
  return writer.toString();
}
var import_canvas_renderer, GLOBAL, CONFIG_PROPERTIES, rootConfigurationHolder, NO_TRANSFORM, SVG_CONSTANTS;
var init_jdenticon_node = __esm(() => {
  import_canvas_renderer = __toESM(require_canvas_renderer(), 1);
  GLOBAL = typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : typeof global !== "undefined" ? global : {};
  CONFIG_PROPERTIES = {
    GLOBAL: "jdenticon_config",
    MODULE: "config"
  };
  rootConfigurationHolder = {};
  NO_TRANSFORM = new Transform(0, 0, 0, 0);
  typeof document !== "undefined" && document.querySelectorAll.bind(document);
  SVG_CONSTANTS = {
    XMLNS: "http://www.w3.org/2000/svg",
    WIDTH: "width",
    HEIGHT: "height"
  };
  if (typeof process === "undefined" && typeof window !== "undefined" && typeof document !== "undefined") {
    console.warn("Jdenticon: 'dist/jdenticon-node.mjs' is only intended for Node.js environments and will increase your " + "bundle size when included in browser bundles. If you want to run Jdenticon in the browser, please add a " + "reference to 'dist/jdenticon.js' or 'dist/jdenticon.min.js' instead.");
  }
});

// node_modules/ethers/lib.esm/_version.js
var version = "6.15.0";

// node_modules/ethers/lib.esm/utils/properties.js
function checkType(value, type, name) {
  const types = type.split("|").map((t) => t.trim());
  for (let i = 0;i < types.length; i++) {
    switch (type) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof value === type) {
          return;
        }
    }
  }
  const error = new Error(`invalid value for type ${type}`);
  error.code = "INVALID_ARGUMENT";
  error.argument = `value.${name}`;
  error.value = value;
  throw error;
}
async function resolveProperties(value) {
  const keys = Object.keys(value);
  const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
  return results.reduce((accum, v, index) => {
    accum[keys[index]] = v;
    return accum;
  }, {});
}
function defineProperties(target, values, types) {
  for (let key in values) {
    let value = values[key];
    const type = types ? types[key] : null;
    if (type) {
      checkType(value, type, key);
    }
    Object.defineProperty(target, key, { enumerable: true, value, writable: false });
  }
}

// node_modules/ethers/lib.esm/utils/errors.js
function stringify(value, seen) {
  if (value == null) {
    return "null";
  }
  if (seen == null) {
    seen = new Set;
  }
  if (typeof value === "object") {
    if (seen.has(value)) {
      return "[Circular]";
    }
    seen.add(value);
  }
  if (Array.isArray(value)) {
    return "[ " + value.map((v) => stringify(v, seen)).join(", ") + " ]";
  }
  if (value instanceof Uint8Array) {
    const HEX = "0123456789abcdef";
    let result = "0x";
    for (let i = 0;i < value.length; i++) {
      result += HEX[value[i] >> 4];
      result += HEX[value[i] & 15];
    }
    return result;
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return stringify(value.toJSON(), seen);
  }
  switch (typeof value) {
    case "boolean":
    case "number":
    case "symbol":
      return value.toString();
    case "bigint":
      return BigInt(value).toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{ " + keys.map((k) => `${stringify(k, seen)}: ${stringify(value[k], seen)}`).join(", ") + " }";
    }
  }
  return `[ COULD NOT SERIALIZE ]`;
}
function isError(error, code) {
  return error && error.code === code;
}
function isCallException(error) {
  return isError(error, "CALL_EXCEPTION");
}
function makeError(message, code, info) {
  let shortMessage = message;
  {
    const details = [];
    if (info) {
      if ("message" in info || "code" in info || "name" in info) {
        throw new Error(`value will overwrite populated values: ${stringify(info)}`);
      }
      for (const key in info) {
        if (key === "shortMessage") {
          continue;
        }
        const value = info[key];
        details.push(key + "=" + stringify(value));
      }
    }
    details.push(`code=${code}`);
    details.push(`version=${version}`);
    if (details.length) {
      message += " (" + details.join(", ") + ")";
    }
  }
  let error;
  switch (code) {
    case "INVALID_ARGUMENT":
      error = new TypeError(message);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      error = new RangeError(message);
      break;
    default:
      error = new Error(message);
  }
  defineProperties(error, { code });
  if (info) {
    Object.assign(error, info);
  }
  if (error.shortMessage == null) {
    defineProperties(error, { shortMessage });
  }
  return error;
}
function assert(check, message, code, info) {
  if (!check) {
    throw makeError(message, code, info);
  }
}
function assertArgument(check, message, name, value) {
  assert(check, message, "INVALID_ARGUMENT", { argument: name, value });
}
function assertArgumentCount(count, expectedCount, message) {
  if (message == null) {
    message = "";
  }
  if (message) {
    message = ": " + message;
  }
  assert(count >= expectedCount, "missing argument" + message, "MISSING_ARGUMENT", {
    count,
    expectedCount
  });
  assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
    count,
    expectedCount
  });
}
function assertNormalize(form) {
  assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form }
  });
}
function assertPrivate(givenGuard, guard, className) {
  if (className == null) {
    className = "";
  }
  if (givenGuard !== guard) {
    let method = className, operation = "new";
    if (className) {
      method += ".";
      operation += " " + className;
    }
    assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
      operation
    });
  }
}
var _normalizeForms;
var init_errors = __esm(() => {
  _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
    try {
      if ("test".normalize(form) !== "test") {
        throw new Error("bad");
      }
      if (form === "NFD") {
        const check = String.fromCharCode(233).normalize("NFD");
        const expected = String.fromCharCode(101, 769);
        if (check !== expected) {
          throw new Error("broken");
        }
      }
      accum.push(form);
    } catch (error) {}
    return accum;
  }, []);
});

// node_modules/ethers/lib.esm/utils/data.js
function _getBytes(value, name, copy) {
  if (value instanceof Uint8Array) {
    if (copy) {
      return new Uint8Array(value);
    }
    return value;
  }
  if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
    const result = new Uint8Array((value.length - 2) / 2);
    let offset = 2;
    for (let i = 0;i < result.length; i++) {
      result[i] = parseInt(value.substring(offset, offset + 2), 16);
      offset += 2;
    }
    return result;
  }
  assertArgument(false, "invalid BytesLike value", name || "value", value);
}
function getBytes(value, name) {
  return _getBytes(value, name, false);
}
function getBytesCopy(value, name) {
  return _getBytes(value, name, true);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (typeof length === "number" && value.length !== 2 + 2 * length) {
    return false;
  }
  if (length === true && value.length % 2 !== 0) {
    return false;
  }
  return true;
}
function isBytesLike(value) {
  return isHexString(value, true) || value instanceof Uint8Array;
}
function hexlify(data) {
  const bytes = getBytes(data);
  let result = "0x";
  for (let i = 0;i < bytes.length; i++) {
    const v = bytes[i];
    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
  }
  return result;
}
function concat(datas) {
  return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
}
function dataLength(data) {
  if (isHexString(data, true)) {
    return (data.length - 2) / 2;
  }
  return getBytes(data).length;
}
function dataSlice(data, start, end) {
  const bytes = getBytes(data);
  if (end != null && end > bytes.length) {
    assert(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
      buffer: bytes,
      length: bytes.length,
      offset: end
    });
  }
  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
}
function stripZerosLeft(data) {
  let bytes = hexlify(data).substring(2);
  while (bytes.startsWith("00")) {
    bytes = bytes.substring(2);
  }
  return "0x" + bytes;
}
function zeroPad(data, length, left) {
  const bytes = getBytes(data);
  assert(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(bytes),
    length,
    offset: length + 1
  });
  const result = new Uint8Array(length);
  result.fill(0);
  if (left) {
    result.set(bytes, length - bytes.length);
  } else {
    result.set(bytes, 0);
  }
  return hexlify(result);
}
function zeroPadValue(data, length) {
  return zeroPad(data, length, true);
}
function zeroPadBytes(data, length) {
  return zeroPad(data, length, false);
}
var HexCharacters = "0123456789abcdef";
var init_data = __esm(() => {
  init_errors();
});

// node_modules/ethers/lib.esm/utils/maths.js
function fromTwos(_value, _width) {
  const value = getUint(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  assert(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: _value
  });
  if (value >> width - BN_1) {
    const mask = (BN_1 << width) - BN_1;
    return -((~value & mask) + BN_1);
  }
  return value;
}
function toTwos(_value, _width) {
  let value = getBigInt(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  const limit = BN_1 << width - BN_1;
  if (value < BN_0) {
    value = -value;
    assert(value <= limit, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
    const mask = (BN_1 << width) - BN_1;
    return (~value & mask) + BN_1;
  } else {
    assert(value < limit, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
  }
  return value;
}
function mask(_value, _bits) {
  const value = getUint(_value, "value");
  const bits = BigInt(getNumber(_bits, "bits"));
  return value & (BN_1 << bits) - BN_1;
}
function getBigInt(value, name) {
  switch (typeof value) {
    case "bigint":
      return value;
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return BigInt(value);
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        if (value[0] === "-" && value[1] !== "-") {
          return -BigInt(value.substring(1));
        }
        return BigInt(value);
      } catch (e) {
        assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid BigNumberish value", name || "value", value);
}
function getUint(value, name) {
  const result = getBigInt(value, name);
  assert(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value
  });
  return result;
}
function toBigInt(value) {
  if (value instanceof Uint8Array) {
    let result = "0x0";
    for (const v of value) {
      result += Nibbles[v >> 4];
      result += Nibbles[v & 15];
    }
    return BigInt(result);
  }
  return getBigInt(value);
}
function getNumber(value, name) {
  switch (typeof value) {
    case "bigint":
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return Number(value);
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return value;
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        return getNumber(BigInt(value), name);
      } catch (e) {
        assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid numeric value", name || "value", value);
}
function toNumber(value) {
  return getNumber(toBigInt(value));
}
function toBeHex(_value, _width) {
  const value = getUint(_value, "value");
  let result = value.toString(16);
  if (_width == null) {
    if (result.length % 2) {
      result = "0" + result;
    }
  } else {
    const width = getNumber(_width, "width");
    assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: _value
    });
    while (result.length < width * 2) {
      result = "0" + result;
    }
  }
  return "0x" + result;
}
function toBeArray(_value) {
  const value = getUint(_value, "value");
  if (value === BN_0) {
    return new Uint8Array([]);
  }
  let hex = value.toString(16);
  if (hex.length % 2) {
    hex = "0" + hex;
  }
  const result = new Uint8Array(hex.length / 2);
  for (let i = 0;i < result.length; i++) {
    const offset = i * 2;
    result[i] = parseInt(hex.substring(offset, offset + 2), 16);
  }
  return result;
}
function toQuantity(value) {
  let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);
  while (result.startsWith("0")) {
    result = result.substring(1);
  }
  if (result === "") {
    result = "0";
  }
  return "0x" + result;
}
var BN_0, BN_1, maxValue = 9007199254740991, Nibbles = "0123456789abcdef";
var init_maths = __esm(() => {
  init_data();
  init_errors();
  BN_0 = BigInt(0);
  BN_1 = BigInt(1);
});

// node_modules/ethers/lib.esm/utils/base58.js
function getAlpha(letter) {
  if (Lookup == null) {
    Lookup = {};
    for (let i = 0;i < Alphabet.length; i++) {
      Lookup[Alphabet[i]] = BigInt(i);
    }
  }
  const result = Lookup[letter];
  assertArgument(result != null, `invalid base58 value`, "letter", letter);
  return result;
}
function encodeBase58(_value) {
  const bytes = getBytes(_value);
  let value = toBigInt(bytes);
  let result = "";
  while (value) {
    result = Alphabet[Number(value % BN_58)] + result;
    value /= BN_58;
  }
  for (let i = 0;i < bytes.length; i++) {
    if (bytes[i]) {
      break;
    }
    result = Alphabet[0] + result;
  }
  return result;
}
function decodeBase58(value) {
  let result = BN_02;
  for (let i = 0;i < value.length; i++) {
    result *= BN_58;
    result += getAlpha(value[i]);
  }
  return result;
}
var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", Lookup = null, BN_02, BN_58;
var init_base58 = __esm(() => {
  init_data();
  init_errors();
  init_maths();
  BN_02 = BigInt(0);
  BN_58 = BigInt(58);
});

// node_modules/ethers/lib.esm/utils/base64.js
function decodeBase64(value) {
  return getBytesCopy(Buffer.from(value, "base64"));
}
function encodeBase64(data) {
  return Buffer.from(getBytes(data)).toString("base64");
}
var init_base64 = __esm(() => {
  init_data();
});

// node_modules/ethers/lib.esm/utils/events.js
class EventPayload {
  filter;
  emitter;
  #listener;
  constructor(emitter, listener, filter) {
    this.#listener = listener;
    defineProperties(this, { emitter, filter });
  }
  async removeListener() {
    if (this.#listener == null) {
      return;
    }
    await this.emitter.off(this.filter, this.#listener);
  }
}
var init_events = () => {};

// node_modules/ethers/lib.esm/utils/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
    let i = 0;
    for (let o = offset + 1;o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === "OVERRUN") {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === "OVERLONG") {
    assertArgument(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
function getUtf8CodePoints(_bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  const bytes = getBytes(_bytes, "bytes");
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
      } else {
        i += onError("BAD_PREFIX", i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError("OVERRUN", i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0;j < extraLength; j++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError("MISSING_CONTINUE", i, bytes, result);
        res = null;
        break;
      }
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form) {
  assertArgument(typeof str === "string", "invalid string value", "str", str);
  if (form != null) {
    assertNormalize(form);
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0;i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      assertArgument(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return new Uint8Array(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str, form) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}
var Utf8ErrorFuncs;
var init_utf8 = __esm(() => {
  init_data();
  init_errors();
  Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
  });
});

// node_modules/ethers/lib.esm/utils/geturl.js
import http from "http";
import https from "https";
import { gunzipSync } from "zlib";
function createGetUrl(options) {
  async function getUrl(req, signal) {
    assert(signal == null || !signal.cancelled, "request cancelled before sending", "CANCELLED");
    const protocol = req.url.split(":")[0].toLowerCase();
    assert(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
      info: { protocol },
      operation: "request"
    });
    assert(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    const method = req.method;
    const headers = Object.assign({}, req.headers);
    const reqOptions = { method, headers };
    if (options) {
      if (options.agent) {
        reqOptions.agent = options.agent;
      }
    }
    let abort = null;
    try {
      abort = new AbortController;
      reqOptions.abort = abort.signal;
    } catch (e) {
      console.log(e);
    }
    const request = (protocol === "http" ? http : https).request(req.url, reqOptions);
    request.setTimeout(req.timeout);
    const body = req.body;
    if (body) {
      request.write(Buffer.from(body));
    }
    request.end();
    return new Promise((resolve, reject) => {
      if (signal) {
        signal.addListener(() => {
          if (abort) {
            abort.abort();
          }
          reject(makeError("request cancelled", "CANCELLED"));
        });
      }
      request.on("timeout", () => {
        reject(makeError("request timeout", "TIMEOUT"));
      });
      request.once("response", (resp) => {
        const statusCode = resp.statusCode || 0;
        const statusMessage = resp.statusMessage || "";
        const headers2 = Object.keys(resp.headers || {}).reduce((accum, name) => {
          let value = resp.headers[name] || "";
          if (Array.isArray(value)) {
            value = value.join(", ");
          }
          accum[name] = value;
          return accum;
        }, {});
        let body2 = null;
        resp.on("data", (chunk) => {
          if (signal) {
            try {
              signal.checkSignal();
            } catch (error) {
              return reject(error);
            }
          }
          if (body2 == null) {
            body2 = chunk;
          } else {
            const newBody = new Uint8Array(body2.length + chunk.length);
            newBody.set(body2, 0);
            newBody.set(chunk, body2.length);
            body2 = newBody;
          }
        });
        resp.on("end", () => {
          try {
            if (headers2["content-encoding"] === "gzip" && body2) {
              body2 = getBytes(gunzipSync(body2));
            }
            resolve({ statusCode, statusMessage, headers: headers2, body: body2 });
          } catch (error) {
            reject(makeError("bad response data", "SERVER_ERROR", {
              request: req,
              info: { response: resp, error }
            }));
          }
        });
        resp.on("error", (error) => {
          error.response = { statusCode, statusMessage, headers: headers2, body: body2 };
          reject(error);
        });
      });
      request.on("error", (error) => {
        reject(error);
      });
    });
  }
  return getUrl;
}
var defaultGetUrl;
var init_geturl = __esm(() => {
  init_errors();
  init_data();
  defaultGetUrl = createGetUrl({});
});

// node_modules/ethers/lib.esm/utils/fetch.js
async function dataGatewayFunc(url, signal) {
  try {
    const match = url.match(reData);
    if (!match) {
      throw new Error("invalid data");
    }
    return new FetchResponse(200, "OK", {
      "content-type": match[1] || "text/plain"
    }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));
  } catch (error) {
    return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
  }
}
function getIpfsGatewayFunc(baseUrl) {
  async function gatewayIpfs(url, signal) {
    try {
      const match = url.match(reIpfs);
      if (!match) {
        throw new Error("invalid link");
      }
      return new FetchRequest(`${baseUrl}${match[2]}`);
    } catch (error) {
      return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
    }
  }
  return gatewayIpfs;
}

class FetchCancelSignal {
  #listeners;
  #cancelled;
  constructor(request) {
    this.#listeners = [];
    this.#cancelled = false;
    fetchSignals.set(request, () => {
      if (this.#cancelled) {
        return;
      }
      this.#cancelled = true;
      for (const listener of this.#listeners) {
        setTimeout(() => {
          listener();
        }, 0);
      }
      this.#listeners = [];
    });
  }
  addListener(listener) {
    assert(!this.#cancelled, "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    });
    this.#listeners.push(listener);
  }
  get cancelled() {
    return this.#cancelled;
  }
  checkSignal() {
    assert(!this.cancelled, "cancelled", "CANCELLED", {});
  }
}
function checkSignal(signal) {
  if (signal == null) {
    throw new Error("missing signal; should not happen");
  }
  signal.checkSignal();
  return signal;
}
function getTime() {
  return new Date().getTime();
}
function unpercent(value) {
  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
    return String.fromCharCode(parseInt(code, 16));
  }));
}
function wait(delay) {
  return new Promise((resolve) => setTimeout(resolve, delay));
}
var MAX_ATTEMPTS = 12, SLOT_INTERVAL = 250, defaultGetUrlFunc, reData, reIpfs, locked = false, Gateways, fetchSignals, FetchRequest, FetchResponse;
var init_fetch = __esm(() => {
  init_base64();
  init_data();
  init_errors();
  init_utf8();
  init_geturl();
  defaultGetUrlFunc = createGetUrl();
  reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
  reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
  Gateways = {
    data: dataGatewayFunc,
    ipfs: getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
  };
  fetchSignals = new WeakMap;
  FetchRequest = class FetchRequest {
    #allowInsecure;
    #gzip;
    #headers;
    #method;
    #timeout;
    #url;
    #body;
    #bodyType;
    #creds;
    #preflight;
    #process;
    #retry;
    #signal;
    #throttle;
    #getUrlFunc;
    get url() {
      return this.#url;
    }
    set url(url) {
      this.#url = String(url);
    }
    get body() {
      if (this.#body == null) {
        return null;
      }
      return new Uint8Array(this.#body);
    }
    set body(body) {
      if (body == null) {
        this.#body = undefined;
        this.#bodyType = undefined;
      } else if (typeof body === "string") {
        this.#body = toUtf8Bytes(body);
        this.#bodyType = "text/plain";
      } else if (body instanceof Uint8Array) {
        this.#body = body;
        this.#bodyType = "application/octet-stream";
      } else if (typeof body === "object") {
        this.#body = toUtf8Bytes(JSON.stringify(body));
        this.#bodyType = "application/json";
      } else {
        throw new Error("invalid body");
      }
    }
    hasBody() {
      return this.#body != null;
    }
    get method() {
      if (this.#method) {
        return this.#method;
      }
      if (this.hasBody()) {
        return "POST";
      }
      return "GET";
    }
    set method(method) {
      if (method == null) {
        method = "";
      }
      this.#method = String(method).toUpperCase();
    }
    get headers() {
      const headers = Object.assign({}, this.#headers);
      if (this.#creds) {
        headers["authorization"] = `Basic ${encodeBase64(toUtf8Bytes(this.#creds))}`;
      }
      if (this.allowGzip) {
        headers["accept-encoding"] = "gzip";
      }
      if (headers["content-type"] == null && this.#bodyType) {
        headers["content-type"] = this.#bodyType;
      }
      if (this.body) {
        headers["content-length"] = String(this.body.length);
      }
      return headers;
    }
    getHeader(key) {
      return this.headers[key.toLowerCase()];
    }
    setHeader(key, value) {
      this.#headers[String(key).toLowerCase()] = String(value);
    }
    clearHeaders() {
      this.#headers = {};
    }
    [Symbol.iterator]() {
      const headers = this.headers;
      const keys = Object.keys(headers);
      let index = 0;
      return {
        next: () => {
          if (index < keys.length) {
            const key = keys[index++];
            return {
              value: [key, headers[key]],
              done: false
            };
          }
          return { value: undefined, done: true };
        }
      };
    }
    get credentials() {
      return this.#creds || null;
    }
    setCredentials(username, password) {
      assertArgument(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
      this.#creds = `${username}:${password}`;
    }
    get allowGzip() {
      return this.#gzip;
    }
    set allowGzip(value) {
      this.#gzip = !!value;
    }
    get allowInsecureAuthentication() {
      return !!this.#allowInsecure;
    }
    set allowInsecureAuthentication(value) {
      this.#allowInsecure = !!value;
    }
    get timeout() {
      return this.#timeout;
    }
    set timeout(timeout) {
      assertArgument(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
      this.#timeout = timeout;
    }
    get preflightFunc() {
      return this.#preflight || null;
    }
    set preflightFunc(preflight) {
      this.#preflight = preflight;
    }
    get processFunc() {
      return this.#process || null;
    }
    set processFunc(process2) {
      this.#process = process2;
    }
    get retryFunc() {
      return this.#retry || null;
    }
    set retryFunc(retry) {
      this.#retry = retry;
    }
    get getUrlFunc() {
      return this.#getUrlFunc || defaultGetUrlFunc;
    }
    set getUrlFunc(value) {
      this.#getUrlFunc = value;
    }
    constructor(url) {
      this.#url = String(url);
      this.#allowInsecure = false;
      this.#gzip = true;
      this.#headers = {};
      this.#method = "";
      this.#timeout = 300000;
      this.#throttle = {
        slotInterval: SLOT_INTERVAL,
        maxAttempts: MAX_ATTEMPTS
      };
      this.#getUrlFunc = null;
    }
    toString() {
      return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? hexlify(this.#body) : "null"}>`;
    }
    setThrottleParams(params) {
      if (params.slotInterval != null) {
        this.#throttle.slotInterval = params.slotInterval;
      }
      if (params.maxAttempts != null) {
        this.#throttle.maxAttempts = params.maxAttempts;
      }
    }
    async#send(attempt, expires, delay, _request, _response) {
      if (attempt >= this.#throttle.maxAttempts) {
        return _response.makeServerError("exceeded maximum retry limit");
      }
      assert(getTime() <= expires, "timeout", "TIMEOUT", {
        operation: "request.send",
        reason: "timeout",
        request: _request
      });
      if (delay > 0) {
        await wait(delay);
      }
      let req = this.clone();
      const scheme = (req.url.split(":")[0] || "").toLowerCase();
      if (scheme in Gateways) {
        const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));
        if (result instanceof FetchResponse) {
          let response2 = result;
          if (this.processFunc) {
            checkSignal(_request.#signal);
            try {
              response2 = await this.processFunc(req, response2);
            } catch (error) {
              if (error.throttle == null || typeof error.stall !== "number") {
                response2.makeServerError("error in post-processing function", error).assertOk();
              }
            }
          }
          return response2;
        }
        req = result;
      }
      if (this.preflightFunc) {
        req = await this.preflightFunc(req);
      }
      const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));
      let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);
      if (response.statusCode === 301 || response.statusCode === 302) {
        try {
          const location = response.headers.location || "";
          return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);
        } catch (error) {}
        return response;
      } else if (response.statusCode === 429) {
        if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
          const retryAfter = response.headers["retry-after"];
          let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
            delay2 = parseInt(retryAfter);
          }
          return req.clone().#send(attempt + 1, expires, delay2, _request, response);
        }
      }
      if (this.processFunc) {
        checkSignal(_request.#signal);
        try {
          response = await this.processFunc(req, response);
        } catch (error) {
          if (error.throttle == null || typeof error.stall !== "number") {
            response.makeServerError("error in post-processing function", error).assertOk();
          }
          let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          if (error.stall >= 0) {
            delay2 = error.stall;
          }
          return req.clone().#send(attempt + 1, expires, delay2, _request, response);
        }
      }
      return response;
    }
    send() {
      assert(this.#signal == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
      this.#signal = new FetchCancelSignal(this);
      return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
    }
    cancel() {
      assert(this.#signal != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
      const signal = fetchSignals.get(this);
      if (!signal) {
        throw new Error("missing signal; should not happen");
      }
      signal();
    }
    redirect(location) {
      const current = this.url.split(":")[0].toLowerCase();
      const target = location.split(":")[0].toLowerCase();
      assert(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
        operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
      });
      const req = new FetchRequest(location);
      req.method = "GET";
      req.allowGzip = this.allowGzip;
      req.timeout = this.timeout;
      req.#headers = Object.assign({}, this.#headers);
      if (this.#body) {
        req.#body = new Uint8Array(this.#body);
      }
      req.#bodyType = this.#bodyType;
      return req;
    }
    clone() {
      const clone = new FetchRequest(this.url);
      clone.#method = this.#method;
      if (this.#body) {
        clone.#body = this.#body;
      }
      clone.#bodyType = this.#bodyType;
      clone.#headers = Object.assign({}, this.#headers);
      clone.#creds = this.#creds;
      if (this.allowGzip) {
        clone.allowGzip = true;
      }
      clone.timeout = this.timeout;
      if (this.allowInsecureAuthentication) {
        clone.allowInsecureAuthentication = true;
      }
      clone.#preflight = this.#preflight;
      clone.#process = this.#process;
      clone.#retry = this.#retry;
      clone.#throttle = Object.assign({}, this.#throttle);
      clone.#getUrlFunc = this.#getUrlFunc;
      return clone;
    }
    static lockConfig() {
      locked = true;
    }
    static getGateway(scheme) {
      return Gateways[scheme.toLowerCase()] || null;
    }
    static registerGateway(scheme, func) {
      scheme = scheme.toLowerCase();
      if (scheme === "http" || scheme === "https") {
        throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
      }
      if (locked) {
        throw new Error("gateways locked");
      }
      Gateways[scheme] = func;
    }
    static registerGetUrl(getUrl) {
      if (locked) {
        throw new Error("gateways locked");
      }
      defaultGetUrlFunc = getUrl;
    }
    static createGetUrlFunc(options) {
      return createGetUrl(options);
    }
    static createDataGateway() {
      return dataGatewayFunc;
    }
    static createIpfsGatewayFunc(baseUrl) {
      return getIpfsGatewayFunc(baseUrl);
    }
  };
  FetchResponse = class FetchResponse {
    #statusCode;
    #statusMessage;
    #headers;
    #body;
    #request;
    #error;
    toString() {
      return `<FetchResponse status=${this.statusCode} body=${this.#body ? hexlify(this.#body) : "null"}>`;
    }
    get statusCode() {
      return this.#statusCode;
    }
    get statusMessage() {
      return this.#statusMessage;
    }
    get headers() {
      return Object.assign({}, this.#headers);
    }
    get body() {
      return this.#body == null ? null : new Uint8Array(this.#body);
    }
    get bodyText() {
      try {
        return this.#body == null ? "" : toUtf8String(this.#body);
      } catch (error) {
        assert(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
          operation: "bodyText",
          info: { response: this }
        });
      }
    }
    get bodyJson() {
      try {
        return JSON.parse(this.bodyText);
      } catch (error) {
        assert(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
          operation: "bodyJson",
          info: { response: this }
        });
      }
    }
    [Symbol.iterator]() {
      const headers = this.headers;
      const keys = Object.keys(headers);
      let index = 0;
      return {
        next: () => {
          if (index < keys.length) {
            const key = keys[index++];
            return {
              value: [key, headers[key]],
              done: false
            };
          }
          return { value: undefined, done: true };
        }
      };
    }
    constructor(statusCode, statusMessage, headers, body, request) {
      this.#statusCode = statusCode;
      this.#statusMessage = statusMessage;
      this.#headers = Object.keys(headers).reduce((accum, k) => {
        accum[k.toLowerCase()] = String(headers[k]);
        return accum;
      }, {});
      this.#body = body == null ? null : new Uint8Array(body);
      this.#request = request || null;
      this.#error = { message: "" };
    }
    makeServerError(message, error) {
      let statusMessage;
      if (!message) {
        message = `${this.statusCode} ${this.statusMessage}`;
        statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
      } else {
        statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
      }
      const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);
      response.#error = { message, error };
      return response;
    }
    throwThrottleError(message, stall) {
      if (stall == null) {
        stall = -1;
      } else {
        assertArgument(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
      }
      const error = new Error(message || "throttling requests");
      defineProperties(error, { stall, throttle: true });
      throw error;
    }
    getHeader(key) {
      return this.headers[key.toLowerCase()];
    }
    hasBody() {
      return this.#body != null;
    }
    get request() {
      return this.#request;
    }
    ok() {
      return this.#error.message === "" && this.statusCode >= 200 && this.statusCode < 300;
    }
    assertOk() {
      if (this.ok()) {
        return;
      }
      let { message, error } = this.#error;
      if (message === "") {
        message = `server response ${this.statusCode} ${this.statusMessage}`;
      }
      let requestUrl = null;
      if (this.request) {
        requestUrl = this.request.url;
      }
      let responseBody = null;
      try {
        if (this.#body) {
          responseBody = toUtf8String(this.#body);
        }
      } catch (e) {}
      assert(false, message, "SERVER_ERROR", {
        request: this.request || "unknown request",
        response: this,
        error,
        info: {
          requestUrl,
          responseBody,
          responseStatus: `${this.statusCode} ${this.statusMessage}`
        }
      });
    }
  };
});

// node_modules/ethers/lib.esm/utils/fixednumber.js
function getTens(decimals) {
  let result = Zeros;
  while (result.length < decimals) {
    result += result;
  }
  return BigInt("1" + result.substring(0, decimals));
}
function checkValue(val, format, safeOp) {
  const width = BigInt(format.width);
  if (format.signed) {
    const limit = BN_12 << width - BN_12;
    assert(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
      operation: safeOp,
      fault: "overflow",
      value: val
    });
    if (val > BN_03) {
      val = fromTwos(mask(val, width), width);
    } else {
      val = -fromTwos(mask(-val, width), width);
    }
  } else {
    const limit = BN_12 << width;
    assert(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
      operation: safeOp,
      fault: "overflow",
      value: val
    });
    val = (val % limit + limit) % limit & limit - BN_12;
  }
  return val;
}
function getFormat(value) {
  if (typeof value === "number") {
    value = `fixed128x${value}`;
  }
  let signed = true;
  let width = 128;
  let decimals = 18;
  if (typeof value === "string") {
    if (value === "fixed") {} else if (value === "ufixed") {
      signed = false;
    } else {
      const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
      assertArgument(match, "invalid fixed format", "format", value);
      signed = match[1] !== "u";
      width = parseInt(match[2]);
      decimals = parseInt(match[3]);
    }
  } else if (value) {
    const v = value;
    const check = (key, type, defaultValue) => {
      if (v[key] == null) {
        return defaultValue;
      }
      assertArgument(typeof v[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
      return v[key];
    };
    signed = check("signed", "boolean", signed);
    width = check("width", "number", width);
    decimals = check("decimals", "number", decimals);
  }
  assertArgument(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
  assertArgument(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
  const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
  return { signed, width, decimals, name };
}
function toString(val, decimals) {
  let negative = "";
  if (val < BN_03) {
    negative = "-";
    val *= BN_N1;
  }
  let str = val.toString();
  if (decimals === 0) {
    return negative + str;
  }
  while (str.length <= decimals) {
    str = Zeros + str;
  }
  const index = str.length - decimals;
  str = str.substring(0, index) + "." + str.substring(index);
  while (str[0] === "0" && str[1] !== ".") {
    str = str.substring(1);
  }
  while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
    str = str.substring(0, str.length - 1);
  }
  return negative + str;
}

class FixedNumber {
  format;
  #format;
  #val;
  #tens;
  _value;
  constructor(guard, value, format) {
    assertPrivate(guard, _guard, "FixedNumber");
    this.#val = value;
    this.#format = format;
    const _value = toString(value, format.decimals);
    defineProperties(this, { format: format.name, _value });
    this.#tens = getTens(format.decimals);
  }
  get signed() {
    return this.#format.signed;
  }
  get width() {
    return this.#format.width;
  }
  get decimals() {
    return this.#format.decimals;
  }
  get value() {
    return this.#val;
  }
  #checkFormat(other) {
    assertArgument(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
  }
  #checkValue(val, safeOp) {
    val = checkValue(val, this.#format, safeOp);
    return new FixedNumber(_guard, val, this.#format);
  }
  #add(o, safeOp) {
    this.#checkFormat(o);
    return this.#checkValue(this.#val + o.#val, safeOp);
  }
  addUnsafe(other) {
    return this.#add(other);
  }
  add(other) {
    return this.#add(other, "add");
  }
  #sub(o, safeOp) {
    this.#checkFormat(o);
    return this.#checkValue(this.#val - o.#val, safeOp);
  }
  subUnsafe(other) {
    return this.#sub(other);
  }
  sub(other) {
    return this.#sub(other, "sub");
  }
  #mul(o, safeOp) {
    this.#checkFormat(o);
    return this.#checkValue(this.#val * o.#val / this.#tens, safeOp);
  }
  mulUnsafe(other) {
    return this.#mul(other);
  }
  mul(other) {
    return this.#mul(other, "mul");
  }
  mulSignal(other) {
    this.#checkFormat(other);
    const value = this.#val * other.#val;
    assert(value % this.#tens === BN_03, "precision lost during signalling mul", "NUMERIC_FAULT", {
      operation: "mulSignal",
      fault: "underflow",
      value: this
    });
    return this.#checkValue(value / this.#tens, "mulSignal");
  }
  #div(o, safeOp) {
    assert(o.#val !== BN_03, "division by zero", "NUMERIC_FAULT", {
      operation: "div",
      fault: "divide-by-zero",
      value: this
    });
    this.#checkFormat(o);
    return this.#checkValue(this.#val * this.#tens / o.#val, safeOp);
  }
  divUnsafe(other) {
    return this.#div(other);
  }
  div(other) {
    return this.#div(other, "div");
  }
  divSignal(other) {
    assert(other.#val !== BN_03, "division by zero", "NUMERIC_FAULT", {
      operation: "div",
      fault: "divide-by-zero",
      value: this
    });
    this.#checkFormat(other);
    const value = this.#val * this.#tens;
    assert(value % other.#val === BN_03, "precision lost during signalling div", "NUMERIC_FAULT", {
      operation: "divSignal",
      fault: "underflow",
      value: this
    });
    return this.#checkValue(value / other.#val, "divSignal");
  }
  cmp(other) {
    let a = this.value, b = other.value;
    const delta = this.decimals - other.decimals;
    if (delta > 0) {
      b *= getTens(delta);
    } else if (delta < 0) {
      a *= getTens(-delta);
    }
    if (a < b) {
      return -1;
    }
    if (a > b) {
      return 1;
    }
    return 0;
  }
  eq(other) {
    return this.cmp(other) === 0;
  }
  lt(other) {
    return this.cmp(other) < 0;
  }
  lte(other) {
    return this.cmp(other) <= 0;
  }
  gt(other) {
    return this.cmp(other) > 0;
  }
  gte(other) {
    return this.cmp(other) >= 0;
  }
  floor() {
    let val = this.#val;
    if (this.#val < BN_03) {
      val -= this.#tens - BN_12;
    }
    val = this.#val / this.#tens * this.#tens;
    return this.#checkValue(val, "floor");
  }
  ceiling() {
    let val = this.#val;
    if (this.#val > BN_03) {
      val += this.#tens - BN_12;
    }
    val = this.#val / this.#tens * this.#tens;
    return this.#checkValue(val, "ceiling");
  }
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    if (decimals >= this.decimals) {
      return this;
    }
    const delta = this.decimals - decimals;
    const bump = BN_5 * getTens(delta - 1);
    let value = this.value + bump;
    const tens = getTens(delta);
    value = value / tens * tens;
    checkValue(value, this.#format, "round");
    return new FixedNumber(_guard, value, this.#format);
  }
  isZero() {
    return this.#val === BN_03;
  }
  isNegative() {
    return this.#val < BN_03;
  }
  toString() {
    return this._value;
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return FixedNumber.fromString(this.toString(), format);
  }
  static fromValue(_value, _decimals, _format) {
    const decimals = _decimals == null ? 0 : getNumber(_decimals);
    const format = getFormat(_format);
    let value = getBigInt(_value, "value");
    const delta = decimals - format.decimals;
    if (delta > 0) {
      const tens = getTens(delta);
      assert(value % tens === BN_03, "value loses precision for format", "NUMERIC_FAULT", {
        operation: "fromValue",
        fault: "underflow",
        value: _value
      });
      value /= tens;
    } else if (delta < 0) {
      value *= getTens(-delta);
    }
    checkValue(value, format, "fromValue");
    return new FixedNumber(_guard, value, format);
  }
  static fromString(_value, _format) {
    const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
    assertArgument(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
    const format = getFormat(_format);
    let whole = match[2] || "0", decimal = match[3] || "";
    while (decimal.length < format.decimals) {
      decimal += Zeros;
    }
    assert(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
      operation: "fromString",
      fault: "underflow",
      value: _value
    });
    decimal = decimal.substring(0, format.decimals);
    const value = BigInt(match[1] + whole + decimal);
    checkValue(value, format, "fromString");
    return new FixedNumber(_guard, value, format);
  }
  static fromBytes(_value, _format) {
    let value = toBigInt(getBytes(_value, "value"));
    const format = getFormat(_format);
    if (format.signed) {
      value = fromTwos(value, format.width);
    }
    checkValue(value, format, "fromBytes");
    return new FixedNumber(_guard, value, format);
  }
}
var BN_N1, BN_03, BN_12, BN_5, _guard, Zeros = "0000";
var init_fixednumber = __esm(() => {
  init_data();
  init_errors();
  init_maths();
  BN_N1 = BigInt(-1);
  BN_03 = BigInt(0);
  BN_12 = BigInt(1);
  BN_5 = BigInt(5);
  _guard = {};
  while (Zeros.length < 80) {
    Zeros += Zeros;
  }
});

// node_modules/ethers/lib.esm/utils/rlp-decode.js
function hexlifyByte(value) {
  let result = value.toString(16);
  while (result.length < 2) {
    result = "0" + result;
  }
  return "0x" + result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i = 0;i < length; i++) {
    result = result * 256 + data[offset + i];
  }
  return result;
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    assert(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
      buffer: data,
      length,
      offset
    });
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  assert(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
    buffer: data,
    length: 0,
    offset: 1
  });
  const checkOffset = (offset2) => {
    assert(offset2 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
      buffer: data,
      length: data.length,
      offset: offset2
    });
  };
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    checkOffset(offset + 1 + lengthLength);
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    checkOffset(offset + 1 + lengthLength + length);
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    checkOffset(offset + 1 + length);
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    checkOffset(offset + 1 + lengthLength);
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    checkOffset(offset + 1 + lengthLength + length);
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    checkOffset(offset + 1 + length);
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlifyByte(data[offset]) };
}
function decodeRlp(_data) {
  const data = getBytes(_data, "data");
  const decoded = _decode(data, 0);
  assertArgument(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
  return decoded.result;
}
var init_rlp_decode = __esm(() => {
  init_data();
  init_errors();
  init_data();
});

// node_modules/ethers/lib.esm/utils/rlp-encode.js
function arrayifyInteger(value) {
  const result = [];
  while (value) {
    result.unshift(value & 255);
    value >>= 8;
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  const data = Array.prototype.slice.call(getBytes(object, "object"));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
function encodeRlp(object) {
  let result = "0x";
  for (const v of _encode(object)) {
    result += nibbles[v >> 4];
    result += nibbles[v & 15];
  }
  return result;
}
var nibbles = "0123456789abcdef";
var init_rlp_encode = __esm(() => {
  init_data();
});

// node_modules/ethers/lib.esm/utils/units.js
function formatUnits(value, unit) {
  let decimals = 18;
  if (typeof unit === "string") {
    const index = names.indexOf(unit);
    assertArgument(index >= 0, "invalid unit", "unit", unit);
    decimals = 3 * index;
  } else if (unit != null) {
    decimals = getNumber(unit, "unit");
  }
  return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
}
function parseUnits(value, unit) {
  assertArgument(typeof value === "string", "value must be a string", "value", value);
  let decimals = 18;
  if (typeof unit === "string") {
    const index = names.indexOf(unit);
    assertArgument(index >= 0, "invalid unit", "unit", unit);
    decimals = 3 * index;
  } else if (unit != null) {
    decimals = getNumber(unit, "unit");
  }
  return FixedNumber.fromString(value, { decimals, width: 512 }).value;
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}
var names;
var init_units = __esm(() => {
  init_errors();
  init_fixednumber();
  init_maths();
  names = [
    "wei",
    "kwei",
    "mwei",
    "gwei",
    "szabo",
    "finney",
    "ether"
  ];
});

// node_modules/ethers/lib.esm/utils/uuid.js
function uuidV4(randomBytes) {
  const bytes = getBytes(randomBytes, "randomBytes");
  bytes[6] = bytes[6] & 15 | 64;
  bytes[8] = bytes[8] & 63 | 128;
  const value = hexlify(bytes);
  return [
    value.substring(2, 10),
    value.substring(10, 14),
    value.substring(14, 18),
    value.substring(18, 22),
    value.substring(22, 34)
  ].join("-");
}
var init_uuid = __esm(() => {
  init_data();
});

// node_modules/ethers/lib.esm/utils/index.js
var init_utils = __esm(() => {
  init_base58();
  init_base64();
  init_data();
  init_errors();
  init_events();
  init_fetch();
  init_fixednumber();
  init_maths();
  init_rlp_decode();
  init_rlp_encode();
  init_units();
  init_utf8();
  init_uuid();
});

// node_modules/ethers/lib.esm/abi/coders/abstract-coder.js
function getNames(result) {
  return resultNames.get(result);
}
function setNames(result, names2) {
  resultNames.set(result, names2);
}
function throwError(name, error) {
  const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
  wrapped.error = error;
  throw wrapped;
}
function toObject(names2, items, deep) {
  if (names2.indexOf(null) >= 0) {
    return items.map((item, index) => {
      if (item instanceof Result) {
        return toObject(getNames(item), item, deep);
      }
      return item;
    });
  }
  return names2.reduce((accum, name, index) => {
    let item = items.getValue(name);
    if (!(name in accum)) {
      if (deep && item instanceof Result) {
        item = toObject(getNames(item), item, deep);
      }
      accum[name] = item;
    }
    return accum;
  }, {});
}
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key in object) {
      const childPath = path.slice();
      childPath.push(key);
      try {
        checkErrors(childPath, object[key]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
function getValue(value) {
  let bytes = toBeArray(value);
  assert(bytes.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes, length: WordSize, offset: bytes.length });
  if (bytes.length !== WordSize) {
    bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));
  }
  return bytes;
}

class Coder {
  name;
  type;
  localName;
  dynamic;
  constructor(name, type, localName, dynamic) {
    defineProperties(this, { name, type, localName, dynamic }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(message, value) {
    assertArgument(false, message, this.localName, value);
  }
}

class Writer {
  #data;
  #dataLength;
  constructor() {
    this.#data = [];
    this.#dataLength = 0;
  }
  get data() {
    return concat(this.#data);
  }
  get length() {
    return this.#dataLength;
  }
  #writeData(data) {
    this.#data.push(data);
    this.#dataLength += data.length;
    return data.length;
  }
  appendWriter(writer) {
    return this.#writeData(getBytesCopy(writer.data));
  }
  writeBytes(value) {
    let bytes = getBytesCopy(value);
    const paddingOffset = bytes.length % WordSize;
    if (paddingOffset) {
      bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));
    }
    return this.#writeData(bytes);
  }
  writeValue(value) {
    return this.#writeData(getValue(value));
  }
  writeUpdatableValue() {
    const offset = this.#data.length;
    this.#data.push(Padding);
    this.#dataLength += WordSize;
    return (value) => {
      this.#data[offset] = getValue(value);
    };
  }
}

class Reader {
  allowLoose;
  #data;
  #offset;
  #bytesRead;
  #parent;
  #maxInflation;
  constructor(data, allowLoose, maxInflation) {
    defineProperties(this, { allowLoose: !!allowLoose });
    this.#data = getBytesCopy(data);
    this.#bytesRead = 0;
    this.#parent = null;
    this.#maxInflation = maxInflation != null ? maxInflation : 1024;
    this.#offset = 0;
  }
  get data() {
    return hexlify(this.#data);
  }
  get dataLength() {
    return this.#data.length;
  }
  get consumed() {
    return this.#offset;
  }
  get bytes() {
    return new Uint8Array(this.#data);
  }
  #incrementBytesRead(count) {
    if (this.#parent) {
      return this.#parent.#incrementBytesRead(count);
    }
    this.#bytesRead += count;
    assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
      buffer: getBytesCopy(this.#data),
      offset: this.#offset,
      length: count,
      info: {
        bytesRead: this.#bytesRead,
        dataLength: this.dataLength
      }
    });
  }
  #peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / WordSize) * WordSize;
    if (this.#offset + alignedLength > this.#data.length) {
      if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {
        alignedLength = length;
      } else {
        assert(false, "data out-of-bounds", "BUFFER_OVERRUN", {
          buffer: getBytesCopy(this.#data),
          length: this.#data.length,
          offset: this.#offset + alignedLength
        });
      }
    }
    return this.#data.slice(this.#offset, this.#offset + alignedLength);
  }
  subReader(offset) {
    const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
    reader.#parent = this;
    return reader;
  }
  readBytes(length, loose) {
    let bytes = this.#peekBytes(0, length, !!loose);
    this.#incrementBytesRead(length);
    this.#offset += bytes.length;
    return bytes.slice(0, length);
  }
  readValue() {
    return toBigInt(this.readBytes(WordSize));
  }
  readIndex() {
    return toNumber(this.readBytes(WordSize));
  }
}
var WordSize = 32, Padding, passProperties, _guard2, resultNames, Result;
var init_abstract_coder = __esm(() => {
  init_utils();
  Padding = new Uint8Array(WordSize);
  passProperties = ["then"];
  _guard2 = {};
  resultNames = new WeakMap;
  Result = class Result extends Array {
    #names;
    constructor(...args) {
      const guard = args[0];
      let items = args[1];
      let names2 = (args[2] || []).slice();
      let wrap = true;
      if (guard !== _guard2) {
        items = args;
        names2 = [];
        wrap = false;
      }
      super(items.length);
      items.forEach((item, index) => {
        this[index] = item;
      });
      const nameCounts = names2.reduce((accum, name) => {
        if (typeof name === "string") {
          accum.set(name, (accum.get(name) || 0) + 1);
        }
        return accum;
      }, new Map);
      setNames(this, Object.freeze(items.map((item, index) => {
        const name = names2[index];
        if (name != null && nameCounts.get(name) === 1) {
          return name;
        }
        return null;
      })));
      this.#names = [];
      if (this.#names == null) {
        this.#names;
      }
      if (!wrap) {
        return;
      }
      Object.freeze(this);
      const proxy = new Proxy(this, {
        get: (target, prop, receiver) => {
          if (typeof prop === "string") {
            if (prop.match(/^[0-9]+$/)) {
              const index = getNumber(prop, "%index");
              if (index < 0 || index >= this.length) {
                throw new RangeError("out of result range");
              }
              const item = target[index];
              if (item instanceof Error) {
                throwError(`index ${index}`, item);
              }
              return item;
            }
            if (passProperties.indexOf(prop) >= 0) {
              return Reflect.get(target, prop, receiver);
            }
            const value = target[prop];
            if (value instanceof Function) {
              return function(...args2) {
                return value.apply(this === receiver ? target : this, args2);
              };
            } else if (!(prop in target)) {
              return target.getValue.apply(this === receiver ? target : this, [prop]);
            }
          }
          return Reflect.get(target, prop, receiver);
        }
      });
      setNames(proxy, getNames(this));
      return proxy;
    }
    toArray(deep) {
      const result = [];
      this.forEach((item, index) => {
        if (item instanceof Error) {
          throwError(`index ${index}`, item);
        }
        if (deep && item instanceof Result) {
          item = item.toArray(deep);
        }
        result.push(item);
      });
      return result;
    }
    toObject(deep) {
      const names2 = getNames(this);
      return names2.reduce((accum, name, index) => {
        assert(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
          operation: "toObject()"
        });
        return toObject(names2, this, deep);
      }, {});
    }
    slice(start, end) {
      if (start == null) {
        start = 0;
      }
      if (start < 0) {
        start += this.length;
        if (start < 0) {
          start = 0;
        }
      }
      if (end == null) {
        end = this.length;
      }
      if (end < 0) {
        end += this.length;
        if (end < 0) {
          end = 0;
        }
      }
      if (end > this.length) {
        end = this.length;
      }
      const _names = getNames(this);
      const result = [], names2 = [];
      for (let i = start;i < end; i++) {
        result.push(this[i]);
        names2.push(_names[i]);
      }
      return new Result(_guard2, result, names2);
    }
    filter(callback, thisArg) {
      const _names = getNames(this);
      const result = [], names2 = [];
      for (let i = 0;i < this.length; i++) {
        const item = this[i];
        if (item instanceof Error) {
          throwError(`index ${i}`, item);
        }
        if (callback.call(thisArg, item, i, this)) {
          result.push(item);
          names2.push(_names[i]);
        }
      }
      return new Result(_guard2, result, names2);
    }
    map(callback, thisArg) {
      const result = [];
      for (let i = 0;i < this.length; i++) {
        const item = this[i];
        if (item instanceof Error) {
          throwError(`index ${i}`, item);
        }
        result.push(callback.call(thisArg, item, i, this));
      }
      return result;
    }
    getValue(name) {
      const index = getNames(this).indexOf(name);
      if (index === -1) {
        return;
      }
      const value = this[index];
      if (value instanceof Error) {
        throwError(`property ${JSON.stringify(name)}`, value.error);
      }
      return value;
    }
    static fromItems(items, keys) {
      return new Result(_guard2, items, keys);
    }
  };
});

// node_modules/ethers/lib.esm/crypto/crypto.js
import { createHash, createHmac, pbkdf2Sync, randomBytes } from "crypto";
var init_crypto = () => {};

// node_modules/ethers/lib.esm/crypto/hmac.js
function computeHmac(algorithm, _key, _data) {
  const key = getBytes(_key, "key");
  const data = getBytes(_data, "data");
  return hexlify(__computeHmac(algorithm, key, data));
}
var locked2 = false, _computeHmac = function(algorithm, key, data) {
  return createHmac(algorithm, key).update(data).digest();
}, __computeHmac;
var init_hmac = __esm(() => {
  init_crypto();
  init_utils();
  __computeHmac = _computeHmac;
  computeHmac._ = _computeHmac;
  computeHmac.lock = function() {
    locked2 = true;
  };
  computeHmac.register = function(func) {
    if (locked2) {
      throw new Error("computeHmac is locked");
    }
    __computeHmac = func;
  };
  Object.freeze(computeHmac);
});

// node_modules/ethers/node_modules/@noble/hashes/esm/_assert.js
function number(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function bytes(b, ...lengths) {
  if (!(b instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash(hash2) {
  if (typeof hash2 !== "function" || typeof hash2.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number(hash2.outputLen);
  number(hash2.blockLen);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
  bytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}
var init__assert = () => {};

// node_modules/ethers/node_modules/@noble/hashes/esm/_u64.js
function fromBig(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0;i < lst.length; i++) {
    const { h, l } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l];
  }
  return [Ah, Al];
}
var U32_MASK64, _32n, rotlSH = (h, l, s) => h << s | l >>> 32 - s, rotlSL = (h, l, s) => l << s | h >>> 32 - s, rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s, rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
var init__u64 = __esm(() => {
  U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  _32n = /* @__PURE__ */ BigInt(32);
});

// node_modules/ethers/node_modules/@noble/hashes/esm/cryptoNode.js
import * as nc from "crypto";
var crypto2;
var init_cryptoNode = __esm(() => {
  crypto2 = nc && typeof nc === "object" && "webcrypto" in nc ? nc.webcrypto : undefined;
});

// node_modules/ethers/node_modules/@noble/hashes/esm/utils.js
async function asyncLoop(iters, tick, cb) {
  let ts = Date.now();
  for (let i = 0;i < iters; i++) {
    cb(i);
    const diff = Date.now() - ts;
    if (diff >= 0 && diff < tick)
      continue;
    await nextTick();
    ts += diff;
  }
}
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  if (!u8a(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}

class Hash {
  clone() {
    return this._cloneInto();
  }
}
function checkOpts(defaults, opts) {
  if (opts !== undefined && toStr.call(opts) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes2(bytesLength = 32) {
  if (crypto2 && typeof crypto2.getRandomValues === "function") {
    return crypto2.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}
var u8a = (a) => a instanceof Uint8Array, u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4)), createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength), rotr = (word, shift) => word << 32 - shift | word >>> shift, isLE, nextTick = async () => {}, toStr;
var init_utils2 = __esm(() => {
  init_cryptoNode();
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  if (!isLE)
    throw new Error("Non little-endian hardware is not supported");
  toStr = {}.toString;
});

// node_modules/ethers/node_modules/@noble/hashes/esm/sha3.js
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds;round < 24; round++) {
    for (let x = 0;x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0;x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0;y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0;t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0;y < 50; y += 10) {
      for (let x = 0;x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0;x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}
var SHA3_PI, SHA3_ROTL, _SHA3_IOTA, _0n, _1n, _2n, _7n, _256n, _0x71n, SHA3_IOTA_H, SHA3_IOTA_L, rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s), rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s), Keccak, gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen)), sha3_224, sha3_256, sha3_384, sha3_512, keccak_224, keccak_256, keccak_384, keccak_512, genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)), shake128, shake256;
var init_sha3 = __esm(() => {
  init__assert();
  init__u64();
  init_utils2();
  [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
  _0n = /* @__PURE__ */ BigInt(0);
  _1n = /* @__PURE__ */ BigInt(1);
  _2n = /* @__PURE__ */ BigInt(2);
  _7n = /* @__PURE__ */ BigInt(7);
  _256n = /* @__PURE__ */ BigInt(256);
  _0x71n = /* @__PURE__ */ BigInt(113);
  for (let round = 0, R = _1n, x = 1, y = 0;round < 24; round++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    let t = _0n;
    for (let j = 0;j < 7; j++) {
      R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
      if (R & _2n)
        t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
  }
  [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
  Keccak = class Keccak extends Hash {
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      number(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = u32(this.state);
    }
    keccak() {
      keccakP(this.state32, this.rounds);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      exists(this);
      const { blockLen, state } = this;
      data = toBytes(data);
      const len = data.length;
      for (let pos = 0;pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        for (let i = 0;i < take; i++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      exists(this, false);
      bytes(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length;pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      number(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      output(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  };
  sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
  sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
  sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
  sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
  keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
  keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
  keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
  keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
  shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
  shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);
});

// node_modules/ethers/lib.esm/crypto/keccak.js
function keccak256(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__keccak256(data));
}
var locked3 = false, _keccak256 = function(data) {
  return keccak_256(data);
}, __keccak256;
var init_keccak = __esm(() => {
  init_sha3();
  init_utils();
  __keccak256 = _keccak256;
  keccak256._ = _keccak256;
  keccak256.lock = function() {
    locked3 = true;
  };
  keccak256.register = function(func) {
    if (locked3) {
      throw new TypeError("keccak256 is locked");
    }
    __keccak256 = func;
  };
  Object.freeze(keccak256);
});

// node_modules/ethers/node_modules/@noble/hashes/esm/_sha2.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE2 ? 4 : 0;
  const l = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE2);
  view.setUint32(byteOffset + l, wl, isLE2);
}
var SHA2;
var init__sha2 = __esm(() => {
  init__assert();
  init_utils2();
  SHA2 = class SHA2 extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data) {
      exists(this);
      const { view, buffer, blockLen } = this;
      data = toBytes(data);
      const len = data.length;
      for (let pos = 0;pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          const dataView = createView(data);
          for (;blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      exists(this);
      output(out, this);
      this.finished = true;
      const { buffer, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i = pos;i < blockLen; i++)
        buffer[i] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = createView(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i = 0;i < outLen; i++)
        oview.setUint32(4 * i, state[i], isLE2);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor);
      to.set(...this.get());
      const { blockLen, buffer, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer);
      return to;
    }
  };
});

// node_modules/ethers/node_modules/@noble/hashes/esm/ripemd160.js
function f(group, x, y, z) {
  if (group === 0)
    return x ^ y ^ z;
  else if (group === 1)
    return x & y | ~x & z;
  else if (group === 2)
    return (x | ~y) ^ z;
  else if (group === 3)
    return x & z | y & ~z;
  else
    return x ^ (y | ~z);
}
var Rho, Id, Pi, idxL, idxR, shifts, shiftsL, shiftsR, Kl, Kr, rotl = (word, shift) => word << shift | word >>> 32 - shift, BUF, RIPEMD160, ripemd160;
var init_ripemd160 = __esm(() => {
  init__sha2();
  init_utils2();
  Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
  Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
  Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
  idxL = [Id];
  idxR = [Pi];
  for (let i = 0;i < 4; i++)
    for (let j of [idxL, idxR])
      j.push(j[i].map((k) => Rho[k]));
  shifts = /* @__PURE__ */ [
    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
  ].map((i) => new Uint8Array(i));
  shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
  shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
  Kl = /* @__PURE__ */ new Uint32Array([
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
  ]);
  Kr = /* @__PURE__ */ new Uint32Array([
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
  ]);
  BUF = /* @__PURE__ */ new Uint32Array(16);
  RIPEMD160 = class RIPEMD160 extends SHA2 {
    constructor() {
      super(64, 20, 8, true);
      this.h0 = 1732584193 | 0;
      this.h1 = 4023233417 | 0;
      this.h2 = 2562383102 | 0;
      this.h3 = 271733878 | 0;
      this.h4 = 3285377520 | 0;
    }
    get() {
      const { h0, h1, h2, h3, h4 } = this;
      return [h0, h1, h2, h3, h4];
    }
    set(h0, h1, h2, h3, h4) {
      this.h0 = h0 | 0;
      this.h1 = h1 | 0;
      this.h2 = h2 | 0;
      this.h3 = h3 | 0;
      this.h4 = h4 | 0;
    }
    process(view, offset) {
      for (let i = 0;i < 16; i++, offset += 4)
        BUF[i] = view.getUint32(offset, true);
      let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
      for (let group = 0;group < 5; group++) {
        const rGroup = 4 - group;
        const hbl = Kl[group], hbr = Kr[group];
        const rl = idxL[group], rr = idxR[group];
        const sl = shiftsL[group], sr = shiftsR[group];
        for (let i = 0;i < 16; i++) {
          const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
          al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
        }
        for (let i = 0;i < 16; i++) {
          const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
          ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
        }
      }
      this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
    }
    roundClean() {
      BUF.fill(0);
    }
    destroy() {
      this.destroyed = true;
      this.buffer.fill(0);
      this.set(0, 0, 0, 0, 0);
    }
  };
  ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160);
});

// node_modules/ethers/lib.esm/crypto/ripemd160.js
function ripemd1602(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__ripemd160(data));
}
var locked4 = false, _ripemd160 = function(data) {
  return ripemd160(data);
}, __ripemd160;
var init_ripemd1602 = __esm(() => {
  init_ripemd160();
  init_utils();
  __ripemd160 = _ripemd160;
  ripemd1602._ = _ripemd160;
  ripemd1602.lock = function() {
    locked4 = true;
  };
  ripemd1602.register = function(func) {
    if (locked4) {
      throw new TypeError("ripemd160 is locked");
    }
    __ripemd160 = func;
  };
  Object.freeze(ripemd1602);
});

// node_modules/ethers/lib.esm/crypto/pbkdf2.js
function pbkdf2(_password, _salt, iterations, keylen, algo) {
  const password = getBytes(_password, "password");
  const salt = getBytes(_salt, "salt");
  return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));
}
var locked5 = false, _pbkdf2 = function(password, salt, iterations, keylen, algo) {
  return pbkdf2Sync(password, salt, iterations, keylen, algo);
}, __pbkdf2;
var init_pbkdf2 = __esm(() => {
  init_crypto();
  init_utils();
  __pbkdf2 = _pbkdf2;
  pbkdf2._ = _pbkdf2;
  pbkdf2.lock = function() {
    locked5 = true;
  };
  pbkdf2.register = function(func) {
    if (locked5) {
      throw new Error("pbkdf2 is locked");
    }
    __pbkdf2 = func;
  };
  Object.freeze(pbkdf2);
});

// node_modules/ethers/lib.esm/crypto/random.js
function randomBytes3(length) {
  return __randomBytes(length);
}
var locked6 = false, _randomBytes = function(length) {
  return new Uint8Array(randomBytes(length));
}, __randomBytes;
var init_random = __esm(() => {
  init_crypto();
  __randomBytes = _randomBytes;
  randomBytes3._ = _randomBytes;
  randomBytes3.lock = function() {
    locked6 = true;
  };
  randomBytes3.register = function(func) {
    if (locked6) {
      throw new Error("randomBytes is locked");
    }
    __randomBytes = func;
  };
  Object.freeze(randomBytes3);
});

// node_modules/ethers/node_modules/@noble/hashes/esm/sha256.js
var Chi = (a, b, c) => a & b ^ ~a & c, Maj = (a, b, c) => a & b ^ a & c ^ b & c, SHA256_K, IV, SHA256_W, SHA256, sha256;
var init_sha256 = __esm(() => {
  init__sha2();
  init_utils2();
  SHA256_K = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  IV = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  SHA256 = class SHA256 extends SHA2 {
    constructor() {
      super(64, 32, 8, false);
      this.A = IV[0] | 0;
      this.B = IV[1] | 0;
      this.C = IV[2] | 0;
      this.D = IV[3] | 0;
      this.E = IV[4] | 0;
      this.F = IV[5] | 0;
      this.G = IV[6] | 0;
      this.H = IV[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i = 0;i < 16; i++, offset += 4)
        SHA256_W[i] = view.getUint32(offset, false);
      for (let i = 16;i < 64; i++) {
        const W15 = SHA256_W[i - 15];
        const W2 = SHA256_W[i - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i = 0;i < 64; i++) {
        const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
        const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
        const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
        const T2 = sigma0 + Maj(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  };
  sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256);
});

// node_modules/ethers/node_modules/@noble/hashes/esm/hmac.js
var HMAC, hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
var init_hmac2 = __esm(() => {
  init__assert();
  init_utils2();
  HMAC = class HMAC extends Hash {
    constructor(hash2, _key) {
      super();
      this.finished = false;
      this.destroyed = false;
      hash(hash2);
      const key = toBytes(_key);
      this.iHash = hash2.create();
      if (typeof this.iHash.update !== "function")
        throw new Error("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen;
      this.outputLen = this.iHash.outputLen;
      const blockLen = this.blockLen;
      const pad = new Uint8Array(blockLen);
      pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
      for (let i = 0;i < pad.length; i++)
        pad[i] ^= 54;
      this.iHash.update(pad);
      this.oHash = hash2.create();
      for (let i = 0;i < pad.length; i++)
        pad[i] ^= 54 ^ 92;
      this.oHash.update(pad);
      pad.fill(0);
    }
    update(buf) {
      exists(this);
      this.iHash.update(buf);
      return this;
    }
    digestInto(out) {
      exists(this);
      bytes(out, this.outputLen);
      this.finished = true;
      this.iHash.digestInto(out);
      this.oHash.update(out);
      this.oHash.digestInto(out);
      this.destroy();
    }
    digest() {
      const out = new Uint8Array(this.oHash.outputLen);
      this.digestInto(out);
      return out;
    }
    _cloneInto(to) {
      to || (to = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
      to = to;
      to.finished = finished;
      to.destroyed = destroyed;
      to.blockLen = blockLen;
      to.outputLen = outputLen;
      to.oHash = oHash._cloneInto(to.oHash);
      to.iHash = iHash._cloneInto(to.iHash);
      return to;
    }
    destroy() {
      this.destroyed = true;
      this.oHash.destroy();
      this.iHash.destroy();
    }
  };
  hmac.create = (hash2, key) => new HMAC(hash2, key);
});

// node_modules/ethers/node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash2, _password, _salt, _opts) {
  hash(hash2);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  number(c);
  number(dkLen);
  number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes(_password);
  const salt = toBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash2, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf22(hash2, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0;pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1;ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0;i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
var init_pbkdf22 = __esm(() => {
  init__assert();
  init_hmac2();
  init_utils2();
});

// node_modules/ethers/node_modules/@noble/hashes/esm/scrypt.js
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0;i < 8; i += 2) {
    x04 ^= rotl2(x00 + x12 | 0, 7);
    x08 ^= rotl2(x04 + x00 | 0, 9);
    x12 ^= rotl2(x08 + x04 | 0, 13);
    x00 ^= rotl2(x12 + x08 | 0, 18);
    x09 ^= rotl2(x05 + x01 | 0, 7);
    x13 ^= rotl2(x09 + x05 | 0, 9);
    x01 ^= rotl2(x13 + x09 | 0, 13);
    x05 ^= rotl2(x01 + x13 | 0, 18);
    x14 ^= rotl2(x10 + x06 | 0, 7);
    x02 ^= rotl2(x14 + x10 | 0, 9);
    x06 ^= rotl2(x02 + x14 | 0, 13);
    x10 ^= rotl2(x06 + x02 | 0, 18);
    x03 ^= rotl2(x15 + x11 | 0, 7);
    x07 ^= rotl2(x03 + x15 | 0, 9);
    x11 ^= rotl2(x07 + x03 | 0, 13);
    x15 ^= rotl2(x11 + x07 | 0, 18);
    x01 ^= rotl2(x00 + x03 | 0, 7);
    x02 ^= rotl2(x01 + x00 | 0, 9);
    x03 ^= rotl2(x02 + x01 | 0, 13);
    x00 ^= rotl2(x03 + x02 | 0, 18);
    x06 ^= rotl2(x05 + x04 | 0, 7);
    x07 ^= rotl2(x06 + x05 | 0, 9);
    x04 ^= rotl2(x07 + x06 | 0, 13);
    x05 ^= rotl2(x04 + x07 | 0, 18);
    x11 ^= rotl2(x10 + x09 | 0, 7);
    x08 ^= rotl2(x11 + x10 | 0, 9);
    x09 ^= rotl2(x08 + x11 | 0, 13);
    x10 ^= rotl2(x09 + x08 | 0, 18);
    x12 ^= rotl2(x15 + x14 | 0, 7);
    x13 ^= rotl2(x12 + x15 | 0, 9);
    x14 ^= rotl2(x13 + x12 | 0, 13);
    x15 ^= rotl2(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
  let head = oi + 0;
  let tail = oi + 16 * r;
  for (let i = 0;i < 16; i++)
    out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0;i < r; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  number(N);
  number(r);
  number(p);
  number(dkLen);
  number(asyncTick);
  number(maxmem);
  if (onProgress !== undefined && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N + p);
  if (memUsed > maxmem) {
    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
  }
  const B = pbkdf22(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V = u32(new Uint8Array(blockSize * N));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = () => {};
  if (onProgress) {
    const totalBlockMix = 2 * N * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf22(sha256, password, B, { c: 1, dkLen });
  B.fill(0);
  V.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt(password, salt, opts) {
  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  for (let pi = 0;pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0;i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    for (let i = 0, pos = 0;i < N - 1; i++) {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    }
    BlockMix(V, (N - 1) * blockSize32, B32, Pi2, r);
    blockMixCb();
    for (let i = 0;i < N; i++) {
      const j = B32[Pi2 + blockSize32 - 16] % N;
      for (let k = 0;k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r);
      blockMixCb();
    }
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}
async function scryptAsync(password, salt, opts) {
  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
  for (let pi = 0;pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0;i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    let pos = 0;
    await asyncLoop(N - 1, asyncTick, () => {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    });
    BlockMix(V, (N - 1) * blockSize32, B32, Pi2, r);
    blockMixCb();
    await asyncLoop(N, asyncTick, () => {
      const j = B32[Pi2 + blockSize32 - 16] % N;
      for (let k = 0;k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r);
      blockMixCb();
    });
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}
var rotl2 = (a, b) => a << b | a >>> 32 - b;
var init_scrypt = __esm(() => {
  init__assert();
  init_sha256();
  init_pbkdf22();
  init_utils2();
});

// node_modules/ethers/lib.esm/crypto/scrypt.js
async function scrypt2(_passwd, _salt, N, r, p, dkLen, progress) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
}
function scryptSync(_passwd, _salt, N, r, p, dkLen) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(__scryptSync(passwd, salt, N, r, p, dkLen));
}
var lockedSync = false, lockedAsync = false, _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {
  return await scryptAsync(passwd, salt, { N, r, p, dkLen, onProgress });
}, _scryptSync = function(passwd, salt, N, r, p, dkLen) {
  return scrypt(passwd, salt, { N, r, p, dkLen });
}, __scryptAsync, __scryptSync;
var init_scrypt2 = __esm(() => {
  init_scrypt();
  init_utils();
  __scryptAsync = _scryptAsync;
  __scryptSync = _scryptSync;
  scrypt2._ = _scryptAsync;
  scrypt2.lock = function() {
    lockedAsync = true;
  };
  scrypt2.register = function(func) {
    if (lockedAsync) {
      throw new Error("scrypt is locked");
    }
    __scryptAsync = func;
  };
  Object.freeze(scrypt2);
  scryptSync._ = _scryptSync;
  scryptSync.lock = function() {
    lockedSync = true;
  };
  scryptSync.register = function(func) {
    if (lockedSync) {
      throw new Error("scryptSync is locked");
    }
    __scryptSync = func;
  };
  Object.freeze(scryptSync);
});

// node_modules/ethers/lib.esm/crypto/sha2.js
function sha2562(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__sha256(data));
}
function sha512(_data) {
  const data = getBytes(_data, "data");
  return hexlify(__sha512(data));
}
var _sha256 = function(data) {
  return createHash("sha256").update(data).digest();
}, _sha512 = function(data) {
  return createHash("sha512").update(data).digest();
}, __sha256, __sha512, locked256 = false, locked512 = false;
var init_sha2 = __esm(() => {
  init_crypto();
  init_utils();
  __sha256 = _sha256;
  __sha512 = _sha512;
  sha2562._ = _sha256;
  sha2562.lock = function() {
    locked256 = true;
  };
  sha2562.register = function(func) {
    if (locked256) {
      throw new Error("sha256 is locked");
    }
    __sha256 = func;
  };
  Object.freeze(sha2562);
  sha512._ = _sha512;
  sha512.lock = function() {
    locked512 = true;
  };
  sha512.register = function(func) {
    if (locked512) {
      throw new Error("sha512 is locked");
    }
    __sha512 = func;
  };
  Object.freeze(sha2562);
});

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/utils.js
var exports_utils = {};
__export(exports_utils, {
  validateObject: () => validateObject,
  utf8ToBytes: () => utf8ToBytes2,
  numberToVarBytesBE: () => numberToVarBytesBE,
  numberToHexUnpadded: () => numberToHexUnpadded,
  numberToBytesLE: () => numberToBytesLE,
  numberToBytesBE: () => numberToBytesBE,
  hexToNumber: () => hexToNumber,
  hexToBytes: () => hexToBytes,
  equalBytes: () => equalBytes,
  ensureBytes: () => ensureBytes,
  createHmacDrbg: () => createHmacDrbg,
  concatBytes: () => concatBytes2,
  bytesToNumberLE: () => bytesToNumberLE,
  bytesToNumberBE: () => bytesToNumberBE,
  bytesToHex: () => bytesToHex,
  bitSet: () => bitSet,
  bitMask: () => bitMask,
  bitLen: () => bitLen,
  bitGet: () => bitGet
});
function bytesToHex(bytes2) {
  if (!u8a2(bytes2))
    throw new Error("Uint8Array expected");
  let hex = "";
  for (let i = 0;i < bytes2.length; i++) {
    hex += hexes[bytes2[i]];
  }
  return hex;
}
function numberToHexUnpadded(num) {
  const hex = num.toString(16);
  return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  return BigInt(hex === "" ? "0" : `0x${hex}`);
}
function hexToBytes(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  const len = hex.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0;i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE(bytes2) {
  return hexToNumber(bytesToHex(bytes2));
}
function bytesToNumberLE(bytes2) {
  if (!u8a2(bytes2))
    throw new Error("Uint8Array expected");
  return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
}
function numberToBytesBE(n, len) {
  return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
  return numberToBytesBE(n, len).reverse();
}
function numberToVarBytesBE(n) {
  return hexToBytes(numberToHexUnpadded(n));
}
function ensureBytes(title, hex, expectedLength) {
  let res;
  if (typeof hex === "string") {
    try {
      res = hexToBytes(hex);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
    }
  } else if (u8a2(hex)) {
    res = Uint8Array.from(hex);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes2(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a2(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
function equalBytes(b1, b2) {
  if (b1.length !== b2.length)
    return false;
  for (let i = 0;i < b1.length; i++)
    if (b1[i] !== b2[i])
      return false;
  return true;
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen(n) {
  let len;
  for (len = 0;n > _0n2; n >>= _1n2, len += 1)
    ;
  return len;
}
function bitGet(n, pos) {
  return n >> BigInt(pos) & _1n2;
}
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n()) => {
    k = h(u8fr([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr([1]), seed);
    v = h();
  };
  const gen2 = () => {
    if (i++ >= 1000)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes2(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = undefined;
    while (!(res = pred(gen2())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
function validateObject(object, validators, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object[fieldName];
    if (isOptional && val === undefined)
      return;
    if (!checkVal(val, object)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object;
}
var _0n2, _1n2, _2n2, u8a2 = (a) => a instanceof Uint8Array, hexes, bitSet = (n, pos, value) => {
  return n | (value ? _1n2 : _0n2) << BigInt(pos);
}, bitMask = (n) => (_2n2 << BigInt(n - 1)) - _1n2, u8n = (data) => new Uint8Array(data), u8fr = (arr) => Uint8Array.from(arr), validatorFns;
var init_utils3 = __esm(() => {
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  _0n2 = BigInt(0);
  _1n2 = BigInt(1);
  _2n2 = BigInt(2);
  hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
  validatorFns = {
    bigint: (val) => typeof val === "bigint",
    function: (val) => typeof val === "function",
    boolean: (val) => typeof val === "boolean",
    string: (val) => typeof val === "string",
    stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
  };
});

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/modular.js
function mod(a, b) {
  const result = a % b;
  return result >= _0n3 ? result : b + result;
}
function pow(num, power, modulo) {
  if (modulo <= _0n3 || power < _0n3)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n3)
    return _0n3;
  let res = _1n3;
  while (power > _0n3) {
    if (power & _1n3)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n3;
  }
  return res;
}
function pow2(x, power, modulo) {
  let res = x;
  while (power-- > _0n3) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number2, modulo) {
  if (number2 === _0n3 || modulo <= _0n3) {
    throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
  }
  let a = mod(number2, modulo);
  let b = modulo;
  let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
  while (a !== _0n3) {
    const q = b / a;
    const r = b % a;
    const m = x - u * q;
    const n = y - v * q;
    b = a, a = r, x = u, y = v, u = m, v = n;
  }
  const gcd = b;
  if (gcd !== _1n3)
    throw new Error("invert: does not exist");
  return mod(x, modulo);
}
function tonelliShanks(P) {
  const legendreC = (P - _1n3) / _2n3;
  let Q, S, Z;
  for (Q = P - _1n3, S = 0;Q % _2n3 === _0n3; Q /= _2n3, S++)
    ;
  for (Z = _2n3;Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P + _1n3) / _4n;
    return function tonelliFast(Fp, n) {
      const root = Fp.pow(n, p1div4);
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n3) / _2n3;
  return function tonelliSlow(Fp, n) {
    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
    let x = Fp.pow(n, Q1div2);
    let b = Fp.pow(n, Q);
    while (!Fp.eql(b, Fp.ONE)) {
      if (Fp.eql(b, Fp.ZERO))
        return Fp.ZERO;
      let m = 1;
      for (let t2 = Fp.sqr(b);m < r; m++) {
        if (Fp.eql(t2, Fp.ONE))
          break;
        t2 = Fp.sqr(t2);
      }
      const ge = Fp.pow(g, _1n3 << BigInt(r - m - 1));
      g = Fp.sqr(ge);
      x = Fp.mul(x, ge);
      b = Fp.mul(b, g);
      r = m;
    }
    return x;
  };
}
function FpSqrt(P) {
  if (P % _4n === _3n) {
    const p1div4 = (P + _1n3) / _4n;
    return function sqrt3mod4(Fp, n) {
      const root = Fp.pow(n, p1div4);
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n === _5n) {
    const c1 = (P - _5n) / _8n;
    return function sqrt5mod8(Fp, n) {
      const n2 = Fp.mul(n, _2n3);
      const v = Fp.pow(n2, c1);
      const nv = Fp.mul(n, v);
      const i = Fp.mul(Fp.mul(nv, _2n3), v);
      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n === _9n) {}
  return tonelliShanks(P);
}
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(f2, num, power) {
  if (power < _0n3)
    throw new Error("Expected power > 0");
  if (power === _0n3)
    return f2.ONE;
  if (power === _1n3)
    return num;
  let p = f2.ONE;
  let d = num;
  while (power > _0n3) {
    if (power & _1n3)
      p = f2.mul(p, d);
    d = f2.sqr(d);
    power >>= _1n3;
  }
  return p;
}
function FpInvertBatch(f2, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = acc;
    return f2.mul(acc, num);
  }, f2.ONE);
  const inverted = f2.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = f2.mul(acc, tmp[i]);
    return f2.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength(n, nBitLength) {
  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
  if (ORDER <= _0n3)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt(ORDER);
  const f2 = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n3,
    ONE: _1n3,
    create: (num) => mod(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n3 <= num && num < ORDER;
    },
    is0: (num) => num === _0n3,
    isOdd: (num) => (num & _1n3) === _1n3,
    neg: (num) => mod(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod(num * num, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num, power) => FpPow(f2, num, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert(num, ORDER),
    sqrt: redef.sqrt || ((n) => sqrtP(f2, n)),
    invertBatch: (lst) => FpInvertBatch(f2, lst),
    cmov: (a, b, c) => c ? b : a,
    toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
    fromBytes: (bytes2) => {
      if (bytes2.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
      return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
    }
  });
  return Object.freeze(f2);
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length = getFieldBytesLength(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE2 ? bytesToNumberBE(key) : bytesToNumberLE(key);
  const reduced = mod(num, fieldOrder - _1n3) + _1n3;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}
var _0n3, _1n3, _2n3, _3n, _4n, _5n, _8n, _9n, _16n, FIELD_FIELDS;
var init_modular = __esm(() => {
  init_utils3();
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  _0n3 = BigInt(0);
  _1n3 = BigInt(1);
  _2n3 = BigInt(2);
  _3n = BigInt(3);
  _4n = BigInt(4);
  _5n = BigInt(5);
  _8n = BigInt(8);
  _9n = BigInt(9);
  _16n = BigInt(16);
  FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
  ];
});

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/curve.js
function wNAF(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    unsafeLadder(elm, n) {
      let p = c.ZERO;
      let d = elm;
      while (n > _0n4) {
        if (n & _1n4)
          p = p.add(d);
        d = d.double();
        n >>= _1n4;
      }
      return p;
    },
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window2 = 0;window2 < windows; window2++) {
        base = p;
        points.push(base);
        for (let i = 1;i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f2 = c.BASE;
      const mask2 = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0;window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits = Number(n & mask2);
        n >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n += _1n4;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f: f2 };
    },
    wNAFCached(P, precomputesMap, n, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n);
    }
  };
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}
var _0n4, _1n4;
var init_curve = __esm(() => {
  init_modular();
  init_utils3();
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  _0n4 = BigInt(0);
  _1n4 = BigInt(1);
});

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp, a } = opts;
  if (endo) {
    if (!Fp.eql(a, Fp.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp } = CURVE;
  const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes2(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes2) => {
    const tail = bytes2.subarray(1);
    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b } = CURVE;
    const x2 = Fp.sqr(x);
    const x3 = Fp.mul(x2, x);
    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
  }
  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n5 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod(num, n);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = new Map;
  function assertPrjPoint(other) {
    if (!(other instanceof Point2))
      throw new Error("ProjectivePoint expected");
  }

  class Point2 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp.isValid(pz))
        throw new Error("z required");
    }
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp.isValid(x) || !Fp.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point2)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp.eql(i, Fp.ZERO);
      if (is0(x) && is0(y))
        return Point2.ZERO;
      return new Point2(x, y, Fp.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(points) {
      const toInv = Fp.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
    }
    static fromHex(hex) {
      const P = Point2.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
      P.assertValidity();
      return P;
    }
    static fromPrivateKey(privateKey) {
      return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp.isValid(x) || !Fp.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp.isOdd)
        return !Fp.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
      return U1 && U2;
    }
    negate() {
      return new Point2(this.px, Fp.neg(this.py), this.pz);
    }
    double() {
      const { a, b } = CURVE;
      const b3 = Fp.mul(b, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let { ZERO: X3, ZERO: Y3, ZERO: Z3 } = Fp;
      let t0 = Fp.mul(X1, X1);
      let t1 = Fp.mul(Y1, Y1);
      let t2 = Fp.mul(Z1, Z1);
      let t3 = Fp.mul(X1, Y1);
      t3 = Fp.add(t3, t3);
      Z3 = Fp.mul(X1, Z1);
      Z3 = Fp.add(Z3, Z3);
      X3 = Fp.mul(a, Z3);
      Y3 = Fp.mul(b3, t2);
      Y3 = Fp.add(X3, Y3);
      X3 = Fp.sub(t1, Y3);
      Y3 = Fp.add(t1, Y3);
      Y3 = Fp.mul(X3, Y3);
      X3 = Fp.mul(t3, X3);
      Z3 = Fp.mul(b3, Z3);
      t2 = Fp.mul(a, t2);
      t3 = Fp.sub(t0, t2);
      t3 = Fp.mul(a, t3);
      t3 = Fp.add(t3, Z3);
      Z3 = Fp.add(t0, t0);
      t0 = Fp.add(Z3, t0);
      t0 = Fp.add(t0, t2);
      t0 = Fp.mul(t0, t3);
      Y3 = Fp.add(Y3, t0);
      t2 = Fp.mul(Y1, Z1);
      t2 = Fp.add(t2, t2);
      t0 = Fp.mul(t2, t3);
      X3 = Fp.sub(X3, t0);
      Z3 = Fp.mul(t2, t1);
      Z3 = Fp.add(Z3, Z3);
      Z3 = Fp.add(Z3, Z3);
      return new Point2(X3, Y3, Z3);
    }
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let { ZERO: X3, ZERO: Y3, ZERO: Z3 } = Fp;
      const a = CURVE.a;
      const b3 = Fp.mul(CURVE.b, _3n2);
      let t0 = Fp.mul(X1, X2);
      let t1 = Fp.mul(Y1, Y2);
      let t2 = Fp.mul(Z1, Z2);
      let t3 = Fp.add(X1, Y1);
      let t4 = Fp.add(X2, Y2);
      t3 = Fp.mul(t3, t4);
      t4 = Fp.add(t0, t1);
      t3 = Fp.sub(t3, t4);
      t4 = Fp.add(X1, Z1);
      let t5 = Fp.add(X2, Z2);
      t4 = Fp.mul(t4, t5);
      t5 = Fp.add(t0, t2);
      t4 = Fp.sub(t4, t5);
      t5 = Fp.add(Y1, Z1);
      X3 = Fp.add(Y2, Z2);
      t5 = Fp.mul(t5, X3);
      X3 = Fp.add(t1, t2);
      t5 = Fp.sub(t5, X3);
      Z3 = Fp.mul(a, t4);
      X3 = Fp.mul(b3, t2);
      Z3 = Fp.add(X3, Z3);
      X3 = Fp.sub(t1, Z3);
      Z3 = Fp.add(t1, Z3);
      Y3 = Fp.mul(X3, Z3);
      t1 = Fp.add(t0, t0);
      t1 = Fp.add(t1, t0);
      t2 = Fp.mul(a, t2);
      t4 = Fp.mul(b3, t4);
      t1 = Fp.add(t1, t2);
      t2 = Fp.sub(t0, t2);
      t2 = Fp.mul(a, t2);
      t4 = Fp.add(t4, t2);
      t0 = Fp.mul(t1, t4);
      Y3 = Fp.add(Y3, t0);
      t0 = Fp.mul(t5, t4);
      X3 = Fp.mul(t3, X3);
      X3 = Fp.sub(X3, t0);
      t0 = Fp.mul(t3, t1);
      Z3 = Fp.mul(t5, Z3);
      Z3 = Fp.add(Z3, t0);
      return new Point2(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point2.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
        const toInv = Fp.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
      });
    }
    multiplyUnsafe(n) {
      const I = Point2.ZERO;
      if (n === _0n5)
        return I;
      assertGE(n);
      if (n === _1n5)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n5 || k2 > _0n5) {
        if (k1 & _1n5)
          k1p = k1p.add(d);
        if (k2 & _1n5)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n5;
        k2 >>= _1n5;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    multiply(scalar) {
      assertGE(scalar);
      let n = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f: f2 } = this.wNAF(n);
        point = p;
        fake = f2;
      }
      return Point2.normalizeZ([point, fake])[0];
    }
    multiplyAndAddUnsafe(Q, a, b) {
      const G = Point2.BASE;
      const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b));
      return sum.is0() ? undefined : sum;
    }
    toAffine(iz) {
      const { px: x, py: y, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp.ONE : Fp.inv(z);
      const ax = Fp.mul(x, iz);
      const ay = Fp.mul(y, iz);
      const zz = Fp.mul(z, iz);
      if (is0)
        return { x: Fp.ZERO, y: Fp.ZERO };
      if (!Fp.eql(zz, Fp.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n5)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point2, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n5)
        return this;
      if (clearCofactor)
        return clearCofactor(Point2, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes2(Point2, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
  Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point2,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp.BYTES + 1;
  const uncompressedLen = 2 * Fp.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n5 < num && num < Fp.ORDER;
  }
  function modN(a) {
    return mod(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp.toBytes(a.x);
      const cat = concatBytes2;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
      }
    },
    fromBytes(bytes2) {
      const len = bytes2.length;
      const head = bytes2[0];
      const tail = bytes2.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp.sqrt(y2);
        const isYOdd = (y & _1n5) === _1n5;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number2) {
    const HALF = CURVE_ORDER >> _1n5;
    return number2 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN(-s) : s;
  }
  const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));

  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    static fromCompact(hex) {
      const l = CURVE.nByteLength;
      hex = ensureBytes("compactSignature", hex, l * 2);
      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
    }
    static fromDER(hex) {
      const { r, s } = DER.toSig(ensureBytes("DER", hex));
      return new Signature(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R = Point2.fromHex(prefix + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN(-h * ir);
      const u2 = modN(s * ir);
      const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    randomPrivateKey: () => {
      const length = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length), CURVE.n);
    },
    precompute(windowSize = 8, point = Point2.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point2)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b = Point2.fromHex(publicB);
    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes2) {
    const num = bytesToNumberBE(bytes2);
    const delta = bytes2.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
    return modN(bits2int(bytes2));
  };
  const ORDER_MASK = bitMask(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n5 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => (k in opts)))
      throw new Error("sign() legacy options not supported");
    const { hash: hash2, randomBytes: randomBytes4 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes4(Fp.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes2(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point2.BASE.multiply(k).toAffine();
      const r = modN(q.x);
      if (r === _0n5)
        return;
      const s = modN(ik * modN(m + r * d));
      if (s === _0n5)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point2.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = undefined;
    let P;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
          _sig = Signature.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig = new Signature(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point2.fromHex(publicKey);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN(h * is);
    const u2 = modN(r * is);
    const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
    if (!R)
      return false;
    const v = modN(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign,
    verify,
    ProjectivePoint: Point2,
    Signature,
    utils
  };
}
var b2n, h2b, DER, _0n5, _1n5, _2n4, _3n2, _4n2;
var init_weierstrass = __esm(() => {
  init_modular();
  init_utils3();
  init_utils3();
  init_curve();
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  ({ bytesToNumberBE: b2n, hexToBytes: h2b } = exports_utils);
  DER = {
    Err: class DERErr extends Error {
      constructor(m = "") {
        super(m);
      }
    },
    _parseInt(data) {
      const { Err: E } = DER;
      if (data.length < 2 || data[0] !== 2)
        throw new E("Invalid signature integer tag");
      const len = data[1];
      const res = data.subarray(2, len + 2);
      if (!len || res.length !== len)
        throw new E("Invalid signature integer: wrong length");
      if (res[0] & 128)
        throw new E("Invalid signature integer: negative");
      if (res[0] === 0 && !(res[1] & 128))
        throw new E("Invalid signature integer: unnecessary leading zero");
      return { d: b2n(res), l: data.subarray(len + 2) };
    },
    toSig(hex) {
      const { Err: E } = DER;
      const data = typeof hex === "string" ? h2b(hex) : hex;
      if (!(data instanceof Uint8Array))
        throw new Error("ui8a expected");
      let l = data.length;
      if (l < 2 || data[0] != 48)
        throw new E("Invalid signature tag");
      if (data[1] !== l - 2)
        throw new E("Invalid signature: incorrect length");
      const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
      const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
      if (rBytesLeft.length)
        throw new E("Invalid signature: left bytes after parsing");
      return { r, s };
    },
    hexFromSig(sig) {
      const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
      const h = (num) => {
        const hex = num.toString(16);
        return hex.length & 1 ? `0${hex}` : hex;
      };
      const s = slice(h(sig.s));
      const r = slice(h(sig.r));
      const shl = s.length / 2;
      const rhl = r.length / 2;
      const sl = h(shl);
      const rl = h(rhl);
      return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
    }
  };
  _0n5 = BigInt(0);
  _1n5 = BigInt(1);
  _2n4 = BigInt(2);
  _3n2 = BigInt(3);
  _4n2 = BigInt(4);
});

// node_modules/ethers/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash2) {
  return {
    hash: hash2,
    hmac: (key, ...msgs) => hmac(hash2, key, concatBytes(...msgs)),
    randomBytes: randomBytes2
  };
}
function createCurve(curveDef, defHash) {
  const create = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
  return Object.freeze({ ...create(defHash), create });
}
var init__shortw_utils = __esm(() => {
  init_hmac2();
  init_utils2();
  init_weierstrass();
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
});

// node_modules/ethers/node_modules/@noble/curves/esm/secp256k1.js
function sqrtMod(y) {
  const P = secp256k1P;
  const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow2(b3, _3n3, P) * b3 % P;
  const b9 = pow2(b6, _3n3, P) * b3 % P;
  const b11 = pow2(b9, _2n5, P) * b2 % P;
  const b22 = pow2(b11, _11n, P) * b11 % P;
  const b44 = pow2(b22, _22n, P) * b22 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n3, P) * b3 % P;
  const t1 = pow2(b223, _23n, P) * b22 % P;
  const t2 = pow2(t1, _6n, P) * b2 % P;
  const root = pow2(t2, _2n5, P);
  if (!Fp.eql(Fp.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var secp256k1P, secp256k1N, _1n6, _2n5, divNearest = (a, b) => (a + b / _2n5) / b, Fp, secp256k1, _0n6, Point2;
var init_secp256k1 = __esm(() => {
  init_sha256();
  init_modular();
  init__shortw_utils();
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
  secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  _1n6 = BigInt(1);
  _2n5 = BigInt(2);
  Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
  secp256k1 = createCurve({
    a: BigInt(0),
    b: BigInt(7),
    Fp,
    n: secp256k1N,
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    h: BigInt(1),
    lowS: true,
    endo: {
      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
      splitScalar: (k) => {
        const n = secp256k1N;
        const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
        const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
        const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
        const b2 = a1;
        const POW_2_128 = BigInt("0x100000000000000000000000000000000");
        const c1 = divNearest(b2 * k, n);
        const c2 = divNearest(-b1 * k, n);
        let k1 = mod(k - c1 * a1 - c2 * a2, n);
        let k2 = mod(-c1 * b1 - c2 * b2, n);
        const k1neg = k1 > POW_2_128;
        const k2neg = k2 > POW_2_128;
        if (k1neg)
          k1 = n - k1;
        if (k2neg)
          k2 = n - k2;
        if (k1 > POW_2_128 || k2 > POW_2_128) {
          throw new Error("splitScalar: Endomorphism failed, k=" + k);
        }
        return { k1neg, k1, k2neg, k2 };
      }
    }
  }, sha256);
  _0n6 = BigInt(0);
  Point2 = secp256k1.ProjectivePoint;
});

// node_modules/ethers/lib.esm/constants/addresses.js
var ZeroAddress = "0x0000000000000000000000000000000000000000";

// node_modules/ethers/lib.esm/constants/hashes.js
var ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";

// node_modules/ethers/lib.esm/constants/numbers.js
var N, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
var init_numbers = __esm(() => {
  N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  WeiPerEther = BigInt("1000000000000000000");
  MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
  MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
});

// node_modules/ethers/lib.esm/constants/strings.js
var EtherSymbol = "\u039E", MessagePrefix = `\x19Ethereum Signed Message:
`;

// node_modules/ethers/lib.esm/constants/index.js
var init_constants = __esm(() => {
  init_numbers();
});

// node_modules/ethers/lib.esm/crypto/signature.js
function toUint256(value) {
  return zeroPadValue(toBeArray(value), 32);
}
var BN_04, BN_13, BN_2, BN_27, BN_28, BN_35, _guard3, Signature;
var init_signature = __esm(() => {
  init_constants();
  init_utils();
  BN_04 = BigInt(0);
  BN_13 = BigInt(1);
  BN_2 = BigInt(2);
  BN_27 = BigInt(27);
  BN_28 = BigInt(28);
  BN_35 = BigInt(35);
  _guard3 = {};
  Signature = class Signature {
    #r;
    #s;
    #v;
    #networkV;
    get r() {
      return this.#r;
    }
    set r(value) {
      assertArgument(dataLength(value) === 32, "invalid r", "value", value);
      this.#r = hexlify(value);
    }
    get s() {
      assertArgument(parseInt(this.#s.substring(0, 3)) < 8, "non-canonical s; use ._s", "s", this.#s);
      return this.#s;
    }
    set s(_value) {
      assertArgument(dataLength(_value) === 32, "invalid s", "value", _value);
      this.#s = hexlify(_value);
    }
    get _s() {
      return this.#s;
    }
    isValid() {
      return parseInt(this.#s.substring(0, 3)) < 8;
    }
    get v() {
      return this.#v;
    }
    set v(value) {
      const v = getNumber(value, "value");
      assertArgument(v === 27 || v === 28, "invalid v", "v", value);
      this.#v = v;
    }
    get networkV() {
      return this.#networkV;
    }
    get legacyChainId() {
      const v = this.networkV;
      if (v == null) {
        return null;
      }
      return Signature.getChainId(v);
    }
    get yParity() {
      return this.v === 27 ? 0 : 1;
    }
    get yParityAndS() {
      const yParityAndS = getBytes(this.s);
      if (this.yParity) {
        yParityAndS[0] |= 128;
      }
      return hexlify(yParityAndS);
    }
    get compactSerialized() {
      return concat([this.r, this.yParityAndS]);
    }
    get serialized() {
      return concat([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
    }
    constructor(guard, r, s, v) {
      assertPrivate(guard, _guard3, "Signature");
      this.#r = r;
      this.#s = s;
      this.#v = v;
      this.#networkV = null;
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      return `Signature { r: "${this.r}", s: "${this._s}"${this.isValid() ? "" : ', valid: "false"'}, yParity: ${this.yParity}, networkV: ${this.networkV} }`;
    }
    clone() {
      const clone = new Signature(_guard3, this.r, this._s, this.v);
      if (this.networkV) {
        clone.#networkV = this.networkV;
      }
      return clone;
    }
    toJSON() {
      const networkV = this.networkV;
      return {
        _type: "signature",
        networkV: networkV != null ? networkV.toString() : null,
        r: this.r,
        s: this._s,
        v: this.v
      };
    }
    static getChainId(v) {
      const bv = getBigInt(v, "v");
      if (bv == BN_27 || bv == BN_28) {
        return BN_04;
      }
      assertArgument(bv >= BN_35, "invalid EIP-155 v", "v", v);
      return (bv - BN_35) / BN_2;
    }
    static getChainIdV(chainId, v) {
      return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);
    }
    static getNormalizedV(v) {
      const bv = getBigInt(v);
      if (bv === BN_04 || bv === BN_27) {
        return 27;
      }
      if (bv === BN_13 || bv === BN_28) {
        return 28;
      }
      assertArgument(bv >= BN_35, "invalid v", "v", v);
      return bv & BN_13 ? 27 : 28;
    }
    static from(sig) {
      function assertError(check, message) {
        assertArgument(check, message, "signature", sig);
      }
      if (sig == null) {
        return new Signature(_guard3, ZeroHash, ZeroHash, 27);
      }
      if (typeof sig === "string") {
        const bytes2 = getBytes(sig, "signature");
        if (bytes2.length === 64) {
          const r2 = hexlify(bytes2.slice(0, 32));
          const s2 = bytes2.slice(32, 64);
          const v2 = s2[0] & 128 ? 28 : 27;
          s2[0] &= 127;
          return new Signature(_guard3, r2, hexlify(s2), v2);
        }
        if (bytes2.length === 65) {
          const r2 = hexlify(bytes2.slice(0, 32));
          const s2 = hexlify(bytes2.slice(32, 64));
          const v2 = Signature.getNormalizedV(bytes2[64]);
          return new Signature(_guard3, r2, s2, v2);
        }
        assertError(false, "invalid raw signature length");
      }
      if (sig instanceof Signature) {
        return sig.clone();
      }
      const _r = sig.r;
      assertError(_r != null, "missing r");
      const r = toUint256(_r);
      const s = function(s2, yParityAndS) {
        if (s2 != null) {
          return toUint256(s2);
        }
        if (yParityAndS != null) {
          assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
          const bytes2 = getBytes(yParityAndS);
          bytes2[0] &= 127;
          return hexlify(bytes2);
        }
        assertError(false, "missing s");
      }(sig.s, sig.yParityAndS);
      const { networkV, v } = function(_v, yParityAndS, yParity) {
        if (_v != null) {
          const v2 = getBigInt(_v);
          return {
            networkV: v2 >= BN_35 ? v2 : undefined,
            v: Signature.getNormalizedV(v2)
          };
        }
        if (yParityAndS != null) {
          assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
          return { v: getBytes(yParityAndS)[0] & 128 ? 28 : 27 };
        }
        if (yParity != null) {
          switch (getNumber(yParity, "sig.yParity")) {
            case 0:
              return { v: 27 };
            case 1:
              return { v: 28 };
          }
          assertError(false, "invalid yParity");
        }
        assertError(false, "missing v");
      }(sig.v, sig.yParityAndS, sig.yParity);
      const result = new Signature(_guard3, r, s, v);
      if (networkV) {
        result.#networkV = networkV;
      }
      assertError(sig.yParity == null || getNumber(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
      assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
      return result;
    }
  };
});

// node_modules/ethers/lib.esm/crypto/signing-key.js
class SigningKey {
  #privateKey;
  constructor(privateKey) {
    assertArgument(dataLength(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
    this.#privateKey = hexlify(privateKey);
  }
  get privateKey() {
    return this.#privateKey;
  }
  get publicKey() {
    return SigningKey.computePublicKey(this.#privateKey);
  }
  get compressedPublicKey() {
    return SigningKey.computePublicKey(this.#privateKey, true);
  }
  sign(digest) {
    assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
    const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {
      lowS: true
    });
    return Signature.from({
      r: toBeHex(sig.r, 32),
      s: toBeHex(sig.s, 32),
      v: sig.recovery ? 28 : 27
    });
  }
  computeSharedSecret(other) {
    const pubKey = SigningKey.computePublicKey(other);
    return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));
  }
  static computePublicKey(key, compressed) {
    let bytes2 = getBytes(key, "key");
    if (bytes2.length === 32) {
      const pubKey = secp256k1.getPublicKey(bytes2, !!compressed);
      return hexlify(pubKey);
    }
    if (bytes2.length === 64) {
      const pub = new Uint8Array(65);
      pub[0] = 4;
      pub.set(bytes2, 1);
      bytes2 = pub;
    }
    const point = secp256k1.ProjectivePoint.fromHex(bytes2);
    return hexlify(point.toRawBytes(compressed));
  }
  static recoverPublicKey(digest, signature) {
    assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
    const sig = Signature.from(signature);
    let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));
    secpSig = secpSig.addRecoveryBit(sig.yParity);
    const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));
    assertArgument(pubKey != null, "invalid signature for digest", "signature", signature);
    return "0x" + pubKey.toHex(false);
  }
  static addPoints(p0, p1, compressed) {
    const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));
    const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));
    return "0x" + pub0.add(pub1).toHex(!!compressed);
  }
}
var init_signing_key = __esm(() => {
  init_secp256k1();
  init_utils();
  init_signature();
});

// node_modules/ethers/lib.esm/crypto/index.js
function lock() {
  computeHmac.lock();
  keccak256.lock();
  pbkdf2.lock();
  randomBytes3.lock();
  ripemd1602.lock();
  scrypt2.lock();
  scryptSync.lock();
  sha2562.lock();
  sha512.lock();
  randomBytes3.lock();
}
var init_crypto2 = __esm(() => {
  init_hmac();
  init_keccak();
  init_ripemd1602();
  init_pbkdf2();
  init_random();
  init_scrypt2();
  init_sha2();
  init_signing_key();
  init_signature();
});

// node_modules/ethers/lib.esm/address/address.js
function getChecksumAddress(address) {
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0;i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = getBytes(keccak256(expanded));
  for (let i = 0;i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function fromBase36(value) {
  value = value.toLowerCase();
  let result = BN_05;
  for (let i = 0;i < value.length; i++) {
    result = result * BN_36 + Base36[value[i]];
  }
  return result;
}
function getAddress(address) {
  assertArgument(typeof address === "string", "invalid address", "address", address);
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (!address.startsWith("0x")) {
      address = "0x" + address;
    }
    const result = getChecksumAddress(address);
    assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
    return result;
  }
  if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
    let result = fromBase36(address.substring(4)).toString(16);
    while (result.length < 40) {
      result = "0" + result;
    }
    return getChecksumAddress("0x" + result);
  }
  assertArgument(false, "invalid address", "address", address);
}
function getIcapAddress(address) {
  let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}
var BN_05, BN_36, ibanLookup, safeDigits = 15, Base36;
var init_address = __esm(() => {
  init_crypto2();
  init_utils();
  BN_05 = BigInt(0);
  BN_36 = BigInt(36);
  ibanLookup = {};
  for (let i = 0;i < 10; i++) {
    ibanLookup[String(i)] = String(i);
  }
  for (let i = 0;i < 26; i++) {
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }
  Base36 = function() {
    const result = {};
    for (let i = 0;i < 36; i++) {
      const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
      result[key] = BigInt(i);
    }
    return result;
  }();
});

// node_modules/ethers/lib.esm/address/contract-address.js
function getCreateAddress(tx) {
  const from = getAddress(tx.from);
  const nonce = getBigInt(tx.nonce, "tx.nonce");
  let nonceHex = nonce.toString(16);
  if (nonceHex === "0") {
    nonceHex = "0x";
  } else if (nonceHex.length % 2) {
    nonceHex = "0x0" + nonceHex;
  } else {
    nonceHex = "0x" + nonceHex;
  }
  return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));
}
function getCreate2Address(_from, _salt, _initCodeHash) {
  const from = getAddress(_from);
  const salt = getBytes(_salt, "salt");
  const initCodeHash = getBytes(_initCodeHash, "initCodeHash");
  assertArgument(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
  assertArgument(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
  return getAddress(dataSlice(keccak256(concat(["0xff", from, salt, initCodeHash])), 12));
}
var init_contract_address = __esm(() => {
  init_crypto2();
  init_utils();
  init_address();
});

// node_modules/ethers/lib.esm/address/checks.js
function isAddressable(value) {
  return value && typeof value.getAddress === "function";
}
function isAddress(value) {
  try {
    getAddress(value);
    return true;
  } catch (error) {}
  return false;
}
async function checkAddress(target, promise) {
  const result = await promise;
  if (result == null || result === "0x0000000000000000000000000000000000000000") {
    assert(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
    assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
  }
  return getAddress(result);
}
function resolveAddress(target, resolver) {
  if (typeof target === "string") {
    if (target.match(/^0x[0-9a-f]{40}$/i)) {
      return getAddress(target);
    }
    assert(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
    return checkAddress(target, resolver.resolveName(target));
  } else if (isAddressable(target)) {
    return checkAddress(target, target.getAddress());
  } else if (target && typeof target.then === "function") {
    return checkAddress(target, target);
  }
  assertArgument(false, "unsupported addressable value", "target", target);
}
var init_checks = __esm(() => {
  init_utils();
  init_address();
});

// node_modules/ethers/lib.esm/address/index.js
var init_address2 = __esm(() => {
  init_address();
  init_contract_address();
  init_checks();
});

// node_modules/ethers/lib.esm/abi/typed.js
function n(value, width) {
  let signed = false;
  if (width < 0) {
    signed = true;
    width *= -1;
  }
  return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
}
function b(value, size) {
  return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
}

class Typed {
  type;
  value;
  #options;
  _typedSymbol;
  constructor(gaurd, type, value, options) {
    if (options == null) {
      options = null;
    }
    assertPrivate(_gaurd, gaurd, "Typed");
    defineProperties(this, { _typedSymbol, type, value });
    this.#options = options;
    this.format();
  }
  format() {
    if (this.type === "array") {
      throw new Error("");
    } else if (this.type === "dynamicArray") {
      throw new Error("");
    } else if (this.type === "tuple") {
      return `tuple(${this.value.map((v) => v.format()).join(",")})`;
    }
    return this.type;
  }
  defaultValue() {
    return 0;
  }
  minValue() {
    return 0;
  }
  maxValue() {
    return 0;
  }
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  isData() {
    return this.type.startsWith("bytes");
  }
  isString() {
    return this.type === "string";
  }
  get tupleName() {
    if (this.type !== "tuple") {
      throw TypeError("not a tuple");
    }
    return this.#options;
  }
  get arrayLength() {
    if (this.type !== "array") {
      throw TypeError("not an array");
    }
    if (this.#options === true) {
      return -1;
    }
    if (this.#options === false) {
      return this.value.length;
    }
    return null;
  }
  static from(type, value) {
    return new Typed(_gaurd, type, value);
  }
  static uint8(v) {
    return n(v, 8);
  }
  static uint16(v) {
    return n(v, 16);
  }
  static uint24(v) {
    return n(v, 24);
  }
  static uint32(v) {
    return n(v, 32);
  }
  static uint40(v) {
    return n(v, 40);
  }
  static uint48(v) {
    return n(v, 48);
  }
  static uint56(v) {
    return n(v, 56);
  }
  static uint64(v) {
    return n(v, 64);
  }
  static uint72(v) {
    return n(v, 72);
  }
  static uint80(v) {
    return n(v, 80);
  }
  static uint88(v) {
    return n(v, 88);
  }
  static uint96(v) {
    return n(v, 96);
  }
  static uint104(v) {
    return n(v, 104);
  }
  static uint112(v) {
    return n(v, 112);
  }
  static uint120(v) {
    return n(v, 120);
  }
  static uint128(v) {
    return n(v, 128);
  }
  static uint136(v) {
    return n(v, 136);
  }
  static uint144(v) {
    return n(v, 144);
  }
  static uint152(v) {
    return n(v, 152);
  }
  static uint160(v) {
    return n(v, 160);
  }
  static uint168(v) {
    return n(v, 168);
  }
  static uint176(v) {
    return n(v, 176);
  }
  static uint184(v) {
    return n(v, 184);
  }
  static uint192(v) {
    return n(v, 192);
  }
  static uint200(v) {
    return n(v, 200);
  }
  static uint208(v) {
    return n(v, 208);
  }
  static uint216(v) {
    return n(v, 216);
  }
  static uint224(v) {
    return n(v, 224);
  }
  static uint232(v) {
    return n(v, 232);
  }
  static uint240(v) {
    return n(v, 240);
  }
  static uint248(v) {
    return n(v, 248);
  }
  static uint256(v) {
    return n(v, 256);
  }
  static uint(v) {
    return n(v, 256);
  }
  static int8(v) {
    return n(v, -8);
  }
  static int16(v) {
    return n(v, -16);
  }
  static int24(v) {
    return n(v, -24);
  }
  static int32(v) {
    return n(v, -32);
  }
  static int40(v) {
    return n(v, -40);
  }
  static int48(v) {
    return n(v, -48);
  }
  static int56(v) {
    return n(v, -56);
  }
  static int64(v) {
    return n(v, -64);
  }
  static int72(v) {
    return n(v, -72);
  }
  static int80(v) {
    return n(v, -80);
  }
  static int88(v) {
    return n(v, -88);
  }
  static int96(v) {
    return n(v, -96);
  }
  static int104(v) {
    return n(v, -104);
  }
  static int112(v) {
    return n(v, -112);
  }
  static int120(v) {
    return n(v, -120);
  }
  static int128(v) {
    return n(v, -128);
  }
  static int136(v) {
    return n(v, -136);
  }
  static int144(v) {
    return n(v, -144);
  }
  static int152(v) {
    return n(v, -152);
  }
  static int160(v) {
    return n(v, -160);
  }
  static int168(v) {
    return n(v, -168);
  }
  static int176(v) {
    return n(v, -176);
  }
  static int184(v) {
    return n(v, -184);
  }
  static int192(v) {
    return n(v, -192);
  }
  static int200(v) {
    return n(v, -200);
  }
  static int208(v) {
    return n(v, -208);
  }
  static int216(v) {
    return n(v, -216);
  }
  static int224(v) {
    return n(v, -224);
  }
  static int232(v) {
    return n(v, -232);
  }
  static int240(v) {
    return n(v, -240);
  }
  static int248(v) {
    return n(v, -248);
  }
  static int256(v) {
    return n(v, -256);
  }
  static int(v) {
    return n(v, -256);
  }
  static bytes1(v) {
    return b(v, 1);
  }
  static bytes2(v) {
    return b(v, 2);
  }
  static bytes3(v) {
    return b(v, 3);
  }
  static bytes4(v) {
    return b(v, 4);
  }
  static bytes5(v) {
    return b(v, 5);
  }
  static bytes6(v) {
    return b(v, 6);
  }
  static bytes7(v) {
    return b(v, 7);
  }
  static bytes8(v) {
    return b(v, 8);
  }
  static bytes9(v) {
    return b(v, 9);
  }
  static bytes10(v) {
    return b(v, 10);
  }
  static bytes11(v) {
    return b(v, 11);
  }
  static bytes12(v) {
    return b(v, 12);
  }
  static bytes13(v) {
    return b(v, 13);
  }
  static bytes14(v) {
    return b(v, 14);
  }
  static bytes15(v) {
    return b(v, 15);
  }
  static bytes16(v) {
    return b(v, 16);
  }
  static bytes17(v) {
    return b(v, 17);
  }
  static bytes18(v) {
    return b(v, 18);
  }
  static bytes19(v) {
    return b(v, 19);
  }
  static bytes20(v) {
    return b(v, 20);
  }
  static bytes21(v) {
    return b(v, 21);
  }
  static bytes22(v) {
    return b(v, 22);
  }
  static bytes23(v) {
    return b(v, 23);
  }
  static bytes24(v) {
    return b(v, 24);
  }
  static bytes25(v) {
    return b(v, 25);
  }
  static bytes26(v) {
    return b(v, 26);
  }
  static bytes27(v) {
    return b(v, 27);
  }
  static bytes28(v) {
    return b(v, 28);
  }
  static bytes29(v) {
    return b(v, 29);
  }
  static bytes30(v) {
    return b(v, 30);
  }
  static bytes31(v) {
    return b(v, 31);
  }
  static bytes32(v) {
    return b(v, 32);
  }
  static address(v) {
    return new Typed(_gaurd, "address", v);
  }
  static bool(v) {
    return new Typed(_gaurd, "bool", !!v);
  }
  static bytes(v) {
    return new Typed(_gaurd, "bytes", v);
  }
  static string(v) {
    return new Typed(_gaurd, "string", v);
  }
  static array(v, dynamic) {
    throw new Error("not implemented yet");
    return new Typed(_gaurd, "array", v, dynamic);
  }
  static tuple(v, name) {
    throw new Error("not implemented yet");
    return new Typed(_gaurd, "tuple", v, name);
  }
  static overrides(v) {
    return new Typed(_gaurd, "overrides", Object.assign({}, v));
  }
  static isTyped(value) {
    return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
  }
  static dereference(value, type) {
    if (Typed.isTyped(value)) {
      if (value.type !== type) {
        throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
      }
      return value.value;
    }
    return value;
  }
}
var _gaurd, _typedSymbol;
var init_typed = __esm(() => {
  init_utils();
  _gaurd = {};
  _typedSymbol = Symbol.for("_ethers_typed");
});

// node_modules/ethers/lib.esm/abi/coders/address.js
var AddressCoder;
var init_address3 = __esm(() => {
  init_address2();
  init_maths();
  init_typed();
  init_abstract_coder();
  AddressCoder = class AddressCoder extends Coder {
    constructor(localName) {
      super("address", "address", localName, false);
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, _value) {
      let value = Typed.dereference(_value, "string");
      try {
        value = getAddress(value);
      } catch (error) {
        return this._throwError(error.message, _value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      return getAddress(toBeHex(reader.readValue(), 20));
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/anonymous.js
var AnonymousCoder;
var init_anonymous = __esm(() => {
  init_abstract_coder();
  AnonymousCoder = class AnonymousCoder extends Coder {
    coder;
    constructor(coder) {
      super(coder.name, coder.type, "_", coder.dynamic);
      this.coder = coder;
    }
    defaultValue() {
      return this.coder.defaultValue();
    }
    encode(writer, value) {
      return this.coder.encode(writer, value);
    }
    decode(reader) {
      return this.coder.decode(reader);
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = [];
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      assert(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      assert(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      unique[name] = true;
      return values[name];
    });
  } else {
    assertArgument(false, "invalid tuple value", "tuple", values);
  }
  assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
  let staticWriter = new Writer;
  let dynamicWriter = new Writer;
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let keys = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readIndex();
      let offsetReader = baseReader.subReader(offset);
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value == undefined) {
      throw new Error("investigate");
    }
    values.push(value);
    keys.push(coder.localName || null);
  });
  return Result.fromItems(values, keys);
}
var ArrayCoder;
var init_array = __esm(() => {
  init_utils();
  init_typed();
  init_abstract_coder();
  init_anonymous();
  ArrayCoder = class ArrayCoder extends Coder {
    coder;
    length;
    constructor(coder, length, localName) {
      const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
      const dynamic = length === -1 || coder.dynamic;
      super("array", type, localName, dynamic);
      defineProperties(this, { coder, length });
    }
    defaultValue() {
      const defaultChild = this.coder.defaultValue();
      const result = [];
      for (let i = 0;i < this.length; i++) {
        result.push(defaultChild);
      }
      return result;
    }
    encode(writer, _value) {
      const value = Typed.dereference(_value, "array");
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      let count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      assertArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      let coders = [];
      for (let i = 0;i < value.length; i++) {
        coders.push(this.coder);
      }
      return pack(writer, coders, value);
    }
    decode(reader) {
      let count = this.length;
      if (count === -1) {
        count = reader.readIndex();
        assert(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
      }
      let coders = [];
      for (let i = 0;i < count; i++) {
        coders.push(new AnonymousCoder(this.coder));
      }
      return unpack(reader, coders);
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/boolean.js
var BooleanCoder;
var init_boolean = __esm(() => {
  init_typed();
  init_abstract_coder();
  BooleanCoder = class BooleanCoder extends Coder {
    constructor(localName) {
      super("bool", "bool", localName, false);
    }
    defaultValue() {
      return false;
    }
    encode(writer, _value) {
      const value = Typed.dereference(_value, "bool");
      return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
      return !!reader.readValue();
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/bytes.js
var DynamicBytesCoder, BytesCoder;
var init_bytes = __esm(() => {
  init_utils();
  init_abstract_coder();
  DynamicBytesCoder = class DynamicBytesCoder extends Coder {
    constructor(type, localName) {
      super(type, type, localName, true);
    }
    defaultValue() {
      return "0x";
    }
    encode(writer, value) {
      value = getBytesCopy(value);
      let length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
    decode(reader) {
      return reader.readBytes(reader.readIndex(), true);
    }
  };
  BytesCoder = class BytesCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("bytes", localName);
    }
    decode(reader) {
      return hexlify(super.decode(reader));
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js
var FixedBytesCoder;
var init_fixed_bytes = __esm(() => {
  init_utils();
  init_typed();
  init_abstract_coder();
  FixedBytesCoder = class FixedBytesCoder extends Coder {
    size;
    constructor(size, localName) {
      let name = "bytes" + String(size);
      super(name, name, localName, false);
      defineProperties(this, { size }, { size: "number" });
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, _value) {
      let data = getBytesCopy(Typed.dereference(_value, this.type));
      if (data.length !== this.size) {
        this._throwError("incorrect data length", _value);
      }
      return writer.writeBytes(data);
    }
    decode(reader) {
      return hexlify(reader.readBytes(this.size));
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/null.js
var Empty, NullCoder;
var init_null = __esm(() => {
  init_abstract_coder();
  Empty = new Uint8Array([]);
  NullCoder = class NullCoder extends Coder {
    constructor(localName) {
      super("null", "", localName, false);
    }
    defaultValue() {
      return null;
    }
    encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes(Empty);
    }
    decode(reader) {
      reader.readBytes(0);
      return null;
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/number.js
var BN_06, BN_14, BN_MAX_UINT256, NumberCoder;
var init_number = __esm(() => {
  init_utils();
  init_typed();
  init_abstract_coder();
  BN_06 = BigInt(0);
  BN_14 = BigInt(1);
  BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  NumberCoder = class NumberCoder extends Coder {
    size;
    signed;
    constructor(size, signed, localName) {
      const name = (signed ? "int" : "uint") + size * 8;
      super(name, name, localName, false);
      defineProperties(this, { size, signed }, { size: "number", signed: "boolean" });
    }
    defaultValue() {
      return 0;
    }
    encode(writer, _value) {
      let value = getBigInt(Typed.dereference(_value, this.type));
      let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);
      if (this.signed) {
        let bounds = mask(maxUintValue, this.size * 8 - 1);
        if (value > bounds || value < -(bounds + BN_14)) {
          this._throwError("value out-of-bounds", _value);
        }
        value = toTwos(value, 8 * WordSize);
      } else if (value < BN_06 || value > mask(maxUintValue, this.size * 8)) {
        this._throwError("value out-of-bounds", _value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      let value = mask(reader.readValue(), this.size * 8);
      if (this.signed) {
        value = fromTwos(value, this.size * 8);
      }
      return value;
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/string.js
var StringCoder;
var init_string = __esm(() => {
  init_utf8();
  init_typed();
  init_bytes();
  StringCoder = class StringCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("string", localName);
    }
    defaultValue() {
      return "";
    }
    encode(writer, _value) {
      return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, "string")));
    }
    decode(reader) {
      return toUtf8String(super.decode(reader));
    }
  };
});

// node_modules/ethers/lib.esm/abi/coders/tuple.js
var TupleCoder;
var init_tuple = __esm(() => {
  init_typed();
  init_abstract_coder();
  init_array();
  TupleCoder = class TupleCoder extends Coder {
    coders;
    constructor(coders, localName) {
      let dynamic = false;
      const types = [];
      coders.forEach((coder) => {
        if (coder.dynamic) {
          dynamic = true;
        }
        types.push(coder.type);
      });
      const type = "tuple(" + types.join(",") + ")";
      super("tuple", type, localName, dynamic);
      defineProperties(this, { coders: Object.freeze(coders.slice()) });
    }
    defaultValue() {
      const values = [];
      this.coders.forEach((coder) => {
        values.push(coder.defaultValue());
      });
      const uniqueNames = this.coders.reduce((accum, coder) => {
        const name = coder.localName;
        if (name) {
          if (!accum[name]) {
            accum[name] = 0;
          }
          accum[name]++;
        }
        return accum;
      }, {});
      this.coders.forEach((coder, index) => {
        let name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
          return;
        }
        if (name === "length") {
          name = "_length";
        }
        if (values[name] != null) {
          return;
        }
        values[name] = values[index];
      });
      return Object.freeze(values);
    }
    encode(writer, _value) {
      const value = Typed.dereference(_value, "tuple");
      return pack(writer, this.coders, value);
    }
    decode(reader) {
      return unpack(reader, this.coders);
    }
  };
});

// node_modules/ethers/lib.esm/transaction/accesslist.js
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: storageKeys.map((storageKey, index) => {
      assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        assertArgument(set.length === 2, "invalid slot set", `value[${index}]`, set);
        return accessSetify(set[0], set[1]);
      }
      assertArgument(set != null && typeof set === "object", "invalid address-slot set", "value", value);
      return accessSetify(set.address, set.storageKeys);
    });
  }
  assertArgument(value != null && typeof value === "object", "invalid access list", "value", value);
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a, b2) => a.address.localeCompare(b2.address));
  return result;
}
var init_accesslist = __esm(() => {
  init_address2();
  init_utils();
});

// node_modules/ethers/lib.esm/transaction/authorization.js
function authorizationify(auth) {
  return {
    address: getAddress(auth.address),
    nonce: getBigInt(auth.nonce != null ? auth.nonce : 0),
    chainId: getBigInt(auth.chainId != null ? auth.chainId : 0),
    signature: Signature.from(auth.signature)
  };
}
var init_authorization = __esm(() => {
  init_address2();
  init_crypto2();
  init_utils();
});

// node_modules/ethers/lib.esm/transaction/address.js
function computeAddress(key) {
  let pubkey;
  if (typeof key === "string") {
    pubkey = SigningKey.computePublicKey(key, false);
  } else {
    pubkey = key.publicKey;
  }
  return getAddress(keccak256("0x" + pubkey.substring(4)).substring(26));
}
function recoverAddress(digest, signature) {
  return computeAddress(SigningKey.recoverPublicKey(digest, signature));
}
var init_address4 = __esm(() => {
  init_address2();
  init_crypto2();
});

// node_modules/ethers/lib.esm/transaction/transaction.js
function getKzgLibrary(kzg) {
  const blobToKzgCommitment = (blob) => {
    if ("computeBlobProof" in kzg) {
      if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
        return getBytes(kzg.blobToKzgCommitment(hexlify(blob)));
      }
    } else if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
      return getBytes(kzg.blobToKzgCommitment(blob));
    }
    if ("blobToKZGCommitment" in kzg && typeof kzg.blobToKZGCommitment === "function") {
      return getBytes(kzg.blobToKZGCommitment(hexlify(blob)));
    }
    assertArgument(false, "unsupported KZG library", "kzg", kzg);
  };
  const computeBlobKzgProof = (blob, commitment) => {
    if ("computeBlobProof" in kzg && typeof kzg.computeBlobProof === "function") {
      return getBytes(kzg.computeBlobProof(hexlify(blob), hexlify(commitment)));
    }
    if ("computeBlobKzgProof" in kzg && typeof kzg.computeBlobKzgProof === "function") {
      return kzg.computeBlobKzgProof(blob, commitment);
    }
    if ("computeBlobKZGProof" in kzg && typeof kzg.computeBlobKZGProof === "function") {
      return getBytes(kzg.computeBlobKZGProof(hexlify(blob), hexlify(commitment)));
    }
    assertArgument(false, "unsupported KZG library", "kzg", kzg);
  };
  return { blobToKzgCommitment, computeBlobKzgProof };
}
function getVersionedHash(version2, hash2) {
  let versioned = version2.toString(16);
  while (versioned.length < 2) {
    versioned = "0" + versioned;
  }
  versioned += sha2562(hash2).substring(4);
  return "0x" + versioned;
}
function handleAddress(value) {
  if (value === "0x") {
    return null;
  }
  return getAddress(value);
}
function handleAccessList(value, param) {
  try {
    return accessListify(value);
  } catch (error) {
    assertArgument(false, error.message, param, value);
  }
}
function handleAuthorizationList(value, param) {
  try {
    if (!Array.isArray(value)) {
      throw new Error("authorizationList: invalid array");
    }
    const result = [];
    for (let i = 0;i < value.length; i++) {
      const auth = value[i];
      if (!Array.isArray(auth)) {
        throw new Error(`authorization[${i}]: invalid array`);
      }
      if (auth.length !== 6) {
        throw new Error(`authorization[${i}]: wrong length`);
      }
      if (!auth[1]) {
        throw new Error(`authorization[${i}]: null address`);
      }
      result.push({
        address: handleAddress(auth[1]),
        nonce: handleUint(auth[2], "nonce"),
        chainId: handleUint(auth[0], "chainId"),
        signature: Signature.from({
          yParity: handleNumber(auth[3], "yParity"),
          r: zeroPadValue(auth[4], 32),
          s: zeroPadValue(auth[5], 32)
        })
      });
    }
    return result;
  } catch (error) {
    assertArgument(false, error.message, param, value);
  }
}
function handleNumber(_value, param) {
  if (_value === "0x") {
    return 0;
  }
  return getNumber(_value, param);
}
function handleUint(_value, param) {
  if (_value === "0x") {
    return BN_07;
  }
  const value = getBigInt(_value, param);
  assertArgument(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
  return value;
}
function formatNumber(_value, name) {
  const value = getBigInt(_value, "value");
  const result = toBeArray(value);
  assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);
  return result;
}
function formatAccessList(value) {
  return accessListify(value).map((set) => [set.address, set.storageKeys]);
}
function formatAuthorizationList(value) {
  return value.map((a) => {
    return [
      formatNumber(a.chainId, "chainId"),
      a.address,
      formatNumber(a.nonce, "nonce"),
      formatNumber(a.signature.yParity, "yParity"),
      toBeArray(a.signature.r),
      toBeArray(a.signature.s)
    ];
  });
}
function formatHashes(value, param) {
  assertArgument(Array.isArray(value), `invalid ${param}`, "value", value);
  for (let i = 0;i < value.length; i++) {
    assertArgument(isHexString(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
  }
  return value;
}
function _parseLegacy(data) {
  const fields = decodeRlp(data);
  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
  const tx = {
    type: 0,
    nonce: handleNumber(fields[0], "nonce"),
    gasPrice: handleUint(fields[1], "gasPrice"),
    gasLimit: handleUint(fields[2], "gasLimit"),
    to: handleAddress(fields[3]),
    value: handleUint(fields[4], "value"),
    data: hexlify(fields[5]),
    chainId: BN_07
  };
  if (fields.length === 6) {
    return tx;
  }
  const v = handleUint(fields[6], "v");
  const r = handleUint(fields[7], "r");
  const s = handleUint(fields[8], "s");
  if (r === BN_07 && s === BN_07) {
    tx.chainId = v;
  } else {
    let chainId = (v - BN_352) / BN_22;
    if (chainId < BN_07) {
      chainId = BN_07;
    }
    tx.chainId = chainId;
    assertArgument(chainId !== BN_07 || (v === BN_272 || v === BN_282), "non-canonical legacy v", "v", fields[6]);
    tx.signature = Signature.from({
      r: zeroPadValue(fields[7], 32),
      s: zeroPadValue(fields[8], 32),
      v
    });
  }
  return tx;
}
function _serializeLegacy(tx, sig) {
  const fields = [
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.gasPrice || 0, "gasPrice"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data
  ];
  let chainId = BN_07;
  if (tx.chainId != BN_07) {
    chainId = getBigInt(tx.chainId, "tx.chainId");
    assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
  } else if (tx.signature) {
    const legacy = tx.signature.legacyChainId;
    if (legacy != null) {
      chainId = legacy;
    }
  }
  if (!sig) {
    if (chainId !== BN_07) {
      fields.push(toBeArray(chainId));
      fields.push("0x");
      fields.push("0x");
    }
    return encodeRlp(fields);
  }
  let v = BigInt(27 + sig.yParity);
  if (chainId !== BN_07) {
    v = Signature.getChainIdV(chainId, sig.v);
  } else if (BigInt(sig.v) !== v) {
    assertArgument(false, "tx.chainId/sig.v mismatch", "sig", sig);
  }
  fields.push(toBeArray(v));
  fields.push(toBeArray(sig.r));
  fields.push(toBeArray(sig.s));
  return encodeRlp(fields);
}
function _parseEipSignature(tx, fields) {
  let yParity;
  try {
    yParity = handleNumber(fields[0], "yParity");
    if (yParity !== 0 && yParity !== 1) {
      throw new Error("bad yParity");
    }
  } catch (error) {
    assertArgument(false, "invalid yParity", "yParity", fields[0]);
  }
  const r = zeroPadValue(fields[1], 32);
  const s = zeroPadValue(fields[2], 32);
  const signature = Signature.from({ r, s, yParity });
  tx.signature = signature;
}
function _parseEip1559(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", hexlify(data));
  const tx = {
    type: 2,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList")
  };
  if (fields.length === 9) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(9));
  return tx;
}
function _serializeEip1559(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x02", encodeRlp(fields)]);
}
function _parseEip2930(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", hexlify(data));
  const tx = {
    type: 1,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    gasPrice: handleUint(fields[2], "gasPrice"),
    gasLimit: handleUint(fields[3], "gasLimit"),
    to: handleAddress(fields[4]),
    value: handleUint(fields[5], "value"),
    data: hexlify(fields[6]),
    accessList: handleAccessList(fields[7], "accessList")
  };
  if (fields.length === 8) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(8));
  return tx;
}
function _serializeEip2930(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.gasPrice || 0, "gasPrice"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "recoveryParam"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x01", encodeRlp(fields)]);
}
function _parseEip4844(data) {
  let fields = decodeRlp(getBytes(data).slice(1));
  let typeName = "3";
  let blobs = null;
  if (fields.length === 4 && Array.isArray(fields[0])) {
    typeName = "3 (network format)";
    const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
    assertArgument(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
    assertArgument(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
    assertArgument(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
    assertArgument(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
    assertArgument(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
    blobs = [];
    for (let i = 0;i < fields[1].length; i++) {
      blobs.push({
        data: fBlobs[i],
        commitment: fCommits[i],
        proof: fProofs[i]
      });
    }
    fields = fields[0];
  }
  assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", hexlify(data));
  const tx = {
    type: 3,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList"),
    maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
    blobVersionedHashes: fields[10]
  };
  if (blobs) {
    tx.blobs = blobs;
  }
  assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
  assertArgument(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
  for (let i = 0;i < tx.blobVersionedHashes.length; i++) {
    assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
  }
  if (fields.length === 11) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(11));
  return tx;
}
function _serializeEip4844(tx, sig, blobs) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || ZeroAddress,
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || []),
    formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
    formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
    if (blobs) {
      return concat([
        "0x03",
        encodeRlp([
          fields,
          blobs.map((b2) => b2.data),
          blobs.map((b2) => b2.commitment),
          blobs.map((b2) => b2.proof)
        ])
      ]);
    }
  }
  return concat(["0x03", encodeRlp(fields)]);
}
function _parseEip7702(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 10 || fields.length === 13), "invalid field count for transaction type: 4", "data", hexlify(data));
  const tx = {
    type: 4,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList"),
    authorizationList: handleAuthorizationList(fields[9], "authorizationList")
  };
  if (fields.length === 10) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(10));
  return tx;
}
function _serializeEip7702(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || []),
    formatAuthorizationList(tx.authorizationList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x04", encodeRlp(fields)]);
}

class Transaction {
  #type;
  #to;
  #data;
  #nonce;
  #gasLimit;
  #gasPrice;
  #maxPriorityFeePerGas;
  #maxFeePerGas;
  #value;
  #chainId;
  #sig;
  #accessList;
  #maxFeePerBlobGas;
  #blobVersionedHashes;
  #kzg;
  #blobs;
  #auths;
  get type() {
    return this.#type;
  }
  set type(value) {
    switch (value) {
      case null:
        this.#type = null;
        break;
      case 0:
      case "legacy":
        this.#type = 0;
        break;
      case 1:
      case "berlin":
      case "eip-2930":
        this.#type = 1;
        break;
      case 2:
      case "london":
      case "eip-1559":
        this.#type = 2;
        break;
      case 3:
      case "cancun":
      case "eip-4844":
        this.#type = 3;
        break;
      case 4:
      case "pectra":
      case "eip-7702":
        this.#type = 4;
        break;
      default:
        assertArgument(false, "unsupported transaction type", "type", value);
    }
  }
  get typeName() {
    switch (this.type) {
      case 0:
        return "legacy";
      case 1:
        return "eip-2930";
      case 2:
        return "eip-1559";
      case 3:
        return "eip-4844";
      case 4:
        return "eip-7702";
    }
    return null;
  }
  get to() {
    const value = this.#to;
    if (value == null && this.type === 3) {
      return ZeroAddress;
    }
    return value;
  }
  set to(value) {
    this.#to = value == null ? null : getAddress(value);
  }
  get nonce() {
    return this.#nonce;
  }
  set nonce(value) {
    this.#nonce = getNumber(value, "value");
  }
  get gasLimit() {
    return this.#gasLimit;
  }
  set gasLimit(value) {
    this.#gasLimit = getBigInt(value);
  }
  get gasPrice() {
    const value = this.#gasPrice;
    if (value == null && (this.type === 0 || this.type === 1)) {
      return BN_07;
    }
    return value;
  }
  set gasPrice(value) {
    this.#gasPrice = value == null ? null : getBigInt(value, "gasPrice");
  }
  get maxPriorityFeePerGas() {
    const value = this.#maxPriorityFeePerGas;
    if (value == null) {
      if (this.type === 2 || this.type === 3) {
        return BN_07;
      }
      return null;
    }
    return value;
  }
  set maxPriorityFeePerGas(value) {
    this.#maxPriorityFeePerGas = value == null ? null : getBigInt(value, "maxPriorityFeePerGas");
  }
  get maxFeePerGas() {
    const value = this.#maxFeePerGas;
    if (value == null) {
      if (this.type === 2 || this.type === 3) {
        return BN_07;
      }
      return null;
    }
    return value;
  }
  set maxFeePerGas(value) {
    this.#maxFeePerGas = value == null ? null : getBigInt(value, "maxFeePerGas");
  }
  get data() {
    return this.#data;
  }
  set data(value) {
    this.#data = hexlify(value);
  }
  get value() {
    return this.#value;
  }
  set value(value) {
    this.#value = getBigInt(value, "value");
  }
  get chainId() {
    return this.#chainId;
  }
  set chainId(value) {
    this.#chainId = getBigInt(value);
  }
  get signature() {
    return this.#sig || null;
  }
  set signature(value) {
    this.#sig = value == null ? null : Signature.from(value);
  }
  get accessList() {
    const value = this.#accessList || null;
    if (value == null) {
      if (this.type === 1 || this.type === 2 || this.type === 3) {
        return [];
      }
      return null;
    }
    return value;
  }
  set accessList(value) {
    this.#accessList = value == null ? null : accessListify(value);
  }
  get authorizationList() {
    const value = this.#auths || null;
    if (value == null) {
      if (this.type === 4) {
        return [];
      }
    }
    return value;
  }
  set authorizationList(auths) {
    this.#auths = auths == null ? null : auths.map((a) => authorizationify(a));
  }
  get maxFeePerBlobGas() {
    const value = this.#maxFeePerBlobGas;
    if (value == null && this.type === 3) {
      return BN_07;
    }
    return value;
  }
  set maxFeePerBlobGas(value) {
    this.#maxFeePerBlobGas = value == null ? null : getBigInt(value, "maxFeePerBlobGas");
  }
  get blobVersionedHashes() {
    let value = this.#blobVersionedHashes;
    if (value == null && this.type === 3) {
      return [];
    }
    return value;
  }
  set blobVersionedHashes(value) {
    if (value != null) {
      assertArgument(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
      value = value.slice();
      for (let i = 0;i < value.length; i++) {
        assertArgument(isHexString(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
      }
    }
    this.#blobVersionedHashes = value;
  }
  get blobs() {
    if (this.#blobs == null) {
      return null;
    }
    return this.#blobs.map((b2) => Object.assign({}, b2));
  }
  set blobs(_blobs) {
    if (_blobs == null) {
      this.#blobs = null;
      return;
    }
    const blobs = [];
    const versionedHashes = [];
    for (let i = 0;i < _blobs.length; i++) {
      const blob = _blobs[i];
      if (isBytesLike(blob)) {
        assert(this.#kzg, "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
          operation: "set blobs()"
        });
        let data = getBytes(blob);
        assertArgument(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob);
        if (data.length !== BLOB_SIZE) {
          const padded = new Uint8Array(BLOB_SIZE);
          padded.set(data);
          data = padded;
        }
        const commit = this.#kzg.blobToKzgCommitment(data);
        const proof = hexlify(this.#kzg.computeBlobKzgProof(data, commit));
        blobs.push({
          data: hexlify(data),
          commitment: hexlify(commit),
          proof
        });
        versionedHashes.push(getVersionedHash(1, commit));
      } else {
        const commit = hexlify(blob.commitment);
        blobs.push({
          data: hexlify(blob.data),
          commitment: commit,
          proof: hexlify(blob.proof)
        });
        versionedHashes.push(getVersionedHash(1, commit));
      }
    }
    this.#blobs = blobs;
    this.#blobVersionedHashes = versionedHashes;
  }
  get kzg() {
    return this.#kzg;
  }
  set kzg(kzg) {
    if (kzg == null) {
      this.#kzg = null;
    } else {
      this.#kzg = getKzgLibrary(kzg);
    }
  }
  constructor() {
    this.#type = null;
    this.#to = null;
    this.#nonce = 0;
    this.#gasLimit = BN_07;
    this.#gasPrice = null;
    this.#maxPriorityFeePerGas = null;
    this.#maxFeePerGas = null;
    this.#data = "0x";
    this.#value = BN_07;
    this.#chainId = BN_07;
    this.#sig = null;
    this.#accessList = null;
    this.#maxFeePerBlobGas = null;
    this.#blobVersionedHashes = null;
    this.#kzg = null;
    this.#blobs = null;
    this.#auths = null;
  }
  get hash() {
    if (this.signature == null) {
      return null;
    }
    return keccak256(this.#getSerialized(true, false));
  }
  get unsignedHash() {
    return keccak256(this.unsignedSerialized);
  }
  get from() {
    if (this.signature == null) {
      return null;
    }
    return recoverAddress(this.unsignedHash, this.signature);
  }
  get fromPublicKey() {
    if (this.signature == null) {
      return null;
    }
    return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
  }
  isSigned() {
    return this.signature != null;
  }
  #getSerialized(signed, sidecar) {
    assert(!signed || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    const sig = signed ? this.signature : null;
    switch (this.inferType()) {
      case 0:
        return _serializeLegacy(this, sig);
      case 1:
        return _serializeEip2930(this, sig);
      case 2:
        return _serializeEip1559(this, sig);
      case 3:
        return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
      case 4:
        return _serializeEip7702(this, sig);
    }
    assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
  }
  get serialized() {
    return this.#getSerialized(true, true);
  }
  get unsignedSerialized() {
    return this.#getSerialized(false, false);
  }
  inferType() {
    const types = this.inferTypes();
    if (types.indexOf(2) >= 0) {
      return 2;
    }
    return types.pop();
  }
  inferTypes() {
    const hasGasPrice = this.gasPrice != null;
    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
    const hasAccessList = this.accessList != null;
    const hasBlob = this.#maxFeePerBlobGas != null || this.#blobVersionedHashes;
    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
      assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
    }
    assert(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
    assert(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
    const types = [];
    if (this.type != null) {
      types.push(this.type);
    } else {
      if (this.authorizationList && this.authorizationList.length) {
        types.push(4);
      } else if (hasFee) {
        types.push(2);
      } else if (hasGasPrice) {
        types.push(1);
        if (!hasAccessList) {
          types.push(0);
        }
      } else if (hasAccessList) {
        types.push(1);
        types.push(2);
      } else if (hasBlob && this.to) {
        types.push(3);
      } else {
        types.push(0);
        types.push(1);
        types.push(2);
        types.push(3);
      }
    }
    types.sort();
    return types;
  }
  isLegacy() {
    return this.type === 0;
  }
  isBerlin() {
    return this.type === 1;
  }
  isLondon() {
    return this.type === 2;
  }
  isCancun() {
    return this.type === 3;
  }
  clone() {
    return Transaction.from(this);
  }
  toJSON() {
    const s = (v) => {
      if (v == null) {
        return null;
      }
      return v.toString();
    };
    return {
      type: this.type,
      to: this.to,
      data: this.data,
      nonce: this.nonce,
      gasLimit: s(this.gasLimit),
      gasPrice: s(this.gasPrice),
      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
      maxFeePerGas: s(this.maxFeePerGas),
      value: s(this.value),
      chainId: s(this.chainId),
      sig: this.signature ? this.signature.toJSON() : null,
      accessList: this.accessList
    };
  }
  static from(tx) {
    if (tx == null) {
      return new Transaction;
    }
    if (typeof tx === "string") {
      const payload = getBytes(tx);
      if (payload[0] >= 127) {
        return Transaction.from(_parseLegacy(payload));
      }
      switch (payload[0]) {
        case 1:
          return Transaction.from(_parseEip2930(payload));
        case 2:
          return Transaction.from(_parseEip1559(payload));
        case 3:
          return Transaction.from(_parseEip4844(payload));
        case 4:
          return Transaction.from(_parseEip7702(payload));
      }
      assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
    }
    const result = new Transaction;
    if (tx.type != null) {
      result.type = tx.type;
    }
    if (tx.to != null) {
      result.to = tx.to;
    }
    if (tx.nonce != null) {
      result.nonce = tx.nonce;
    }
    if (tx.gasLimit != null) {
      result.gasLimit = tx.gasLimit;
    }
    if (tx.gasPrice != null) {
      result.gasPrice = tx.gasPrice;
    }
    if (tx.maxPriorityFeePerGas != null) {
      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
    }
    if (tx.maxFeePerGas != null) {
      result.maxFeePerGas = tx.maxFeePerGas;
    }
    if (tx.maxFeePerBlobGas != null) {
      result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
    }
    if (tx.data != null) {
      result.data = tx.data;
    }
    if (tx.value != null) {
      result.value = tx.value;
    }
    if (tx.chainId != null) {
      result.chainId = tx.chainId;
    }
    if (tx.signature != null) {
      result.signature = Signature.from(tx.signature);
    }
    if (tx.accessList != null) {
      result.accessList = tx.accessList;
    }
    if (tx.authorizationList != null) {
      result.authorizationList = tx.authorizationList;
    }
    if (tx.blobVersionedHashes != null) {
      result.blobVersionedHashes = tx.blobVersionedHashes;
    }
    if (tx.kzg != null) {
      result.kzg = tx.kzg;
    }
    if (tx.blobs != null) {
      result.blobs = tx.blobs;
    }
    if (tx.hash != null) {
      assertArgument(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
      assertArgument(result.hash === tx.hash, "hash mismatch", "tx", tx);
    }
    if (tx.from != null) {
      assertArgument(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
      assertArgument(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
    }
    return result;
  }
}
var BN_07, BN_22, BN_272, BN_282, BN_352, BN_MAX_UINT, BLOB_SIZE;
var init_transaction = __esm(() => {
  init_address2();
  init_crypto2();
  init_utils();
  init_accesslist();
  init_authorization();
  init_address4();
  BN_07 = BigInt(0);
  BN_22 = BigInt(2);
  BN_272 = BigInt(27);
  BN_282 = BigInt(28);
  BN_352 = BigInt(35);
  BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  BLOB_SIZE = 4096 * 32;
});

// node_modules/ethers/lib.esm/transaction/index.js
var init_transaction2 = __esm(() => {
  init_accesslist();
  init_authorization();
  init_address4();
  init_transaction();
});

// node_modules/ethers/lib.esm/hash/authorization.js
function hashAuthorization(auth) {
  assertArgument(typeof auth.address === "string", "invalid address for hashAuthorization", "auth.address", auth);
  return keccak256(concat([
    "0x05",
    encodeRlp([
      auth.chainId != null ? toBeArray(auth.chainId) : "0x",
      getAddress(auth.address),
      auth.nonce != null ? toBeArray(auth.nonce) : "0x"
    ])
  ]));
}
function verifyAuthorization(auth, sig) {
  return recoverAddress(hashAuthorization(auth), sig);
}
var init_authorization2 = __esm(() => {
  init_address2();
  init_crypto2();
  init_transaction2();
  init_utils();
});

// node_modules/ethers/lib.esm/hash/id.js
function id(value) {
  return keccak256(toUtf8Bytes(value));
}
var init_id = __esm(() => {
  init_crypto2();
  init_utils();
});

// node_modules/@adraffy/ens-normalize/dist/index.mjs
function decode_arithmetic(bytes2) {
  let pos = 0;
  function u16() {
    return bytes2[pos++] << 8 | bytes2[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1;i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes2[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N2 = 31;
  const FULL = 2 ** N2;
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0;i < N2; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b2) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b2 = b2 << 1 & MASK | 1;
    }
    while (a & ~b2 & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b2 = (b2 ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b2 - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
      case 2:
        return offset + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
      case 1:
        return offset + bytes2[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(s) {
  return read_payload(decode_arithmetic(unsafe_atob(s)));
}
function unsafe_atob(s) {
  let lookup = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
  let n2 = s.length;
  let ret = new Uint8Array(6 * n2 >> 3);
  for (let i = 0, pos = 0, width = 0, carry = 0;i < n2; i++) {
    carry = carry << 6 | lookup[s.charCodeAt(i)];
    width += 6;
    if (width >= 8) {
      ret[pos++] = carry >> (width -= 8);
    }
  }
  return ret;
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_deltas(n2, next) {
  let v = Array(n2);
  for (let i = 0, x = 0;i < n2; i++)
    v[i] = x += signed(next());
  return v;
}
function read_sorted(next, prev = 0) {
  let ret = [];
  while (true) {
    let x = next();
    let n2 = next();
    if (!n2)
      break;
    prev += x;
    for (let i = 0;i < n2; i++) {
      ret.push(prev + i);
    }
    prev += n2 + 1;
  }
  return ret;
}
function read_sorted_arrays(next) {
  return read_array_while(() => {
    let v = read_sorted(next);
    if (v.length)
      return v;
  });
}
function read_mapped(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0)
      break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0)
      break;
    ret.push(read_replacement_table(w, next));
  }
  return ret.flat();
}
function read_array_while(next) {
  let v = [];
  while (true) {
    let x = next(v.length);
    if (!x)
      break;
    v.push(x);
  }
  return v;
}
function read_transposed(n2, w, next) {
  let m = Array(n2).fill().map(() => []);
  for (let i = 0;i < w; i++) {
    read_deltas(n2, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_array_while(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return m.flatMap((v, i) => {
    let [x, ...ys] = v;
    return Array(vN[i]).fill().map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  });
}
function read_replacement_table(w, next) {
  let n2 = 1 + next();
  let m = read_transposed(n2, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_trie(next) {
  let ret = [];
  let sorted = read_sorted(next);
  expand(decode([]), []);
  return ret;
  function decode(Q) {
    let S = next();
    let B = read_array_while(() => {
      let cps = read_sorted(next).map((i) => sorted[i]);
      if (cps.length)
        return decode(cps);
    });
    return { S, B, Q };
  }
  function expand({ S, B }, cps, saved) {
    if (S & 4 && saved === cps[cps.length - 1])
      return;
    if (S & 2)
      saved = cps[cps.length - 1];
    if (S & 1)
      ret.push(cps);
    for (let br of B) {
      for (let cp of br.Q) {
        expand(br, [...cps, cp], saved);
      }
    }
  }
}
function hex_cp(cp) {
  return cp.toString(16).toUpperCase().padStart(2, "0");
}
function quote_cp(cp) {
  return `{${hex_cp(cp)}}`;
}
function explode_cp(s) {
  let cps = [];
  for (let pos = 0, len = s.length;pos < len; ) {
    let cp = s.codePointAt(pos);
    pos += cp < 65536 ? 1 : 2;
    cps.push(cp);
  }
  return cps;
}
function str_from_cps(cps) {
  const chunk = 4096;
  let len = cps.length;
  if (len < chunk)
    return String.fromCodePoint(...cps);
  let buf = [];
  for (let i = 0;i < len; ) {
    buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
  }
  return buf.join("");
}
function compare_arrays(a, b2) {
  let n2 = a.length;
  let c = n2 - b2.length;
  for (let i = 0;c == 0 && i < n2; i++)
    c = a[i] - b2[i];
  return c;
}
function unpack_cc(packed) {
  return packed >> 24 & 255;
}
function unpack_cp(packed) {
  return packed & 16777215;
}
function init$1() {
  let r = read_compressed_payload(COMPRESSED);
  SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
  EXCLUSIONS = new Set(read_sorted(r));
  DECOMP = new Map;
  RECOMP = new Map;
  for (let [cp, cps] of read_mapped(r)) {
    if (!EXCLUSIONS.has(cp) && cps.length == 2) {
      let [a, b2] = cps;
      let bucket = RECOMP.get(a);
      if (!bucket) {
        bucket = new Map;
        RECOMP.set(a, bucket);
      }
      bucket.set(b2, cp);
    }
    DECOMP.set(cp, cps.reverse());
  }
}
function is_hangul(cp) {
  return cp >= S0 && cp < S1;
}
function compose_pair(a, b2) {
  if (a >= L0 && a < L1 && b2 >= V0 && b2 < V1) {
    return S0 + (a - L0) * N_COUNT + (b2 - V0) * T_COUNT;
  } else if (is_hangul(a) && b2 > T0 && b2 < T1 && (a - S0) % T_COUNT == 0) {
    return a + (b2 - T0);
  } else {
    let recomp = RECOMP.get(a);
    if (recomp) {
      recomp = recomp.get(b2);
      if (recomp) {
        return recomp;
      }
    }
    return -1;
  }
}
function decomposed(cps) {
  if (!SHIFTED_RANK)
    init$1();
  let ret = [];
  let buf = [];
  let check_order = false;
  function add(cp) {
    let cc = SHIFTED_RANK.get(cp);
    if (cc) {
      check_order = true;
      cp |= cc;
    }
    ret.push(cp);
  }
  for (let cp of cps) {
    while (true) {
      if (cp < 128) {
        ret.push(cp);
      } else if (is_hangul(cp)) {
        let s_index = cp - S0;
        let l_index = s_index / N_COUNT | 0;
        let v_index = s_index % N_COUNT / T_COUNT | 0;
        let t_index = s_index % T_COUNT;
        add(L0 + l_index);
        add(V0 + v_index);
        if (t_index > 0)
          add(T0 + t_index);
      } else {
        let mapped = DECOMP.get(cp);
        if (mapped) {
          buf.push(...mapped);
        } else {
          add(cp);
        }
      }
      if (!buf.length)
        break;
      cp = buf.pop();
    }
  }
  if (check_order && ret.length > 1) {
    let prev_cc = unpack_cc(ret[0]);
    for (let i = 1;i < ret.length; i++) {
      let cc = unpack_cc(ret[i]);
      if (cc == 0 || prev_cc <= cc) {
        prev_cc = cc;
        continue;
      }
      let j = i - 1;
      while (true) {
        let tmp = ret[j + 1];
        ret[j + 1] = ret[j];
        ret[j] = tmp;
        if (!j)
          break;
        prev_cc = unpack_cc(ret[--j]);
        if (prev_cc <= cc)
          break;
      }
      prev_cc = unpack_cc(ret[i]);
    }
  }
  return ret;
}
function composed_from_decomposed(v) {
  let ret = [];
  let stack = [];
  let prev_cp = -1;
  let prev_cc = 0;
  for (let packed of v) {
    let cc = unpack_cc(packed);
    let cp = unpack_cp(packed);
    if (prev_cp == -1) {
      if (cc == 0) {
        prev_cp = cp;
      } else {
        ret.push(cp);
      }
    } else if (prev_cc > 0 && prev_cc >= cc) {
      if (cc == 0) {
        ret.push(prev_cp, ...stack);
        stack.length = 0;
        prev_cp = cp;
      } else {
        stack.push(cp);
      }
      prev_cc = cc;
    } else {
      let composed = compose_pair(prev_cp, cp);
      if (composed >= 0) {
        prev_cp = composed;
      } else if (prev_cc == 0 && cc == 0) {
        ret.push(prev_cp);
        prev_cp = cp;
      } else {
        stack.push(cp);
        prev_cc = cc;
      }
    }
  }
  if (prev_cp >= 0) {
    ret.push(prev_cp, ...stack);
  }
  return ret;
}
function nfd(cps) {
  return decomposed(cps).map(unpack_cp);
}
function nfc(cps) {
  return composed_from_decomposed(decomposed(cps));
}
function group_has_cp(g, cp) {
  return g.P.has(cp) || g.Q.has(cp);
}
function init() {
  if (MAPPED)
    return;
  let r = read_compressed_payload(COMPRESSED$1);
  const read_sorted_array = () => read_sorted(r);
  const read_sorted_set = () => new Set(read_sorted_array());
  const set_add_many = (set, v) => v.forEach((x) => set.add(x));
  MAPPED = new Map(read_mapped(r));
  IGNORED = read_sorted_set();
  CM = read_sorted_array();
  NSM = new Set(read_sorted_array().map((i) => CM[i]));
  CM = new Set(CM);
  ESCAPE = read_sorted_set();
  NFC_CHECK = read_sorted_set();
  let chunks = read_sorted_arrays(r);
  let unrestricted = r();
  const read_chunked = () => {
    let set = new Set;
    read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
    set_add_many(set, read_sorted_array());
    return set;
  };
  GROUPS = read_array_while((i) => {
    let N2 = read_array_while(r).map((x) => x + 96);
    if (N2.length) {
      let R = i >= unrestricted;
      N2[0] -= 32;
      N2 = str_from_cps(N2);
      if (R)
        N2 = `Restricted[${N2}]`;
      let P = read_chunked();
      let Q = read_chunked();
      let M = !r();
      return { N: N2, P, Q, M, R };
    }
  });
  WHOLE_VALID = read_sorted_set();
  WHOLE_MAP = new Map;
  let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b2) => a - b2);
  wholes.forEach((cp, i) => {
    let d = r();
    let w = wholes[i] = d ? wholes[i - d] : { V: [], M: new Map };
    w.V.push(cp);
    if (!WHOLE_VALID.has(cp)) {
      WHOLE_MAP.set(cp, w);
    }
  });
  for (let { V, M } of new Set(WHOLE_MAP.values())) {
    let recs = [];
    for (let cp of V) {
      let gs = GROUPS.filter((g) => group_has_cp(g, cp));
      let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
      if (!rec) {
        rec = { G: new Set, V: [] };
        recs.push(rec);
      }
      rec.V.push(cp);
      set_add_many(rec.G, gs);
    }
    let union = recs.flatMap((x) => Array_from(x.G));
    for (let { G, V: V2 } of recs) {
      let complement = new Set(union.filter((g) => !G.has(g)));
      for (let cp of V2) {
        M.set(cp, complement);
      }
    }
  }
  VALID = new Set;
  let multi = new Set;
  const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
  for (let g of GROUPS) {
    for (let cp of g.P)
      add_to_union(cp);
    for (let cp of g.Q)
      add_to_union(cp);
  }
  for (let cp of VALID) {
    if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
      WHOLE_MAP.set(cp, UNIQUE_PH);
    }
  }
  set_add_many(VALID, nfd(VALID));
  EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
  EMOJI_ROOT = new Map;
  for (let cps of EMOJI_LIST) {
    let prev = [EMOJI_ROOT];
    for (let cp of cps) {
      let next = prev.map((node) => {
        let child = node.get(cp);
        if (!child) {
          child = new Map;
          node.set(cp, child);
        }
        return child;
      });
      if (cp === FE0F) {
        prev.push(...next);
      } else {
        prev = next;
      }
    }
    for (let x of prev) {
      x.V = cps;
    }
  }
}
function quoted_cp(cp) {
  return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
}
function bidi_qq(s) {
  return `"${s}"\u200E`;
}
function check_label_extension(cps) {
  if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
    throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
  }
}
function check_leading_underscore(cps) {
  const UNDERSCORE = 95;
  for (let i = cps.lastIndexOf(UNDERSCORE);i > 0; ) {
    if (cps[--i] !== UNDERSCORE) {
      throw new Error("underscore allowed only at start");
    }
  }
}
function check_fenced(cps) {
  let cp = cps[0];
  let prev = FENCED.get(cp);
  if (prev)
    throw error_placement(`leading ${prev}`);
  let n2 = cps.length;
  let last = -1;
  for (let i = 1;i < n2; i++) {
    cp = cps[i];
    let match = FENCED.get(cp);
    if (match) {
      if (last == i)
        throw error_placement(`${prev} + ${match}`);
      last = i + 1;
      prev = match;
    }
  }
  if (last == n2)
    throw error_placement(`trailing ${prev}`);
}
function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
  let buf = [];
  if (is_combining_mark(cps[0]))
    buf.push("\u25CC");
  if (cps.length > max) {
    max >>= 1;
    cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
  }
  let prev = 0;
  let n2 = cps.length;
  for (let i = 0;i < n2; i++) {
    let cp = cps[i];
    if (should_escape(cp)) {
      buf.push(str_from_cps(cps.slice(prev, i)));
      buf.push(quoter(cp));
      prev = i + 1;
    }
  }
  buf.push(str_from_cps(cps.slice(prev, n2)));
  return buf.join("");
}
function is_combining_mark(cp) {
  init();
  return CM.has(cp);
}
function should_escape(cp) {
  init();
  return ESCAPE.has(cp);
}
function ens_normalize(name) {
  return flatten(split2(name, nfc, filter_fe0f));
}
function split2(name, nf, ef) {
  if (!name)
    return [];
  init();
  let offset = 0;
  return name.split(STOP_CH).map((label) => {
    let input = explode_cp(label);
    let info = {
      input,
      offset
    };
    offset += input.length + 1;
    try {
      let tokens = info.tokens = tokens_from_str(input, nf, ef);
      let token_count = tokens.length;
      let type;
      if (!token_count) {
        throw new Error(`empty label`);
      }
      let norm = info.output = tokens.flat();
      check_leading_underscore(norm);
      let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
      if (!emoji && norm.every((cp) => cp < 128)) {
        check_label_extension(norm);
        type = "ASCII";
      } else {
        let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
        if (!chars.length) {
          type = "Emoji";
        } else {
          if (CM.has(norm[0]))
            throw error_placement("leading combining mark");
          for (let i = 1;i < token_count; i++) {
            let cps = tokens[i];
            if (!cps.is_emoji && CM.has(cps[0])) {
              throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
            }
          }
          check_fenced(norm);
          let unique = Array_from(new Set(chars));
          let [g] = determine_group(unique);
          check_group(g, chars);
          check_whole(g, unique);
          type = g.N;
        }
      }
      info.type = type;
    } catch (err) {
      info.error = err;
    }
    return info;
  });
}
function check_whole(group, unique) {
  let maker;
  let shared = [];
  for (let cp of unique) {
    let whole = WHOLE_MAP.get(cp);
    if (whole === UNIQUE_PH)
      return;
    if (whole) {
      let set = whole.M.get(cp);
      maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
      if (!maker.length)
        return;
    } else {
      shared.push(cp);
    }
  }
  if (maker) {
    for (let g of maker) {
      if (shared.every((cp) => group_has_cp(g, cp))) {
        throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
      }
    }
  }
}
function determine_group(unique) {
  let groups = GROUPS;
  for (let cp of unique) {
    let gs = groups.filter((g) => group_has_cp(g, cp));
    if (!gs.length) {
      if (!GROUPS.some((g) => group_has_cp(g, cp))) {
        throw error_disallowed(cp);
      } else {
        throw error_group_member(groups[0], cp);
      }
    }
    groups = gs;
    if (gs.length == 1)
      break;
  }
  return groups;
}
function flatten(split3) {
  return split3.map(({ input, error, output: output2 }) => {
    if (error) {
      let msg = error.message;
      throw new Error(split3.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
    }
    return str_from_cps(output2);
  }).join(STOP_CH);
}
function error_disallowed(cp) {
  return new Error(`disallowed character: ${quoted_cp(cp)}`);
}
function error_group_member(g, cp) {
  let quoted = quoted_cp(cp);
  let gg = GROUPS.find((g2) => g2.P.has(cp));
  if (gg) {
    quoted = `${gg.N} ${quoted}`;
  }
  return new Error(`illegal mixture: ${g.N} + ${quoted}`);
}
function error_placement(where) {
  return new Error(`illegal placement: ${where}`);
}
function check_group(g, cps) {
  for (let cp of cps) {
    if (!group_has_cp(g, cp)) {
      throw error_group_member(g, cp);
    }
  }
  if (g.M) {
    let decomposed2 = nfd(cps);
    for (let i = 1, e = decomposed2.length;i < e; i++) {
      if (NSM.has(decomposed2[i])) {
        let j = i + 1;
        for (let cp;j < e && NSM.has(cp = decomposed2[j]); j++) {
          for (let k = i;k < j; k++) {
            if (decomposed2[k] == cp) {
              throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
            }
          }
        }
        if (j - i > NSM_MAX) {
          throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
        }
        i = j;
      }
    }
  }
}
function tokens_from_str(input, nf, ef) {
  let ret = [];
  let chars = [];
  input = input.slice().reverse();
  while (input.length) {
    let emoji = consume_emoji_reversed(input);
    if (emoji) {
      if (chars.length) {
        ret.push(nf(chars));
        chars = [];
      }
      ret.push(ef(emoji));
    } else {
      let cp = input.pop();
      if (VALID.has(cp)) {
        chars.push(cp);
      } else {
        let cps = MAPPED.get(cp);
        if (cps) {
          chars.push(...cps);
        } else if (!IGNORED.has(cp)) {
          throw error_disallowed(cp);
        }
      }
    }
  }
  if (chars.length) {
    ret.push(nf(chars));
  }
  return ret;
}
function filter_fe0f(cps) {
  return cps.filter((cp) => cp != FE0F);
}
function consume_emoji_reversed(cps, eaten) {
  let node = EMOJI_ROOT;
  let emoji;
  let pos = cps.length;
  while (pos) {
    node = node.get(cps[--pos]);
    if (!node)
      break;
    let { V } = node;
    if (V) {
      emoji = V;
      if (eaten)
        eaten.push(...cps.slice(pos).reverse());
      cps.length = pos;
    }
  }
  return emoji;
}
var COMPRESSED$1 = "", FENCED, NSM_MAX = 4, COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g", S0 = 44032, L0 = 4352, V0 = 4449, T0 = 4519, L_COUNT = 19, V_COUNT = 21, T_COUNT = 28, N_COUNT, S_COUNT, S1, L1, V1, T1, SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP, HYPHEN = 45, STOP_CH = ".", FE0F = 65039, UNIQUE_PH = 1, Array_from = (x) => Array.from(x), Emoji, MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;
var init_dist = __esm(() => {
  FENCED = new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
  N_COUNT = V_COUNT * T_COUNT;
  S_COUNT = L_COUNT * N_COUNT;
  S1 = S0 + S_COUNT;
  L1 = L0 + L_COUNT;
  V1 = V0 + V_COUNT;
  T1 = T0 + T_COUNT;
  Emoji = class Emoji extends Array {
    get is_emoji() {
      return true;
    }
  };
});

// node_modules/ethers/lib.esm/hash/namehash.js
function checkComponent(comp) {
  assertArgument(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
  return comp;
}
function ensNameSplit(name) {
  const bytes2 = toUtf8Bytes(ensNormalize(name));
  const comps = [];
  if (name.length === 0) {
    return comps;
  }
  let last = 0;
  for (let i = 0;i < bytes2.length; i++) {
    const d = bytes2[i];
    if (d === 46) {
      comps.push(checkComponent(bytes2.slice(last, i)));
      last = i + 1;
    }
  }
  assertArgument(last < bytes2.length, "invalid ENS name; empty component", "name", name);
  comps.push(checkComponent(bytes2.slice(last)));
  return comps;
}
function ensNormalize(name) {
  try {
    if (name.length === 0) {
      throw new Error("empty label");
    }
    return ens_normalize(name);
  } catch (error) {
    assertArgument(false, `invalid ENS name (${error.message})`, "name", name);
  }
}
function isValidName(name) {
  try {
    return ensNameSplit(name).length !== 0;
  } catch (error) {}
  return false;
}
function namehash(name) {
  assertArgument(typeof name === "string", "invalid ENS name; not a string", "name", name);
  assertArgument(name.length, `invalid ENS name (empty label)`, "name", name);
  let result = Zeros2;
  const comps = ensNameSplit(name);
  while (comps.length) {
    result = keccak256(concat([result, keccak256(comps.pop())]));
  }
  return hexlify(result);
}
function dnsEncode(name, _maxLength) {
  const length = _maxLength != null ? _maxLength : 63;
  assertArgument(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
  return hexlify(concat(ensNameSplit(name).map((comp) => {
    assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
    const bytes2 = new Uint8Array(comp.length + 1);
    bytes2.set(comp, 1);
    bytes2[0] = bytes2.length - 1;
    return bytes2;
  }))) + "00";
}
var Zeros2;
var init_namehash = __esm(() => {
  init_crypto2();
  init_utils();
  init_dist();
  Zeros2 = new Uint8Array(32);
  Zeros2.fill(0);
});

// node_modules/ethers/lib.esm/hash/message.js
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat([
    toUtf8Bytes(MessagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}
function verifyMessage(message, sig) {
  const digest = hashMessage(message);
  return recoverAddress(digest, sig);
}
var init_message = __esm(() => {
  init_crypto2();
  init_constants();
  init_transaction2();
  init_utils();
});

// node_modules/ethers/lib.esm/hash/solidity.js
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(getAddress(value));
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return getBytes(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let signed2 = match[1] === "int";
    let size = parseInt(match[2] || "256");
    assertArgument((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
    if (isArray) {
      size = 256;
    }
    if (signed2) {
      value = toTwos(value, size);
    }
    return getBytes(zeroPadValue(toBeArray(value), size / 8));
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    assertArgument(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
    assertArgument(dataLength(value) === size, `invalid value for ${type}`, "value", value);
    if (isArray) {
      return getBytes(zeroPadBytes(value, 32));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    assertArgument(count === value.length, `invalid array length for ${type}`, "value", value);
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return getBytes(concat(result));
  }
  assertArgument(false, "invalid type", "type", type);
}
function solidityPacked(types, values) {
  assertArgument(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function solidityPackedKeccak256(types, values) {
  return keccak256(solidityPacked(types, values));
}
function solidityPackedSha256(types, values) {
  return sha2562(solidityPacked(types, values));
}
var regexBytes, regexNumber, regexArray;
var init_solidity = __esm(() => {
  init_address2();
  init_crypto2();
  init_utils();
  regexBytes = new RegExp("^bytes([0-9]+)$");
  regexNumber = new RegExp("^(u?int)([0-9]*)$");
  regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
});

// node_modules/ethers/lib.esm/hash/typed-data.js
function hexPadRight(value) {
  const bytes2 = getBytes(value);
  const padOffset = bytes2.length % 32;
  if (padOffset) {
    return concat([bytes2, padding.slice(padOffset)]);
  }
  return hexlify(bytes2);
}
function checkString(key) {
  return function(value) {
    assertArgument(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    return value;
  };
}
function getBaseEncoder(type) {
  {
    const match = type.match(/^(u?)int(\d+)$/);
    if (match) {
      const signed2 = match[1] === "";
      const width = parseInt(match[2]);
      assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
      const boundsUpper = mask(BN_MAX_UINT2562, signed2 ? width - 1 : width);
      const boundsLower = signed2 ? (boundsUpper + BN_15) * BN__1 : BN_08;
      return function(_value) {
        const value = getBigInt(_value, "value");
        assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
        return toBeHex(signed2 ? toTwos(value, 256) : value, 32);
      };
    }
  }
  {
    const match = type.match(/^bytes(\d+)$/);
    if (match) {
      const width = parseInt(match[1]);
      assertArgument(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
      return function(value) {
        const bytes2 = getBytes(value);
        assertArgument(bytes2.length === width, `invalid length for ${type}`, "value", value);
        return hexPadRight(value);
      };
    }
  }
  switch (type) {
    case "address":
      return function(value) {
        return zeroPadValue(getAddress(value), 32);
      };
    case "bool":
      return function(value) {
        return !value ? hexFalse : hexTrue;
      };
    case "bytes":
      return function(value) {
        return keccak256(value);
      };
    case "string":
      return function(value) {
        return id(value);
      };
  }
  return null;
}
function encodeType(name, fields) {
  return `${name}(${fields.map(({ name: name2, type }) => type + " " + name2).join(",")})`;
}
function splitArray(type) {
  const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
  if (match) {
    return {
      base: match[1],
      index: match[2] + match[4],
      array: {
        base: match[1],
        prefix: match[1] + match[2],
        count: match[5] ? parseInt(match[5]) : -1
      }
    };
  }
  return { base: type };
}

class TypedDataEncoder {
  primaryType;
  #types;
  get types() {
    return JSON.parse(this.#types);
  }
  #fullTypes;
  #encoderCache;
  constructor(_types) {
    this.#fullTypes = new Map;
    this.#encoderCache = new Map;
    const links = new Map;
    const parents = new Map;
    const subtypes = new Map;
    const types = {};
    Object.keys(_types).forEach((type) => {
      types[type] = _types[type].map(({ name, type: type2 }) => {
        let { base, index } = splitArray(type2);
        if (base === "int" && !_types["int"]) {
          base = "int256";
        }
        if (base === "uint" && !_types["uint"]) {
          base = "uint256";
        }
        return { name, type: base + (index || "") };
      });
      links.set(type, new Set);
      parents.set(type, []);
      subtypes.set(type, new Set);
    });
    this.#types = JSON.stringify(types);
    for (const name in types) {
      const uniqueNames = new Set;
      for (const field of types[name]) {
        assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types);
        uniqueNames.add(field.name);
        const baseType = splitArray(field.type).base;
        assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types);
        const encoder = getBaseEncoder(baseType);
        if (encoder) {
          continue;
        }
        assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types);
        parents.get(baseType).push(name);
        links.get(name).add(baseType);
      }
    }
    const primaryTypes = Array.from(parents.keys()).filter((n2) => parents.get(n2).length === 0);
    assertArgument(primaryTypes.length !== 0, "missing primary type", "types", _types);
    assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types);
    defineProperties(this, { primaryType: primaryTypes[0] });
    function checkCircular(type, found) {
      assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types);
      found.add(type);
      for (const child of links.get(type)) {
        if (!parents.has(child)) {
          continue;
        }
        checkCircular(child, found);
        for (const subtype of found) {
          subtypes.get(subtype).add(child);
        }
      }
      found.delete(type);
    }
    checkCircular(this.primaryType, new Set);
    for (const [name, set] of subtypes) {
      const st = Array.from(set);
      st.sort();
      this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
    }
  }
  getEncoder(type) {
    let encoder = this.#encoderCache.get(type);
    if (!encoder) {
      encoder = this.#getEncoder(type);
      this.#encoderCache.set(type, encoder);
    }
    return encoder;
  }
  #getEncoder(type) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return encoder;
      }
    }
    const array = splitArray(type).array;
    if (array) {
      const subtype = array.prefix;
      const subEncoder = this.getEncoder(subtype);
      return (value) => {
        assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
        let result = value.map(subEncoder);
        if (this.#fullTypes.has(subtype)) {
          result = result.map(keccak256);
        }
        return keccak256(concat(result));
      };
    }
    const fields = this.types[type];
    if (fields) {
      const encodedType = id(this.#fullTypes.get(type));
      return (value) => {
        const values = fields.map(({ name, type: type2 }) => {
          const result = this.getEncoder(type2)(value[name]);
          if (this.#fullTypes.has(type2)) {
            return keccak256(result);
          }
          return result;
        });
        values.unshift(encodedType);
        return concat(values);
      };
    }
    assertArgument(false, `unknown type: ${type}`, "type", type);
  }
  encodeType(name) {
    const result = this.#fullTypes.get(name);
    assertArgument(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
    return result;
  }
  encodeData(type, value) {
    return this.getEncoder(type)(value);
  }
  hashStruct(name, value) {
    return keccak256(this.encodeData(name, value));
  }
  encode(value) {
    return this.encodeData(this.primaryType, value);
  }
  hash(value) {
    return this.hashStruct(this.primaryType, value);
  }
  _visit(type, value, callback) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return callback(type, value);
      }
    }
    const array = splitArray(type).array;
    if (array) {
      assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
      return value.map((v) => this._visit(array.prefix, v, callback));
    }
    const fields = this.types[type];
    if (fields) {
      return fields.reduce((accum, { name, type: type2 }) => {
        accum[name] = this._visit(type2, value[name], callback);
        return accum;
      }, {});
    }
    assertArgument(false, `unknown type: ${type}`, "type", type);
  }
  visit(value, callback) {
    return this._visit(this.primaryType, value, callback);
  }
  static from(types) {
    return new TypedDataEncoder(types);
  }
  static getPrimaryType(types) {
    return TypedDataEncoder.from(types).primaryType;
  }
  static hashStruct(name, types, value) {
    return TypedDataEncoder.from(types).hashStruct(name, value);
  }
  static hashDomain(domain) {
    const domainFields = [];
    for (const name in domain) {
      if (domain[name] == null) {
        continue;
      }
      const type = domainFieldTypes[name];
      assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
      domainFields.push({ name, type });
    }
    domainFields.sort((a, b2) => {
      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b2.name);
    });
    return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
  }
  static encode(domain, types, value) {
    return concat([
      "0x1901",
      TypedDataEncoder.hashDomain(domain),
      TypedDataEncoder.from(types).hash(value)
    ]);
  }
  static hash(domain, types, value) {
    return keccak256(TypedDataEncoder.encode(domain, types, value));
  }
  static async resolveNames(domain, types, value, resolveName) {
    domain = Object.assign({}, domain);
    for (const key in domain) {
      if (domain[key] == null) {
        delete domain[key];
      }
    }
    const ensCache = {};
    if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
      ensCache[domain.verifyingContract] = "0x";
    }
    const encoder = TypedDataEncoder.from(types);
    encoder.visit(value, (type, value2) => {
      if (type === "address" && !isHexString(value2, 20)) {
        ensCache[value2] = "0x";
      }
      return value2;
    });
    for (const name in ensCache) {
      ensCache[name] = await resolveName(name);
    }
    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
      domain.verifyingContract = ensCache[domain.verifyingContract];
    }
    value = encoder.visit(value, (type, value2) => {
      if (type === "address" && ensCache[value2]) {
        return ensCache[value2];
      }
      return value2;
    });
    return { domain, value };
  }
  static getPayload(domain, types, value) {
    TypedDataEncoder.hashDomain(domain);
    const domainValues = {};
    const domainTypes = [];
    domainFieldNames.forEach((name) => {
      const value2 = domain[name];
      if (value2 == null) {
        return;
      }
      domainValues[name] = domainChecks[name](value2);
      domainTypes.push({ name, type: domainFieldTypes[name] });
    });
    const encoder = TypedDataEncoder.from(types);
    types = encoder.types;
    const typesWithDomain = Object.assign({}, types);
    assertArgument(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
    typesWithDomain.EIP712Domain = domainTypes;
    encoder.encode(value);
    return {
      types: typesWithDomain,
      domain: domainValues,
      primaryType: encoder.primaryType,
      message: encoder.visit(value, (type, value2) => {
        if (type.match(/^bytes(\d*)/)) {
          return hexlify(getBytes(value2));
        }
        if (type.match(/^u?int/)) {
          return getBigInt(value2).toString();
        }
        switch (type) {
          case "address":
            return value2.toLowerCase();
          case "bool":
            return !!value2;
          case "string":
            assertArgument(typeof value2 === "string", "invalid string", "value", value2);
            return value2;
        }
        assertArgument(false, "unsupported type", "type", type);
      })
    };
  }
}
function verifyTypedData(domain, types, value, signature) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
}
var padding, BN__1, BN_08, BN_15, BN_MAX_UINT2562, hexTrue, hexFalse, domainFieldTypes, domainFieldNames, domainChecks;
var init_typed_data = __esm(() => {
  init_address2();
  init_crypto2();
  init_transaction2();
  init_utils();
  init_id();
  padding = new Uint8Array(32);
  padding.fill(0);
  BN__1 = BigInt(-1);
  BN_08 = BigInt(0);
  BN_15 = BigInt(1);
  BN_MAX_UINT2562 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  hexTrue = toBeHex(BN_15, 32);
  hexFalse = toBeHex(BN_08, 32);
  domainFieldTypes = {
    name: "string",
    version: "string",
    chainId: "uint256",
    verifyingContract: "address",
    salt: "bytes32"
  };
  domainFieldNames = [
    "name",
    "version",
    "chainId",
    "verifyingContract",
    "salt"
  ];
  domainChecks = {
    name: checkString("name"),
    version: checkString("version"),
    chainId: function(_value) {
      const value = getBigInt(_value, "domain.chainId");
      assertArgument(value >= 0, "invalid chain ID", "domain.chainId", _value);
      if (Number.isSafeInteger(value)) {
        return Number(value);
      }
      return toQuantity(value);
    },
    verifyingContract: function(value) {
      try {
        return getAddress(value).toLowerCase();
      } catch (error) {}
      assertArgument(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
    },
    salt: function(value) {
      const bytes2 = getBytes(value, "domain.salt");
      assertArgument(bytes2.length === 32, `invalid domain value "salt"`, "domain.salt", value);
      return hexlify(bytes2);
    }
  };
});

// node_modules/ethers/lib.esm/hash/index.js
var init_hash = __esm(() => {
  init_authorization2();
  init_id();
  init_namehash();
  init_message();
  init_solidity();
  init_typed_data();
});

// node_modules/ethers/lib.esm/abi/fragments.js
function setify(items) {
  const result = new Set;
  items.forEach((k) => result.add(k));
  return Object.freeze(result);
}

class TokenString {
  #offset;
  #tokens;
  get offset() {
    return this.#offset;
  }
  get length() {
    return this.#tokens.length - this.#offset;
  }
  constructor(tokens) {
    this.#offset = 0;
    this.#tokens = tokens.slice();
  }
  clone() {
    return new TokenString(this.#tokens);
  }
  reset() {
    this.#offset = 0;
  }
  #subTokenString(from = 0, to = 0) {
    return new TokenString(this.#tokens.slice(from, to).map((t) => {
      return Object.freeze(Object.assign({}, t, {
        match: t.match - from,
        linkBack: t.linkBack - from,
        linkNext: t.linkNext - from
      }));
    }));
  }
  popKeyword(allowed) {
    const top = this.peek();
    if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
      throw new Error(`expected keyword ${top.text}`);
    }
    return this.pop().text;
  }
  popType(type) {
    if (this.peek().type !== type) {
      const top = this.peek();
      throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
    }
    return this.pop().text;
  }
  popParen() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = this.#subTokenString(this.#offset + 1, top.match + 1);
    this.#offset = top.match + 1;
    return result;
  }
  popParams() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = [];
    while (this.#offset < top.match - 1) {
      const link = this.peek().linkNext;
      result.push(this.#subTokenString(this.#offset + 1, link));
      this.#offset = link;
    }
    this.#offset = top.match + 1;
    return result;
  }
  peek() {
    if (this.#offset >= this.#tokens.length) {
      throw new Error("out-of-bounds");
    }
    return this.#tokens[this.#offset];
  }
  peekKeyword(allowed) {
    const top = this.peekType("KEYWORD");
    return top != null && allowed.has(top) ? top : null;
  }
  peekType(type) {
    if (this.length === 0) {
      return null;
    }
    const top = this.peek();
    return top.type === type ? top.text : null;
  }
  pop() {
    const result = this.peek();
    this.#offset++;
    return result;
  }
  toString() {
    const tokens = [];
    for (let i = this.#offset;i < this.#tokens.length; i++) {
      const token = this.#tokens[i];
      tokens.push(`${token.type}:${token.text}`);
    }
    return `<TokenString ${tokens.join(" ")}>`;
  }
}
function lex(text) {
  const tokens = [];
  const throwError2 = (message) => {
    const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
    throw new Error(`invalid token ${token} at ${offset}: ${message}`);
  };
  let brackets = [];
  let commas = [];
  let offset = 0;
  while (offset < text.length) {
    let cur = text.substring(offset);
    let match = cur.match(regexWhitespacePrefix);
    if (match) {
      offset += match[1].length;
      cur = text.substring(offset);
    }
    const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
    tokens.push(token);
    let type = SimpleTokens[cur[0]] || "";
    if (type) {
      token.type = type;
      token.text = cur[0];
      offset++;
      if (type === "OPEN_PAREN") {
        brackets.push(tokens.length - 1);
        commas.push(tokens.length - 1);
      } else if (type == "CLOSE_PAREN") {
        if (brackets.length === 0) {
          throwError2("no matching open bracket");
        }
        token.match = brackets.pop();
        tokens[token.match].match = tokens.length - 1;
        token.depth--;
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
      } else if (type === "COMMA") {
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
        commas.push(tokens.length - 1);
      } else if (type === "OPEN_BRACKET") {
        token.type = "BRACKET";
      } else if (type === "CLOSE_BRACKET") {
        let suffix = tokens.pop().text;
        if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
          const value = tokens.pop().text;
          suffix = value + suffix;
          tokens[tokens.length - 1].value = getNumber(value);
        }
        if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
          throw new Error("missing opening bracket");
        }
        tokens[tokens.length - 1].text += suffix;
      }
      continue;
    }
    match = cur.match(regexIdPrefix);
    if (match) {
      token.text = match[1];
      offset += token.text.length;
      if (Keywords.has(token.text)) {
        token.type = "KEYWORD";
        continue;
      }
      if (token.text.match(regexType)) {
        token.type = "TYPE";
        continue;
      }
      token.type = "ID";
      continue;
    }
    match = cur.match(regexNumberPrefix);
    if (match) {
      token.text = match[1];
      token.type = "NUMBER";
      offset += token.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
  }
  return new TokenString(tokens.map((t) => Object.freeze(t)));
}
function allowSingle(set, allowed) {
  let included = [];
  for (const key in allowed.keys()) {
    if (set.has(key)) {
      included.push(key);
    }
  }
  if (included.length > 1) {
    throw new Error(`conflicting types: ${included.join(", ")}`);
  }
}
function consumeName(type, tokens) {
  if (tokens.peekKeyword(KwTypes)) {
    const keyword = tokens.pop().text;
    if (keyword !== type) {
      throw new Error(`expected ${type}, got ${keyword}`);
    }
  }
  return tokens.popType("ID");
}
function consumeKeywords(tokens, allowed) {
  const keywords = new Set;
  while (true) {
    const keyword = tokens.peekType("KEYWORD");
    if (keyword == null || allowed && !allowed.has(keyword)) {
      break;
    }
    tokens.pop();
    if (keywords.has(keyword)) {
      throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
    }
    keywords.add(keyword);
  }
  return Object.freeze(keywords);
}
function consumeMutability(tokens) {
  let modifiers = consumeKeywords(tokens, KwVisib);
  allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
  allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
  if (modifiers.has("view")) {
    return "view";
  }
  if (modifiers.has("pure")) {
    return "pure";
  }
  if (modifiers.has("payable")) {
    return "payable";
  }
  if (modifiers.has("nonpayable")) {
    return "nonpayable";
  }
  if (modifiers.has("constant")) {
    return "view";
  }
  return "nonpayable";
}
function consumeParams(tokens, allowIndexed) {
  return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
}
function consumeGas(tokens) {
  if (tokens.peekType("AT")) {
    tokens.pop();
    if (tokens.peekType("NUMBER")) {
      return getBigInt(tokens.pop().text);
    }
    throw new Error("invalid gas");
  }
  return null;
}
function consumeEoi(tokens) {
  if (tokens.length) {
    throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
  }
}
function verifyBasicType(type) {
  const match = type.match(regexType);
  assertArgument(match, "invalid type", "type", type);
  if (type === "uint") {
    return "uint256";
  }
  if (type === "int") {
    return "int256";
  }
  if (match[2]) {
    const length = parseInt(match[2]);
    assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type);
  } else if (match[3]) {
    const size = parseInt(match[3]);
    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
  }
  return type;
}

class ParamType {
  name;
  type;
  baseType;
  indexed;
  components;
  arrayLength;
  arrayChildren;
  constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
    assertPrivate(guard, _guard4, "ParamType");
    Object.defineProperty(this, internal, { value: ParamTypeInternal });
    if (components) {
      components = Object.freeze(components.slice());
    }
    if (baseType === "array") {
      if (arrayLength == null || arrayChildren == null) {
        throw new Error("");
      }
    } else if (arrayLength != null || arrayChildren != null) {
      throw new Error("");
    }
    if (baseType === "tuple") {
      if (components == null) {
        throw new Error("");
      }
    } else if (components != null) {
      throw new Error("");
    }
    defineProperties(this, {
      name,
      type,
      baseType,
      indexed,
      components,
      arrayLength,
      arrayChildren
    });
  }
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      const name = this.name || "";
      if (this.isArray()) {
        const result3 = JSON.parse(this.arrayChildren.format("json"));
        result3.name = name;
        result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        return JSON.stringify(result3);
      }
      const result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.isTuple()) {
        result2.components = this.components.map((c) => JSON.parse(c.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.isArray()) {
      result += this.arrayChildren.format(format);
      result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
    } else {
      if (this.isTuple()) {
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== "sighash") {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === "full" && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  isArray() {
    return this.baseType === "array";
  }
  isTuple() {
    return this.baseType === "tuple";
  }
  isIndexable() {
    return this.indexed != null;
  }
  walk(value, process2) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v) => _this.arrayChildren.walk(v, process2));
    }
    if (this.isTuple()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid tuple value");
      }
      if (value.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v, i) => _this.components[i].walk(v, process2));
    }
    return process2(this.type, value);
  }
  #walkAsync(promises, value, process2, setValue) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const childType = this.arrayChildren;
      const result2 = value.slice();
      result2.forEach((value2, index) => {
        childType.#walkAsync(promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    if (this.isTuple()) {
      const components = this.components;
      let result2;
      if (Array.isArray(value)) {
        result2 = value.slice();
      } else {
        if (value == null || typeof value !== "object") {
          throw new Error("invalid tuple value");
        }
        result2 = components.map((param) => {
          if (!param.name) {
            throw new Error("cannot use object value with unnamed components");
          }
          if (!(param.name in value)) {
            throw new Error(`missing value for component ${param.name}`);
          }
          return value[param.name];
        });
      }
      if (result2.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      result2.forEach((value2, index) => {
        components[index].#walkAsync(promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    const result = process2(this.type, value);
    if (result.then) {
      promises.push(async function() {
        setValue(await result);
      }());
    } else {
      setValue(result);
    }
  }
  async walkAsync(value, process2) {
    const promises = [];
    const result = [value];
    this.#walkAsync(promises, value, process2, (value2) => {
      result[0] = value2;
    });
    if (promises.length) {
      await Promise.all(promises);
    }
    return result[0];
  }
  static from(obj, allowIndexed) {
    if (ParamType.isParamType(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return ParamType.from(lex(obj), allowIndexed);
      } catch (error) {
        assertArgument(false, "invalid param type", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      let type2 = "", baseType = "";
      let comps = null;
      if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
        baseType = "tuple";
        comps = obj.popParams().map((t) => ParamType.from(t));
        type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
      } else {
        type2 = verifyBasicType(obj.popType("TYPE"));
        baseType = type2;
      }
      let arrayChildren = null;
      let arrayLength = null;
      while (obj.length && obj.peekType("BRACKET")) {
        const bracket = obj.pop();
        arrayChildren = new ParamType(_guard4, "", type2, baseType, null, comps, arrayLength, arrayChildren);
        arrayLength = bracket.value;
        type2 += bracket.text;
        baseType = "array";
        comps = null;
      }
      let indexed2 = null;
      const keywords = consumeKeywords(obj, KwModifiers);
      if (keywords.has("indexed")) {
        if (!allowIndexed) {
          throw new Error("");
        }
        indexed2 = true;
      }
      const name2 = obj.peekType("ID") ? obj.pop().text : "";
      if (obj.length) {
        throw new Error("leftover tokens");
      }
      return new ParamType(_guard4, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
    }
    const name = obj.name;
    assertArgument(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
    let indexed = obj.indexed;
    if (indexed != null) {
      assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
      indexed = !!indexed;
    }
    let type = obj.type;
    let arrayMatch = type.match(regexArrayType);
    if (arrayMatch) {
      const arrayLength = parseInt(arrayMatch[2] || "-1");
      const arrayChildren = ParamType.from({
        type: arrayMatch[1],
        components: obj.components
      });
      return new ParamType(_guard4, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
    }
    if (type === "tuple" || type.startsWith("tuple(") || type.startsWith("(")) {
      const comps = obj.components != null ? obj.components.map((c) => ParamType.from(c)) : null;
      const tuple = new ParamType(_guard4, name || "", type, "tuple", indexed, comps, null, null);
      return tuple;
    }
    type = verifyBasicType(obj.type);
    return new ParamType(_guard4, name || "", type, type, indexed, null, null, null);
  }
  static isParamType(value) {
    return value && value[internal] === ParamTypeInternal;
  }
}

class Fragment {
  type;
  inputs;
  constructor(guard, type, inputs) {
    assertPrivate(guard, _guard4, "Fragment");
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { type, inputs });
  }
  static from(obj) {
    if (typeof obj === "string") {
      try {
        Fragment.from(JSON.parse(obj));
      } catch (e) {}
      return Fragment.from(lex(obj));
    }
    if (obj instanceof TokenString) {
      const type = obj.peekKeyword(KwTypes);
      switch (type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
    } else if (typeof obj === "object") {
      switch (obj.type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
      assert(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    assertArgument(false, "unsupported frgament object", "obj", obj);
  }
  static isConstructor(value) {
    return ConstructorFragment.isFragment(value);
  }
  static isError(value) {
    return ErrorFragment.isFragment(value);
  }
  static isEvent(value) {
    return EventFragment.isFragment(value);
  }
  static isFunction(value) {
    return FunctionFragment.isFragment(value);
  }
  static isStruct(value) {
    return StructFragment.isFragment(value);
  }
}
function joinParams(format, params) {
  return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
}
var _kwVisibDeploy = "external public payable override", KwVisibDeploy, _kwVisib = "constant external internal payable private public pure view override", KwVisib, _kwTypes = "constructor error event fallback function receive struct", KwTypes, _kwModifiers = "calldata memory storage payable indexed", KwModifiers, _kwOther = "tuple returns", _keywords, Keywords, SimpleTokens, regexWhitespacePrefix, regexNumberPrefix, regexIdPrefix, regexId, regexType, regexArrayType, _guard4, internal, ParamTypeInternal = "_ParamTypeInternal", ErrorFragmentInternal = "_ErrorInternal", EventFragmentInternal = "_EventInternal", ConstructorFragmentInternal = "_ConstructorInternal", FallbackFragmentInternal = "_FallbackInternal", FunctionFragmentInternal = "_FunctionInternal", StructFragmentInternal = "_StructInternal", NamedFragment, ErrorFragment, EventFragment, ConstructorFragment, FallbackFragment, FunctionFragment, StructFragment;
var init_fragments = __esm(() => {
  init_utils();
  init_hash();
  KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
  KwVisib = setify(_kwVisib.split(" "));
  KwTypes = setify(_kwTypes.split(" "));
  KwModifiers = setify(_kwModifiers.split(" "));
  _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
  Keywords = setify(_keywords.split(" "));
  SimpleTokens = {
    "(": "OPEN_PAREN",
    ")": "CLOSE_PAREN",
    "[": "OPEN_BRACKET",
    "]": "CLOSE_BRACKET",
    ",": "COMMA",
    "@": "AT"
  };
  regexWhitespacePrefix = new RegExp("^(\\s*)");
  regexNumberPrefix = new RegExp("^([0-9]+)");
  regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
  regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
  regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
  regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
  _guard4 = {};
  internal = Symbol.for("_ethers_internal");
  NamedFragment = class NamedFragment extends Fragment {
    name;
    constructor(guard, type, name, inputs) {
      super(guard, type, inputs);
      assertArgument(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
      inputs = Object.freeze(inputs.slice());
      defineProperties(this, { name });
    }
  };
  ErrorFragment = class ErrorFragment extends NamedFragment {
    constructor(guard, name, inputs) {
      super(guard, "error", name, inputs);
      Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
    }
    get selector() {
      return id(this.format("sighash")).substring(0, 10);
    }
    format(format) {
      if (format == null) {
        format = "sighash";
      }
      if (format === "json") {
        return JSON.stringify({
          type: "error",
          name: this.name,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
        });
      }
      const result = [];
      if (format !== "sighash") {
        result.push("error");
      }
      result.push(this.name + joinParams(format, this.inputs));
      return result.join(" ");
    }
    static from(obj) {
      if (ErrorFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return ErrorFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        const name = consumeName("error", obj);
        const inputs = consumeParams(obj);
        consumeEoi(obj);
        return new ErrorFragment(_guard4, name, inputs);
      }
      return new ErrorFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
    }
    static isFragment(value) {
      return value && value[internal] === ErrorFragmentInternal;
    }
  };
  EventFragment = class EventFragment extends NamedFragment {
    anonymous;
    constructor(guard, name, inputs, anonymous) {
      super(guard, "event", name, inputs);
      Object.defineProperty(this, internal, { value: EventFragmentInternal });
      defineProperties(this, { anonymous });
    }
    get topicHash() {
      return id(this.format("sighash"));
    }
    format(format) {
      if (format == null) {
        format = "sighash";
      }
      if (format === "json") {
        return JSON.stringify({
          type: "event",
          anonymous: this.anonymous,
          name: this.name,
          inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
        });
      }
      const result = [];
      if (format !== "sighash") {
        result.push("event");
      }
      result.push(this.name + joinParams(format, this.inputs));
      if (format !== "sighash" && this.anonymous) {
        result.push("anonymous");
      }
      return result.join(" ");
    }
    static getTopicHash(name, params) {
      params = (params || []).map((p) => ParamType.from(p));
      const fragment = new EventFragment(_guard4, name, params, false);
      return fragment.topicHash;
    }
    static from(obj) {
      if (EventFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return EventFragment.from(lex(obj));
        } catch (error) {
          assertArgument(false, "invalid event fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const name = consumeName("event", obj);
        const inputs = consumeParams(obj, true);
        const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
        consumeEoi(obj);
        return new EventFragment(_guard4, name, inputs, anonymous);
      }
      return new EventFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
    }
    static isFragment(value) {
      return value && value[internal] === EventFragmentInternal;
    }
  };
  ConstructorFragment = class ConstructorFragment extends Fragment {
    payable;
    gas;
    constructor(guard, type, inputs, payable, gas) {
      super(guard, type, inputs);
      Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
      defineProperties(this, { payable, gas });
    }
    format(format) {
      assert(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
      if (format === "json") {
        return JSON.stringify({
          type: "constructor",
          stateMutability: this.payable ? "payable" : "undefined",
          payable: this.payable,
          gas: this.gas != null ? this.gas : undefined,
          inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
        });
      }
      const result = [`constructor${joinParams(format, this.inputs)}`];
      if (this.payable) {
        result.push("payable");
      }
      if (this.gas != null) {
        result.push(`@${this.gas.toString()}`);
      }
      return result.join(" ");
    }
    static from(obj) {
      if (ConstructorFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return ConstructorFragment.from(lex(obj));
        } catch (error) {
          assertArgument(false, "invalid constuctor fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        consumeKeywords(obj, setify(["constructor"]));
        const inputs = consumeParams(obj);
        const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
        const gas = consumeGas(obj);
        consumeEoi(obj);
        return new ConstructorFragment(_guard4, "constructor", inputs, payable, gas);
      }
      return new ConstructorFragment(_guard4, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
    }
    static isFragment(value) {
      return value && value[internal] === ConstructorFragmentInternal;
    }
  };
  FallbackFragment = class FallbackFragment extends Fragment {
    payable;
    constructor(guard, inputs, payable) {
      super(guard, "fallback", inputs);
      Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
      defineProperties(this, { payable });
    }
    format(format) {
      const type = this.inputs.length === 0 ? "receive" : "fallback";
      if (format === "json") {
        const stateMutability = this.payable ? "payable" : "nonpayable";
        return JSON.stringify({ type, stateMutability });
      }
      return `${type}()${this.payable ? " payable" : ""}`;
    }
    static from(obj) {
      if (FallbackFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return FallbackFragment.from(lex(obj));
        } catch (error) {
          assertArgument(false, "invalid fallback fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const errorObj = obj.toString();
        const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
        assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
        const type = obj.popKeyword(setify(["fallback", "receive"]));
        if (type === "receive") {
          const inputs2 = consumeParams(obj);
          assertArgument(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
          consumeKeywords(obj, setify(["payable"]));
          consumeEoi(obj);
          return new FallbackFragment(_guard4, [], true);
        }
        let inputs = consumeParams(obj);
        if (inputs.length) {
          assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
        } else {
          inputs = [ParamType.from("bytes")];
        }
        const mutability = consumeMutability(obj);
        assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
        if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
          const outputs = consumeParams(obj);
          assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
        }
        consumeEoi(obj);
        return new FallbackFragment(_guard4, inputs, mutability === "payable");
      }
      if (obj.type === "receive") {
        return new FallbackFragment(_guard4, [], true);
      }
      if (obj.type === "fallback") {
        const inputs = [ParamType.from("bytes")];
        const payable = obj.stateMutability === "payable";
        return new FallbackFragment(_guard4, inputs, payable);
      }
      assertArgument(false, "invalid fallback description", "obj", obj);
    }
    static isFragment(value) {
      return value && value[internal] === FallbackFragmentInternal;
    }
  };
  FunctionFragment = class FunctionFragment extends NamedFragment {
    constant;
    outputs;
    stateMutability;
    payable;
    gas;
    constructor(guard, name, stateMutability, inputs, outputs, gas) {
      super(guard, "function", name, inputs);
      Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
      outputs = Object.freeze(outputs.slice());
      const constant = stateMutability === "view" || stateMutability === "pure";
      const payable = stateMutability === "payable";
      defineProperties(this, { constant, gas, outputs, payable, stateMutability });
    }
    get selector() {
      return id(this.format("sighash")).substring(0, 10);
    }
    format(format) {
      if (format == null) {
        format = "sighash";
      }
      if (format === "json") {
        return JSON.stringify({
          type: "function",
          name: this.name,
          constant: this.constant,
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
          payable: this.payable,
          gas: this.gas != null ? this.gas : undefined,
          inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
          outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
        });
      }
      const result = [];
      if (format !== "sighash") {
        result.push("function");
      }
      result.push(this.name + joinParams(format, this.inputs));
      if (format !== "sighash") {
        if (this.stateMutability !== "nonpayable") {
          result.push(this.stateMutability);
        }
        if (this.outputs && this.outputs.length) {
          result.push("returns");
          result.push(joinParams(format, this.outputs));
        }
        if (this.gas != null) {
          result.push(`@${this.gas.toString()}`);
        }
      }
      return result.join(" ");
    }
    static getSelector(name, params) {
      params = (params || []).map((p) => ParamType.from(p));
      const fragment = new FunctionFragment(_guard4, name, "view", params, [], null);
      return fragment.selector;
    }
    static from(obj) {
      if (FunctionFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return FunctionFragment.from(lex(obj));
        } catch (error) {
          assertArgument(false, "invalid function fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const name = consumeName("function", obj);
        const inputs = consumeParams(obj);
        const mutability = consumeMutability(obj);
        let outputs = [];
        if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
          outputs = consumeParams(obj);
        }
        const gas = consumeGas(obj);
        consumeEoi(obj);
        return new FunctionFragment(_guard4, name, mutability, inputs, outputs, gas);
      }
      let stateMutability = obj.stateMutability;
      if (stateMutability == null) {
        stateMutability = "payable";
        if (typeof obj.constant === "boolean") {
          stateMutability = "view";
          if (!obj.constant) {
            stateMutability = "payable";
            if (typeof obj.payable === "boolean" && !obj.payable) {
              stateMutability = "nonpayable";
            }
          }
        } else if (typeof obj.payable === "boolean" && !obj.payable) {
          stateMutability = "nonpayable";
        }
      }
      return new FunctionFragment(_guard4, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
    }
    static isFragment(value) {
      return value && value[internal] === FunctionFragmentInternal;
    }
  };
  StructFragment = class StructFragment extends NamedFragment {
    constructor(guard, name, inputs) {
      super(guard, "struct", name, inputs);
      Object.defineProperty(this, internal, { value: StructFragmentInternal });
    }
    format() {
      throw new Error("@TODO");
    }
    static from(obj) {
      if (typeof obj === "string") {
        try {
          return StructFragment.from(lex(obj));
        } catch (error) {
          assertArgument(false, "invalid struct fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const name = consumeName("struct", obj);
        const inputs = consumeParams(obj);
        consumeEoi(obj);
        return new StructFragment(_guard4, name, inputs);
      }
      return new StructFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
    }
    static isFragment(value) {
      return value && value[internal] === StructFragmentInternal;
    }
  };
});

// node_modules/ethers/lib.esm/abi/abi-coder.js
function getBuiltinCallException(action, tx, data, abiCoder) {
  let message = "missing revert data";
  let reason = null;
  const invocation = null;
  let revert = null;
  if (data) {
    message = "execution reverted";
    const bytes2 = getBytes(data);
    data = hexlify(data);
    if (bytes2.length === 0) {
      message += " (no data present; likely require(false) occurred";
      reason = "require(false)";
    } else if (bytes2.length % 32 !== 4) {
      message += " (could not decode reason; invalid data length)";
    } else if (hexlify(bytes2.slice(0, 4)) === "0x08c379a0") {
      try {
        reason = abiCoder.decode(["string"], bytes2.slice(4))[0];
        revert = {
          signature: "Error(string)",
          name: "Error",
          args: [reason]
        };
        message += `: ${JSON.stringify(reason)}`;
      } catch (error) {
        message += " (could not decode reason; invalid string data)";
      }
    } else if (hexlify(bytes2.slice(0, 4)) === "0x4e487b71") {
      try {
        const code = Number(abiCoder.decode(["uint256"], bytes2.slice(4))[0]);
        revert = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [code]
        };
        reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
        message += `: ${reason}`;
      } catch (error) {
        message += " (could not decode panic code)";
      }
    } else {
      message += " (unknown custom error)";
    }
  }
  const transaction = {
    to: tx.to ? getAddress(tx.to) : null,
    data: tx.data || "0x"
  };
  if (tx.from) {
    transaction.from = getAddress(tx.from);
  }
  return makeError(message, "CALL_EXCEPTION", {
    action,
    data,
    reason,
    transaction,
    invocation,
    revert
  });
}

class AbiCoder {
  #getCoder(param) {
    if (param.isArray()) {
      return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
    }
    if (param.isTuple()) {
      return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
    }
    switch (param.baseType) {
      case "address":
        return new AddressCoder(param.name);
      case "bool":
        return new BooleanCoder(param.name);
      case "string":
        return new StringCoder(param.name);
      case "bytes":
        return new BytesCoder(param.name);
      case "":
        return new NullCoder(param.name);
    }
    let match = param.type.match(paramTypeNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
      return new NumberCoder(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes);
    if (match) {
      let size = parseInt(match[1]);
      assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
      return new FixedBytesCoder(size, param.name);
    }
    assertArgument(false, "invalid type", "type", param.type);
  }
  getDefaultValue(types) {
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  encode(types, values) {
    assertArgumentCount(values.length, types.length, "types/values length mismatch");
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = new Writer;
    coder.encode(writer, values);
    return writer.data;
  }
  decode(types, data, loose) {
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(new Reader(data, loose, defaultMaxInflation));
  }
  static _setDefaultMaxInflation(value) {
    assertArgument(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
    defaultMaxInflation = value;
  }
  static defaultAbiCoder() {
    if (defaultCoder == null) {
      defaultCoder = new AbiCoder;
    }
    return defaultCoder;
  }
  static getBuiltinCallException(action, tx, data) {
    return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());
  }
}
var PanicReasons, paramTypeBytes, paramTypeNumber, defaultCoder = null, defaultMaxInflation = 1024;
var init_abi_coder = __esm(() => {
  init_utils();
  init_abstract_coder();
  init_address3();
  init_array();
  init_boolean();
  init_bytes();
  init_fixed_bytes();
  init_null();
  init_number();
  init_string();
  init_tuple();
  init_fragments();
  init_address2();
  init_utils();
  PanicReasons = new Map;
  PanicReasons.set(0, "GENERIC_PANIC");
  PanicReasons.set(1, "ASSERT_FALSE");
  PanicReasons.set(17, "OVERFLOW");
  PanicReasons.set(18, "DIVIDE_BY_ZERO");
  PanicReasons.set(33, "ENUM_RANGE_ERROR");
  PanicReasons.set(34, "BAD_STORAGE_DATA");
  PanicReasons.set(49, "STACK_UNDERFLOW");
  PanicReasons.set(50, "ARRAY_RANGE_ERROR");
  PanicReasons.set(65, "OUT_OF_MEMORY");
  PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
  paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
});

// node_modules/ethers/lib.esm/abi/bytes32.js
function encodeBytes32String(text) {
  const bytes2 = toUtf8Bytes(text);
  if (bytes2.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  return zeroPadBytes(bytes2, 32);
}
function decodeBytes32String(_bytes) {
  const data = getBytes(_bytes, "bytes");
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  let length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  return toUtf8String(data.slice(0, length));
}
var init_bytes32 = __esm(() => {
  init_utils();
});

// node_modules/ethers/lib.esm/abi/interface.js
class LogDescription {
  fragment;
  name;
  signature;
  topic;
  args;
  constructor(fragment, topic, args) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      signature,
      topic,
      args
    });
  }
}

class TransactionDescription {
  fragment;
  name;
  args;
  signature;
  selector;
  value;
  constructor(fragment, selector, args, value) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector,
      value
    });
  }
}

class ErrorDescription {
  fragment;
  name;
  args;
  signature;
  selector;
  constructor(fragment, selector, args) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector
    });
  }
}

class Indexed {
  hash;
  _isIndexed;
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
  constructor(hash2) {
    defineProperties(this, { hash: hash2, _isIndexed: true });
  }
}

class Interface {
  fragments;
  deploy;
  fallback;
  receive;
  #errors;
  #events;
  #functions;
  #abiCoder;
  constructor(fragments) {
    let abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    this.#functions = new Map;
    this.#errors = new Map;
    this.#events = new Map;
    const frags = [];
    for (const a of abi) {
      try {
        frags.push(Fragment.from(a));
      } catch (error) {
        console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
      }
    }
    defineProperties(this, {
      fragments: Object.freeze(frags)
    });
    let fallback = null;
    let receive = false;
    this.#abiCoder = this.getAbiCoder();
    this.fragments.forEach((fragment, index) => {
      let bucket;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          defineProperties(this, { deploy: fragment });
          return;
        case "fallback":
          if (fragment.inputs.length === 0) {
            receive = true;
          } else {
            assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
            fallback = fragment;
            receive = fallback.payable;
          }
          return;
        case "function":
          bucket = this.#functions;
          break;
        case "event":
          bucket = this.#events;
          break;
        case "error":
          bucket = this.#errors;
          break;
        default:
          return;
      }
      const signature = fragment.format();
      if (bucket.has(signature)) {
        return;
      }
      bucket.set(signature, fragment);
    });
    if (!this.deploy) {
      defineProperties(this, {
        deploy: ConstructorFragment.from("constructor()")
      });
    }
    defineProperties(this, { fallback, receive });
  }
  format(minimal) {
    const format = minimal ? "minimal" : "full";
    const abi = this.fragments.map((f2) => f2.format(format));
    return abi;
  }
  formatJson() {
    const abi = this.fragments.map((f2) => f2.format("json"));
    return JSON.stringify(abi.map((j) => JSON.parse(j)));
  }
  getAbiCoder() {
    return AbiCoder.defaultAbiCoder();
  }
  #getFunction(key, values, forceUnique) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      for (const fragment of this.#functions.values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#functions) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        const lastValue = values.length > 0 ? values[values.length - 1] : null;
        let valueLength = values.length;
        let allowOptions = true;
        if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
          allowOptions = false;
          valueLength--;
        }
        for (let i = matching.length - 1;i >= 0; i--) {
          const inputs = matching[i].inputs.length;
          if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
            matching.splice(i, 1);
          }
        }
        for (let i = matching.length - 1;i >= 0; i--) {
          const inputs = matching[i].inputs;
          for (let j = 0;j < values.length; j++) {
            if (!Typed.isTyped(values[j])) {
              continue;
            }
            if (j >= inputs.length) {
              if (values[j].type === "overrides") {
                continue;
              }
              matching.splice(i, 1);
              break;
            }
            if (values[j].type !== inputs[j].baseType) {
              matching.splice(i, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
        const lastArg = values[values.length - 1];
        if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
          matching.splice(0, 1);
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = this.#functions.get(FunctionFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  }
  getFunctionName(key) {
    const fragment = this.#getFunction(key, null, false);
    assertArgument(fragment, "no matching function", "key", key);
    return fragment.name;
  }
  hasFunction(key) {
    return !!this.#getFunction(key, null, false);
  }
  getFunction(key, values) {
    return this.#getFunction(key, values || null, true);
  }
  forEachFunction(callback) {
    const names2 = Array.from(this.#functions.keys());
    names2.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0;i < names2.length; i++) {
      const name = names2[i];
      callback(this.#functions.get(name), i);
    }
  }
  #getEvent(key, values, forceUnique) {
    if (isHexString(key)) {
      const eventTopic = key.toLowerCase();
      for (const fragment of this.#events.values()) {
        if (eventTopic === fragment.topicHash) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#events) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        for (let i = matching.length - 1;i >= 0; i--) {
          if (matching[i].inputs.length < values.length) {
            matching.splice(i, 1);
          }
        }
        for (let i = matching.length - 1;i >= 0; i--) {
          const inputs = matching[i].inputs;
          for (let j = 0;j < values.length; j++) {
            if (!Typed.isTyped(values[j])) {
              continue;
            }
            if (values[j].type !== inputs[j].baseType) {
              matching.splice(i, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = this.#events.get(EventFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  }
  getEventName(key) {
    const fragment = this.#getEvent(key, null, false);
    assertArgument(fragment, "no matching event", "key", key);
    return fragment.name;
  }
  hasEvent(key) {
    return !!this.#getEvent(key, null, false);
  }
  getEvent(key, values) {
    return this.#getEvent(key, values || null, true);
  }
  forEachEvent(callback) {
    const names2 = Array.from(this.#events.keys());
    names2.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0;i < names2.length; i++) {
      const name = names2[i];
      callback(this.#events.get(name), i);
    }
  }
  getError(key, values) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      if (BuiltinErrors[selector]) {
        return ErrorFragment.from(BuiltinErrors[selector].signature);
      }
      for (const fragment of this.#errors.values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#errors) {
        if (name.split("(")[0] === key) {
          matching.push(fragment);
        }
      }
      if (matching.length === 0) {
        if (key === "Error") {
          return ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic") {
          return ErrorFragment.from("error Panic(uint256)");
        }
        return null;
      } else if (matching.length > 1) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
      }
      return matching[0];
    }
    key = ErrorFragment.from(key).format();
    if (key === "Error(string)") {
      return ErrorFragment.from("error Error(string)");
    }
    if (key === "Panic(uint256)") {
      return ErrorFragment.from("error Panic(uint256)");
    }
    const result = this.#errors.get(key);
    if (result) {
      return result;
    }
    return null;
  }
  forEachError(callback) {
    const names2 = Array.from(this.#errors.keys());
    names2.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0;i < names2.length; i++) {
      const name = names2[i];
      callback(this.#errors.get(name), i);
    }
  }
  _decodeParams(params, data) {
    return this.#abiCoder.decode(params, data);
  }
  _encodeParams(params, values) {
    return this.#abiCoder.encode(params, values);
  }
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  decodeFunctionData(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  encodeFunctionData(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  decodeFunctionResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    let message = "invalid length for result data";
    const bytes2 = getBytesCopy(data);
    if (bytes2.length % 32 === 0) {
      try {
        return this.#abiCoder.decode(fragment.outputs, bytes2);
      } catch (error) {
        message = "could not decode result data";
      }
    }
    assert(false, message, "BAD_DATA", {
      value: hexlify(bytes2),
      info: { method: fragment.name, signature: fragment.format() }
    });
  }
  makeError(_data, tx) {
    const data = getBytes(_data, "data");
    const error = AbiCoder.getBuiltinCallException("call", tx, data);
    const customPrefix = "execution reverted (unknown custom error)";
    if (error.message.startsWith(customPrefix)) {
      const selector = hexlify(data.slice(0, 4));
      const ef = this.getError(selector);
      if (ef) {
        try {
          const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
          error.revert = {
            name: ef.name,
            signature: ef.format(),
            args
          };
          error.reason = error.revert.signature;
          error.message = `execution reverted: ${error.reason}`;
        } catch (e) {
          error.message = `execution reverted (coult not decode custom error)`;
        }
      }
    }
    const parsed = this.parseTransaction(tx);
    if (parsed) {
      error.invocation = {
        method: parsed.name,
        signature: parsed.signature,
        args: parsed.args
      };
    }
    return error;
  }
  encodeFunctionResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));
  }
  encodeFilterTopics(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
    const topics = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "bool" && typeof value === "boolean") {
        value = value ? "0x01" : "0x00";
      } else if (param.type.match(/^u?int/)) {
        value = toBeHex(value);
      } else if (param.type.match(/^bytes/)) {
        value = zeroPadBytes(value, 32);
      } else if (param.type === "address") {
        this.#abiCoder.encode(["address"], [value]);
      }
      return zeroPadValue(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      const param = fragment.inputs[index];
      if (!param.indexed) {
        assertArgument(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        assertArgument(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
    fragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(this.#abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this.#abiCoder.encode(dataTypes, dataValues),
      topics
    };
  }
  decodeEventLog(fragment, data, topics) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    if (topics != null && !fragment.anonymous) {
      const eventTopic = fragment.topicHash;
      assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
      topics = topics.slice(1);
    }
    const indexed = [];
    const nonIndexed = [];
    const dynamic = [];
    fragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, concat(topics)) : null;
    const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
    const values = [];
    const keys = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    fragment.inputs.forEach((param, index) => {
      let value = null;
      if (param.indexed) {
        if (resultIndexed == null) {
          value = new Indexed(null);
        } else if (dynamic[index]) {
          value = new Indexed(resultIndexed[indexedIndex++]);
        } else {
          try {
            value = resultIndexed[indexedIndex++];
          } catch (error) {
            value = error;
          }
        }
      } else {
        try {
          value = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          value = error;
        }
      }
      values.push(value);
      keys.push(param.name || null);
    });
    return Result.fromItems(values, keys);
  }
  parseTransaction(tx) {
    const data = getBytes(tx.data, "tx.data");
    const value = getBigInt(tx.value != null ? tx.value : 0, "tx.value");
    const fragment = this.getFunction(hexlify(data.slice(0, 4)));
    if (!fragment) {
      return null;
    }
    const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
    return new TransactionDescription(fragment, fragment.selector, args, value);
  }
  parseCallResult(data) {
    throw new Error("@TODO");
  }
  parseLog(log) {
    const fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
  }
  parseError(data) {
    const hexData = hexlify(data);
    const fragment = this.getError(dataSlice(hexData, 0, 4));
    if (!fragment) {
      return null;
    }
    const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));
    return new ErrorDescription(fragment, fragment.selector, args);
  }
  static from(value) {
    if (value instanceof Interface) {
      return value;
    }
    if (typeof value === "string") {
      return new Interface(JSON.parse(value));
    }
    if (typeof value.formatJson === "function") {
      return new Interface(value.formatJson());
    }
    if (typeof value.format === "function") {
      return new Interface(value.format("json"));
    }
    return new Interface(value);
  }
}
var PanicReasons2, BuiltinErrors;
var init_interface = __esm(() => {
  init_crypto2();
  init_hash();
  init_utils();
  init_abi_coder();
  init_abstract_coder();
  init_fragments();
  init_typed();
  PanicReasons2 = {
    "0": "generic panic",
    "1": "assert(false)",
    "17": "arithmetic overflow",
    "18": "division or modulo by zero",
    "33": "enum overflow",
    "34": "invalid encoded storage byte array accessed",
    "49": "out-of-bounds array access; popping on an empty array",
    "50": "out-of-bounds access of an array or bytesN",
    "65": "out of memory",
    "81": "uninitialized function"
  };
  BuiltinErrors = {
    "0x08c379a0": {
      signature: "Error(string)",
      name: "Error",
      inputs: ["string"],
      reason: (message) => {
        return `reverted with reason string ${JSON.stringify(message)}`;
      }
    },
    "0x4e487b71": {
      signature: "Panic(uint256)",
      name: "Panic",
      inputs: ["uint256"],
      reason: (code) => {
        let reason = "unknown panic code";
        if (code >= 0 && code <= 255 && PanicReasons2[code.toString()]) {
          reason = PanicReasons2[code.toString()];
        }
        return `reverted with panic code 0x${code.toString(16)} (${reason})`;
      }
    }
  };
});

// node_modules/ethers/lib.esm/abi/index.js
var init_abi = __esm(() => {
  init_abi_coder();
  init_bytes32();
  init_fragments();
  init_interface();
  init_typed();
});

// node_modules/ethers/lib.esm/providers/provider.js
function getValue2(value) {
  if (value == null) {
    return null;
  }
  return value;
}
function toJson(value) {
  if (value == null) {
    return null;
  }
  return value.toString();
}

class FeeData {
  gasPrice;
  maxFeePerGas;
  maxPriorityFeePerGas;
  constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
    defineProperties(this, {
      gasPrice: getValue2(gasPrice),
      maxFeePerGas: getValue2(maxFeePerGas),
      maxPriorityFeePerGas: getValue2(maxPriorityFeePerGas)
    });
  }
  toJSON() {
    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
    return {
      _type: "FeeData",
      gasPrice: toJson(gasPrice),
      maxFeePerGas: toJson(maxFeePerGas),
      maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
    };
  }
}
function copyRequest(req) {
  const result = {};
  if (req.to) {
    result.to = req.to;
  }
  if (req.from) {
    result.from = req.from;
  }
  if (req.data) {
    result.data = hexlify(req.data);
  }
  const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const key of bigIntKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getBigInt(req[key], `request.${key}`);
  }
  const numberKeys = "type,nonce".split(/,/);
  for (const key of numberKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getNumber(req[key], `request.${key}`);
  }
  if (req.accessList) {
    result.accessList = accessListify(req.accessList);
  }
  if (req.authorizationList) {
    result.authorizationList = req.authorizationList.slice();
  }
  if ("blockTag" in req) {
    result.blockTag = req.blockTag;
  }
  if ("enableCcipRead" in req) {
    result.enableCcipRead = !!req.enableCcipRead;
  }
  if ("customData" in req) {
    result.customData = req.customData;
  }
  if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
    result.blobVersionedHashes = req.blobVersionedHashes.slice();
  }
  if ("kzg" in req) {
    result.kzg = req.kzg;
  }
  if ("blobs" in req && req.blobs) {
    result.blobs = req.blobs.map((b2) => {
      if (isBytesLike(b2)) {
        return hexlify(b2);
      }
      return Object.assign({}, b2);
    });
  }
  return result;
}

class Log {
  provider;
  transactionHash;
  blockHash;
  blockNumber;
  removed;
  address;
  data;
  topics;
  index;
  transactionIndex;
  constructor(log, provider) {
    this.provider = provider;
    const topics = Object.freeze(log.topics.slice());
    defineProperties(this, {
      transactionHash: log.transactionHash,
      blockHash: log.blockHash,
      blockNumber: log.blockNumber,
      removed: log.removed,
      address: log.address,
      data: log.data,
      topics,
      index: log.index,
      transactionIndex: log.transactionIndex
    });
  }
  toJSON() {
    const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
    return {
      _type: "log",
      address,
      blockHash,
      blockNumber,
      data,
      index,
      removed,
      topics,
      transactionHash,
      transactionIndex
    };
  }
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    assert(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
    return block;
  }
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.transactionHash);
    assert(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
    return tx;
  }
  async getTransactionReceipt() {
    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
    assert(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
    return receipt;
  }
  removedEvent() {
    return createRemovedLogFilter(this);
  }
}

class TransactionResponse {
  provider;
  blockNumber;
  blockHash;
  index;
  hash;
  type;
  to;
  from;
  nonce;
  gasLimit;
  gasPrice;
  maxPriorityFeePerGas;
  maxFeePerGas;
  maxFeePerBlobGas;
  data;
  value;
  chainId;
  signature;
  accessList;
  blobVersionedHashes;
  authorizationList;
  #startBlock;
  constructor(tx, provider) {
    this.provider = provider;
    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
    this.blockHash = tx.blockHash != null ? tx.blockHash : null;
    this.hash = tx.hash;
    this.index = tx.index;
    this.type = tx.type;
    this.from = tx.from;
    this.to = tx.to || null;
    this.gasLimit = tx.gasLimit;
    this.nonce = tx.nonce;
    this.data = tx.data;
    this.value = tx.value;
    this.gasPrice = tx.gasPrice;
    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
    this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
    this.chainId = tx.chainId;
    this.signature = tx.signature;
    this.accessList = tx.accessList != null ? tx.accessList : null;
    this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
    this.authorizationList = tx.authorizationList != null ? tx.authorizationList : null;
    this.#startBlock = -1;
  }
  toJSON() {
    const { blockNumber, blockHash, index, hash: hash2, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
    return {
      _type: "TransactionResponse",
      accessList,
      blockNumber,
      blockHash,
      blobVersionedHashes,
      chainId: toJson(this.chainId),
      data,
      from,
      gasLimit: toJson(this.gasLimit),
      gasPrice: toJson(this.gasPrice),
      hash: hash2,
      maxFeePerGas: toJson(this.maxFeePerGas),
      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
      maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
      nonce,
      signature,
      to,
      index,
      type,
      value: toJson(this.value)
    };
  }
  async getBlock() {
    let blockNumber = this.blockNumber;
    if (blockNumber == null) {
      const tx = await this.getTransaction();
      if (tx) {
        blockNumber = tx.blockNumber;
      }
    }
    if (blockNumber == null) {
      return null;
    }
    const block = this.provider.getBlock(blockNumber);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx, blockNumber: blockNumber2 } = await resolveProperties({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      if (tx == null || tx.blockNumber == null) {
        return 0;
      }
      return blockNumber2 - tx.blockNumber + 1;
    }
    const blockNumber = await this.provider.getBlockNumber();
    return blockNumber - this.blockNumber + 1;
  }
  async wait(_confirms, _timeout) {
    const confirms = _confirms == null ? 1 : _confirms;
    const timeout = _timeout == null ? 0 : _timeout;
    let startBlock = this.#startBlock;
    let nextScan = -1;
    let stopScanning = startBlock === -1 ? true : false;
    const checkReplacement = async () => {
      if (stopScanning) {
        return null;
      }
      const { blockNumber, nonce } = await resolveProperties({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (nonce < this.nonce) {
        startBlock = blockNumber;
        return;
      }
      if (stopScanning) {
        return null;
      }
      const mined = await this.getTransaction();
      if (mined && mined.blockNumber != null) {
        return;
      }
      if (nextScan === -1) {
        nextScan = startBlock - 3;
        if (nextScan < this.#startBlock) {
          nextScan = this.#startBlock;
        }
      }
      while (nextScan <= blockNumber) {
        if (stopScanning) {
          return null;
        }
        const block = await this.provider.getBlock(nextScan, true);
        if (block == null) {
          return;
        }
        for (const hash2 of block) {
          if (hash2 === this.hash) {
            return;
          }
        }
        for (let i = 0;i < block.length; i++) {
          const tx = await block.getTransaction(i);
          if (tx.from === this.from && tx.nonce === this.nonce) {
            if (stopScanning) {
              return null;
            }
            const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
            if (receipt2 == null) {
              return;
            }
            if (blockNumber - receipt2.blockNumber + 1 < confirms) {
              return;
            }
            let reason = "replaced";
            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
              reason = "repriced";
            } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_09) {
              reason = "cancelled";
            }
            assert(false, "transaction was replaced", "TRANSACTION_REPLACED", {
              cancelled: reason === "replaced" || reason === "cancelled",
              reason,
              replacement: tx.replaceableTransaction(startBlock),
              hash: tx.hash,
              receipt: receipt2
            });
          }
        }
        nextScan++;
      }
      return;
    };
    const checkReceipt = (receipt2) => {
      if (receipt2 == null || receipt2.status !== 0) {
        return receipt2;
      }
      assert(false, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: receipt2.to,
          from: receipt2.from,
          data: ""
        },
        receipt: receipt2
      });
    };
    const receipt = await this.provider.getTransactionReceipt(this.hash);
    if (confirms === 0) {
      return checkReceipt(receipt);
    }
    if (receipt) {
      if (confirms === 1 || await receipt.confirmations() >= confirms) {
        return checkReceipt(receipt);
      }
    } else {
      await checkReplacement();
      if (confirms === 0) {
        return null;
      }
    }
    const waiter = new Promise((resolve, reject) => {
      const cancellers = [];
      const cancel = () => {
        cancellers.forEach((c) => c());
      };
      cancellers.push(() => {
        stopScanning = true;
      });
      if (timeout > 0) {
        const timer = setTimeout(() => {
          cancel();
          reject(makeError("wait for transaction timeout", "TIMEOUT"));
        }, timeout);
        cancellers.push(() => {
          clearTimeout(timer);
        });
      }
      const txListener = async (receipt2) => {
        if (await receipt2.confirmations() >= confirms) {
          cancel();
          try {
            resolve(checkReceipt(receipt2));
          } catch (error) {
            reject(error);
          }
        }
      };
      cancellers.push(() => {
        this.provider.off(this.hash, txListener);
      });
      this.provider.on(this.hash, txListener);
      if (startBlock >= 0) {
        const replaceListener = async () => {
          try {
            await checkReplacement();
          } catch (error) {
            if (isError(error, "TRANSACTION_REPLACED")) {
              cancel();
              reject(error);
              return;
            }
          }
          if (!stopScanning) {
            this.provider.once("block", replaceListener);
          }
        };
        cancellers.push(() => {
          this.provider.off("block", replaceListener);
        });
        this.provider.once("block", replaceListener);
      }
    });
    return await waiter;
  }
  isMined() {
    return this.blockHash != null;
  }
  isLegacy() {
    return this.type === 0;
  }
  isBerlin() {
    return this.type === 1;
  }
  isLondon() {
    return this.type === 2;
  }
  isCancun() {
    return this.type === 3;
  }
  removedEvent() {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createRemovedTransactionFilter(this);
  }
  reorderedEvent(other) {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    assert(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createReorderedTransactionFilter(this, other);
  }
  replaceableTransaction(startBlock) {
    assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
    const tx = new TransactionResponse(this, this.provider);
    tx.#startBlock = startBlock;
    return tx;
  }
}
function createOrphanedBlockFilter(block) {
  return { orphan: "drop-block", hash: block.hash, number: block.number };
}
function createReorderedTransactionFilter(tx, other) {
  return { orphan: "reorder-transaction", tx, other };
}
function createRemovedTransactionFilter(tx) {
  return { orphan: "drop-transaction", tx };
}
function createRemovedLogFilter(log) {
  return { orphan: "drop-log", log: {
    transactionHash: log.transactionHash,
    blockHash: log.blockHash,
    blockNumber: log.blockNumber,
    address: log.address,
    data: log.data,
    topics: Object.freeze(log.topics.slice()),
    index: log.index
  } };
}
var BN_09, Block, TransactionReceipt;
var init_provider = __esm(() => {
  init_utils();
  init_transaction2();
  BN_09 = BigInt(0);
  Block = class Block {
    provider;
    number;
    hash;
    timestamp;
    parentHash;
    parentBeaconBlockRoot;
    nonce;
    difficulty;
    gasLimit;
    gasUsed;
    stateRoot;
    receiptsRoot;
    blobGasUsed;
    excessBlobGas;
    miner;
    prevRandao;
    extraData;
    baseFeePerGas;
    #transactions;
    constructor(block, provider) {
      this.#transactions = block.transactions.map((tx) => {
        if (typeof tx !== "string") {
          return new TransactionResponse(tx, provider);
        }
        return tx;
      });
      defineProperties(this, {
        provider,
        hash: getValue2(block.hash),
        number: block.number,
        timestamp: block.timestamp,
        parentHash: block.parentHash,
        parentBeaconBlockRoot: block.parentBeaconBlockRoot,
        nonce: block.nonce,
        difficulty: block.difficulty,
        gasLimit: block.gasLimit,
        gasUsed: block.gasUsed,
        blobGasUsed: block.blobGasUsed,
        excessBlobGas: block.excessBlobGas,
        miner: block.miner,
        prevRandao: getValue2(block.prevRandao),
        extraData: block.extraData,
        baseFeePerGas: getValue2(block.baseFeePerGas),
        stateRoot: block.stateRoot,
        receiptsRoot: block.receiptsRoot
      });
    }
    get transactions() {
      return this.#transactions.map((tx) => {
        if (typeof tx === "string") {
          return tx;
        }
        return tx.hash;
      });
    }
    get prefetchedTransactions() {
      const txs = this.#transactions.slice();
      if (txs.length === 0) {
        return [];
      }
      assert(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
        operation: "transactionResponses()"
      });
      return txs;
    }
    toJSON() {
      const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash2, miner, prevRandao, nonce, number: number2, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
      return {
        _type: "Block",
        baseFeePerGas: toJson(baseFeePerGas),
        difficulty: toJson(difficulty),
        extraData,
        gasLimit: toJson(gasLimit),
        gasUsed: toJson(gasUsed),
        blobGasUsed: toJson(this.blobGasUsed),
        excessBlobGas: toJson(this.excessBlobGas),
        hash: hash2,
        miner,
        prevRandao,
        nonce,
        number: number2,
        parentHash,
        timestamp,
        parentBeaconBlockRoot,
        stateRoot,
        receiptsRoot,
        transactions
      };
    }
    [Symbol.iterator]() {
      let index = 0;
      const txs = this.transactions;
      return {
        next: () => {
          if (index < this.length) {
            return {
              value: txs[index++],
              done: false
            };
          }
          return { value: undefined, done: true };
        }
      };
    }
    get length() {
      return this.#transactions.length;
    }
    get date() {
      if (this.timestamp == null) {
        return null;
      }
      return new Date(this.timestamp * 1000);
    }
    async getTransaction(indexOrHash) {
      let tx = undefined;
      if (typeof indexOrHash === "number") {
        tx = this.#transactions[indexOrHash];
      } else {
        const hash2 = indexOrHash.toLowerCase();
        for (const v of this.#transactions) {
          if (typeof v === "string") {
            if (v !== hash2) {
              continue;
            }
            tx = v;
            break;
          } else {
            if (v.hash !== hash2) {
              continue;
            }
            tx = v;
            break;
          }
        }
      }
      if (tx == null) {
        throw new Error("no such tx");
      }
      if (typeof tx === "string") {
        return await this.provider.getTransaction(tx);
      } else {
        return tx;
      }
    }
    getPrefetchedTransaction(indexOrHash) {
      const txs = this.prefetchedTransactions;
      if (typeof indexOrHash === "number") {
        return txs[indexOrHash];
      }
      indexOrHash = indexOrHash.toLowerCase();
      for (const tx of txs) {
        if (tx.hash === indexOrHash) {
          return tx;
        }
      }
      assertArgument(false, "no matching transaction", "indexOrHash", indexOrHash);
    }
    isMined() {
      return !!this.hash;
    }
    isLondon() {
      return !!this.baseFeePerGas;
    }
    orphanedEvent() {
      if (!this.isMined()) {
        throw new Error("");
      }
      return createOrphanedBlockFilter(this);
    }
  };
  TransactionReceipt = class TransactionReceipt {
    provider;
    to;
    from;
    contractAddress;
    hash;
    index;
    blockHash;
    blockNumber;
    logsBloom;
    gasUsed;
    blobGasUsed;
    cumulativeGasUsed;
    gasPrice;
    blobGasPrice;
    type;
    status;
    root;
    #logs;
    constructor(tx, provider) {
      this.#logs = Object.freeze(tx.logs.map((log) => {
        return new Log(log, provider);
      }));
      let gasPrice = BN_09;
      if (tx.effectiveGasPrice != null) {
        gasPrice = tx.effectiveGasPrice;
      } else if (tx.gasPrice != null) {
        gasPrice = tx.gasPrice;
      }
      defineProperties(this, {
        provider,
        to: tx.to,
        from: tx.from,
        contractAddress: tx.contractAddress,
        hash: tx.hash,
        index: tx.index,
        blockHash: tx.blockHash,
        blockNumber: tx.blockNumber,
        logsBloom: tx.logsBloom,
        gasUsed: tx.gasUsed,
        cumulativeGasUsed: tx.cumulativeGasUsed,
        blobGasUsed: tx.blobGasUsed,
        gasPrice,
        blobGasPrice: tx.blobGasPrice,
        type: tx.type,
        status: tx.status,
        root: tx.root
      });
    }
    get logs() {
      return this.#logs;
    }
    toJSON() {
      const {
        to,
        from,
        contractAddress,
        hash: hash2,
        index,
        blockHash,
        blockNumber,
        logsBloom,
        logs,
        status,
        root
      } = this;
      return {
        _type: "TransactionReceipt",
        blockHash,
        blockNumber,
        contractAddress,
        cumulativeGasUsed: toJson(this.cumulativeGasUsed),
        from,
        gasPrice: toJson(this.gasPrice),
        blobGasUsed: toJson(this.blobGasUsed),
        blobGasPrice: toJson(this.blobGasPrice),
        gasUsed: toJson(this.gasUsed),
        hash: hash2,
        index,
        logs,
        logsBloom,
        root,
        status,
        to
      };
    }
    get length() {
      return this.logs.length;
    }
    [Symbol.iterator]() {
      let index = 0;
      return {
        next: () => {
          if (index < this.length) {
            return { value: this.logs[index++], done: false };
          }
          return { value: undefined, done: true };
        }
      };
    }
    get fee() {
      return this.gasUsed * this.gasPrice;
    }
    async getBlock() {
      const block = await this.provider.getBlock(this.blockHash);
      if (block == null) {
        throw new Error("TODO");
      }
      return block;
    }
    async getTransaction() {
      const tx = await this.provider.getTransaction(this.hash);
      if (tx == null) {
        throw new Error("TODO");
      }
      return tx;
    }
    async getResult() {
      return await this.provider.getTransactionResult(this.hash);
    }
    async confirmations() {
      return await this.provider.getBlockNumber() - this.blockNumber + 1;
    }
    removedEvent() {
      return createRemovedTransactionFilter(this);
    }
    reorderedEvent(other) {
      assert(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
      return createReorderedTransactionFilter(this, other);
    }
  };
});

// node_modules/ethers/lib.esm/contract/wrappers.js
var EventLog, UndecodedEventLog, ContractTransactionReceipt, ContractTransactionResponse, ContractUnknownEventPayload, ContractEventPayload;
var init_wrappers = __esm(() => {
  init_provider();
  init_utils();
  EventLog = class EventLog extends Log {
    interface;
    fragment;
    args;
    constructor(log, iface, fragment) {
      super(log, log.provider);
      const args = iface.decodeEventLog(fragment, log.data, log.topics);
      defineProperties(this, { args, fragment, interface: iface });
    }
    get eventName() {
      return this.fragment.name;
    }
    get eventSignature() {
      return this.fragment.format();
    }
  };
  UndecodedEventLog = class UndecodedEventLog extends Log {
    error;
    constructor(log, error) {
      super(log, log.provider);
      defineProperties(this, { error });
    }
  };
  ContractTransactionReceipt = class ContractTransactionReceipt extends TransactionReceipt {
    #iface;
    constructor(iface, provider, tx) {
      super(tx, provider);
      this.#iface = iface;
    }
    get logs() {
      return super.logs.map((log) => {
        const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
        if (fragment) {
          try {
            return new EventLog(log, this.#iface, fragment);
          } catch (error) {
            return new UndecodedEventLog(log, error);
          }
        }
        return log;
      });
    }
  };
  ContractTransactionResponse = class ContractTransactionResponse extends TransactionResponse {
    #iface;
    constructor(iface, provider, tx) {
      super(tx, provider);
      this.#iface = iface;
    }
    async wait(confirms, timeout) {
      const receipt = await super.wait(confirms, timeout);
      if (receipt == null) {
        return null;
      }
      return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
    }
  };
  ContractUnknownEventPayload = class ContractUnknownEventPayload extends EventPayload {
    log;
    constructor(contract, listener, filter, log) {
      super(contract, listener, filter);
      defineProperties(this, { log });
    }
    async getBlock() {
      return await this.log.getBlock();
    }
    async getTransaction() {
      return await this.log.getTransaction();
    }
    async getTransactionReceipt() {
      return await this.log.getTransactionReceipt();
    }
  };
  ContractEventPayload = class ContractEventPayload extends ContractUnknownEventPayload {
    constructor(contract, listener, filter, fragment, _log) {
      super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
      const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
      defineProperties(this, { args, fragment });
    }
    get eventName() {
      return this.fragment.name;
    }
    get eventSignature() {
      return this.fragment.format();
    }
  };
});

// node_modules/ethers/lib.esm/contract/contract.js
function canCall(value) {
  return value && typeof value.call === "function";
}
function canEstimate(value) {
  return value && typeof value.estimateGas === "function";
}
function canResolve(value) {
  return value && typeof value.resolveName === "function";
}
function canSend(value) {
  return value && typeof value.sendTransaction === "function";
}
function getResolver(value) {
  if (value != null) {
    if (canResolve(value)) {
      return value;
    }
    if (value.provider) {
      return value.provider;
    }
  }
  return;
}

class PreparedTopicFilter {
  #filter;
  fragment;
  constructor(contract, fragment, args) {
    defineProperties(this, { fragment });
    if (fragment.inputs.length < args.length) {
      throw new Error("too many arguments");
    }
    const runner = getRunner(contract.runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    this.#filter = async function() {
      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
        const arg = args[index];
        if (arg == null) {
          return null;
        }
        return param.walkAsync(args[index], (type, value) => {
          if (type === "address") {
            if (Array.isArray(value)) {
              return Promise.all(value.map((v) => resolveAddress(v, resolver)));
            }
            return resolveAddress(value, resolver);
          }
          return value;
        });
      }));
      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
    }();
  }
  getTopicFilter() {
    return this.#filter;
  }
}
function getRunner(value, feature) {
  if (value == null) {
    return null;
  }
  if (typeof value[feature] === "function") {
    return value;
  }
  if (value.provider && typeof value.provider[feature] === "function") {
    return value.provider;
  }
  return null;
}
function getProvider(value) {
  if (value == null) {
    return null;
  }
  return value.provider || null;
}
async function copyOverrides(arg, allowed) {
  const _overrides = Typed.dereference(arg, "overrides");
  assertArgument(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
  const overrides = copyRequest(_overrides);
  assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
  assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
  if (overrides.from) {
    overrides.from = overrides.from;
  }
  return overrides;
}
async function resolveArgs(_runner, inputs, args) {
  const runner = getRunner(_runner, "resolveName");
  const resolver = canResolve(runner) ? runner : null;
  return await Promise.all(inputs.map((param, index) => {
    return param.walkAsync(args[index], (type, value) => {
      value = Typed.dereference(value, type);
      if (type === "address") {
        return resolveAddress(value, resolver);
      }
      return value;
    });
  }));
}
function buildWrappedFallback(contract) {
  const populateTransaction = async function(overrides) {
    const tx = await copyOverrides(overrides, ["data"]);
    tx.to = await contract.getAddress();
    if (tx.from) {
      tx.from = await resolveAddress(tx.from, getResolver(contract.runner));
    }
    const iface = contract.interface;
    const noValue = getBigInt(tx.value || BN_010, "overrides.value") === BN_010;
    const noData = (tx.data || "0x") === "0x";
    if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
      assertArgument(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
    }
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    const payable = iface.receive || iface.fallback && iface.fallback.payable;
    assertArgument(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    return tx;
  };
  const staticCall = async function(overrides) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(overrides);
    try {
      return await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
  };
  const send = async function(overrides) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(overrides));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(overrides) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(overrides));
  };
  const method = async (overrides) => {
    return await send(overrides);
  };
  defineProperties(method, {
    _contract: contract,
    estimateGas,
    populateTransaction,
    send,
    staticCall
  });
  return method;
}
function buildWrappedMethod(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getFunction(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const populateTransaction = async function(...args) {
    const fragment = getFragment(...args);
    let overrides = {};
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
      if (overrides.from) {
        overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));
      }
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    }
    const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
    return Object.assign({}, overrides, await resolveProperties({
      to: contract.getAddress(),
      data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
    }));
  };
  const staticCall = async function(...args) {
    const result = await staticCallResult(...args);
    if (result.length === 1) {
      return result[0];
    }
    return result;
  };
  const send = async function(...args) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(...args));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(...args) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(...args));
  };
  const staticCallResult = async function(...args) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(...args);
    let result = "0x";
    try {
      result = await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
    const fragment = getFragment(...args);
    return contract.interface.decodeFunctionResult(fragment, result);
  };
  const method = async (...args) => {
    const fragment = getFragment(...args);
    if (fragment.constant) {
      return await staticCall(...args);
    }
    return await send(...args);
  };
  defineProperties(method, {
    name: contract.interface.getFunctionName(key),
    _contract: contract,
    _key: key,
    getFragment,
    estimateGas,
    populateTransaction,
    send,
    staticCall,
    staticCallResult
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getFunction(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
function buildWrappedEvent(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getEvent(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const method = function(...args) {
    return new PreparedTopicFilter(contract, getFragment(...args), args);
  };
  defineProperties(method, {
    name: contract.interface.getEventName(key),
    _contract: contract,
    _key: key,
    getFragment
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getEvent(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
function setInternal(contract, values) {
  internalValues.set(contract[internal2], values);
}
function getInternal(contract) {
  return internalValues.get(contract[internal2]);
}
function isDeferred(value) {
  return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
}
async function getSubInfo(contract, event) {
  let topics;
  let fragment = null;
  if (Array.isArray(event)) {
    const topicHashify = function(name) {
      if (isHexString(name, 32)) {
        return name;
      }
      const fragment2 = contract.interface.getEvent(name);
      assertArgument(fragment2, "unknown fragment", "name", name);
      return fragment2.topicHash;
    };
    topics = event.map((e) => {
      if (e == null) {
        return null;
      }
      if (Array.isArray(e)) {
        return e.map(topicHashify);
      }
      return topicHashify(e);
    });
  } else if (event === "*") {
    topics = [null];
  } else if (typeof event === "string") {
    if (isHexString(event, 32)) {
      topics = [event];
    } else {
      fragment = contract.interface.getEvent(event);
      assertArgument(fragment, "unknown fragment", "event", event);
      topics = [fragment.topicHash];
    }
  } else if (isDeferred(event)) {
    topics = await event.getTopicFilter();
  } else if ("fragment" in event) {
    fragment = event.fragment;
    topics = [fragment.topicHash];
  } else {
    assertArgument(false, "unknown event name", "event", event);
  }
  topics = topics.map((t) => {
    if (t == null) {
      return null;
    }
    if (Array.isArray(t)) {
      const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
      if (items.length === 1) {
        return items[0];
      }
      items.sort();
      return items;
    }
    return t.toLowerCase();
  });
  const tag = topics.map((t) => {
    if (t == null) {
      return "null";
    }
    if (Array.isArray(t)) {
      return t.join("|");
    }
    return t;
  }).join("&");
  return { fragment, tag, topics };
}
async function hasSub(contract, event) {
  const { subs } = getInternal(contract);
  return subs.get((await getSubInfo(contract, event)).tag) || null;
}
async function getSub(contract, operation, event) {
  const provider = getProvider(contract.runner);
  assert(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
  const { fragment, tag, topics } = await getSubInfo(contract, event);
  const { addr, subs } = getInternal(contract);
  let sub = subs.get(tag);
  if (!sub) {
    const address = addr ? addr : contract;
    const filter = { address, topics };
    const listener = (log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = contract.interface.getEvent(log.topics[0]);
        } catch (error) {}
      }
      if (foundFragment) {
        const _foundFragment = foundFragment;
        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
        emit(contract, event, args, (listener2) => {
          return new ContractEventPayload(contract, listener2, event, _foundFragment, log);
        });
      } else {
        emit(contract, event, [], (listener2) => {
          return new ContractUnknownEventPayload(contract, listener2, event, log);
        });
      }
    };
    let starting = [];
    const start = () => {
      if (starting.length) {
        return;
      }
      starting.push(provider.on(filter, listener));
    };
    const stop = async () => {
      if (starting.length == 0) {
        return;
      }
      let started = starting;
      starting = [];
      await Promise.all(started);
      provider.off(filter, listener);
    };
    sub = { tag, listeners: [], start, stop };
    subs.set(tag, sub);
  }
  return sub;
}
async function _emit(contract, event, args, payloadFunc) {
  await lastEmit;
  const sub = await hasSub(contract, event);
  if (!sub) {
    return false;
  }
  const count = sub.listeners.length;
  sub.listeners = sub.listeners.filter(({ listener, once }) => {
    const passArgs = Array.from(args);
    if (payloadFunc) {
      passArgs.push(payloadFunc(once ? null : listener));
    }
    try {
      listener.call(contract, ...passArgs);
    } catch (error) {}
    return !once;
  });
  if (sub.listeners.length === 0) {
    sub.stop();
    getInternal(contract).subs.delete(sub.tag);
  }
  return count > 0;
}
async function emit(contract, event, args, payloadFunc) {
  try {
    await lastEmit;
  } catch (error) {}
  const resultPromise = _emit(contract, event, args, payloadFunc);
  lastEmit = resultPromise;
  return await resultPromise;
}
function _ContractBase() {
  return BaseContract;
}
var BN_010, internal2, internalValues, lastEmit, passProperties2, BaseContract, Contract;
var init_contract = __esm(() => {
  init_abi();
  init_address2();
  init_provider();
  init_utils();
  init_wrappers();
  BN_010 = BigInt(0);
  internal2 = Symbol.for("_ethersInternal_contract");
  internalValues = new WeakMap;
  lastEmit = Promise.resolve();
  passProperties2 = ["then"];
  BaseContract = class BaseContract {
    target;
    interface;
    runner;
    filters;
    [internal2];
    fallback;
    constructor(target, abi, runner, _deployTx) {
      assertArgument(typeof target === "string" || isAddressable(target), "invalid value for Contract target", "target", target);
      if (runner == null) {
        runner = null;
      }
      const iface = Interface.from(abi);
      defineProperties(this, { target, runner, interface: iface });
      Object.defineProperty(this, internal2, { value: {} });
      let addrPromise;
      let addr = null;
      let deployTx = null;
      if (_deployTx) {
        const provider = getProvider(runner);
        deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
      }
      let subs = new Map;
      if (typeof target === "string") {
        if (isHexString(target)) {
          addr = target;
          addrPromise = Promise.resolve(target);
        } else {
          const resolver = getRunner(runner, "resolveName");
          if (!canResolve(resolver)) {
            throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
              operation: "resolveName"
            });
          }
          addrPromise = resolver.resolveName(target).then((addr2) => {
            if (addr2 == null) {
              throw makeError("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                value: target
              });
            }
            getInternal(this).addr = addr2;
            return addr2;
          });
        }
      } else {
        addrPromise = target.getAddress().then((addr2) => {
          if (addr2 == null) {
            throw new Error("TODO");
          }
          getInternal(this).addr = addr2;
          return addr2;
        });
      }
      setInternal(this, { addrPromise, addr, deployTx, subs });
      const filters = new Proxy({}, {
        get: (target2, prop, receiver) => {
          if (typeof prop === "symbol" || passProperties2.indexOf(prop) >= 0) {
            return Reflect.get(target2, prop, receiver);
          }
          try {
            return this.getEvent(prop);
          } catch (error) {
            if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
              throw error;
            }
          }
          return;
        },
        has: (target2, prop) => {
          if (passProperties2.indexOf(prop) >= 0) {
            return Reflect.has(target2, prop);
          }
          return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
        }
      });
      defineProperties(this, { filters });
      defineProperties(this, {
        fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
      });
      return new Proxy(this, {
        get: (target2, prop, receiver) => {
          if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
            return Reflect.get(target2, prop, receiver);
          }
          try {
            return target2.getFunction(prop);
          } catch (error) {
            if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
              throw error;
            }
          }
          return;
        },
        has: (target2, prop) => {
          if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
            return Reflect.has(target2, prop);
          }
          return target2.interface.hasFunction(prop);
        }
      });
    }
    connect(runner) {
      return new BaseContract(this.target, this.interface, runner);
    }
    attach(target) {
      return new BaseContract(target, this.interface, this.runner);
    }
    async getAddress() {
      return await getInternal(this).addrPromise;
    }
    async getDeployedCode() {
      const provider = getProvider(this.runner);
      assert(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
      const code = await provider.getCode(await this.getAddress());
      if (code === "0x") {
        return null;
      }
      return code;
    }
    async waitForDeployment() {
      const deployTx = this.deploymentTransaction();
      if (deployTx) {
        await deployTx.wait();
        return this;
      }
      const code = await this.getDeployedCode();
      if (code != null) {
        return this;
      }
      const provider = getProvider(this.runner);
      assert(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
      return new Promise((resolve, reject) => {
        const checkCode = async () => {
          try {
            const code2 = await this.getDeployedCode();
            if (code2 != null) {
              return resolve(this);
            }
            provider.once("block", checkCode);
          } catch (error) {
            reject(error);
          }
        };
        checkCode();
      });
    }
    deploymentTransaction() {
      return getInternal(this).deployTx;
    }
    getFunction(key) {
      if (typeof key !== "string") {
        key = key.format();
      }
      const func = buildWrappedMethod(this, key);
      return func;
    }
    getEvent(key) {
      if (typeof key !== "string") {
        key = key.format();
      }
      return buildWrappedEvent(this, key);
    }
    async queryTransaction(hash2) {
      throw new Error("@TODO");
    }
    async queryFilter(event, fromBlock, toBlock) {
      if (fromBlock == null) {
        fromBlock = 0;
      }
      if (toBlock == null) {
        toBlock = "latest";
      }
      const { addr, addrPromise } = getInternal(this);
      const address = addr ? addr : await addrPromise;
      const { fragment, topics } = await getSubInfo(this, event);
      const filter = { address, topics, fromBlock, toBlock };
      const provider = getProvider(this.runner);
      assert(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
      return (await provider.getLogs(filter)).map((log) => {
        let foundFragment = fragment;
        if (foundFragment == null) {
          try {
            foundFragment = this.interface.getEvent(log.topics[0]);
          } catch (error) {}
        }
        if (foundFragment) {
          try {
            return new EventLog(log, this.interface, foundFragment);
          } catch (error) {
            return new UndecodedEventLog(log, error);
          }
        }
        return new Log(log, provider);
      });
    }
    async on(event, listener) {
      const sub = await getSub(this, "on", event);
      sub.listeners.push({ listener, once: false });
      sub.start();
      return this;
    }
    async once(event, listener) {
      const sub = await getSub(this, "once", event);
      sub.listeners.push({ listener, once: true });
      sub.start();
      return this;
    }
    async emit(event, ...args) {
      return await emit(this, event, args, null);
    }
    async listenerCount(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return 0;
        }
        return sub.listeners.length;
      }
      const { subs } = getInternal(this);
      let total = 0;
      for (const { listeners } of subs.values()) {
        total += listeners.length;
      }
      return total;
    }
    async listeners(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return [];
        }
        return sub.listeners.map(({ listener }) => listener);
      }
      const { subs } = getInternal(this);
      let result = [];
      for (const { listeners } of subs.values()) {
        result = result.concat(listeners.map(({ listener }) => listener));
      }
      return result;
    }
    async off(event, listener) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return this;
      }
      if (listener) {
        const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
        if (index >= 0) {
          sub.listeners.splice(index, 1);
        }
      }
      if (listener == null || sub.listeners.length === 0) {
        sub.stop();
        getInternal(this).subs.delete(sub.tag);
      }
      return this;
    }
    async removeAllListeners(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return this;
        }
        sub.stop();
        getInternal(this).subs.delete(sub.tag);
      } else {
        const { subs } = getInternal(this);
        for (const { tag, stop } of subs.values()) {
          stop();
          subs.delete(tag);
        }
      }
      return this;
    }
    async addListener(event, listener) {
      return await this.on(event, listener);
    }
    async removeListener(event, listener) {
      return await this.off(event, listener);
    }
    static buildClass(abi) {

      class CustomContract extends BaseContract {
        constructor(address, runner = null) {
          super(address, abi, runner);
        }
      }
      return CustomContract;
    }
    static from(target, abi, runner) {
      if (runner == null) {
        runner = null;
      }
      const contract = new this(target, abi, runner);
      return contract;
    }
  };
  Contract = class Contract extends _ContractBase() {
  };
});

// node_modules/ethers/lib.esm/contract/factory.js
class ContractFactory {
  interface;
  bytecode;
  runner;
  constructor(abi, bytecode, runner) {
    const iface = Interface.from(abi);
    if (bytecode instanceof Uint8Array) {
      bytecode = hexlify(getBytes(bytecode));
    } else {
      if (typeof bytecode === "object") {
        bytecode = bytecode.object;
      }
      if (!bytecode.startsWith("0x")) {
        bytecode = "0x" + bytecode;
      }
      bytecode = hexlify(getBytes(bytecode));
    }
    defineProperties(this, {
      bytecode,
      interface: iface,
      runner: runner || null
    });
  }
  attach(target) {
    return new BaseContract(target, this.interface, this.runner);
  }
  async getDeployTransaction(...args) {
    let overrides = {};
    const fragment = this.interface.deploy;
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("incorrect number of arguments to constructor");
    }
    const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);
    const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
    return Object.assign({}, overrides, { data });
  }
  async deploy(...args) {
    const tx = await this.getDeployTransaction(...args);
    assert(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
      operation: "sendTransaction"
    });
    const sentTx = await this.runner.sendTransaction(tx);
    const address = getCreateAddress(sentTx);
    return new BaseContract(address, this.interface, this.runner, sentTx);
  }
  connect(runner) {
    return new ContractFactory(this.interface, this.bytecode, runner);
  }
  static fromSolidity(output2, runner) {
    assertArgument(output2 != null, "bad compiler output", "output", output2);
    if (typeof output2 === "string") {
      output2 = JSON.parse(output2);
    }
    const abi = output2.abi;
    let bytecode = "";
    if (output2.bytecode) {
      bytecode = output2.bytecode;
    } else if (output2.evm && output2.evm.bytecode) {
      bytecode = output2.evm.bytecode;
    }
    return new this(abi, bytecode, runner);
  }
}
var init_factory = __esm(() => {
  init_abi();
  init_address2();
  init_utils();
  init_contract();
});

// node_modules/ethers/lib.esm/contract/index.js
var init_contract2 = __esm(() => {
  init_contract();
  init_factory();
  init_wrappers();
});

// node_modules/ethers/lib.esm/providers/ens-resolver.js
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    assertArgument(false, "unsupported IPFS format", "link", link);
  }
  return `https://gateway.ipfs.io/ipfs/${link}`;
}

class MulticoinProviderPlugin {
  name;
  constructor(name) {
    defineProperties(this, { name });
  }
  connect(proivder) {
    return this;
  }
  supportsCoinType(coinType) {
    return false;
  }
  async encodeAddress(coinType, address) {
    throw new Error("unsupported coin");
  }
  async decodeAddress(coinType, data) {
    throw new Error("unsupported coin");
  }
}

class EnsResolver {
  provider;
  address;
  name;
  #supports2544;
  #resolver;
  constructor(provider, address, name) {
    defineProperties(this, { provider, address, name });
    this.#supports2544 = null;
    this.#resolver = new Contract(address, [
      "function supportsInterface(bytes4) view returns (bool)",
      "function resolve(bytes, bytes) view returns (bytes)",
      "function addr(bytes32) view returns (address)",
      "function addr(bytes32, uint) view returns (bytes)",
      "function text(bytes32, string) view returns (string)",
      "function contenthash(bytes32) view returns (bytes)"
    ], provider);
  }
  async supportsWildcard() {
    if (this.#supports2544 == null) {
      this.#supports2544 = (async () => {
        try {
          return await this.#resolver.supportsInterface("0x9061b923");
        } catch (error) {
          if (isError(error, "CALL_EXCEPTION")) {
            return false;
          }
          this.#supports2544 = null;
          throw error;
        }
      })();
    }
    return await this.#supports2544;
  }
  async#fetch(funcName, params) {
    params = (params || []).slice();
    const iface = this.#resolver.interface;
    params.unshift(namehash(this.name));
    let fragment = null;
    if (await this.supportsWildcard()) {
      fragment = iface.getFunction(funcName);
      assert(fragment, "missing fragment", "UNKNOWN_ERROR", {
        info: { funcName }
      });
      params = [
        dnsEncode(this.name, 255),
        iface.encodeFunctionData(fragment, params)
      ];
      funcName = "resolve(bytes,bytes)";
    }
    params.push({
      enableCcipRead: true
    });
    try {
      const result = await this.#resolver[funcName](...params);
      if (fragment) {
        return iface.decodeFunctionResult(fragment, result)[0];
      }
      return result;
    } catch (error) {
      if (!isError(error, "CALL_EXCEPTION")) {
        throw error;
      }
    }
    return null;
  }
  async getAddress(coinType) {
    if (coinType == null) {
      coinType = 60;
    }
    if (coinType === 60) {
      try {
        const result = await this.#fetch("addr(bytes32)");
        if (result == null || result === ZeroAddress) {
          return null;
        }
        return result;
      } catch (error) {
        if (isError(error, "CALL_EXCEPTION")) {
          return null;
        }
        throw error;
      }
    }
    if (coinType >= 0 && coinType < 2147483648) {
      let ethCoinType = coinType + 2147483648;
      const data2 = await this.#fetch("addr(bytes32,uint)", [ethCoinType]);
      if (isHexString(data2, 20)) {
        return getAddress(data2);
      }
    }
    let coinPlugin = null;
    for (const plugin of this.provider.plugins) {
      if (!(plugin instanceof MulticoinProviderPlugin)) {
        continue;
      }
      if (plugin.supportsCoinType(coinType)) {
        coinPlugin = plugin;
        break;
      }
    }
    if (coinPlugin == null) {
      return null;
    }
    const data = await this.#fetch("addr(bytes32,uint)", [coinType]);
    if (data == null || data === "0x") {
      return null;
    }
    const address = await coinPlugin.decodeAddress(coinType, data);
    if (address != null) {
      return address;
    }
    assert(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
      operation: `getAddress(${coinType})`,
      info: { coinType, data }
    });
  }
  async getText(key) {
    const data = await this.#fetch("text(bytes32,string)", [key]);
    if (data == null || data === "0x") {
      return null;
    }
    return data;
  }
  async getContentHash() {
    const data = await this.#fetch("contenthash(bytes32)");
    if (data == null || data === "0x") {
      return null;
    }
    const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
    if (ipfs) {
      const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
      const length = parseInt(ipfs[4], 16);
      if (ipfs[5].length === length * 2) {
        return `${scheme}://${encodeBase58("0x" + ipfs[2])}`;
      }
    }
    const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
    if (swarm && swarm[1].length === 64) {
      return `bzz://${swarm[1]}`;
    }
    assert(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
      operation: "getContentHash()",
      info: { data }
    });
  }
  async getAvatar() {
    const avatar = await this._getAvatar();
    return avatar.url;
  }
  async _getAvatar() {
    const linkage = [{ type: "name", value: this.name }];
    try {
      const avatar = await this.getText("avatar");
      if (avatar == null) {
        linkage.push({ type: "!avatar", value: "" });
        return { url: null, linkage };
      }
      linkage.push({ type: "avatar", value: avatar });
      for (let i = 0;i < matchers.length; i++) {
        const match = avatar.match(matchers[i]);
        if (match == null) {
          continue;
        }
        const scheme = match[1].toLowerCase();
        switch (scheme) {
          case "https":
          case "data":
            linkage.push({ type: "url", value: avatar });
            return { linkage, url: avatar };
          case "ipfs": {
            const url = getIpfsLink(avatar);
            linkage.push({ type: "ipfs", value: avatar });
            linkage.push({ type: "url", value: url });
            return { linkage, url };
          }
          case "erc721":
          case "erc1155": {
            const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
            linkage.push({ type: scheme, value: avatar });
            const owner = await this.getAddress();
            if (owner == null) {
              linkage.push({ type: "!owner", value: "" });
              return { url: null, linkage };
            }
            const comps = (match[2] || "").split("/");
            if (comps.length !== 2) {
              linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
              return { url: null, linkage };
            }
            const tokenId = comps[1];
            const contract = new Contract(comps[0], [
              "function tokenURI(uint) view returns (string)",
              "function ownerOf(uint) view returns (address)",
              "function uri(uint) view returns (string)",
              "function balanceOf(address, uint256) view returns (uint)"
            ], this.provider);
            if (scheme === "erc721") {
              const tokenOwner = await contract.ownerOf(tokenId);
              if (owner !== tokenOwner) {
                linkage.push({ type: "!owner", value: tokenOwner });
                return { url: null, linkage };
              }
              linkage.push({ type: "owner", value: tokenOwner });
            } else if (scheme === "erc1155") {
              const balance = await contract.balanceOf(owner, tokenId);
              if (!balance) {
                linkage.push({ type: "!balance", value: "0" });
                return { url: null, linkage };
              }
              linkage.push({ type: "balance", value: balance.toString() });
            }
            let metadataUrl = await contract[selector](tokenId);
            if (metadataUrl == null || metadataUrl === "0x") {
              linkage.push({ type: "!metadata-url", value: "" });
              return { url: null, linkage };
            }
            linkage.push({ type: "metadata-url-base", value: metadataUrl });
            if (scheme === "erc1155") {
              metadataUrl = metadataUrl.replace("{id}", toBeHex(tokenId, 32).substring(2));
              linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
            }
            if (metadataUrl.match(/^ipfs:/i)) {
              metadataUrl = getIpfsLink(metadataUrl);
            }
            linkage.push({ type: "metadata-url", value: metadataUrl });
            let metadata = {};
            const response = await new FetchRequest(metadataUrl).send();
            response.assertOk();
            try {
              metadata = response.bodyJson;
            } catch (error) {
              try {
                linkage.push({ type: "!metadata", value: response.bodyText });
              } catch (error2) {
                const bytes2 = response.body;
                if (bytes2) {
                  linkage.push({ type: "!metadata", value: hexlify(bytes2) });
                }
                return { url: null, linkage };
              }
              return { url: null, linkage };
            }
            if (!metadata) {
              linkage.push({ type: "!metadata", value: "" });
              return { url: null, linkage };
            }
            linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
            let imageUrl = metadata.image;
            if (typeof imageUrl !== "string") {
              linkage.push({ type: "!imageUrl", value: "" });
              return { url: null, linkage };
            }
            if (imageUrl.match(/^(https:\/\/|data:)/i)) {} else {
              const ipfs = imageUrl.match(matcherIpfs);
              if (ipfs == null) {
                linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                return { url: null, linkage };
              }
              linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
              imageUrl = getIpfsLink(imageUrl);
            }
            linkage.push({ type: "url", value: imageUrl });
            return { linkage, url: imageUrl };
          }
        }
      }
    } catch (error) {}
    return { linkage, url: null };
  }
  static async getEnsAddress(provider) {
    const network = await provider.getNetwork();
    const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
    assert(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
      operation: "getEnsAddress",
      info: { network }
    });
    return ensPlugin.address;
  }
  static async#getResolver(provider, name) {
    const ensAddr = await EnsResolver.getEnsAddress(provider);
    try {
      const contract = new Contract(ensAddr, [
        "function resolver(bytes32) view returns (address)"
      ], provider);
      const addr = await contract.resolver(namehash(name), {
        enableCcipRead: true
      });
      if (addr === ZeroAddress) {
        return null;
      }
      return addr;
    } catch (error) {
      throw error;
    }
    return null;
  }
  static async fromName(provider, name) {
    let currentName = name;
    while (true) {
      if (currentName === "" || currentName === ".") {
        return null;
      }
      if (name !== "eth" && currentName === "eth") {
        return null;
      }
      const addr = await EnsResolver.#getResolver(provider, currentName);
      if (addr != null) {
        const resolver = new EnsResolver(provider, addr, name);
        if (currentName !== name && !await resolver.supportsWildcard()) {
          return null;
        }
        return resolver;
      }
      currentName = currentName.split(".").slice(1).join(".");
    }
  }
}
var matcherIpfs, matchers;
var init_ens_resolver = __esm(() => {
  init_address2();
  init_constants();
  init_contract2();
  init_hash();
  init_utils();
  matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
  matchers = [
    new RegExp("^(https)://(.*)$", "i"),
    new RegExp("^(data):(.*)$", "i"),
    matcherIpfs,
    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
  ];
});

// node_modules/ethers/lib.esm/providers/format.js
function allowNull(format, nullValue) {
  return function(value) {
    if (value == null) {
      return nullValue;
    }
    return format(value);
  };
}
function arrayOf(format, allowNull2) {
  return (array) => {
    if (allowNull2 && array == null) {
      return null;
    }
    if (!Array.isArray(array)) {
      throw new Error("not an array");
    }
    return array.map((i) => format(i));
  };
}
function object(format, altNames) {
  return (value) => {
    const result = {};
    for (const key in format) {
      let srcKey = key;
      if (altNames && key in altNames && !(srcKey in value)) {
        for (const altKey of altNames[key]) {
          if (altKey in value) {
            srcKey = altKey;
            break;
          }
        }
      }
      try {
        const nv = format[key](value[srcKey]);
        if (nv !== undefined) {
          result[key] = nv;
        }
      } catch (error) {
        const message = error instanceof Error ? error.message : "not-an-error";
        assert(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
      }
    }
    return result;
  };
}
function formatBoolean(value) {
  switch (value) {
    case true:
    case "true":
      return true;
    case false:
    case "false":
      return false;
  }
  assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
}
function formatData(value) {
  assertArgument(isHexString(value, true), "invalid data", "value", value);
  return value;
}
function formatHash(value) {
  assertArgument(isHexString(value, 32), "invalid hash", "value", value);
  return value;
}
function formatLog(value) {
  return _formatLog(value);
}
function formatBlock(value) {
  const result = _formatBlock(value);
  result.transactions = value.transactions.map((tx) => {
    if (typeof tx === "string") {
      return tx;
    }
    return formatTransactionResponse(tx);
  });
  return result;
}
function formatReceiptLog(value) {
  return _formatReceiptLog(value);
}
function formatTransactionReceipt(value) {
  return _formatTransactionReceipt(value);
}
function formatTransactionResponse(value) {
  if (value.to && getBigInt(value.to) === BN_011) {
    value.to = "0x0000000000000000000000000000000000000000";
  }
  const result = object({
    hash: formatHash,
    index: allowNull(getNumber, undefined),
    type: (value2) => {
      if (value2 === "0x" || value2 == null) {
        return 0;
      }
      return getNumber(value2);
    },
    accessList: allowNull(accessListify, null),
    blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
    authorizationList: allowNull(arrayOf((v) => {
      let sig;
      if (v.signature) {
        sig = v.signature;
      } else {
        let yParity = v.yParity;
        if (yParity === "0x1b") {
          yParity = 0;
        } else if (yParity === "0x1c") {
          yParity = 1;
        }
        sig = Object.assign({}, v, { yParity });
      }
      return {
        address: getAddress(v.address),
        chainId: getBigInt(v.chainId),
        nonce: getBigInt(v.nonce),
        signature: Signature.from(sig)
      };
    }, false), null),
    blockHash: allowNull(formatHash, null),
    blockNumber: allowNull(getNumber, null),
    transactionIndex: allowNull(getNumber, null),
    from: getAddress,
    gasPrice: allowNull(getBigInt),
    maxPriorityFeePerGas: allowNull(getBigInt),
    maxFeePerGas: allowNull(getBigInt),
    maxFeePerBlobGas: allowNull(getBigInt, null),
    gasLimit: getBigInt,
    to: allowNull(getAddress, null),
    value: getBigInt,
    nonce: getNumber,
    data: formatData,
    creates: allowNull(getAddress, null),
    chainId: allowNull(getBigInt, null)
  }, {
    data: ["input"],
    gasLimit: ["gas"],
    index: ["transactionIndex"]
  })(value);
  if (result.to == null && result.creates == null) {
    result.creates = getCreateAddress(result);
  }
  if ((value.type === 1 || value.type === 2) && value.accessList == null) {
    result.accessList = [];
  }
  if (value.signature) {
    result.signature = Signature.from(value.signature);
  } else {
    result.signature = Signature.from(value);
  }
  if (result.chainId == null) {
    const chainId = result.signature.legacyChainId;
    if (chainId != null) {
      result.chainId = chainId;
    }
  }
  if (result.blockHash && getBigInt(result.blockHash) === BN_011) {
    result.blockHash = null;
  }
  return result;
}
var BN_011, _formatLog, _formatBlock, _formatReceiptLog, _formatTransactionReceipt;
var init_format = __esm(() => {
  init_address2();
  init_crypto2();
  init_transaction2();
  init_utils();
  BN_011 = BigInt(0);
  _formatLog = object({
    address: getAddress,
    blockHash: formatHash,
    blockNumber: getNumber,
    data: formatData,
    index: getNumber,
    removed: allowNull(formatBoolean, false),
    topics: arrayOf(formatHash),
    transactionHash: formatHash,
    transactionIndex: getNumber
  }, {
    index: ["logIndex"]
  });
  _formatBlock = object({
    hash: allowNull(formatHash),
    parentHash: formatHash,
    parentBeaconBlockRoot: allowNull(formatHash, null),
    number: getNumber,
    timestamp: getNumber,
    nonce: allowNull(formatData),
    difficulty: getBigInt,
    gasLimit: getBigInt,
    gasUsed: getBigInt,
    stateRoot: allowNull(formatHash, null),
    receiptsRoot: allowNull(formatHash, null),
    blobGasUsed: allowNull(getBigInt, null),
    excessBlobGas: allowNull(getBigInt, null),
    miner: allowNull(getAddress),
    prevRandao: allowNull(formatHash, null),
    extraData: formatData,
    baseFeePerGas: allowNull(getBigInt)
  }, {
    prevRandao: ["mixHash"]
  });
  _formatReceiptLog = object({
    transactionIndex: getNumber,
    blockNumber: getNumber,
    transactionHash: formatHash,
    address: getAddress,
    topics: arrayOf(formatHash),
    data: formatData,
    index: getNumber,
    blockHash: formatHash
  }, {
    index: ["logIndex"]
  });
  _formatTransactionReceipt = object({
    to: allowNull(getAddress, null),
    from: allowNull(getAddress, null),
    contractAddress: allowNull(getAddress, null),
    index: getNumber,
    root: allowNull(hexlify),
    gasUsed: getBigInt,
    blobGasUsed: allowNull(getBigInt, null),
    logsBloom: allowNull(formatData),
    blockHash: formatHash,
    hash: formatHash,
    logs: arrayOf(formatReceiptLog),
    blockNumber: getNumber,
    cumulativeGasUsed: getBigInt,
    effectiveGasPrice: allowNull(getBigInt),
    blobGasPrice: allowNull(getBigInt, null),
    status: allowNull(getNumber),
    type: allowNull(getNumber, 0)
  }, {
    effectiveGasPrice: ["gasPrice"],
    hash: ["transactionHash"],
    index: ["transactionIndex"]
  });
});

// node_modules/ethers/lib.esm/providers/plugins-network.js
class NetworkPlugin {
  name;
  constructor(name) {
    defineProperties(this, { name });
  }
  clone() {
    return new NetworkPlugin(this.name);
  }
}
var EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", GasCostPlugin, EnsPlugin, FeeDataNetworkPlugin, FetchUrlFeeDataNetworkPlugin;
var init_plugins_network = __esm(() => {
  init_utils();
  GasCostPlugin = class GasCostPlugin extends NetworkPlugin {
    effectiveBlock;
    txBase;
    txCreate;
    txDataZero;
    txDataNonzero;
    txAccessListStorageKey;
    txAccessListAddress;
    constructor(effectiveBlock, costs) {
      if (effectiveBlock == null) {
        effectiveBlock = 0;
      }
      super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
      const props = { effectiveBlock };
      function set(name, nullish) {
        let value = (costs || {})[name];
        if (value == null) {
          value = nullish;
        }
        assertArgument(typeof value === "number", `invalud value for ${name}`, "costs", costs);
        props[name] = value;
      }
      set("txBase", 21000);
      set("txCreate", 32000);
      set("txDataZero", 4);
      set("txDataNonzero", 16);
      set("txAccessListStorageKey", 1900);
      set("txAccessListAddress", 2400);
      defineProperties(this, props);
    }
    clone() {
      return new GasCostPlugin(this.effectiveBlock, this);
    }
  };
  EnsPlugin = class EnsPlugin extends NetworkPlugin {
    address;
    targetNetwork;
    constructor(address, targetNetwork) {
      super("org.ethers.plugins.network.Ens");
      defineProperties(this, {
        address: address || EnsAddress,
        targetNetwork: targetNetwork == null ? 1 : targetNetwork
      });
    }
    clone() {
      return new EnsPlugin(this.address, this.targetNetwork);
    }
  };
  FeeDataNetworkPlugin = class FeeDataNetworkPlugin extends NetworkPlugin {
    #feeDataFunc;
    get feeDataFunc() {
      return this.#feeDataFunc;
    }
    constructor(feeDataFunc) {
      super("org.ethers.plugins.network.FeeData");
      this.#feeDataFunc = feeDataFunc;
    }
    async getFeeData(provider) {
      return await this.#feeDataFunc(provider);
    }
    clone() {
      return new FeeDataNetworkPlugin(this.#feeDataFunc);
    }
  };
  FetchUrlFeeDataNetworkPlugin = class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {
    #url;
    #processFunc;
    get url() {
      return this.#url;
    }
    get processFunc() {
      return this.#processFunc;
    }
    constructor(url, processFunc) {
      super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
      this.#url = url;
      this.#processFunc = processFunc;
    }
    clone() {
      return this;
    }
  };
});

// node_modules/ethers/lib.esm/providers/network.js
class Network {
  #name;
  #chainId;
  #plugins;
  constructor(name, chainId) {
    this.#name = name;
    this.#chainId = getBigInt(chainId);
    this.#plugins = new Map;
  }
  toJSON() {
    return { name: this.name, chainId: String(this.chainId) };
  }
  get name() {
    return this.#name;
  }
  set name(value) {
    this.#name = value;
  }
  get chainId() {
    return this.#chainId;
  }
  set chainId(value) {
    this.#chainId = getBigInt(value, "chainId");
  }
  matches(other) {
    if (other == null) {
      return false;
    }
    if (typeof other === "string") {
      try {
        return this.chainId === getBigInt(other);
      } catch (error) {}
      return this.name === other;
    }
    if (typeof other === "number" || typeof other === "bigint") {
      try {
        return this.chainId === getBigInt(other);
      } catch (error) {}
      return false;
    }
    if (typeof other === "object") {
      if (other.chainId != null) {
        try {
          return this.chainId === getBigInt(other.chainId);
        } catch (error) {}
        return false;
      }
      if (other.name != null) {
        return this.name === other.name;
      }
      return false;
    }
    return false;
  }
  get plugins() {
    return Array.from(this.#plugins.values());
  }
  attachPlugin(plugin) {
    if (this.#plugins.get(plugin.name)) {
      throw new Error(`cannot replace existing plugin: ${plugin.name} `);
    }
    this.#plugins.set(plugin.name, plugin.clone());
    return this;
  }
  getPlugin(name) {
    return this.#plugins.get(name) || null;
  }
  getPlugins(basename) {
    return this.plugins.filter((p) => p.name.split("#")[0] === basename);
  }
  clone() {
    const clone = new Network(this.name, this.chainId);
    this.plugins.forEach((plugin) => {
      clone.attachPlugin(plugin.clone());
    });
    return clone;
  }
  computeIntrinsicGas(tx) {
    const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new GasCostPlugin;
    let gas = costs.txBase;
    if (tx.to == null) {
      gas += costs.txCreate;
    }
    if (tx.data) {
      for (let i = 2;i < tx.data.length; i += 2) {
        if (tx.data.substring(i, i + 2) === "00") {
          gas += costs.txDataZero;
        } else {
          gas += costs.txDataNonzero;
        }
      }
    }
    if (tx.accessList) {
      const accessList = accessListify(tx.accessList);
      for (const addr in accessList) {
        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
      }
    }
    return gas;
  }
  static from(network) {
    injectCommonNetworks();
    if (network == null) {
      return Network.from("mainnet");
    }
    if (typeof network === "number") {
      network = BigInt(network);
    }
    if (typeof network === "string" || typeof network === "bigint") {
      const networkFunc = Networks.get(network);
      if (networkFunc) {
        return networkFunc();
      }
      if (typeof network === "bigint") {
        return new Network("unknown", network);
      }
      assertArgument(false, "unknown network", "network", network);
    }
    if (typeof network.clone === "function") {
      const clone = network.clone();
      return clone;
    }
    if (typeof network === "object") {
      assertArgument(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
      const custom = new Network(network.name, network.chainId);
      if (network.ensAddress || network.ensNetwork != null) {
        custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));
      }
      return custom;
    }
    assertArgument(false, "invalid network", "network", network);
  }
  static register(nameOrChainId, networkFunc) {
    if (typeof nameOrChainId === "number") {
      nameOrChainId = BigInt(nameOrChainId);
    }
    const existing = Networks.get(nameOrChainId);
    if (existing) {
      assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
    }
    Networks.set(nameOrChainId, networkFunc);
  }
}
function parseUnits2(_value, decimals) {
  const value = String(_value);
  if (!value.match(/^[0-9.]+$/)) {
    throw new Error(`invalid gwei value: ${_value}`);
  }
  const comps = value.split(".");
  if (comps.length === 1) {
    comps.push("");
  }
  if (comps.length !== 2) {
    throw new Error(`invalid gwei value: ${_value}`);
  }
  while (comps[1].length < decimals) {
    comps[1] += "0";
  }
  if (comps[1].length > 9) {
    let frac = BigInt(comps[1].substring(0, 9));
    if (!comps[1].substring(9).match(/^0+$/)) {
      frac++;
    }
    comps[1] = frac.toString();
  }
  return BigInt(comps[0] + comps[1]);
}
function getGasStationPlugin(url) {
  return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
    request.setHeader("User-Agent", "ethers");
    let response;
    try {
      const [_response, _feeData] = await Promise.all([
        request.send(),
        fetchFeeData()
      ]);
      response = _response;
      const payload = response.bodyJson.standard;
      const feeData = {
        gasPrice: _feeData.gasPrice,
        maxFeePerGas: parseUnits2(payload.maxFee, 9),
        maxPriorityFeePerGas: parseUnits2(payload.maxPriorityFee, 9)
      };
      return feeData;
    } catch (error) {
      assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
    }
  });
}
function injectCommonNetworks() {
  if (injected) {
    return;
  }
  injected = true;
  function registerEth(name, chainId, options) {
    const func = function() {
      const network = new Network(name, chainId);
      if (options.ensNetwork != null) {
        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));
      }
      network.attachPlugin(new GasCostPlugin);
      (options.plugins || []).forEach((plugin) => {
        network.attachPlugin(plugin);
      });
      return network;
    };
    Network.register(name, func);
    Network.register(chainId, func);
    if (options.altNames) {
      options.altNames.forEach((name2) => {
        Network.register(name2, func);
      });
    }
  }
  registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
  registerEth("ropsten", 3, { ensNetwork: 3 });
  registerEth("rinkeby", 4, { ensNetwork: 4 });
  registerEth("goerli", 5, { ensNetwork: 5 });
  registerEth("kovan", 42, { ensNetwork: 42 });
  registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
  registerEth("holesky", 17000, { ensNetwork: 17000 });
  registerEth("classic", 61, {});
  registerEth("classicKotti", 6, {});
  registerEth("arbitrum", 42161, {
    ensNetwork: 1
  });
  registerEth("arbitrum-goerli", 421613, {});
  registerEth("arbitrum-sepolia", 421614, {});
  registerEth("base", 8453, { ensNetwork: 1 });
  registerEth("base-goerli", 84531, {});
  registerEth("base-sepolia", 84532, {});
  registerEth("bnb", 56, { ensNetwork: 1 });
  registerEth("bnbt", 97, {});
  registerEth("linea", 59144, { ensNetwork: 1 });
  registerEth("linea-goerli", 59140, {});
  registerEth("linea-sepolia", 59141, {});
  registerEth("matic", 137, {
    ensNetwork: 1,
    plugins: [
      getGasStationPlugin("https://gasstation.polygon.technology/v2")
    ]
  });
  registerEth("matic-amoy", 80002, {});
  registerEth("matic-mumbai", 80001, {
    altNames: ["maticMumbai", "maticmum"],
    plugins: [
      getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
    ]
  });
  registerEth("optimism", 10, {
    ensNetwork: 1,
    plugins: []
  });
  registerEth("optimism-goerli", 420, {});
  registerEth("optimism-sepolia", 11155420, {});
  registerEth("xdai", 100, { ensNetwork: 1 });
}
var Networks, injected = false;
var init_network = __esm(() => {
  init_transaction2();
  init_utils();
  init_plugins_network();
  Networks = new Map;
});

// node_modules/ethers/lib.esm/providers/subscriber-polling.js
function copy(obj) {
  return JSON.parse(JSON.stringify(obj));
}

class PollingBlockSubscriber {
  #provider;
  #poller;
  #interval;
  #blockNumber;
  constructor(provider) {
    this.#provider = provider;
    this.#poller = null;
    this.#interval = 4000;
    this.#blockNumber = -2;
  }
  get pollingInterval() {
    return this.#interval;
  }
  set pollingInterval(value) {
    this.#interval = value;
  }
  async#poll() {
    try {
      const blockNumber = await this.#provider.getBlockNumber();
      if (this.#blockNumber === -2) {
        this.#blockNumber = blockNumber;
        return;
      }
      if (blockNumber !== this.#blockNumber) {
        for (let b2 = this.#blockNumber + 1;b2 <= blockNumber; b2++) {
          if (this.#poller == null) {
            return;
          }
          await this.#provider.emit("block", b2);
        }
        this.#blockNumber = blockNumber;
      }
    } catch (error) {}
    if (this.#poller == null) {
      return;
    }
    this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
  }
  start() {
    if (this.#poller) {
      return;
    }
    this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
    this.#poll();
  }
  stop() {
    if (!this.#poller) {
      return;
    }
    this.#provider._clearTimeout(this.#poller);
    this.#poller = null;
  }
  pause(dropWhilePaused) {
    this.stop();
    if (dropWhilePaused) {
      this.#blockNumber = -2;
    }
  }
  resume() {
    this.start();
  }
}

class OnBlockSubscriber {
  #provider;
  #poll;
  #running;
  constructor(provider) {
    this.#provider = provider;
    this.#running = false;
    this.#poll = (blockNumber) => {
      this._poll(blockNumber, this.#provider);
    };
  }
  async _poll(blockNumber, provider) {
    throw new Error("sub-classes must override this");
  }
  start() {
    if (this.#running) {
      return;
    }
    this.#running = true;
    this.#poll(-2);
    this.#provider.on("block", this.#poll);
  }
  stop() {
    if (!this.#running) {
      return;
    }
    this.#running = false;
    this.#provider.off("block", this.#poll);
  }
  pause(dropWhilePaused) {
    this.stop();
  }
  resume() {
    this.start();
  }
}

class PollingEventSubscriber {
  #provider;
  #filter;
  #poller;
  #running;
  #blockNumber;
  constructor(provider, filter) {
    this.#provider = provider;
    this.#filter = copy(filter);
    this.#poller = this.#poll.bind(this);
    this.#running = false;
    this.#blockNumber = -2;
  }
  async#poll(blockNumber) {
    if (this.#blockNumber === -2) {
      return;
    }
    const filter = copy(this.#filter);
    filter.fromBlock = this.#blockNumber + 1;
    filter.toBlock = blockNumber;
    const logs = await this.#provider.getLogs(filter);
    if (logs.length === 0) {
      if (this.#blockNumber < blockNumber - 60) {
        this.#blockNumber = blockNumber - 60;
      }
      return;
    }
    for (const log of logs) {
      this.#provider.emit(this.#filter, log);
      this.#blockNumber = log.blockNumber;
    }
  }
  start() {
    if (this.#running) {
      return;
    }
    this.#running = true;
    if (this.#blockNumber === -2) {
      this.#provider.getBlockNumber().then((blockNumber) => {
        this.#blockNumber = blockNumber;
      });
    }
    this.#provider.on("block", this.#poller);
  }
  stop() {
    if (!this.#running) {
      return;
    }
    this.#running = false;
    this.#provider.off("block", this.#poller);
  }
  pause(dropWhilePaused) {
    this.stop();
    if (dropWhilePaused) {
      this.#blockNumber = -2;
    }
  }
  resume() {
    this.start();
  }
}
var PollingBlockTagSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber;
var init_subscriber_polling = __esm(() => {
  PollingBlockTagSubscriber = class PollingBlockTagSubscriber extends OnBlockSubscriber {
    #tag;
    #lastBlock;
    constructor(provider, tag) {
      super(provider);
      this.#tag = tag;
      this.#lastBlock = -2;
    }
    pause(dropWhilePaused) {
      if (dropWhilePaused) {
        this.#lastBlock = -2;
      }
      super.pause(dropWhilePaused);
    }
    async _poll(blockNumber, provider) {
      const block = await provider.getBlock(this.#tag);
      if (block == null) {
        return;
      }
      if (this.#lastBlock === -2) {
        this.#lastBlock = block.number;
      } else if (block.number > this.#lastBlock) {
        provider.emit(this.#tag, block.number);
        this.#lastBlock = block.number;
      }
    }
  };
  PollingOrphanSubscriber = class PollingOrphanSubscriber extends OnBlockSubscriber {
    #filter;
    constructor(provider, filter) {
      super(provider);
      this.#filter = copy(filter);
    }
    async _poll(blockNumber, provider) {
      throw new Error("@TODO");
      console.log(this.#filter);
    }
  };
  PollingTransactionSubscriber = class PollingTransactionSubscriber extends OnBlockSubscriber {
    #hash;
    constructor(provider, hash2) {
      super(provider);
      this.#hash = hash2;
    }
    async _poll(blockNumber, provider) {
      const tx = await provider.getTransactionReceipt(this.#hash);
      if (tx) {
        provider.emit(this.#hash, tx);
      }
    }
  };
});

// node_modules/ethers/lib.esm/providers/abstract-provider.js
function isPromise(value) {
  return value && typeof value.then === "function";
}
function getTag(prefix, value) {
  return prefix + ":" + JSON.stringify(value, (k, v) => {
    if (v == null) {
      return "null";
    }
    if (typeof v === "bigint") {
      return `bigint:${v.toString()}`;
    }
    if (typeof v === "string") {
      return v.toLowerCase();
    }
    if (typeof v === "object" && !Array.isArray(v)) {
      const keys = Object.keys(v);
      keys.sort();
      return keys.reduce((accum, key) => {
        accum[key] = v[key];
        return accum;
      }, {});
    }
    return v;
  });
}

class UnmanagedSubscriber {
  name;
  constructor(name) {
    defineProperties(this, { name });
  }
  start() {}
  stop() {}
  pause(dropWhilePaused) {}
  resume() {}
}
function copy2(value) {
  return JSON.parse(JSON.stringify(value));
}
function concisify(items) {
  items = Array.from(new Set(items).values());
  items.sort();
  return items;
}
async function getSubscription(_event, provider) {
  if (_event == null) {
    throw new Error("invalid event");
  }
  if (Array.isArray(_event)) {
    _event = { topics: _event };
  }
  if (typeof _event === "string") {
    switch (_event) {
      case "block":
      case "debug":
      case "error":
      case "finalized":
      case "network":
      case "pending":
      case "safe": {
        return { type: _event, tag: _event };
      }
    }
  }
  if (isHexString(_event, 32)) {
    const hash2 = _event.toLowerCase();
    return { type: "transaction", tag: getTag("tx", { hash: hash2 }), hash: hash2 };
  }
  if (_event.orphan) {
    const event = _event;
    return { type: "orphan", tag: getTag("orphan", event), filter: copy2(event) };
  }
  if (_event.address || _event.topics) {
    const event = _event;
    const filter = {
      topics: (event.topics || []).map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          return concisify(t.map((t2) => t2.toLowerCase()));
        }
        return t.toLowerCase();
      })
    };
    if (event.address) {
      const addresses = [];
      const promises = [];
      const addAddress = (addr) => {
        if (isHexString(addr)) {
          addresses.push(addr);
        } else {
          promises.push((async () => {
            addresses.push(await resolveAddress(addr, provider));
          })());
        }
      };
      if (Array.isArray(event.address)) {
        event.address.forEach(addAddress);
      } else {
        addAddress(event.address);
      }
      if (promises.length) {
        await Promise.all(promises);
      }
      filter.address = concisify(addresses.map((a) => a.toLowerCase()));
    }
    return { filter, tag: getTag("event", filter), type: "event" };
  }
  assertArgument(false, "unknown ProviderEvent", "event", _event);
}
function getTime2() {
  return new Date().getTime();
}

class AbstractProvider {
  #subs;
  #plugins;
  #pausedState;
  #destroyed;
  #networkPromise;
  #anyNetwork;
  #performCache;
  #lastBlockNumber;
  #nextTimer;
  #timers;
  #disableCcipRead;
  #options;
  constructor(_network, options) {
    this.#options = Object.assign({}, defaultOptions, options || {});
    if (_network === "any") {
      this.#anyNetwork = true;
      this.#networkPromise = null;
    } else if (_network) {
      const network = Network.from(_network);
      this.#anyNetwork = false;
      this.#networkPromise = Promise.resolve(network);
      setTimeout(() => {
        this.emit("network", network, null);
      }, 0);
    } else {
      this.#anyNetwork = false;
      this.#networkPromise = null;
    }
    this.#lastBlockNumber = -1;
    this.#performCache = new Map;
    this.#subs = new Map;
    this.#plugins = new Map;
    this.#pausedState = null;
    this.#destroyed = false;
    this.#nextTimer = 1;
    this.#timers = new Map;
    this.#disableCcipRead = false;
  }
  get pollingInterval() {
    return this.#options.pollingInterval;
  }
  get provider() {
    return this;
  }
  get plugins() {
    return Array.from(this.#plugins.values());
  }
  attachPlugin(plugin) {
    if (this.#plugins.get(plugin.name)) {
      throw new Error(`cannot replace existing plugin: ${plugin.name} `);
    }
    this.#plugins.set(plugin.name, plugin.connect(this));
    return this;
  }
  getPlugin(name) {
    return this.#plugins.get(name) || null;
  }
  get disableCcipRead() {
    return this.#disableCcipRead;
  }
  set disableCcipRead(value) {
    this.#disableCcipRead = !!value;
  }
  async#perform(req) {
    const timeout = this.#options.cacheTimeout;
    if (timeout < 0) {
      return await this._perform(req);
    }
    const tag = getTag(req.method, req);
    let perform = this.#performCache.get(tag);
    if (!perform) {
      perform = this._perform(req);
      this.#performCache.set(tag, perform);
      setTimeout(() => {
        if (this.#performCache.get(tag) === perform) {
          this.#performCache.delete(tag);
        }
      }, timeout);
    }
    return await perform;
  }
  async ccipReadFetch(tx, calldata, urls) {
    if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
      return null;
    }
    const sender = tx.to.toLowerCase();
    const data = calldata.toLowerCase();
    const errorMessages = [];
    for (let i = 0;i < urls.length; i++) {
      const url = urls[i];
      const href = url.replace("{sender}", sender).replace("{data}", data);
      const request = new FetchRequest(href);
      if (url.indexOf("{data}") === -1) {
        request.body = { data, sender };
      }
      this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
      let errorMessage = "unknown error";
      let resp;
      try {
        resp = await request.send();
      } catch (error) {
        errorMessages.push(error.message);
        this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
        continue;
      }
      try {
        const result = resp.bodyJson;
        if (result.data) {
          this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
          return result.data;
        }
        if (result.message) {
          errorMessage = result.message;
        }
        this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
      } catch (error) {}
      assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
      errorMessages.push(errorMessage);
    }
    assert(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
      reason: "500_SERVER_ERROR",
      transaction: tx,
      info: { urls, errorMessages }
    });
  }
  _wrapBlock(value, network) {
    return new Block(formatBlock(value), this);
  }
  _wrapLog(value, network) {
    return new Log(formatLog(value), this);
  }
  _wrapTransactionReceipt(value, network) {
    return new TransactionReceipt(formatTransactionReceipt(value), this);
  }
  _wrapTransactionResponse(tx, network) {
    return new TransactionResponse(formatTransactionResponse(tx), this);
  }
  _detectNetwork() {
    assert(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
      operation: "_detectNetwork"
    });
  }
  async _perform(req) {
    assert(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
      operation: req.method,
      info: req
    });
  }
  async getBlockNumber() {
    const blockNumber = getNumber(await this.#perform({ method: "getBlockNumber" }), "%response");
    if (this.#lastBlockNumber >= 0) {
      this.#lastBlockNumber = blockNumber;
    }
    return blockNumber;
  }
  _getAddress(address) {
    return resolveAddress(address, this);
  }
  _getBlockTag(blockTag) {
    if (blockTag == null) {
      return "latest";
    }
    switch (blockTag) {
      case "earliest":
        return "0x0";
      case "finalized":
      case "latest":
      case "pending":
      case "safe":
        return blockTag;
    }
    if (isHexString(blockTag)) {
      if (isHexString(blockTag, 32)) {
        return blockTag;
      }
      return toQuantity(blockTag);
    }
    if (typeof blockTag === "bigint") {
      blockTag = getNumber(blockTag, "blockTag");
    }
    if (typeof blockTag === "number") {
      if (blockTag >= 0) {
        return toQuantity(blockTag);
      }
      if (this.#lastBlockNumber >= 0) {
        return toQuantity(this.#lastBlockNumber + blockTag);
      }
      return this.getBlockNumber().then((b2) => toQuantity(b2 + blockTag));
    }
    assertArgument(false, "invalid blockTag", "blockTag", blockTag);
  }
  _getFilter(filter) {
    const topics = (filter.topics || []).map((t) => {
      if (t == null) {
        return null;
      }
      if (Array.isArray(t)) {
        return concisify(t.map((t2) => t2.toLowerCase()));
      }
      return t.toLowerCase();
    });
    const blockHash = "blockHash" in filter ? filter.blockHash : undefined;
    const resolve = (_address, fromBlock2, toBlock2) => {
      let address2 = undefined;
      switch (_address.length) {
        case 0:
          break;
        case 1:
          address2 = _address[0];
          break;
        default:
          _address.sort();
          address2 = _address;
      }
      if (blockHash) {
        if (fromBlock2 != null || toBlock2 != null) {
          throw new Error("invalid filter");
        }
      }
      const filter2 = {};
      if (address2) {
        filter2.address = address2;
      }
      if (topics.length) {
        filter2.topics = topics;
      }
      if (fromBlock2) {
        filter2.fromBlock = fromBlock2;
      }
      if (toBlock2) {
        filter2.toBlock = toBlock2;
      }
      if (blockHash) {
        filter2.blockHash = blockHash;
      }
      return filter2;
    };
    let address = [];
    if (filter.address) {
      if (Array.isArray(filter.address)) {
        for (const addr of filter.address) {
          address.push(this._getAddress(addr));
        }
      } else {
        address.push(this._getAddress(filter.address));
      }
    }
    let fromBlock = undefined;
    if ("fromBlock" in filter) {
      fromBlock = this._getBlockTag(filter.fromBlock);
    }
    let toBlock = undefined;
    if ("toBlock" in filter) {
      toBlock = this._getBlockTag(filter.toBlock);
    }
    if (address.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
      return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
        return resolve(result[0], result[1], result[2]);
      });
    }
    return resolve(address, fromBlock, toBlock);
  }
  _getTransactionRequest(_request) {
    const request = copyRequest(_request);
    const promises = [];
    ["to", "from"].forEach((key) => {
      if (request[key] == null) {
        return;
      }
      const addr = resolveAddress(request[key], this);
      if (isPromise(addr)) {
        promises.push(async function() {
          request[key] = await addr;
        }());
      } else {
        request[key] = addr;
      }
    });
    if (request.blockTag != null) {
      const blockTag = this._getBlockTag(request.blockTag);
      if (isPromise(blockTag)) {
        promises.push(async function() {
          request.blockTag = await blockTag;
        }());
      } else {
        request.blockTag = blockTag;
      }
    }
    if (promises.length) {
      return async function() {
        await Promise.all(promises);
        return request;
      }();
    }
    return request;
  }
  async getNetwork() {
    if (this.#networkPromise == null) {
      const detectNetwork = (async () => {
        try {
          const network = await this._detectNetwork();
          this.emit("network", network, null);
          return network;
        } catch (error) {
          if (this.#networkPromise === detectNetwork) {
            this.#networkPromise = null;
          }
          throw error;
        }
      })();
      this.#networkPromise = detectNetwork;
      return (await detectNetwork).clone();
    }
    const networkPromise = this.#networkPromise;
    const [expected, actual] = await Promise.all([
      networkPromise,
      this._detectNetwork()
    ]);
    if (expected.chainId !== actual.chainId) {
      if (this.#anyNetwork) {
        this.emit("network", actual, expected);
        if (this.#networkPromise === networkPromise) {
          this.#networkPromise = Promise.resolve(actual);
        }
      } else {
        assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
          event: "changed"
        });
      }
    }
    return expected.clone();
  }
  async getFeeData() {
    const network = await this.getNetwork();
    const getFeeDataFunc = async () => {
      const { _block, gasPrice, priorityFee } = await resolveProperties({
        _block: this.#getBlock("latest", false),
        gasPrice: (async () => {
          try {
            const value = await this.#perform({ method: "getGasPrice" });
            return getBigInt(value, "%response");
          } catch (error) {}
          return null;
        })(),
        priorityFee: (async () => {
          try {
            const value = await this.#perform({ method: "getPriorityFee" });
            return getBigInt(value, "%response");
          } catch (error) {}
          return null;
        })()
      });
      let maxFeePerGas = null;
      let maxPriorityFeePerGas = null;
      const block = this._wrapBlock(_block, network);
      if (block && block.baseFeePerGas) {
        maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
        maxFeePerGas = block.baseFeePerGas * BN_23 + maxPriorityFeePerGas;
      }
      return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
    };
    const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    if (plugin) {
      const req = new FetchRequest(plugin.url);
      const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
      return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
    }
    return await getFeeDataFunc();
  }
  async estimateGas(_tx) {
    let tx = this._getTransactionRequest(_tx);
    if (isPromise(tx)) {
      tx = await tx;
    }
    return getBigInt(await this.#perform({
      method: "estimateGas",
      transaction: tx
    }), "%response");
  }
  async#call(tx, blockTag, attempt) {
    assert(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
      reason: "TOO_MANY_REDIRECTS",
      transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
    });
    const transaction = copyRequest(tx);
    try {
      return hexlify(await this._perform({ method: "call", transaction, blockTag }));
    } catch (error) {
      if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && dataSlice(error.data, 0, 4) === "0x556f1830") {
        const data = error.data;
        const txSender = await resolveAddress(transaction.to, this);
        let ccipArgs;
        try {
          ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));
        } catch (error2) {
          assert(false, error2.message, "OFFCHAIN_FAULT", {
            reason: "BAD_DATA",
            transaction,
            info: { data }
          });
        }
        assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
          action: "call",
          data,
          reason: "OffchainLookup",
          transaction,
          invocation: null,
          revert: {
            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
            name: "OffchainLookup",
            args: ccipArgs.errorArgs
          }
        });
        const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
        assert(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
          reason: "FETCH_FAILED",
          transaction,
          info: { data: error.data, errorArgs: ccipArgs.errorArgs }
        });
        const tx2 = {
          to: txSender,
          data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
        };
        this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
        try {
          const result = await this.#call(tx2, blockTag, attempt + 1);
          this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
          return result;
        } catch (error2) {
          this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
          throw error2;
        }
      }
      throw error;
    }
  }
  async#checkNetwork(promise) {
    const { value } = await resolveProperties({
      network: this.getNetwork(),
      value: promise
    });
    return value;
  }
  async call(_tx) {
    const { tx, blockTag } = await resolveProperties({
      tx: this._getTransactionRequest(_tx),
      blockTag: this._getBlockTag(_tx.blockTag)
    });
    return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));
  }
  async#getAccountValue(request, _address, _blockTag) {
    let address = this._getAddress(_address);
    let blockTag = this._getBlockTag(_blockTag);
    if (typeof address !== "string" || typeof blockTag !== "string") {
      [address, blockTag] = await Promise.all([address, blockTag]);
    }
    return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));
  }
  async getBalance(address, blockTag) {
    return getBigInt(await this.#getAccountValue({ method: "getBalance" }, address, blockTag), "%response");
  }
  async getTransactionCount(address, blockTag) {
    return getNumber(await this.#getAccountValue({ method: "getTransactionCount" }, address, blockTag), "%response");
  }
  async getCode(address, blockTag) {
    return hexlify(await this.#getAccountValue({ method: "getCode" }, address, blockTag));
  }
  async getStorage(address, _position, blockTag) {
    const position = getBigInt(_position, "position");
    return hexlify(await this.#getAccountValue({ method: "getStorage", position }, address, blockTag));
  }
  async broadcastTransaction(signedTx) {
    const { blockNumber, hash: hash2, network } = await resolveProperties({
      blockNumber: this.getBlockNumber(),
      hash: this._perform({
        method: "broadcastTransaction",
        signedTransaction: signedTx
      }),
      network: this.getNetwork()
    });
    const tx = Transaction.from(signedTx);
    if (tx.hash !== hash2) {
      throw new Error("@TODO: the returned hash did not match");
    }
    return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
  }
  async#getBlock(block, includeTransactions) {
    if (isHexString(block, 32)) {
      return await this.#perform({
        method: "getBlock",
        blockHash: block,
        includeTransactions
      });
    }
    let blockTag = this._getBlockTag(block);
    if (typeof blockTag !== "string") {
      blockTag = await blockTag;
    }
    return await this.#perform({
      method: "getBlock",
      blockTag,
      includeTransactions
    });
  }
  async getBlock(block, prefetchTxs) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#getBlock(block, !!prefetchTxs)
    });
    if (params == null) {
      return null;
    }
    return this._wrapBlock(params, network);
  }
  async getTransaction(hash2) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#perform({ method: "getTransaction", hash: hash2 })
    });
    if (params == null) {
      return null;
    }
    return this._wrapTransactionResponse(params, network);
  }
  async getTransactionReceipt(hash2) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#perform({ method: "getTransactionReceipt", hash: hash2 })
    });
    if (params == null) {
      return null;
    }
    if (params.gasPrice == null && params.effectiveGasPrice == null) {
      const tx = await this.#perform({ method: "getTransaction", hash: hash2 });
      if (tx == null) {
        throw new Error("report this; could not find tx or effectiveGasPrice");
      }
      params.effectiveGasPrice = tx.gasPrice;
    }
    return this._wrapTransactionReceipt(params, network);
  }
  async getTransactionResult(hash2) {
    const { result } = await resolveProperties({
      network: this.getNetwork(),
      result: this.#perform({ method: "getTransactionResult", hash: hash2 })
    });
    if (result == null) {
      return null;
    }
    return hexlify(result);
  }
  async getLogs(_filter) {
    let filter = this._getFilter(_filter);
    if (isPromise(filter)) {
      filter = await filter;
    }
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: this.#perform({ method: "getLogs", filter })
    });
    return params.map((p) => this._wrapLog(p, network));
  }
  _getProvider(chainId) {
    assert(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
      operation: "_getProvider()"
    });
  }
  async getResolver(name) {
    return await EnsResolver.fromName(this, name);
  }
  async getAvatar(name) {
    const resolver = await this.getResolver(name);
    if (resolver) {
      return await resolver.getAvatar();
    }
    return null;
  }
  async resolveName(name) {
    const resolver = await this.getResolver(name);
    if (resolver) {
      return await resolver.getAddress();
    }
    return null;
  }
  async lookupAddress(address) {
    address = getAddress(address);
    const node = namehash(address.substring(2).toLowerCase() + ".addr.reverse");
    try {
      const ensAddr = await EnsResolver.getEnsAddress(this);
      const ensContract = new Contract(ensAddr, [
        "function resolver(bytes32) view returns (address)"
      ], this);
      const resolver = await ensContract.resolver(node);
      if (resolver == null || resolver === ZeroAddress) {
        return null;
      }
      const resolverContract = new Contract(resolver, [
        "function name(bytes32) view returns (string)"
      ], this);
      const name = await resolverContract.name(node);
      const check = await this.resolveName(name);
      if (check !== address) {
        return null;
      }
      return name;
    } catch (error) {
      if (isError(error, "BAD_DATA") && error.value === "0x") {
        return null;
      }
      if (isError(error, "CALL_EXCEPTION")) {
        return null;
      }
      throw error;
    }
    return null;
  }
  async waitForTransaction(hash2, _confirms, timeout) {
    const confirms = _confirms != null ? _confirms : 1;
    if (confirms === 0) {
      return this.getTransactionReceipt(hash2);
    }
    return new Promise(async (resolve, reject) => {
      let timer = null;
      const listener = async (blockNumber) => {
        try {
          const receipt = await this.getTransactionReceipt(hash2);
          if (receipt != null) {
            if (blockNumber - receipt.blockNumber + 1 >= confirms) {
              resolve(receipt);
              if (timer) {
                clearTimeout(timer);
                timer = null;
              }
              return;
            }
          }
        } catch (error) {
          console.log("EEE", error);
        }
        this.once("block", listener);
      };
      if (timeout != null) {
        timer = setTimeout(() => {
          if (timer == null) {
            return;
          }
          timer = null;
          this.off("block", listener);
          reject(makeError("timeout", "TIMEOUT", { reason: "timeout" }));
        }, timeout);
      }
      listener(await this.getBlockNumber());
    });
  }
  async waitForBlock(blockTag) {
    assert(false, "not implemented yet", "NOT_IMPLEMENTED", {
      operation: "waitForBlock"
    });
  }
  _clearTimeout(timerId) {
    const timer = this.#timers.get(timerId);
    if (!timer) {
      return;
    }
    if (timer.timer) {
      clearTimeout(timer.timer);
    }
    this.#timers.delete(timerId);
  }
  _setTimeout(_func, timeout) {
    if (timeout == null) {
      timeout = 0;
    }
    const timerId = this.#nextTimer++;
    const func = () => {
      this.#timers.delete(timerId);
      _func();
    };
    if (this.paused) {
      this.#timers.set(timerId, { timer: null, func, time: timeout });
    } else {
      const timer = setTimeout(func, timeout);
      this.#timers.set(timerId, { timer, func, time: getTime2() });
    }
    return timerId;
  }
  _forEachSubscriber(func) {
    for (const sub of this.#subs.values()) {
      func(sub.subscriber);
    }
  }
  _getSubscriber(sub) {
    switch (sub.type) {
      case "debug":
      case "error":
      case "network":
        return new UnmanagedSubscriber(sub.type);
      case "block": {
        const subscriber = new PollingBlockSubscriber(this);
        subscriber.pollingInterval = this.pollingInterval;
        return subscriber;
      }
      case "safe":
      case "finalized":
        return new PollingBlockTagSubscriber(this, sub.type);
      case "event":
        return new PollingEventSubscriber(this, sub.filter);
      case "transaction":
        return new PollingTransactionSubscriber(this, sub.hash);
      case "orphan":
        return new PollingOrphanSubscriber(this, sub.filter);
    }
    throw new Error(`unsupported event: ${sub.type}`);
  }
  _recoverSubscriber(oldSub, newSub) {
    for (const sub of this.#subs.values()) {
      if (sub.subscriber === oldSub) {
        if (sub.started) {
          sub.subscriber.stop();
        }
        sub.subscriber = newSub;
        if (sub.started) {
          newSub.start();
        }
        if (this.#pausedState != null) {
          newSub.pause(this.#pausedState);
        }
        break;
      }
    }
  }
  async#hasSub(event, emitArgs) {
    let sub = await getSubscription(event, this);
    if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
      sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
    }
    return this.#subs.get(sub.tag) || null;
  }
  async#getSub(event) {
    const subscription = await getSubscription(event, this);
    const tag = subscription.tag;
    let sub = this.#subs.get(tag);
    if (!sub) {
      const subscriber = this._getSubscriber(subscription);
      const addressableMap = new WeakMap;
      const nameMap = new Map;
      sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
      this.#subs.set(tag, sub);
    }
    return sub;
  }
  async on(event, listener) {
    const sub = await this.#getSub(event);
    sub.listeners.push({ listener, once: false });
    if (!sub.started) {
      sub.subscriber.start();
      sub.started = true;
      if (this.#pausedState != null) {
        sub.subscriber.pause(this.#pausedState);
      }
    }
    return this;
  }
  async once(event, listener) {
    const sub = await this.#getSub(event);
    sub.listeners.push({ listener, once: true });
    if (!sub.started) {
      sub.subscriber.start();
      sub.started = true;
      if (this.#pausedState != null) {
        sub.subscriber.pause(this.#pausedState);
      }
    }
    return this;
  }
  async emit(event, ...args) {
    const sub = await this.#hasSub(event, args);
    if (!sub || sub.listeners.length === 0) {
      return false;
    }
    const count = sub.listeners.length;
    sub.listeners = sub.listeners.filter(({ listener, once }) => {
      const payload = new EventPayload(this, once ? null : listener, event);
      try {
        listener.call(this, ...args, payload);
      } catch (error) {}
      return !once;
    });
    if (sub.listeners.length === 0) {
      if (sub.started) {
        sub.subscriber.stop();
      }
      this.#subs.delete(sub.tag);
    }
    return count > 0;
  }
  async listenerCount(event) {
    if (event) {
      const sub = await this.#hasSub(event);
      if (!sub) {
        return 0;
      }
      return sub.listeners.length;
    }
    let total = 0;
    for (const { listeners } of this.#subs.values()) {
      total += listeners.length;
    }
    return total;
  }
  async listeners(event) {
    if (event) {
      const sub = await this.#hasSub(event);
      if (!sub) {
        return [];
      }
      return sub.listeners.map(({ listener }) => listener);
    }
    let result = [];
    for (const { listeners } of this.#subs.values()) {
      result = result.concat(listeners.map(({ listener }) => listener));
    }
    return result;
  }
  async off(event, listener) {
    const sub = await this.#hasSub(event);
    if (!sub) {
      return this;
    }
    if (listener) {
      const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
      if (index >= 0) {
        sub.listeners.splice(index, 1);
      }
    }
    if (!listener || sub.listeners.length === 0) {
      if (sub.started) {
        sub.subscriber.stop();
      }
      this.#subs.delete(sub.tag);
    }
    return this;
  }
  async removeAllListeners(event) {
    if (event) {
      const { tag, started, subscriber } = await this.#getSub(event);
      if (started) {
        subscriber.stop();
      }
      this.#subs.delete(tag);
    } else {
      for (const [tag, { started, subscriber }] of this.#subs) {
        if (started) {
          subscriber.stop();
        }
        this.#subs.delete(tag);
      }
    }
    return this;
  }
  async addListener(event, listener) {
    return await this.on(event, listener);
  }
  async removeListener(event, listener) {
    return this.off(event, listener);
  }
  get destroyed() {
    return this.#destroyed;
  }
  destroy() {
    this.removeAllListeners();
    for (const timerId of this.#timers.keys()) {
      this._clearTimeout(timerId);
    }
    this.#destroyed = true;
  }
  get paused() {
    return this.#pausedState != null;
  }
  set paused(pause) {
    if (!!pause === this.paused) {
      return;
    }
    if (this.paused) {
      this.resume();
    } else {
      this.pause(false);
    }
  }
  pause(dropWhilePaused) {
    this.#lastBlockNumber = -1;
    if (this.#pausedState != null) {
      if (this.#pausedState == !!dropWhilePaused) {
        return;
      }
      assert(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
        operation: "pause"
      });
    }
    this._forEachSubscriber((s) => s.pause(dropWhilePaused));
    this.#pausedState = !!dropWhilePaused;
    for (const timer of this.#timers.values()) {
      if (timer.timer) {
        clearTimeout(timer.timer);
      }
      timer.time = getTime2() - timer.time;
    }
  }
  resume() {
    if (this.#pausedState == null) {
      return;
    }
    this._forEachSubscriber((s) => s.resume());
    this.#pausedState = null;
    for (const timer of this.#timers.values()) {
      let timeout = timer.time;
      if (timeout < 0) {
        timeout = 0;
      }
      timer.time = getTime2();
      setTimeout(timer.func, timeout);
    }
  }
}
function _parseString(result, start) {
  try {
    const bytes2 = _parseBytes(result, start);
    if (bytes2) {
      return toUtf8String(bytes2);
    }
  } catch (error) {}
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  try {
    const offset = getNumber(dataSlice(result, start, start + 32));
    const length = getNumber(dataSlice(result, offset, offset + 32));
    return dataSlice(result, offset + 32, offset + 32 + length);
  } catch (error) {}
  return null;
}
function numPad(value) {
  const result = toBeArray(value);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }
  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
}
function encodeBytes(datas) {
  const result = [];
  let byteCount = 0;
  for (let i = 0;i < datas.length; i++) {
    result.push(empty);
    byteCount += 32;
  }
  for (let i = 0;i < datas.length; i++) {
    const data = getBytes(datas[i]);
    result[i] = numPad(byteCount);
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return concat(result);
}
function parseOffchainLookup(data) {
  const result = {
    sender: "",
    urls: [],
    calldata: "",
    selector: "",
    extraData: "",
    errorArgs: []
  };
  assert(dataLength(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
    reason: "insufficient OffchainLookup data"
  });
  const sender = dataSlice(data, 0, 32);
  assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup sender"
  });
  result.sender = dataSlice(sender, 12);
  try {
    const urls = [];
    const urlsOffset = getNumber(dataSlice(data, 32, 64));
    const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));
    const urlsData = dataSlice(data, urlsOffset + 32);
    for (let u = 0;u < urlsLength; u++) {
      const url = _parseString(urlsData, u * 32);
      if (url == null) {
        throw new Error("abort");
      }
      urls.push(url);
    }
    result.urls = urls;
  } catch (error) {
    assert(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup urls"
    });
  }
  try {
    const calldata = _parseBytes(data, 64);
    if (calldata == null) {
      throw new Error("abort");
    }
    result.calldata = calldata;
  } catch (error) {
    assert(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup calldata"
    });
  }
  assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup callbaackSelector"
  });
  result.selector = dataSlice(data, 96, 100);
  try {
    const extraData = _parseBytes(data, 128);
    if (extraData == null) {
      throw new Error("abort");
    }
    result.extraData = extraData;
  } catch (error) {
    assert(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup extraData"
    });
  }
  result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
  return result;
}
var BN_23, MAX_CCIP_REDIRECTS = 10, defaultOptions, empty, zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
var init_abstract_provider = __esm(() => {
  init_address2();
  init_constants();
  init_contract2();
  init_hash();
  init_transaction2();
  init_utils();
  init_ens_resolver();
  init_format();
  init_network();
  init_provider();
  init_subscriber_polling();
  BN_23 = BigInt(2);
  defaultOptions = {
    cacheTimeout: 250,
    pollingInterval: 4000
  };
  empty = new Uint8Array([]);
});

// node_modules/ethers/lib.esm/providers/abstract-signer.js
function checkProvider(signer, operation) {
  if (signer.provider) {
    return signer.provider;
  }
  assert(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
}
async function populate(signer, tx) {
  let pop = copyRequest(tx);
  if (pop.to != null) {
    pop.to = resolveAddress(pop.to, signer);
  }
  if (pop.from != null) {
    const from = pop.from;
    pop.from = Promise.all([
      signer.getAddress(),
      resolveAddress(from, signer)
    ]).then(([address, from2]) => {
      assertArgument(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
      return address;
    });
  } else {
    pop.from = signer.getAddress();
  }
  return await resolveProperties(pop);
}

class AbstractSigner {
  provider;
  constructor(provider) {
    defineProperties(this, { provider: provider || null });
  }
  async getNonce(blockTag) {
    return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
  }
  async populateCall(tx) {
    const pop = await populate(this, tx);
    return pop;
  }
  async populateTransaction(tx) {
    const provider = checkProvider(this, "populateTransaction");
    const pop = await populate(this, tx);
    if (pop.nonce == null) {
      pop.nonce = await this.getNonce("pending");
    }
    if (pop.gasLimit == null) {
      pop.gasLimit = await this.estimateGas(pop);
    }
    const network = await this.provider.getNetwork();
    if (pop.chainId != null) {
      const chainId = getBigInt(pop.chainId);
      assertArgument(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
    } else {
      pop.chainId = network.chainId;
    }
    const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
    if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
      assertArgument(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
    } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
      assertArgument(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
    }
    if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
      pop.type = 2;
    } else if (pop.type === 0 || pop.type === 1) {
      const feeData = await provider.getFeeData();
      assert(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
        operation: "getGasPrice"
      });
      if (pop.gasPrice == null) {
        pop.gasPrice = feeData.gasPrice;
      }
    } else {
      const feeData = await provider.getFeeData();
      if (pop.type == null) {
        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
          if (pop.authorizationList && pop.authorizationList.length) {
            pop.type = 4;
          } else {
            pop.type = 2;
          }
          if (pop.gasPrice != null) {
            const gasPrice = pop.gasPrice;
            delete pop.gasPrice;
            pop.maxFeePerGas = gasPrice;
            pop.maxPriorityFeePerGas = gasPrice;
          } else {
            if (pop.maxFeePerGas == null) {
              pop.maxFeePerGas = feeData.maxFeePerGas;
            }
            if (pop.maxPriorityFeePerGas == null) {
              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
            }
          }
        } else if (feeData.gasPrice != null) {
          assert(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
            operation: "populateTransaction"
          });
          if (pop.gasPrice == null) {
            pop.gasPrice = feeData.gasPrice;
          }
          pop.type = 0;
        } else {
          assert(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
            operation: "signer.getFeeData"
          });
        }
      } else if (pop.type === 2 || pop.type === 3 || pop.type === 4) {
        if (pop.maxFeePerGas == null) {
          pop.maxFeePerGas = feeData.maxFeePerGas;
        }
        if (pop.maxPriorityFeePerGas == null) {
          pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
        }
      }
    }
    return await resolveProperties(pop);
  }
  async populateAuthorization(_auth) {
    const auth = Object.assign({}, _auth);
    if (auth.chainId == null) {
      auth.chainId = (await checkProvider(this, "getNetwork").getNetwork()).chainId;
    }
    if (auth.nonce == null) {
      auth.nonce = await this.getNonce();
    }
    return auth;
  }
  async estimateGas(tx) {
    return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
  }
  async call(tx) {
    return checkProvider(this, "call").call(await this.populateCall(tx));
  }
  async resolveName(name) {
    const provider = checkProvider(this, "resolveName");
    return await provider.resolveName(name);
  }
  async sendTransaction(tx) {
    const provider = checkProvider(this, "sendTransaction");
    const pop = await this.populateTransaction(tx);
    delete pop.from;
    const txObj = Transaction.from(pop);
    return await provider.broadcastTransaction(await this.signTransaction(txObj));
  }
  authorize(authorization) {
    assert(false, "authorization not implemented for this signer", "UNSUPPORTED_OPERATION", { operation: "authorize" });
  }
}
var VoidSigner;
var init_abstract_signer = __esm(() => {
  init_address2();
  init_transaction2();
  init_utils();
  init_provider();
  VoidSigner = class VoidSigner extends AbstractSigner {
    address;
    constructor(address, provider) {
      super(provider);
      defineProperties(this, { address });
    }
    async getAddress() {
      return this.address;
    }
    connect(provider) {
      return new VoidSigner(this.address, provider);
    }
    #throwUnsupported(suffix, operation) {
      assert(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
    }
    async signTransaction(tx) {
      this.#throwUnsupported("transactions", "signTransaction");
    }
    async signMessage(message) {
      this.#throwUnsupported("messages", "signMessage");
    }
    async signTypedData(domain, types, value) {
      this.#throwUnsupported("typed-data", "signTypedData");
    }
  };
});

// node_modules/ethers/lib.esm/providers/community.js
function showThrottleMessage(service) {
  if (shown.has(service)) {
    return;
  }
  shown.add(service);
  console.log("========= NOTICE =========");
  console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.org/api-keys/");
  console.log("==========================");
}
var shown;
var init_community = __esm(() => {
  shown = new Set;
});

// node_modules/ethers/lib.esm/providers/subscriber-filterid.js
function copy3(obj) {
  return JSON.parse(JSON.stringify(obj));
}

class FilterIdSubscriber {
  #provider;
  #filterIdPromise;
  #poller;
  #running;
  #network;
  #hault;
  constructor(provider) {
    this.#provider = provider;
    this.#filterIdPromise = null;
    this.#poller = this.#poll.bind(this);
    this.#running = false;
    this.#network = null;
    this.#hault = false;
  }
  _subscribe(provider) {
    throw new Error("subclasses must override this");
  }
  _emitResults(provider, result) {
    throw new Error("subclasses must override this");
  }
  _recover(provider) {
    throw new Error("subclasses must override this");
  }
  async#poll(blockNumber) {
    try {
      if (this.#filterIdPromise == null) {
        this.#filterIdPromise = this._subscribe(this.#provider);
      }
      let filterId = null;
      try {
        filterId = await this.#filterIdPromise;
      } catch (error) {
        if (!isError(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
          throw error;
        }
      }
      if (filterId == null) {
        this.#filterIdPromise = null;
        this.#provider._recoverSubscriber(this, this._recover(this.#provider));
        return;
      }
      const network = await this.#provider.getNetwork();
      if (!this.#network) {
        this.#network = network;
      }
      if (this.#network.chainId !== network.chainId) {
        throw new Error("chaid changed");
      }
      if (this.#hault) {
        return;
      }
      const result = await this.#provider.send("eth_getFilterChanges", [filterId]);
      await this._emitResults(this.#provider, result);
    } catch (error) {
      console.log("@TODO", error);
    }
    this.#provider.once("block", this.#poller);
  }
  #teardown() {
    const filterIdPromise = this.#filterIdPromise;
    if (filterIdPromise) {
      this.#filterIdPromise = null;
      filterIdPromise.then((filterId) => {
        if (this.#provider.destroyed) {
          return;
        }
        this.#provider.send("eth_uninstallFilter", [filterId]);
      });
    }
  }
  start() {
    if (this.#running) {
      return;
    }
    this.#running = true;
    this.#poll(-2);
  }
  stop() {
    if (!this.#running) {
      return;
    }
    this.#running = false;
    this.#hault = true;
    this.#teardown();
    this.#provider.off("block", this.#poller);
  }
  pause(dropWhilePaused) {
    if (dropWhilePaused) {
      this.#teardown();
    }
    this.#provider.off("block", this.#poller);
  }
  resume() {
    this.start();
  }
}
var FilterIdEventSubscriber, FilterIdPendingSubscriber;
var init_subscriber_filterid = __esm(() => {
  init_utils();
  init_subscriber_polling();
  FilterIdEventSubscriber = class FilterIdEventSubscriber extends FilterIdSubscriber {
    #event;
    constructor(provider, filter) {
      super(provider);
      this.#event = copy3(filter);
    }
    _recover(provider) {
      return new PollingEventSubscriber(provider, this.#event);
    }
    async _subscribe(provider) {
      const filterId = await provider.send("eth_newFilter", [this.#event]);
      return filterId;
    }
    async _emitResults(provider, results) {
      for (const result of results) {
        provider.emit(this.#event, provider._wrapLog(result, provider._network));
      }
    }
  };
  FilterIdPendingSubscriber = class FilterIdPendingSubscriber extends FilterIdSubscriber {
    async _subscribe(provider) {
      return await provider.send("eth_newPendingTransactionFilter", []);
    }
    async _emitResults(provider, results) {
      for (const result of results) {
        provider.emit("pending", result);
      }
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-jsonrpc.js
function deepCopy(value) {
  if (value == null || Primitive.indexOf(typeof value) >= 0) {
    return value;
  }
  if (typeof value.getAddress === "function") {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(deepCopy);
  }
  if (typeof value === "object") {
    return Object.keys(value).reduce((accum, key) => {
      accum[key] = value[key];
      return accum;
    }, {});
  }
  throw new Error(`should not happen: ${value} (${typeof value})`);
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
function isPollable(value) {
  return value && typeof value.pollingInterval === "number";
}
function spelunkData(value) {
  if (value == null) {
    return null;
  }
  if (typeof value.message === "string" && value.message.match(/revert/i) && isHexString(value.data)) {
    return { message: value.message, data: value.data };
  }
  if (typeof value === "object") {
    for (const key in value) {
      const result = spelunkData(value[key]);
      if (result) {
        return result;
      }
    }
    return null;
  }
  if (typeof value === "string") {
    try {
      return spelunkData(JSON.parse(value));
    } catch (error) {}
  }
  return null;
}
function _spelunkMessage(value, result) {
  if (value == null) {
    return;
  }
  if (typeof value.message === "string") {
    result.push(value.message);
  }
  if (typeof value === "object") {
    for (const key in value) {
      _spelunkMessage(value[key], result);
    }
  }
  if (typeof value === "string") {
    try {
      return _spelunkMessage(JSON.parse(value), result);
    } catch (error) {}
  }
}
function spelunkMessage(value) {
  const result = [];
  _spelunkMessage(value, result);
  return result;
}
var Primitive, defaultOptions2, JsonRpcSigner, JsonRpcApiProvider, JsonRpcApiPollingProvider, JsonRpcProvider;
var init_provider_jsonrpc = __esm(() => {
  init_abi();
  init_address2();
  init_hash();
  init_transaction2();
  init_utils();
  init_abstract_provider();
  init_abstract_signer();
  init_network();
  init_subscriber_filterid();
  init_subscriber_polling();
  Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
  defaultOptions2 = {
    polling: false,
    staticNetwork: null,
    batchStallTime: 10,
    batchMaxSize: 1 << 20,
    batchMaxCount: 100,
    cacheTimeout: 250,
    pollingInterval: 4000
  };
  JsonRpcSigner = class JsonRpcSigner extends AbstractSigner {
    address;
    constructor(provider, address) {
      super(provider);
      address = getAddress(address);
      defineProperties(this, { address });
    }
    connect(provider) {
      assert(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
        operation: "signer.connect"
      });
    }
    async getAddress() {
      return this.address;
    }
    async populateTransaction(tx) {
      return await this.populateCall(tx);
    }
    async sendUncheckedTransaction(_tx) {
      const tx = deepCopy(_tx);
      const promises = [];
      if (tx.from) {
        const _from = tx.from;
        promises.push((async () => {
          const from = await resolveAddress(_from, this.provider);
          assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
          tx.from = from;
        })());
      } else {
        tx.from = this.address;
      }
      if (tx.gasLimit == null) {
        promises.push((async () => {
          tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
        })());
      }
      if (tx.to != null) {
        const _to = tx.to;
        promises.push((async () => {
          tx.to = await resolveAddress(_to, this.provider);
        })());
      }
      if (promises.length) {
        await Promise.all(promises);
      }
      const hexTx = this.provider.getRpcTransaction(tx);
      return this.provider.send("eth_sendTransaction", [hexTx]);
    }
    async sendTransaction(tx) {
      const blockNumber = await this.provider.getBlockNumber();
      const hash2 = await this.sendUncheckedTransaction(tx);
      return await new Promise((resolve, reject) => {
        const timeouts = [1000, 100];
        let invalids = 0;
        const checkTx = async () => {
          try {
            const tx2 = await this.provider.getTransaction(hash2);
            if (tx2 != null) {
              resolve(tx2.replaceableTransaction(blockNumber));
              return;
            }
          } catch (error) {
            if (isError(error, "CANCELLED") || isError(error, "BAD_DATA") || isError(error, "NETWORK_ERROR") || isError(error, "UNSUPPORTED_OPERATION")) {
              if (error.info == null) {
                error.info = {};
              }
              error.info.sendTransactionHash = hash2;
              reject(error);
              return;
            }
            if (isError(error, "INVALID_ARGUMENT")) {
              invalids++;
              if (error.info == null) {
                error.info = {};
              }
              error.info.sendTransactionHash = hash2;
              if (invalids > 10) {
                reject(error);
                return;
              }
            }
            this.provider.emit("error", makeError("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
          }
          this.provider._setTimeout(() => {
            checkTx();
          }, timeouts.pop() || 4000);
        };
        checkTx();
      });
    }
    async signTransaction(_tx) {
      const tx = deepCopy(_tx);
      if (tx.from) {
        const from = await resolveAddress(tx.from, this.provider);
        assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
        tx.from = from;
      } else {
        tx.from = this.address;
      }
      const hexTx = this.provider.getRpcTransaction(tx);
      return await this.provider.send("eth_signTransaction", [hexTx]);
    }
    async signMessage(_message) {
      const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
      return await this.provider.send("personal_sign", [
        hexlify(message),
        this.address.toLowerCase()
      ]);
    }
    async signTypedData(domain, types, _value) {
      const value = deepCopy(_value);
      const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
        const address = await resolveAddress(value2);
        assertArgument(address != null, "TypedData does not support null address", "value", value2);
        return address;
      });
      return await this.provider.send("eth_signTypedData_v4", [
        this.address.toLowerCase(),
        JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
      ]);
    }
    async unlock(password) {
      return this.provider.send("personal_unlockAccount", [
        this.address.toLowerCase(),
        password,
        null
      ]);
    }
    async _legacySignMessage(_message) {
      const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
      return await this.provider.send("eth_sign", [
        this.address.toLowerCase(),
        hexlify(message)
      ]);
    }
  };
  JsonRpcApiProvider = class JsonRpcApiProvider extends AbstractProvider {
    #options;
    #nextId;
    #payloads;
    #drainTimer;
    #notReady;
    #network;
    #pendingDetectNetwork;
    #scheduleDrain() {
      if (this.#drainTimer) {
        return;
      }
      const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
      this.#drainTimer = setTimeout(() => {
        this.#drainTimer = null;
        const payloads = this.#payloads;
        this.#payloads = [];
        while (payloads.length) {
          const batch = [payloads.shift()];
          while (payloads.length) {
            if (batch.length === this.#options.batchMaxCount) {
              break;
            }
            batch.push(payloads.shift());
            const bytes2 = JSON.stringify(batch.map((p) => p.payload));
            if (bytes2.length > this.#options.batchMaxSize) {
              payloads.unshift(batch.pop());
              break;
            }
          }
          (async () => {
            const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
            this.emit("debug", { action: "sendRpcPayload", payload });
            try {
              const result = await this._send(payload);
              this.emit("debug", { action: "receiveRpcResult", result });
              for (const { resolve, reject, payload: payload2 } of batch) {
                if (this.destroyed) {
                  reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                  continue;
                }
                const resp = result.filter((r) => r.id === payload2.id)[0];
                if (resp == null) {
                  const error = makeError("missing response for request", "BAD_DATA", {
                    value: result,
                    info: { payload: payload2 }
                  });
                  this.emit("error", error);
                  reject(error);
                  continue;
                }
                if ("error" in resp) {
                  reject(this.getRpcError(payload2, resp));
                  continue;
                }
                resolve(resp.result);
              }
            } catch (error) {
              this.emit("debug", { action: "receiveRpcError", error });
              for (const { reject } of batch) {
                reject(error);
              }
            }
          })();
        }
      }, stallTime);
    }
    constructor(network, options) {
      super(network, options);
      this.#nextId = 1;
      this.#options = Object.assign({}, defaultOptions2, options || {});
      this.#payloads = [];
      this.#drainTimer = null;
      this.#network = null;
      this.#pendingDetectNetwork = null;
      {
        let resolve = null;
        const promise = new Promise((_resolve) => {
          resolve = _resolve;
        });
        this.#notReady = { promise, resolve };
      }
      const staticNetwork = this._getOption("staticNetwork");
      if (typeof staticNetwork === "boolean") {
        assertArgument(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
        if (staticNetwork && network != null) {
          this.#network = Network.from(network);
        }
      } else if (staticNetwork) {
        assertArgument(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
        this.#network = staticNetwork;
      }
    }
    _getOption(key) {
      return this.#options[key];
    }
    get _network() {
      assert(this.#network, "network is not available yet", "NETWORK_ERROR");
      return this.#network;
    }
    async _perform(req) {
      if (req.method === "call" || req.method === "estimateGas") {
        let tx = req.transaction;
        if (tx && tx.type != null && getBigInt(tx.type)) {
          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
            const feeData = await this.getFeeData();
            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
              req = Object.assign({}, req, {
                transaction: Object.assign({}, tx, { type: undefined })
              });
            }
          }
        }
      }
      const request = this.getRpcRequest(req);
      if (request != null) {
        return await this.send(request.method, request.args);
      }
      return super._perform(req);
    }
    async _detectNetwork() {
      const network = this._getOption("staticNetwork");
      if (network) {
        if (network === true) {
          if (this.#network) {
            return this.#network;
          }
        } else {
          return network;
        }
      }
      if (this.#pendingDetectNetwork) {
        return await this.#pendingDetectNetwork;
      }
      if (this.ready) {
        this.#pendingDetectNetwork = (async () => {
          try {
            const result = Network.from(getBigInt(await this.send("eth_chainId", [])));
            this.#pendingDetectNetwork = null;
            return result;
          } catch (error) {
            this.#pendingDetectNetwork = null;
            throw error;
          }
        })();
        return await this.#pendingDetectNetwork;
      }
      this.#pendingDetectNetwork = (async () => {
        const payload = {
          id: this.#nextId++,
          method: "eth_chainId",
          params: [],
          jsonrpc: "2.0"
        };
        this.emit("debug", { action: "sendRpcPayload", payload });
        let result;
        try {
          result = (await this._send(payload))[0];
          this.#pendingDetectNetwork = null;
        } catch (error) {
          this.#pendingDetectNetwork = null;
          this.emit("debug", { action: "receiveRpcError", error });
          throw error;
        }
        this.emit("debug", { action: "receiveRpcResult", result });
        if ("result" in result) {
          return Network.from(getBigInt(result.result));
        }
        throw this.getRpcError(payload, result);
      })();
      return await this.#pendingDetectNetwork;
    }
    _start() {
      if (this.#notReady == null || this.#notReady.resolve == null) {
        return;
      }
      this.#notReady.resolve();
      this.#notReady = null;
      (async () => {
        while (this.#network == null && !this.destroyed) {
          try {
            this.#network = await this._detectNetwork();
          } catch (error) {
            if (this.destroyed) {
              break;
            }
            console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
            this.emit("error", makeError("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
            await stall(1000);
          }
        }
        this.#scheduleDrain();
      })();
    }
    async _waitUntilReady() {
      if (this.#notReady == null) {
        return;
      }
      return await this.#notReady.promise;
    }
    _getSubscriber(sub) {
      if (sub.type === "pending") {
        return new FilterIdPendingSubscriber(this);
      }
      if (sub.type === "event") {
        if (this._getOption("polling")) {
          return new PollingEventSubscriber(this, sub.filter);
        }
        return new FilterIdEventSubscriber(this, sub.filter);
      }
      if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
        return new UnmanagedSubscriber("orphan");
      }
      return super._getSubscriber(sub);
    }
    get ready() {
      return this.#notReady == null;
    }
    getRpcTransaction(tx) {
      const result = {};
      ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
        if (tx[key] == null) {
          return;
        }
        let dstKey = key;
        if (key === "gasLimit") {
          dstKey = "gas";
        }
        result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));
      });
      ["from", "to", "data"].forEach((key) => {
        if (tx[key] == null) {
          return;
        }
        result[key] = hexlify(tx[key]);
      });
      if (tx.accessList) {
        result["accessList"] = accessListify(tx.accessList);
      }
      if (tx.blobVersionedHashes) {
        result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
      }
      if (tx.authorizationList) {
        result["authorizationList"] = tx.authorizationList.map((_a) => {
          const a = authorizationify(_a);
          return {
            address: a.address,
            nonce: toQuantity(a.nonce),
            chainId: toQuantity(a.chainId),
            yParity: toQuantity(a.signature.yParity),
            r: toQuantity(a.signature.r),
            s: toQuantity(a.signature.s)
          };
        });
      }
      return result;
    }
    getRpcRequest(req) {
      switch (req.method) {
        case "chainId":
          return { method: "eth_chainId", args: [] };
        case "getBlockNumber":
          return { method: "eth_blockNumber", args: [] };
        case "getGasPrice":
          return { method: "eth_gasPrice", args: [] };
        case "getPriorityFee":
          return { method: "eth_maxPriorityFeePerGas", args: [] };
        case "getBalance":
          return {
            method: "eth_getBalance",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getTransactionCount":
          return {
            method: "eth_getTransactionCount",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getCode":
          return {
            method: "eth_getCode",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getStorage":
          return {
            method: "eth_getStorageAt",
            args: [
              getLowerCase(req.address),
              "0x" + req.position.toString(16),
              req.blockTag
            ]
          };
        case "broadcastTransaction":
          return {
            method: "eth_sendRawTransaction",
            args: [req.signedTransaction]
          };
        case "getBlock":
          if ("blockTag" in req) {
            return {
              method: "eth_getBlockByNumber",
              args: [req.blockTag, !!req.includeTransactions]
            };
          } else if ("blockHash" in req) {
            return {
              method: "eth_getBlockByHash",
              args: [req.blockHash, !!req.includeTransactions]
            };
          }
          break;
        case "getTransaction":
          return {
            method: "eth_getTransactionByHash",
            args: [req.hash]
          };
        case "getTransactionReceipt":
          return {
            method: "eth_getTransactionReceipt",
            args: [req.hash]
          };
        case "call":
          return {
            method: "eth_call",
            args: [this.getRpcTransaction(req.transaction), req.blockTag]
          };
        case "estimateGas": {
          return {
            method: "eth_estimateGas",
            args: [this.getRpcTransaction(req.transaction)]
          };
        }
        case "getLogs":
          if (req.filter && req.filter.address != null) {
            if (Array.isArray(req.filter.address)) {
              req.filter.address = req.filter.address.map(getLowerCase);
            } else {
              req.filter.address = getLowerCase(req.filter.address);
            }
          }
          return { method: "eth_getLogs", args: [req.filter] };
      }
      return null;
    }
    getRpcError(payload, _error) {
      const { method } = payload;
      const { error } = _error;
      if (method === "eth_estimateGas" && error.message) {
        const msg = error.message;
        if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
          return makeError("insufficient funds", "INSUFFICIENT_FUNDS", {
            transaction: payload.params[0],
            info: { payload, error }
          });
        } else if (msg.match(/nonce/i) && msg.match(/too low/i)) {
          return makeError("nonce has already been used", "NONCE_EXPIRED", {
            transaction: payload.params[0],
            info: { payload, error }
          });
        }
      }
      if (method === "eth_call" || method === "eth_estimateGas") {
        const result = spelunkData(error);
        const e = AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
        e.info = { error, payload };
        return e;
      }
      const message = JSON.stringify(spelunkMessage(error));
      if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
        const actionMap = {
          eth_sign: "signMessage",
          personal_sign: "signMessage",
          eth_signTypedData_v4: "signTypedData",
          eth_signTransaction: "signTransaction",
          eth_sendTransaction: "sendTransaction",
          eth_requestAccounts: "requestAccess",
          wallet_requestAccounts: "requestAccess"
        };
        return makeError(`user rejected action`, "ACTION_REJECTED", {
          action: actionMap[method] || "unknown",
          reason: "rejected",
          info: { payload, error }
        });
      }
      if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
        const transaction = payload.params[0];
        if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
          return makeError("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
            transaction,
            info: { error }
          });
        }
        if (message.match(/nonce/i) && message.match(/too low/i)) {
          return makeError("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
        }
        if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
          return makeError("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
        }
        if (message.match(/only replay-protected/i)) {
          return makeError("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
            operation: method,
            info: { transaction, info: { error } }
          });
        }
      }
      let unsupported = !!message.match(/the method .* does not exist/i);
      if (!unsupported) {
        if (error && error.details && error.details.startsWith("Unauthorized method:")) {
          unsupported = true;
        }
      }
      if (unsupported) {
        return makeError("unsupported operation", "UNSUPPORTED_OPERATION", {
          operation: payload.method,
          info: { error, payload }
        });
      }
      return makeError("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
    }
    send(method, params) {
      if (this.destroyed) {
        return Promise.reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
      }
      const id2 = this.#nextId++;
      const promise = new Promise((resolve, reject) => {
        this.#payloads.push({
          resolve,
          reject,
          payload: { method, params, id: id2, jsonrpc: "2.0" }
        });
      });
      this.#scheduleDrain();
      return promise;
    }
    async getSigner(address) {
      if (address == null) {
        address = 0;
      }
      const accountsPromise = this.send("eth_accounts", []);
      if (typeof address === "number") {
        const accounts2 = await accountsPromise;
        if (address >= accounts2.length) {
          throw new Error("no such account");
        }
        return new JsonRpcSigner(this, accounts2[address]);
      }
      const { accounts } = await resolveProperties({
        network: this.getNetwork(),
        accounts: accountsPromise
      });
      address = getAddress(address);
      for (const account of accounts) {
        if (getAddress(account) === address) {
          return new JsonRpcSigner(this, address);
        }
      }
      throw new Error("invalid account");
    }
    async listAccounts() {
      const accounts = await this.send("eth_accounts", []);
      return accounts.map((a) => new JsonRpcSigner(this, a));
    }
    destroy() {
      if (this.#drainTimer) {
        clearTimeout(this.#drainTimer);
        this.#drainTimer = null;
      }
      for (const { payload, reject } of this.#payloads) {
        reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
      }
      this.#payloads = [];
      super.destroy();
    }
  };
  JsonRpcApiPollingProvider = class JsonRpcApiPollingProvider extends JsonRpcApiProvider {
    #pollingInterval;
    constructor(network, options) {
      super(network, options);
      let pollingInterval = this._getOption("pollingInterval");
      if (pollingInterval == null) {
        pollingInterval = defaultOptions2.pollingInterval;
      }
      this.#pollingInterval = pollingInterval;
    }
    _getSubscriber(sub) {
      const subscriber = super._getSubscriber(sub);
      if (isPollable(subscriber)) {
        subscriber.pollingInterval = this.#pollingInterval;
      }
      return subscriber;
    }
    get pollingInterval() {
      return this.#pollingInterval;
    }
    set pollingInterval(value) {
      if (!Number.isInteger(value) || value < 0) {
        throw new Error("invalid interval");
      }
      this.#pollingInterval = value;
      this._forEachSubscriber((sub) => {
        if (isPollable(sub)) {
          sub.pollingInterval = this.#pollingInterval;
        }
      });
    }
  };
  JsonRpcProvider = class JsonRpcProvider extends JsonRpcApiPollingProvider {
    #connect;
    constructor(url, network, options) {
      if (url == null) {
        url = "http://localhost:8545";
      }
      super(network, options);
      if (typeof url === "string") {
        this.#connect = new FetchRequest(url);
      } else {
        this.#connect = url.clone();
      }
    }
    _getConnection() {
      return this.#connect.clone();
    }
    async send(method, params) {
      await this._start();
      return await super.send(method, params);
    }
    async _send(payload) {
      const request = this._getConnection();
      request.body = JSON.stringify(payload);
      request.setHeader("content-type", "application/json");
      const response = await request.send();
      response.assertOk();
      let resp = response.bodyJson;
      if (!Array.isArray(resp)) {
        resp = [resp];
      }
      return resp;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-ankr.js
function getHost(name) {
  switch (name) {
    case "mainnet":
      return "rpc.ankr.com/eth";
    case "goerli":
      return "rpc.ankr.com/eth_goerli";
    case "sepolia":
      return "rpc.ankr.com/eth_sepolia";
    case "arbitrum":
      return "rpc.ankr.com/arbitrum";
    case "base":
      return "rpc.ankr.com/base";
    case "base-goerli":
      return "rpc.ankr.com/base_goerli";
    case "base-sepolia":
      return "rpc.ankr.com/base_sepolia";
    case "bnb":
      return "rpc.ankr.com/bsc";
    case "bnbt":
      return "rpc.ankr.com/bsc_testnet_chapel";
    case "matic":
      return "rpc.ankr.com/polygon";
    case "matic-mumbai":
      return "rpc.ankr.com/polygon_mumbai";
    case "optimism":
      return "rpc.ankr.com/optimism";
    case "optimism-goerli":
      return "rpc.ankr.com/optimism_testnet";
    case "optimism-sepolia":
      return "rpc.ankr.com/optimism_sepolia";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972", AnkrProvider;
var init_provider_ankr = __esm(() => {
  init_utils();
  init_community();
  init_network();
  init_provider_jsonrpc();
  AnkrProvider = class AnkrProvider extends JsonRpcProvider {
    apiKey;
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      if (apiKey == null) {
        apiKey = defaultApiKey;
      }
      const options = { polling: true, staticNetwork: network };
      const request = AnkrProvider.getRequest(network, apiKey);
      super(request, network, options);
      defineProperties(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new AnkrProvider(chainId, this.apiKey);
      } catch (error) {}
      return super._getProvider(chainId);
    }
    static getRequest(network, apiKey) {
      if (apiKey == null) {
        apiKey = defaultApiKey;
      }
      const request = new FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
      request.allowGzip = true;
      if (apiKey === defaultApiKey) {
        request.retryFunc = async (request2, response, attempt) => {
          showThrottleMessage("AnkrProvider");
          return true;
        };
      }
      return request;
    }
    getRpcError(payload, error) {
      if (payload.method === "eth_sendRawTransaction") {
        if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
          error.error.message = "replacement transaction underpriced";
        }
      }
      return super.getRpcError(payload, error);
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-alchemy.js
function getHost2(name) {
  switch (name) {
    case "mainnet":
      return "eth-mainnet.alchemyapi.io";
    case "goerli":
      return "eth-goerli.g.alchemy.com";
    case "sepolia":
      return "eth-sepolia.g.alchemy.com";
    case "arbitrum":
      return "arb-mainnet.g.alchemy.com";
    case "arbitrum-goerli":
      return "arb-goerli.g.alchemy.com";
    case "arbitrum-sepolia":
      return "arb-sepolia.g.alchemy.com";
    case "base":
      return "base-mainnet.g.alchemy.com";
    case "base-goerli":
      return "base-goerli.g.alchemy.com";
    case "base-sepolia":
      return "base-sepolia.g.alchemy.com";
    case "matic":
      return "polygon-mainnet.g.alchemy.com";
    case "matic-amoy":
      return "polygon-amoy.g.alchemy.com";
    case "matic-mumbai":
      return "polygon-mumbai.g.alchemy.com";
    case "optimism":
      return "opt-mainnet.g.alchemy.com";
    case "optimism-goerli":
      return "opt-goerli.g.alchemy.com";
    case "optimism-sepolia":
      return "opt-sepolia.g.alchemy.com";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var defaultApiKey2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC", AlchemyProvider;
var init_provider_alchemy = __esm(() => {
  init_utils();
  init_community();
  init_network();
  init_provider_jsonrpc();
  AlchemyProvider = class AlchemyProvider extends JsonRpcProvider {
    apiKey;
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      if (apiKey == null) {
        apiKey = defaultApiKey2;
      }
      const request = AlchemyProvider.getRequest(network, apiKey);
      super(request, network, { staticNetwork: network });
      defineProperties(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new AlchemyProvider(chainId, this.apiKey);
      } catch (error) {}
      return super._getProvider(chainId);
    }
    async _perform(req) {
      if (req.method === "getTransactionResult") {
        const { trace, tx } = await resolveProperties({
          trace: this.send("trace_transaction", [req.hash]),
          tx: this.getTransaction(req.hash)
        });
        if (trace == null || tx == null) {
          return null;
        }
        let data;
        let error = false;
        try {
          data = trace[0].result.output;
          error = trace[0].error === "Reverted";
        } catch (error2) {}
        if (data) {
          assert(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
            action: "getTransactionResult",
            data,
            reason: null,
            transaction: tx,
            invocation: null,
            revert: null
          });
          return data;
        }
        assert(false, "could not parse trace result", "BAD_DATA", { value: trace });
      }
      return await super._perform(req);
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey2;
    }
    static getRequest(network, apiKey) {
      if (apiKey == null) {
        apiKey = defaultApiKey2;
      }
      const request = new FetchRequest(`https://${getHost2(network.name)}/v2/${apiKey}`);
      request.allowGzip = true;
      if (apiKey === defaultApiKey2) {
        request.retryFunc = async (request2, response, attempt) => {
          showThrottleMessage("alchemy");
          return true;
        };
      }
      return request;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-chainstack.js
function getApiKey(name) {
  switch (name) {
    case "mainnet":
      return "39f1d67cedf8b7831010a665328c9197";
    case "arbitrum":
      return "0550c209db33c3abf4cc927e1e18cea1";
    case "bnb":
      return "98b5a77e531614387366f6fc5da097f8";
    case "matic":
      return "cd9d4d70377471aa7c142ec4a4205249";
  }
  assertArgument(false, "unsupported network", "network", name);
}
function getHost3(name) {
  switch (name) {
    case "mainnet":
      return "ethereum-mainnet.core.chainstack.com";
    case "arbitrum":
      return "arbitrum-mainnet.core.chainstack.com";
    case "bnb":
      return "bsc-mainnet.core.chainstack.com";
    case "matic":
      return "polygon-mainnet.core.chainstack.com";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var ChainstackProvider;
var init_provider_chainstack = __esm(() => {
  init_utils();
  init_community();
  init_network();
  init_provider_jsonrpc();
  ChainstackProvider = class ChainstackProvider extends JsonRpcProvider {
    apiKey;
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      if (apiKey == null) {
        apiKey = getApiKey(network.name);
      }
      const request = ChainstackProvider.getRequest(network, apiKey);
      super(request, network, { staticNetwork: network });
      defineProperties(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new ChainstackProvider(chainId, this.apiKey);
      } catch (error) {}
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.apiKey === getApiKey(this._network.name);
    }
    static getRequest(network, apiKey) {
      if (apiKey == null) {
        apiKey = getApiKey(network.name);
      }
      const request = new FetchRequest(`https://${getHost3(network.name)}/${apiKey}`);
      request.allowGzip = true;
      if (apiKey === getApiKey(network.name)) {
        request.retryFunc = async (request2, response, attempt) => {
          showThrottleMessage("ChainstackProvider");
          return true;
        };
      }
      return request;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-cloudflare.js
var CloudflareProvider;
var init_provider_cloudflare = __esm(() => {
  init_utils();
  init_network();
  init_provider_jsonrpc();
  CloudflareProvider = class CloudflareProvider extends JsonRpcProvider {
    constructor(_network) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      assertArgument(network.name === "mainnet", "unsupported network", "network", _network);
      super("https://cloudflare-eth.com/", network, { staticNetwork: network });
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-etherscan.js
function isPromise2(value) {
  return value && typeof value.then === "function";
}
var THROTTLE = 2000, EtherscanPluginId = "org.ethers.plugins.provider.Etherscan", EtherscanPlugin, skipKeys, nextId = 1, EtherscanProvider;
var init_provider_etherscan = __esm(() => {
  init_abi();
  init_contract2();
  init_transaction2();
  init_utils();
  init_abstract_provider();
  init_network();
  init_plugins_network();
  init_community();
  EtherscanPlugin = class EtherscanPlugin extends NetworkPlugin {
    baseUrl;
    constructor(baseUrl) {
      super(EtherscanPluginId);
      defineProperties(this, { baseUrl });
    }
    clone() {
      return new EtherscanPlugin(this.baseUrl);
    }
  };
  skipKeys = ["enableCcipRead"];
  EtherscanProvider = class EtherscanProvider extends AbstractProvider {
    network;
    apiKey;
    #plugin;
    constructor(_network, _apiKey) {
      const apiKey = _apiKey != null ? _apiKey : null;
      super();
      const network = Network.from(_network);
      this.#plugin = network.getPlugin(EtherscanPluginId);
      defineProperties(this, { apiKey, network });
    }
    getBaseUrl() {
      if (this.#plugin) {
        return this.#plugin.baseUrl;
      }
      switch (this.network.name) {
        case "mainnet":
          return "https://api.etherscan.io";
        case "goerli":
          return "https://api-goerli.etherscan.io";
        case "sepolia":
          return "https://api-sepolia.etherscan.io";
        case "holesky":
          return "https://api-holesky.etherscan.io";
        case "arbitrum":
          return "https://api.arbiscan.io";
        case "arbitrum-goerli":
          return "https://api-goerli.arbiscan.io";
        case "base":
          return "https://api.basescan.org";
        case "base-sepolia":
          return "https://api-sepolia.basescan.org";
        case "bnb":
          return "https://api.bscscan.com";
        case "bnbt":
          return "https://api-testnet.bscscan.com";
        case "matic":
          return "https://api.polygonscan.com";
        case "matic-amoy":
          return "https://api-amoy.polygonscan.com";
        case "matic-mumbai":
          return "https://api-testnet.polygonscan.com";
        case "optimism":
          return "https://api-optimistic.etherscan.io";
        case "optimism-goerli":
          return "https://api-goerli-optimistic.etherscan.io";
        default:
      }
      assertArgument(false, "unsupported network", "network", this.network);
    }
    getUrl(module, params) {
      let query = Object.keys(params).reduce((accum, key) => {
        const value = params[key];
        if (value != null) {
          accum += `&${key}=${value}`;
        }
        return accum;
      }, "");
      if (this.apiKey) {
        query += `&apikey=${this.apiKey}`;
      }
      return `https://api.etherscan.io/v2/api?chainid=${this.network.chainId}&module=${module}${query}`;
    }
    getPostUrl() {
      return `https://api.etherscan.io/v2/api?chainid=${this.network.chainId}`;
    }
    getPostData(module, params) {
      params.module = module;
      params.apikey = this.apiKey;
      params.chainid = this.network.chainId;
      return params;
    }
    async detectNetwork() {
      return this.network;
    }
    async fetch(module, params, post) {
      const id2 = nextId++;
      const url = post ? this.getPostUrl() : this.getUrl(module, params);
      const payload = post ? this.getPostData(module, params) : null;
      this.emit("debug", { action: "sendRequest", id: id2, url, payload });
      const request = new FetchRequest(url);
      request.setThrottleParams({ slotInterval: 1000 });
      request.retryFunc = (req, resp, attempt) => {
        if (this.isCommunityResource()) {
          showThrottleMessage("Etherscan");
        }
        return Promise.resolve(true);
      };
      request.processFunc = async (request2, response2) => {
        const result2 = response2.hasBody() ? JSON.parse(toUtf8String(response2.body)) : {};
        const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
        if (module === "proxy") {
          if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
            this.emit("debug", { action: "receiveError", id: id2, reason: "proxy-NOTOK", error: result2 });
            response2.throwThrottleError(result2.result, THROTTLE);
          }
        } else {
          if (throttle) {
            this.emit("debug", { action: "receiveError", id: id2, reason: "null result", error: result2.result });
            response2.throwThrottleError(result2.result, THROTTLE);
          }
        }
        return response2;
      };
      if (payload) {
        request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
        request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
      }
      const response = await request.send();
      try {
        response.assertOk();
      } catch (error) {
        this.emit("debug", { action: "receiveError", id: id2, error, reason: "assertOk" });
        assert(false, "response error", "SERVER_ERROR", { request, response });
      }
      if (!response.hasBody()) {
        this.emit("debug", { action: "receiveError", id: id2, error: "missing body", reason: "null body" });
        assert(false, "missing response", "SERVER_ERROR", { request, response });
      }
      const result = JSON.parse(toUtf8String(response.body));
      if (module === "proxy") {
        if (result.jsonrpc != "2.0") {
          this.emit("debug", { action: "receiveError", id: id2, result, reason: "invalid JSON-RPC" });
          assert(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
        }
        if (result.error) {
          this.emit("debug", { action: "receiveError", id: id2, result, reason: "JSON-RPC error" });
          assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
        }
        this.emit("debug", { action: "receiveRequest", id: id2, result });
        return result.result;
      } else {
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
          this.emit("debug", { action: "receiveRequest", id: id2, result });
          return result.result;
        }
        if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
          this.emit("debug", { action: "receiveError", id: id2, result });
          assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
        }
        this.emit("debug", { action: "receiveRequest", id: id2, result });
        return result.result;
      }
    }
    _getTransactionPostData(transaction) {
      const result = {};
      for (let key in transaction) {
        if (skipKeys.indexOf(key) >= 0) {
          continue;
        }
        if (transaction[key] == null) {
          continue;
        }
        let value = transaction[key];
        if (key === "type" && value === 0) {
          continue;
        }
        if (key === "blockTag" && value === "latest") {
          continue;
        }
        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
          value = toQuantity(value);
        } else if (key === "accessList") {
          value = "[" + accessListify(value).map((set) => {
            return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
          }).join(",") + "]";
        } else if (key === "blobVersionedHashes") {
          if (value.length === 0) {
            continue;
          }
          assert(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
            operation: "_getTransactionPostData",
            info: { transaction }
          });
        } else {
          value = hexlify(value);
        }
        result[key] = value;
      }
      return result;
    }
    _checkError(req, error, transaction) {
      let message = "";
      if (isError(error, "SERVER_ERROR")) {
        try {
          message = error.info.result.error.message;
        } catch (e) {}
        if (!message) {
          try {
            message = error.info.message;
          } catch (e) {}
        }
      }
      if (req.method === "estimateGas") {
        if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
          assert(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
            transaction: req.transaction
          });
        }
      }
      if (req.method === "call" || req.method === "estimateGas") {
        if (message.match(/execution reverted/i)) {
          let data = "";
          try {
            data = error.info.result.error.data;
          } catch (error2) {}
          const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
          e.info = { request: req, error };
          throw e;
        }
      }
      if (message) {
        if (req.method === "broadcastTransaction") {
          const transaction2 = Transaction.from(req.signedTransaction);
          if (message.match(/replacement/i) && message.match(/underpriced/i)) {
            assert(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
              transaction: transaction2
            });
          }
          if (message.match(/insufficient funds/)) {
            assert(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
              transaction: transaction2
            });
          }
          if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            assert(false, "nonce has already been used", "NONCE_EXPIRED", {
              transaction: transaction2
            });
          }
        }
      }
      throw error;
    }
    async _detectNetwork() {
      return this.network;
    }
    async _perform(req) {
      switch (req.method) {
        case "chainId":
          return this.network.chainId;
        case "getBlockNumber":
          return this.fetch("proxy", { action: "eth_blockNumber" });
        case "getGasPrice":
          return this.fetch("proxy", { action: "eth_gasPrice" });
        case "getPriorityFee":
          if (this.network.name === "mainnet") {
            return "1000000000";
          } else if (this.network.name === "optimism") {
            return "1000000";
          } else {
            throw new Error("fallback onto the AbstractProvider default");
          }
        case "getBalance":
          return this.fetch("account", {
            action: "balance",
            address: req.address,
            tag: req.blockTag
          });
        case "getTransactionCount":
          return this.fetch("proxy", {
            action: "eth_getTransactionCount",
            address: req.address,
            tag: req.blockTag
          });
        case "getCode":
          return this.fetch("proxy", {
            action: "eth_getCode",
            address: req.address,
            tag: req.blockTag
          });
        case "getStorage":
          return this.fetch("proxy", {
            action: "eth_getStorageAt",
            address: req.address,
            position: req.position,
            tag: req.blockTag
          });
        case "broadcastTransaction":
          return this.fetch("proxy", {
            action: "eth_sendRawTransaction",
            hex: req.signedTransaction
          }, true).catch((error) => {
            return this._checkError(req, error, req.signedTransaction);
          });
        case "getBlock":
          if ("blockTag" in req) {
            return this.fetch("proxy", {
              action: "eth_getBlockByNumber",
              tag: req.blockTag,
              boolean: req.includeTransactions ? "true" : "false"
            });
          }
          assert(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
            operation: "getBlock(blockHash)"
          });
        case "getTransaction":
          return this.fetch("proxy", {
            action: "eth_getTransactionByHash",
            txhash: req.hash
          });
        case "getTransactionReceipt":
          return this.fetch("proxy", {
            action: "eth_getTransactionReceipt",
            txhash: req.hash
          });
        case "call": {
          if (req.blockTag !== "latest") {
            throw new Error("EtherscanProvider does not support blockTag for call");
          }
          const postData = this._getTransactionPostData(req.transaction);
          postData.module = "proxy";
          postData.action = "eth_call";
          try {
            return await this.fetch("proxy", postData, true);
          } catch (error) {
            return this._checkError(req, error, req.transaction);
          }
        }
        case "estimateGas": {
          const postData = this._getTransactionPostData(req.transaction);
          postData.module = "proxy";
          postData.action = "eth_estimateGas";
          try {
            return await this.fetch("proxy", postData, true);
          } catch (error) {
            return this._checkError(req, error, req.transaction);
          }
        }
        default:
          break;
      }
      return super._perform(req);
    }
    async getNetwork() {
      return this.network;
    }
    async getEtherPrice() {
      if (this.network.name !== "mainnet") {
        return 0;
      }
      return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
    }
    async getContract(_address) {
      let address = this._getAddress(_address);
      if (isPromise2(address)) {
        address = await address;
      }
      try {
        const resp = await this.fetch("contract", {
          action: "getabi",
          address
        });
        const abi = JSON.parse(resp);
        return new Contract(address, abi, this);
      } catch (error) {
        return null;
      }
    }
    isCommunityResource() {
      return this.apiKey == null;
    }
  };
});

// node_modules/ethers/lib.esm/providers/ws.js
import { WebSocket } from "ws";
var init_ws = () => {};

// node_modules/ethers/lib.esm/providers/provider-socket.js
class SocketSubscriber {
  #provider;
  #filter;
  get filter() {
    return JSON.parse(this.#filter);
  }
  #filterId;
  #paused;
  #emitPromise;
  constructor(provider, filter) {
    this.#provider = provider;
    this.#filter = JSON.stringify(filter);
    this.#filterId = null;
    this.#paused = null;
    this.#emitPromise = null;
  }
  start() {
    this.#filterId = this.#provider.send("eth_subscribe", this.filter).then((filterId) => {
      this.#provider._register(filterId, this);
      return filterId;
    });
  }
  stop() {
    this.#filterId.then((filterId) => {
      if (this.#provider.destroyed) {
        return;
      }
      this.#provider.send("eth_unsubscribe", [filterId]);
    });
    this.#filterId = null;
  }
  pause(dropWhilePaused) {
    assert(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
    this.#paused = !!dropWhilePaused;
  }
  resume() {
    this.#paused = null;
  }
  _handleMessage(message) {
    if (this.#filterId == null) {
      return;
    }
    if (this.#paused === null) {
      let emitPromise = this.#emitPromise;
      if (emitPromise == null) {
        emitPromise = this._emit(this.#provider, message);
      } else {
        emitPromise = emitPromise.then(async () => {
          await this._emit(this.#provider, message);
        });
      }
      this.#emitPromise = emitPromise.then(() => {
        if (this.#emitPromise === emitPromise) {
          this.#emitPromise = null;
        }
      });
    }
  }
  async _emit(provider, message) {
    throw new Error("sub-classes must implemente this; _emit");
  }
}
var SocketBlockSubscriber, SocketPendingSubscriber, SocketEventSubscriber, SocketProvider;
var init_provider_socket = __esm(() => {
  init_abstract_provider();
  init_utils();
  init_provider_jsonrpc();
  SocketBlockSubscriber = class SocketBlockSubscriber extends SocketSubscriber {
    constructor(provider) {
      super(provider, ["newHeads"]);
    }
    async _emit(provider, message) {
      provider.emit("block", parseInt(message.number));
    }
  };
  SocketPendingSubscriber = class SocketPendingSubscriber extends SocketSubscriber {
    constructor(provider) {
      super(provider, ["newPendingTransactions"]);
    }
    async _emit(provider, message) {
      provider.emit("pending", message);
    }
  };
  SocketEventSubscriber = class SocketEventSubscriber extends SocketSubscriber {
    #logFilter;
    get logFilter() {
      return JSON.parse(this.#logFilter);
    }
    constructor(provider, filter) {
      super(provider, ["logs", filter]);
      this.#logFilter = JSON.stringify(filter);
    }
    async _emit(provider, message) {
      provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
    }
  };
  SocketProvider = class SocketProvider extends JsonRpcApiProvider {
    #callbacks;
    #subs;
    #pending;
    constructor(network, _options) {
      const options = Object.assign({}, _options != null ? _options : {});
      assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
      options.batchMaxCount = 1;
      if (options.staticNetwork == null) {
        options.staticNetwork = true;
      }
      super(network, options);
      this.#callbacks = new Map;
      this.#subs = new Map;
      this.#pending = new Map;
    }
    _getSubscriber(sub) {
      switch (sub.type) {
        case "close":
          return new UnmanagedSubscriber("close");
        case "block":
          return new SocketBlockSubscriber(this);
        case "pending":
          return new SocketPendingSubscriber(this);
        case "event":
          return new SocketEventSubscriber(this, sub.filter);
        case "orphan":
          if (sub.filter.orphan === "drop-log") {
            return new UnmanagedSubscriber("drop-log");
          }
      }
      return super._getSubscriber(sub);
    }
    _register(filterId, subscriber) {
      this.#subs.set(filterId, subscriber);
      const pending = this.#pending.get(filterId);
      if (pending) {
        for (const message of pending) {
          subscriber._handleMessage(message);
        }
        this.#pending.delete(filterId);
      }
    }
    async _send(payload) {
      assertArgument(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
      const promise = new Promise((resolve, reject) => {
        this.#callbacks.set(payload.id, { payload, resolve, reject });
      });
      await this._waitUntilReady();
      await this._write(JSON.stringify(payload));
      return [await promise];
    }
    async _processMessage(message) {
      const result = JSON.parse(message);
      if (result && typeof result === "object" && "id" in result) {
        const callback = this.#callbacks.get(result.id);
        if (callback == null) {
          this.emit("error", makeError("received result for unknown id", "UNKNOWN_ERROR", {
            reasonCode: "UNKNOWN_ID",
            result
          }));
          return;
        }
        this.#callbacks.delete(result.id);
        callback.resolve(result);
      } else if (result && result.method === "eth_subscription") {
        const filterId = result.params.subscription;
        const subscriber = this.#subs.get(filterId);
        if (subscriber) {
          subscriber._handleMessage(result.params.result);
        } else {
          let pending = this.#pending.get(filterId);
          if (pending == null) {
            pending = [];
            this.#pending.set(filterId, pending);
          }
          pending.push(result.params.result);
        }
      } else {
        this.emit("error", makeError("received unexpected message", "UNKNOWN_ERROR", {
          reasonCode: "UNEXPECTED_MESSAGE",
          result
        }));
        return;
      }
    }
    async _write(message) {
      throw new Error("sub-classes must override this");
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-websocket.js
var WebSocketProvider;
var init_provider_websocket = __esm(() => {
  init_ws();
  init_provider_socket();
  WebSocketProvider = class WebSocketProvider extends SocketProvider {
    #connect;
    #websocket;
    get websocket() {
      if (this.#websocket == null) {
        throw new Error("websocket closed");
      }
      return this.#websocket;
    }
    constructor(url, network, options) {
      super(network, options);
      if (typeof url === "string") {
        this.#connect = () => {
          return new WebSocket(url);
        };
        this.#websocket = this.#connect();
      } else if (typeof url === "function") {
        this.#connect = url;
        this.#websocket = url();
      } else {
        this.#connect = null;
        this.#websocket = url;
      }
      this.websocket.onopen = async () => {
        try {
          await this._start();
          this.resume();
        } catch (error) {
          console.log("failed to start WebsocketProvider", error);
        }
      };
      this.websocket.onmessage = (message) => {
        this._processMessage(message.data);
      };
    }
    async _write(message) {
      this.websocket.send(message);
    }
    async destroy() {
      if (this.#websocket != null) {
        this.#websocket.close();
        this.#websocket = null;
      }
      super.destroy();
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-infura.js
function getHost4(name) {
  switch (name) {
    case "mainnet":
      return "mainnet.infura.io";
    case "goerli":
      return "goerli.infura.io";
    case "sepolia":
      return "sepolia.infura.io";
    case "arbitrum":
      return "arbitrum-mainnet.infura.io";
    case "arbitrum-goerli":
      return "arbitrum-goerli.infura.io";
    case "arbitrum-sepolia":
      return "arbitrum-sepolia.infura.io";
    case "base":
      return "base-mainnet.infura.io";
    case "base-goerlia":
    case "base-goerli":
      return "base-goerli.infura.io";
    case "base-sepolia":
      return "base-sepolia.infura.io";
    case "bnb":
      return "bsc-mainnet.infura.io";
    case "bnbt":
      return "bsc-testnet.infura.io";
    case "linea":
      return "linea-mainnet.infura.io";
    case "linea-goerli":
      return "linea-goerli.infura.io";
    case "linea-sepolia":
      return "linea-sepolia.infura.io";
    case "matic":
      return "polygon-mainnet.infura.io";
    case "matic-amoy":
      return "polygon-amoy.infura.io";
    case "matic-mumbai":
      return "polygon-mumbai.infura.io";
    case "optimism":
      return "optimism-mainnet.infura.io";
    case "optimism-goerli":
      return "optimism-goerli.infura.io";
    case "optimism-sepolia":
      return "optimism-sepolia.infura.io";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var defaultProjectId = "84842078b09946638c03157f83405213", InfuraWebSocketProvider, InfuraProvider;
var init_provider_infura = __esm(() => {
  init_utils();
  init_community();
  init_network();
  init_provider_jsonrpc();
  init_provider_websocket();
  InfuraWebSocketProvider = class InfuraWebSocketProvider extends WebSocketProvider {
    projectId;
    projectSecret;
    constructor(network, projectId) {
      const provider = new InfuraProvider(network, projectId);
      const req = provider._getConnection();
      assert(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
      const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
      super(url, provider._network);
      defineProperties(this, {
        projectId: provider.projectId,
        projectSecret: provider.projectSecret
      });
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  };
  InfuraProvider = class InfuraProvider extends JsonRpcProvider {
    projectId;
    projectSecret;
    constructor(_network, projectId, projectSecret) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      if (projectId == null) {
        projectId = defaultProjectId;
      }
      if (projectSecret == null) {
        projectSecret = null;
      }
      const request = InfuraProvider.getRequest(network, projectId, projectSecret);
      super(request, network, { staticNetwork: network });
      defineProperties(this, { projectId, projectSecret });
    }
    _getProvider(chainId) {
      try {
        return new InfuraProvider(chainId, this.projectId, this.projectSecret);
      } catch (error) {}
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
    static getWebSocketProvider(network, projectId) {
      return new InfuraWebSocketProvider(network, projectId);
    }
    static getRequest(network, projectId, projectSecret) {
      if (projectId == null) {
        projectId = defaultProjectId;
      }
      if (projectSecret == null) {
        projectSecret = null;
      }
      const request = new FetchRequest(`https://${getHost4(network.name)}/v3/${projectId}`);
      request.allowGzip = true;
      if (projectSecret) {
        request.setCredentials("", projectSecret);
      }
      if (projectId === defaultProjectId) {
        request.retryFunc = async (request2, response, attempt) => {
          showThrottleMessage("InfuraProvider");
          return true;
        };
      }
      return request;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-quicknode.js
function getHost5(name) {
  switch (name) {
    case "mainnet":
      return "ethers.quiknode.pro";
    case "goerli":
      return "ethers.ethereum-goerli.quiknode.pro";
    case "sepolia":
      return "ethers.ethereum-sepolia.quiknode.pro";
    case "holesky":
      return "ethers.ethereum-holesky.quiknode.pro";
    case "arbitrum":
      return "ethers.arbitrum-mainnet.quiknode.pro";
    case "arbitrum-goerli":
      return "ethers.arbitrum-goerli.quiknode.pro";
    case "arbitrum-sepolia":
      return "ethers.arbitrum-sepolia.quiknode.pro";
    case "base":
      return "ethers.base-mainnet.quiknode.pro";
    case "base-goerli":
      return "ethers.base-goerli.quiknode.pro";
    case "base-spolia":
      return "ethers.base-sepolia.quiknode.pro";
    case "bnb":
      return "ethers.bsc.quiknode.pro";
    case "bnbt":
      return "ethers.bsc-testnet.quiknode.pro";
    case "matic":
      return "ethers.matic.quiknode.pro";
    case "matic-mumbai":
      return "ethers.matic-testnet.quiknode.pro";
    case "optimism":
      return "ethers.optimism.quiknode.pro";
    case "optimism-goerli":
      return "ethers.optimism-goerli.quiknode.pro";
    case "optimism-sepolia":
      return "ethers.optimism-sepolia.quiknode.pro";
    case "xdai":
      return "ethers.xdai.quiknode.pro";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb", QuickNodeProvider;
var init_provider_quicknode = __esm(() => {
  init_utils();
  init_community();
  init_network();
  init_provider_jsonrpc();
  QuickNodeProvider = class QuickNodeProvider extends JsonRpcProvider {
    token;
    constructor(_network, token) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      if (token == null) {
        token = defaultToken;
      }
      const request = QuickNodeProvider.getRequest(network, token);
      super(request, network, { staticNetwork: network });
      defineProperties(this, { token });
    }
    _getProvider(chainId) {
      try {
        return new QuickNodeProvider(chainId, this.token);
      } catch (error) {}
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.token === defaultToken;
    }
    static getRequest(network, token) {
      if (token == null) {
        token = defaultToken;
      }
      const request = new FetchRequest(`https://${getHost5(network.name)}/${token}`);
      request.allowGzip = true;
      if (token === defaultToken) {
        request.retryFunc = async (request2, response, attempt) => {
          showThrottleMessage("QuickNodeProvider");
          return true;
        };
      }
      return request;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-fallback.js
function shuffle(array) {
  for (let i = array.length - 1;i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
  }
}
function stall2(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function getTime3() {
  return new Date().getTime();
}
function stringify2(value) {
  return JSON.stringify(value, (key, value2) => {
    if (typeof value2 === "bigint") {
      return { type: "bigint", value: value2.toString() };
    }
    return value2;
  });
}
async function waitForSync(config, blockNumber) {
  while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
    if (!config._updateNumber) {
      config._updateNumber = (async () => {
        try {
          const blockNumber2 = await config.provider.getBlockNumber();
          if (blockNumber2 > config.blockNumber) {
            config.blockNumber = blockNumber2;
          }
        } catch (error) {
          config.blockNumber = -2;
          config._lastFatalError = error;
          config._lastFatalErrorTimestamp = getTime3();
        }
        config._updateNumber = null;
      })();
    }
    await config._updateNumber;
    config.outOfSync++;
    if (config._lastFatalError) {
      break;
    }
  }
}
function _normalize(value) {
  if (value == null) {
    return "null";
  }
  if (Array.isArray(value)) {
    return "[" + value.map(_normalize).join(",") + "]";
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return _normalize(value.toJSON());
  }
  switch (typeof value) {
    case "boolean":
    case "symbol":
      return value.toString();
    case "bigint":
    case "number":
      return BigInt(value).toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
    }
  }
  console.log("Could not serialize", value);
  throw new Error("Hmm...");
}
function normalizeResult(method, value) {
  if ("error" in value) {
    const error = value.error;
    let tag;
    if (isError(error, "CALL_EXCEPTION")) {
      tag = _normalize(Object.assign({}, error, {
        shortMessage: undefined,
        reason: undefined,
        info: undefined
      }));
    } else {
      tag = _normalize(error);
    }
    return { tag, value: error };
  }
  const result = value.result;
  return { tag: _normalize(result), value: result };
}
function checkQuorum(quorum, results) {
  const tally = new Map;
  for (const { value, tag, weight } of results) {
    const t = tally.get(tag) || { value, weight: 0 };
    t.weight += weight;
    tally.set(tag, t);
  }
  let best = null;
  for (const r of tally.values()) {
    if (r.weight >= quorum && (!best || r.weight > best.weight)) {
      best = r;
    }
  }
  if (best) {
    return best.value;
  }
  return;
}
function getMedian(quorum, results) {
  let resultWeight = 0;
  const errorMap = new Map;
  let bestError = null;
  const values = [];
  for (const { value, tag, weight } of results) {
    if (value instanceof Error) {
      const e = errorMap.get(tag) || { value, weight: 0 };
      e.weight += weight;
      errorMap.set(tag, e);
      if (bestError == null || e.weight > bestError.weight) {
        bestError = e;
      }
    } else {
      values.push(BigInt(value));
      resultWeight += weight;
    }
  }
  if (resultWeight < quorum) {
    if (bestError && bestError.weight >= quorum) {
      return bestError.value;
    }
    return;
  }
  values.sort((a, b2) => a < b2 ? -1 : b2 > a ? 1 : 0);
  const mid = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[mid];
  }
  return (values[mid - 1] + values[mid] + BN_16) / BN_24;
}
function getAnyResult(quorum, results) {
  const result = checkQuorum(quorum, results);
  if (result !== undefined) {
    return result;
  }
  for (const r of results) {
    if (r.value) {
      return r.value;
    }
  }
  return;
}
function getFuzzyMode(quorum, results) {
  if (quorum === 1) {
    return getNumber(getMedian(quorum, results), "%internal");
  }
  const tally = new Map;
  const add = (result, weight) => {
    const t = tally.get(result) || { result, weight: 0 };
    t.weight += weight;
    tally.set(result, t);
  };
  for (const { weight, value } of results) {
    const r = getNumber(value);
    add(r - 1, weight);
    add(r, weight);
    add(r + 1, weight);
  }
  let bestWeight = 0;
  let bestResult = undefined;
  for (const { weight, result } of tally.values()) {
    if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
      bestWeight = weight;
      bestResult = result;
    }
  }
  return bestResult;
}
var BN_16, BN_24, defaultConfig, defaultState, FallbackProvider;
var init_provider_fallback = __esm(() => {
  init_utils();
  init_abstract_provider();
  init_network();
  BN_16 = BigInt("1");
  BN_24 = BigInt("2");
  defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
  defaultState = {
    blockNumber: -2,
    requests: 0,
    lateResponses: 0,
    errorResponses: 0,
    outOfSync: -1,
    unsupportedEvents: 0,
    rollingDuration: 0,
    score: 0,
    _network: null,
    _updateNumber: null,
    _totalTime: 0,
    _lastFatalError: null,
    _lastFatalErrorTimestamp: 0
  };
  FallbackProvider = class FallbackProvider extends AbstractProvider {
    quorum;
    eventQuorum;
    eventWorkers;
    #configs;
    #height;
    #initialSyncPromise;
    constructor(providers, network, options) {
      super(network, options);
      this.#configs = providers.map((p) => {
        if (p instanceof AbstractProvider) {
          return Object.assign({ provider: p }, defaultConfig, defaultState);
        } else {
          return Object.assign({}, defaultConfig, p, defaultState);
        }
      });
      this.#height = -2;
      this.#initialSyncPromise = null;
      if (options && options.quorum != null) {
        this.quorum = options.quorum;
      } else {
        this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {
          accum += config.weight;
          return accum;
        }, 0) / 2);
      }
      this.eventQuorum = 1;
      this.eventWorkers = 1;
      assertArgument(this.quorum <= this.#configs.reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
    }
    get providerConfigs() {
      return this.#configs.map((c) => {
        const result = Object.assign({}, c);
        for (const key in result) {
          if (key[0] === "_") {
            delete result[key];
          }
        }
        return result;
      });
    }
    async _detectNetwork() {
      return Network.from(getBigInt(await this._perform({ method: "chainId" })));
    }
    async _translatePerform(provider, req) {
      switch (req.method) {
        case "broadcastTransaction":
          return await provider.broadcastTransaction(req.signedTransaction);
        case "call":
          return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
        case "chainId":
          return (await provider.getNetwork()).chainId;
        case "estimateGas":
          return await provider.estimateGas(req.transaction);
        case "getBalance":
          return await provider.getBalance(req.address, req.blockTag);
        case "getBlock": {
          const block = "blockHash" in req ? req.blockHash : req.blockTag;
          return await provider.getBlock(block, req.includeTransactions);
        }
        case "getBlockNumber":
          return await provider.getBlockNumber();
        case "getCode":
          return await provider.getCode(req.address, req.blockTag);
        case "getGasPrice":
          return (await provider.getFeeData()).gasPrice;
        case "getPriorityFee":
          return (await provider.getFeeData()).maxPriorityFeePerGas;
        case "getLogs":
          return await provider.getLogs(req.filter);
        case "getStorage":
          return await provider.getStorage(req.address, req.position, req.blockTag);
        case "getTransaction":
          return await provider.getTransaction(req.hash);
        case "getTransactionCount":
          return await provider.getTransactionCount(req.address, req.blockTag);
        case "getTransactionReceipt":
          return await provider.getTransactionReceipt(req.hash);
        case "getTransactionResult":
          return await provider.getTransactionResult(req.hash);
      }
    }
    #getNextConfig(running) {
      const configs = Array.from(running).map((r) => r.config);
      const allConfigs = this.#configs.slice();
      shuffle(allConfigs);
      allConfigs.sort((a, b2) => a.priority - b2.priority);
      for (const config of allConfigs) {
        if (config._lastFatalError) {
          continue;
        }
        if (configs.indexOf(config) === -1) {
          return config;
        }
      }
      return null;
    }
    #addRunner(running, req) {
      const config = this.#getNextConfig(running);
      if (config == null) {
        return null;
      }
      const runner = {
        config,
        result: null,
        didBump: false,
        perform: null,
        staller: null
      };
      const now = getTime3();
      runner.perform = (async () => {
        try {
          config.requests++;
          const result = await this._translatePerform(config.provider, req);
          runner.result = { result };
        } catch (error) {
          config.errorResponses++;
          runner.result = { error };
        }
        const dt = getTime3() - now;
        config._totalTime += dt;
        config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
        runner.perform = null;
      })();
      runner.staller = (async () => {
        await stall2(config.stallTimeout);
        runner.staller = null;
      })();
      running.add(runner);
      return runner;
    }
    async#initialSync() {
      let initialSync = this.#initialSyncPromise;
      if (!initialSync) {
        const promises = [];
        this.#configs.forEach((config) => {
          promises.push((async () => {
            await waitForSync(config, 0);
            if (!config._lastFatalError) {
              config._network = await config.provider.getNetwork();
            }
          })());
        });
        this.#initialSyncPromise = initialSync = (async () => {
          await Promise.all(promises);
          let chainId = null;
          for (const config of this.#configs) {
            if (config._lastFatalError) {
              continue;
            }
            const network = config._network;
            if (chainId == null) {
              chainId = network.chainId;
            } else if (network.chainId !== chainId) {
              assert(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                operation: "new FallbackProvider"
              });
            }
          }
        })();
      }
      await initialSync;
    }
    async#checkQuorum(running, req) {
      const results = [];
      for (const runner of running) {
        if (runner.result != null) {
          const { tag, value } = normalizeResult(req.method, runner.result);
          results.push({ tag, value, weight: runner.config.weight });
        }
      }
      if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {
        return;
      }
      switch (req.method) {
        case "getBlockNumber": {
          if (this.#height === -2) {
            this.#height = Math.ceil(getNumber(getMedian(this.quorum, this.#configs.filter((c) => !c._lastFatalError).map((c) => ({
              value: c.blockNumber,
              tag: getNumber(c.blockNumber).toString(),
              weight: c.weight
            })))));
          }
          const mode = getFuzzyMode(this.quorum, results);
          if (mode === undefined) {
            return;
          }
          if (mode > this.#height) {
            this.#height = mode;
          }
          return this.#height;
        }
        case "getGasPrice":
        case "getPriorityFee":
        case "estimateGas":
          return getMedian(this.quorum, results);
        case "getBlock":
          if ("blockTag" in req && req.blockTag === "pending") {
            return getAnyResult(this.quorum, results);
          }
          return checkQuorum(this.quorum, results);
        case "call":
        case "chainId":
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorage":
        case "getTransaction":
        case "getTransactionReceipt":
        case "getLogs":
          return checkQuorum(this.quorum, results);
        case "broadcastTransaction":
          return getAnyResult(this.quorum, results);
      }
      assert(false, "unsupported method", "UNSUPPORTED_OPERATION", {
        operation: `_perform(${stringify2(req.method)})`
      });
    }
    async#waitForQuorum(running, req) {
      if (running.size === 0) {
        throw new Error("no runners?!");
      }
      const interesting = [];
      let newRunners = 0;
      for (const runner of running) {
        if (runner.perform) {
          interesting.push(runner.perform);
        }
        if (runner.staller) {
          interesting.push(runner.staller);
          continue;
        }
        if (runner.didBump) {
          continue;
        }
        runner.didBump = true;
        newRunners++;
      }
      const value = await this.#checkQuorum(running, req);
      if (value !== undefined) {
        if (value instanceof Error) {
          throw value;
        }
        return value;
      }
      for (let i = 0;i < newRunners; i++) {
        this.#addRunner(running, req);
      }
      assert(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
        request: "%sub-requests",
        info: { request: req, results: Array.from(running).map((r) => stringify2(r.result)) }
      });
      await Promise.race(interesting);
      return await this.#waitForQuorum(running, req);
    }
    async _perform(req) {
      if (req.method === "broadcastTransaction") {
        const results = this.#configs.map((c) => null);
        const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {
          try {
            const result3 = await provider._perform(req);
            results[index] = Object.assign(normalizeResult(req.method, { result: result3 }), { weight });
          } catch (error) {
            results[index] = Object.assign(normalizeResult(req.method, { error }), { weight });
          }
        });
        while (true) {
          const done = results.filter((r) => r != null);
          for (const { value } of done) {
            if (!(value instanceof Error)) {
              return value;
            }
          }
          const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
          if (isError(result3, "INSUFFICIENT_FUNDS")) {
            throw result3;
          }
          const waiting = broadcasts.filter((b2, i) => results[i] == null);
          if (waiting.length === 0) {
            break;
          }
          await Promise.race(waiting);
        }
        const result2 = getAnyResult(this.quorum, results);
        assert(result2 !== undefined, "problem multi-broadcasting", "SERVER_ERROR", {
          request: "%sub-requests",
          info: { request: req, results: results.map(stringify2) }
        });
        if (result2 instanceof Error) {
          throw result2;
        }
        return result2;
      }
      await this.#initialSync();
      const running = new Set;
      let inflightQuorum = 0;
      while (true) {
        const runner = this.#addRunner(running, req);
        if (runner == null) {
          break;
        }
        inflightQuorum += runner.config.weight;
        if (inflightQuorum >= this.quorum) {
          break;
        }
      }
      const result = await this.#waitForQuorum(running, req);
      for (const runner of running) {
        if (runner.perform && runner.result == null) {
          runner.config.lateResponses++;
        }
      }
      return result;
    }
    async destroy() {
      for (const { provider } of this.#configs) {
        provider.destroy();
      }
      super.destroy();
    }
  };
});

// node_modules/ethers/lib.esm/providers/default-provider.js
function isWebSocketLike(value) {
  return value && typeof value.send === "function" && typeof value.close === "function";
}
function getDefaultProvider(network, options) {
  if (options == null) {
    options = {};
  }
  const allowService = (name) => {
    if (options[name] === "-") {
      return false;
    }
    if (typeof options.exclusive === "string") {
      return name === options.exclusive;
    }
    if (Array.isArray(options.exclusive)) {
      return options.exclusive.indexOf(name) !== -1;
    }
    return true;
  };
  if (typeof network === "string" && network.match(/^https?:/)) {
    return new JsonRpcProvider(network);
  }
  if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
    return new WebSocketProvider(network);
  }
  let staticNetwork = null;
  try {
    staticNetwork = Network.from(network);
  } catch (error) {}
  const providers = [];
  if (allowService("publicPolygon") && staticNetwork) {
    if (staticNetwork.name === "matic") {
      providers.push(new JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
    } else if (staticNetwork.name === "matic-amoy") {
      providers.push(new JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
    }
  }
  if (allowService("alchemy")) {
    try {
      providers.push(new AlchemyProvider(network, options.alchemy));
    } catch (error) {}
  }
  if (allowService("ankr") && options.ankr != null) {
    try {
      providers.push(new AnkrProvider(network, options.ankr));
    } catch (error) {}
  }
  if (allowService("chainstack")) {
    try {
      providers.push(new ChainstackProvider(network, options.chainstack));
    } catch (error) {}
  }
  if (allowService("cloudflare")) {
    try {
      providers.push(new CloudflareProvider(network));
    } catch (error) {}
  }
  if (allowService("etherscan")) {
    try {
      providers.push(new EtherscanProvider(network, options.etherscan));
    } catch (error) {}
  }
  if (allowService("infura")) {
    try {
      let projectId = options.infura;
      let projectSecret = undefined;
      if (typeof projectId === "object") {
        projectSecret = projectId.projectSecret;
        projectId = projectId.projectId;
      }
      providers.push(new InfuraProvider(network, projectId, projectSecret));
    } catch (error) {}
  }
  if (allowService("quicknode")) {
    try {
      let token = options.quicknode;
      providers.push(new QuickNodeProvider(network, token));
    } catch (error) {}
  }
  assert(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
    operation: "getDefaultProvider"
  });
  if (providers.length === 1) {
    return providers[0];
  }
  let quorum = Math.floor(providers.length / 2);
  if (quorum > 2) {
    quorum = 2;
  }
  if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
    quorum = 1;
  }
  if (options && options.quorum) {
    quorum = options.quorum;
  }
  return new FallbackProvider(providers, undefined, { quorum });
}
var Testnets;
var init_default_provider = __esm(() => {
  init_utils();
  init_provider_ankr();
  init_provider_alchemy();
  init_provider_chainstack();
  init_provider_cloudflare();
  init_provider_etherscan();
  init_provider_infura();
  init_provider_quicknode();
  init_provider_fallback();
  init_provider_jsonrpc();
  init_network();
  init_provider_websocket();
  Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
});

// node_modules/ethers/lib.esm/providers/signer-noncemanager.js
var NonceManager;
var init_signer_noncemanager = __esm(() => {
  init_utils();
  init_abstract_signer();
  NonceManager = class NonceManager extends AbstractSigner {
    signer;
    #noncePromise;
    #delta;
    constructor(signer) {
      super(signer.provider);
      defineProperties(this, { signer });
      this.#noncePromise = null;
      this.#delta = 0;
    }
    async getAddress() {
      return this.signer.getAddress();
    }
    connect(provider) {
      return new NonceManager(this.signer.connect(provider));
    }
    async getNonce(blockTag) {
      if (blockTag === "pending") {
        if (this.#noncePromise == null) {
          this.#noncePromise = super.getNonce("pending");
        }
        const delta = this.#delta;
        return await this.#noncePromise + delta;
      }
      return super.getNonce(blockTag);
    }
    increment() {
      this.#delta++;
    }
    reset() {
      this.#delta = 0;
      this.#noncePromise = null;
    }
    async sendTransaction(tx) {
      const noncePromise = this.getNonce("pending");
      this.increment();
      tx = await this.signer.populateTransaction(tx);
      tx.nonce = await noncePromise;
      return await this.signer.sendTransaction(tx);
    }
    signTransaction(tx) {
      return this.signer.signTransaction(tx);
    }
    signMessage(message) {
      return this.signer.signMessage(message);
    }
    signTypedData(domain, types, value) {
      return this.signer.signTypedData(domain, types, value);
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-browser.js
var BrowserProvider;
var init_provider_browser = __esm(() => {
  init_utils();
  init_provider_jsonrpc();
  BrowserProvider = class BrowserProvider extends JsonRpcApiPollingProvider {
    #request;
    #providerInfo;
    constructor(ethereum, network, _options) {
      const options = Object.assign({}, _options != null ? _options : {}, { batchMaxCount: 1 });
      assertArgument(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
      super(network, options);
      this.#providerInfo = null;
      if (_options && _options.providerInfo) {
        this.#providerInfo = _options.providerInfo;
      }
      this.#request = async (method, params) => {
        const payload = { method, params };
        this.emit("debug", { action: "sendEip1193Request", payload });
        try {
          const result = await ethereum.request(payload);
          this.emit("debug", { action: "receiveEip1193Result", result });
          return result;
        } catch (e) {
          const error = new Error(e.message);
          error.code = e.code;
          error.data = e.data;
          error.payload = payload;
          this.emit("debug", { action: "receiveEip1193Error", error });
          throw error;
        }
      };
    }
    get providerInfo() {
      return this.#providerInfo;
    }
    async send(method, params) {
      await this._start();
      return await super.send(method, params);
    }
    async _send(payload) {
      assertArgument(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
      try {
        const result = await this.#request(payload.method, payload.params || []);
        return [{ id: payload.id, result }];
      } catch (e) {
        return [{
          id: payload.id,
          error: { code: e.code, data: e.data, message: e.message }
        }];
      }
    }
    getRpcError(payload, error) {
      error = JSON.parse(JSON.stringify(error));
      switch (error.error.code || -1) {
        case 4001:
          error.error.message = `ethers-user-denied: ${error.error.message}`;
          break;
        case 4200:
          error.error.message = `ethers-unsupported: ${error.error.message}`;
          break;
      }
      return super.getRpcError(payload, error);
    }
    async hasSigner(address) {
      if (address == null) {
        address = 0;
      }
      const accounts = await this.send("eth_accounts", []);
      if (typeof address === "number") {
        return accounts.length > address;
      }
      address = address.toLowerCase();
      return accounts.filter((a) => a.toLowerCase() === address).length !== 0;
    }
    async getSigner(address) {
      if (address == null) {
        address = 0;
      }
      if (!await this.hasSigner(address)) {
        try {
          await this.#request("eth_requestAccounts", []);
        } catch (error) {
          const payload = error.payload;
          throw this.getRpcError(payload, { id: payload.id, error });
        }
      }
      return await super.getSigner(address);
    }
    static async discover(options) {
      if (options == null) {
        options = {};
      }
      if (options.provider) {
        return new BrowserProvider(options.provider);
      }
      const context = options.window ? options.window : typeof window !== "undefined" ? window : null;
      if (context == null) {
        return null;
      }
      const anyProvider = options.anyProvider;
      if (anyProvider && context.ethereum) {
        return new BrowserProvider(context.ethereum);
      }
      if (!(("addEventListener" in context) && ("dispatchEvent" in context) && ("removeEventListener" in context))) {
        return null;
      }
      const timeout = options.timeout ? options.timeout : 300;
      if (timeout === 0) {
        return null;
      }
      return await new Promise((resolve, reject) => {
        let found = [];
        const addProvider = (event) => {
          found.push(event.detail);
          if (anyProvider) {
            finalize();
          }
        };
        const finalize = () => {
          clearTimeout(timer);
          if (found.length) {
            if (options && options.filter) {
              const filtered = options.filter(found.map((i) => Object.assign({}, i.info)));
              if (filtered == null) {
                resolve(null);
              } else if (filtered instanceof BrowserProvider) {
                resolve(filtered);
              } else {
                let match = null;
                if (filtered.uuid) {
                  const matches = found.filter((f2) => filtered.uuid === f2.info.uuid);
                  match = matches[0];
                }
                if (match) {
                  const { provider, info } = match;
                  resolve(new BrowserProvider(provider, undefined, {
                    providerInfo: info
                  }));
                } else {
                  reject(makeError("filter returned unknown info", "UNSUPPORTED_OPERATION", {
                    value: filtered
                  }));
                }
              }
            } else {
              const { provider, info } = found[0];
              resolve(new BrowserProvider(provider, undefined, {
                providerInfo: info
              }));
            }
          } else {
            resolve(null);
          }
          context.removeEventListener("eip6963:announceProvider", addProvider);
        };
        const timer = setTimeout(() => {
          finalize();
        }, timeout);
        context.addEventListener("eip6963:announceProvider", addProvider);
        context.dispatchEvent(new Event("eip6963:requestProvider"));
      });
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-blockscout.js
function getUrl(name) {
  switch (name) {
    case "mainnet":
      return "https://eth.blockscout.com/api/eth-rpc";
    case "sepolia":
      return "https://eth-sepolia.blockscout.com/api/eth-rpc";
    case "holesky":
      return "https://eth-holesky.blockscout.com/api/eth-rpc";
    case "classic":
      return "https://etc.blockscout.com/api/eth-rpc";
    case "arbitrum":
      return "https://arbitrum.blockscout.com/api/eth-rpc";
    case "base":
      return "https://base.blockscout.com/api/eth-rpc";
    case "base-sepolia":
      return "https://base-sepolia.blockscout.com/api/eth-rpc";
    case "matic":
      return "https://polygon.blockscout.com/api/eth-rpc";
    case "optimism":
      return "https://optimism.blockscout.com/api/eth-rpc";
    case "optimism-sepolia":
      return "https://optimism-sepolia.blockscout.com/api/eth-rpc";
    case "xdai":
      return "https://gnosis.blockscout.com/api/eth-rpc";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var BlockscoutProvider;
var init_provider_blockscout = __esm(() => {
  init_utils();
  init_network();
  init_provider_jsonrpc();
  BlockscoutProvider = class BlockscoutProvider extends JsonRpcProvider {
    apiKey;
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      if (apiKey == null) {
        apiKey = null;
      }
      const request = BlockscoutProvider.getRequest(network);
      super(request, network, { staticNetwork: network });
      defineProperties(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new BlockscoutProvider(chainId, this.apiKey);
      } catch (error) {}
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.apiKey === null;
    }
    getRpcRequest(req) {
      const resp = super.getRpcRequest(req);
      if (resp && resp.method === "eth_estimateGas" && resp.args.length == 1) {
        resp.args = resp.args.slice();
        resp.args.push("latest");
      }
      return resp;
    }
    getRpcError(payload, _error) {
      const error = _error ? _error.error : null;
      if (error && error.code === -32015 && !isHexString(error.data || "", true)) {
        const panicCodes = {
          "assert(false)": "01",
          "arithmetic underflow or overflow": "11",
          "division or modulo by zero": "12",
          "out-of-bounds array access; popping on an empty array": "31",
          "out-of-bounds access of an array or bytesN": "32"
        };
        let panicCode = "";
        if (error.message === "VM execution error.") {
          panicCode = panicCodes[error.data] || "";
        } else if (panicCodes[error.message || ""]) {
          panicCode = panicCodes[error.message || ""];
        }
        if (panicCode) {
          error.message += ` (reverted: ${error.data})`;
          error.data = "0x4e487b7100000000000000000000000000000000000000000000000000000000000000" + panicCode;
        }
      } else if (error && error.code === -32000) {
        if (error.message === "wrong transaction nonce") {
          error.message += " (nonce too low)";
        }
      }
      return super.getRpcError(payload, _error);
    }
    static getRequest(network) {
      const request = new FetchRequest(getUrl(network.name));
      request.allowGzip = true;
      return request;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-pocket.js
function getHost6(name) {
  switch (name) {
    case "mainnet":
      return "eth-mainnet.gateway.pokt.network";
    case "goerli":
      return "eth-goerli.gateway.pokt.network";
    case "matic":
      return "poly-mainnet.gateway.pokt.network";
    case "matic-mumbai":
      return "polygon-mumbai-rpc.gateway.pokt.network";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var defaultApplicationId = "62e1ad51b37b8e00394bda3b", PocketProvider;
var init_provider_pocket = __esm(() => {
  init_utils();
  init_community();
  init_network();
  init_provider_jsonrpc();
  PocketProvider = class PocketProvider extends JsonRpcProvider {
    applicationId;
    applicationSecret;
    constructor(_network, applicationId, applicationSecret) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network = Network.from(_network);
      if (applicationId == null) {
        applicationId = defaultApplicationId;
      }
      if (applicationSecret == null) {
        applicationSecret = null;
      }
      const options = { staticNetwork: network };
      const request = PocketProvider.getRequest(network, applicationId, applicationSecret);
      super(request, network, options);
      defineProperties(this, { applicationId, applicationSecret });
    }
    _getProvider(chainId) {
      try {
        return new PocketProvider(chainId, this.applicationId, this.applicationSecret);
      } catch (error) {}
      return super._getProvider(chainId);
    }
    static getRequest(network, applicationId, applicationSecret) {
      if (applicationId == null) {
        applicationId = defaultApplicationId;
      }
      const request = new FetchRequest(`https://${getHost6(network.name)}/v1/lb/${applicationId}`);
      request.allowGzip = true;
      if (applicationSecret) {
        request.setCredentials("", applicationSecret);
      }
      if (applicationId === defaultApplicationId) {
        request.retryFunc = async (request2, response, attempt) => {
          showThrottleMessage("PocketProvider");
          return true;
        };
      }
      return request;
    }
    isCommunityResource() {
      return this.applicationId === defaultApplicationId;
    }
  };
});

// node_modules/ethers/lib.esm/providers/provider-ipcsocket.js
import { connect } from "net";
function splitBuffer(data) {
  const messages = [];
  let lastStart = 0;
  while (true) {
    const nl = data.indexOf(10, lastStart);
    if (nl === -1) {
      break;
    }
    messages.push(data.subarray(lastStart, nl).toString().trim());
    lastStart = nl + 1;
  }
  return { messages, remaining: data.subarray(lastStart) };
}
var IpcSocketProvider;
var init_provider_ipcsocket = __esm(() => {
  init_provider_socket();
  IpcSocketProvider = class IpcSocketProvider extends SocketProvider {
    #socket;
    get socket() {
      return this.#socket;
    }
    constructor(path, network, options) {
      super(network, options);
      this.#socket = connect(path);
      this.socket.on("ready", async () => {
        try {
          await this._start();
        } catch (error) {
          console.log("failed to start IpcSocketProvider", error);
        }
      });
      let response = Buffer.alloc(0);
      this.socket.on("data", (data) => {
        response = Buffer.concat([response, data]);
        const { messages, remaining } = splitBuffer(response);
        messages.forEach((message) => {
          this._processMessage(message);
        });
        response = remaining;
      });
      this.socket.on("end", () => {
        this.emit("close");
        this.socket.destroy();
        this.socket.end();
      });
    }
    destroy() {
      this.socket.destroy();
      this.socket.end();
      super.destroy();
    }
    async _write(message) {
      if (!message.endsWith(`
`)) {
        message += `
`;
      }
      this.socket.write(message);
    }
  };
});

// node_modules/ethers/lib.esm/providers/index.js
var init_providers = __esm(() => {
  init_abstract_provider();
  init_abstract_signer();
  init_community();
  init_default_provider();
  init_ens_resolver();
  init_network();
  init_signer_noncemanager();
  init_plugins_network();
  init_provider();
  init_provider_fallback();
  init_provider_jsonrpc();
  init_provider_browser();
  init_provider_alchemy();
  init_provider_blockscout();
  init_provider_ankr();
  init_provider_cloudflare();
  init_provider_chainstack();
  init_provider_etherscan();
  init_provider_infura();
  init_provider_pocket();
  init_provider_quicknode();
  init_provider_ipcsocket();
  init_provider_socket();
  init_provider_websocket();
  init_provider_socket();
});

// node_modules/ethers/lib.esm/wallet/base-wallet.js
var BaseWallet;
var init_base_wallet = __esm(() => {
  init_address2();
  init_hash();
  init_providers();
  init_transaction2();
  init_utils();
  BaseWallet = class BaseWallet extends AbstractSigner {
    address;
    #signingKey;
    constructor(privateKey, provider) {
      super(provider);
      assertArgument(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
      this.#signingKey = privateKey;
      const address = computeAddress(this.signingKey.publicKey);
      defineProperties(this, { address });
    }
    get signingKey() {
      return this.#signingKey;
    }
    get privateKey() {
      return this.signingKey.privateKey;
    }
    async getAddress() {
      return this.address;
    }
    connect(provider) {
      return new BaseWallet(this.#signingKey, provider);
    }
    async signTransaction(tx) {
      tx = copyRequest(tx);
      const { to, from } = await resolveProperties({
        to: tx.to ? resolveAddress(tx.to, this) : undefined,
        from: tx.from ? resolveAddress(tx.from, this) : undefined
      });
      if (to != null) {
        tx.to = to;
      }
      if (from != null) {
        tx.from = from;
      }
      if (tx.from != null) {
        assertArgument(getAddress(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
        delete tx.from;
      }
      const btx = Transaction.from(tx);
      btx.signature = this.signingKey.sign(btx.unsignedHash);
      return btx.serialized;
    }
    async signMessage(message) {
      return this.signMessageSync(message);
    }
    signMessageSync(message) {
      return this.signingKey.sign(hashMessage(message)).serialized;
    }
    authorizeSync(auth) {
      assertArgument(typeof auth.address === "string", "invalid address for authorizeSync", "auth.address", auth);
      const signature = this.signingKey.sign(hashAuthorization(auth));
      return Object.assign({}, {
        address: getAddress(auth.address),
        nonce: getBigInt(auth.nonce || 0),
        chainId: getBigInt(auth.chainId || 0)
      }, { signature });
    }
    async authorize(auth) {
      auth = Object.assign({}, auth, {
        address: await resolveAddress(auth.address, this)
      });
      return this.authorizeSync(await this.populateAuthorization(auth));
    }
    async signTypedData(domain, types, value) {
      const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
        assert(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
          operation: "resolveName",
          info: { name }
        });
        const address = await this.provider.resolveName(name);
        assert(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
          value: name
        });
        return address;
      });
      return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/decode-owl.js
function unfold(words, sep) {
  let initial = 97;
  return words.reduce((accum, word) => {
    if (word === sep) {
      initial++;
    } else if (word.match(Word)) {
      accum.push(String.fromCharCode(initial) + word);
    } else {
      initial = 97;
      accum.push(word);
    }
    return accum;
  }, []);
}
function decode(data, subs) {
  for (let i = subsChrs.length - 1;i >= 0; i--) {
    data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
  }
  const clumps = [];
  const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
    if (semi) {
      for (let i = parseInt(semi);i >= 0; i--) {
        clumps.push(";");
      }
    } else {
      clumps.push(item.toLowerCase());
    }
    return "";
  });
  if (leftover) {
    throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
  }
  return unfold(unfold(clumps, ";"), ":");
}
function decodeOwl(data) {
  assertArgument(data[0] === "0", "unsupported auwl data", "data", data);
  return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
}
var subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~", Word;
var init_decode_owl = __esm(() => {
  init_utils();
  Word = /^[a-z]*$/i;
});

// node_modules/ethers/lib.esm/wordlists/wordlist.js
class Wordlist {
  locale;
  constructor(locale) {
    defineProperties(this, { locale });
  }
  split(phrase) {
    return phrase.toLowerCase().split(/\s+/g);
  }
  join(words) {
    return words.join(" ");
  }
}
var init_wordlist = __esm(() => {
  init_utils();
});

// node_modules/ethers/lib.esm/wordlists/wordlist-owl.js
var WordlistOwl;
var init_wordlist_owl = __esm(() => {
  init_hash();
  init_utils();
  init_decode_owl();
  init_wordlist();
  WordlistOwl = class WordlistOwl extends Wordlist {
    #data;
    #checksum;
    constructor(locale, data, checksum) {
      super(locale);
      this.#data = data;
      this.#checksum = checksum;
      this.#words = null;
    }
    get _data() {
      return this.#data;
    }
    _decodeWords() {
      return decodeOwl(this.#data);
    }
    #words;
    #loadWords() {
      if (this.#words == null) {
        const words = this._decodeWords();
        const checksum = id(words.join(`
`) + `
`);
        if (checksum !== this.#checksum) {
          throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
        }
        this.#words = words;
      }
      return this.#words;
    }
    getWord(index) {
      const words = this.#loadWords();
      assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
      return words[index];
    }
    getWordIndex(word) {
      return this.#loadWords().indexOf(word);
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-en.js
var words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO", checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60", wordlist = null, LangEn;
var init_lang_en = __esm(() => {
  init_wordlist_owl();
  LangEn = class LangEn extends WordlistOwl {
    constructor() {
      super("en", words, checksum);
    }
    static wordlist() {
      if (wordlist == null) {
        wordlist = new LangEn;
      }
      return wordlist;
    }
  };
});

// node_modules/ethers/lib.esm/wallet/mnemonic.js
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits & 255;
}
function getLowerMask(bits) {
  return (1 << bits) - 1 & 255;
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  assertNormalize("NFKD");
  if (wordlist2 == null) {
    wordlist2 = LangEn.wordlist();
  }
  const words2 = wordlist2.split(mnemonic);
  assertArgument(words2.length % 3 === 0 && words2.length >= 12 && words2.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
  const entropy = new Uint8Array(Math.ceil(11 * words2.length / 8));
  let offset = 0;
  for (let i = 0;i < words2.length; i++) {
    let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
    assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
    for (let bit = 0;bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum2 = getBytes(sha2562(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  assertArgument(checksum2 === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  assertArgument(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
  if (wordlist2 == null) {
    wordlist2 = LangEn.wordlist();
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i = 0;i < entropy.length; i++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum2 = parseInt(sha2562(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum2 >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}

class Mnemonic {
  phrase;
  password;
  wordlist;
  entropy;
  constructor(guard, entropy, phrase, password, wordlist2) {
    if (password == null) {
      password = "";
    }
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    assertPrivate(guard, _guard5, "Mnemonic");
    defineProperties(this, { phrase, password, wordlist: wordlist2, entropy });
  }
  computeSeed() {
    const salt = toUtf8Bytes("mnemonic" + this.password, "NFKD");
    return pbkdf2(toUtf8Bytes(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
  }
  static fromPhrase(phrase, password, wordlist2) {
    const entropy = mnemonicToEntropy(phrase, wordlist2);
    phrase = entropyToMnemonic(getBytes(entropy), wordlist2);
    return new Mnemonic(_guard5, entropy, phrase, password, wordlist2);
  }
  static fromEntropy(_entropy, password, wordlist2) {
    const entropy = getBytes(_entropy, "entropy");
    const phrase = entropyToMnemonic(entropy, wordlist2);
    return new Mnemonic(_guard5, hexlify(entropy), phrase, password, wordlist2);
  }
  static entropyToPhrase(_entropy, wordlist2) {
    const entropy = getBytes(_entropy, "entropy");
    return entropyToMnemonic(entropy, wordlist2);
  }
  static phraseToEntropy(phrase, wordlist2) {
    return mnemonicToEntropy(phrase, wordlist2);
  }
  static isValidMnemonic(phrase, wordlist2) {
    try {
      mnemonicToEntropy(phrase, wordlist2);
      return true;
    } catch (error) {}
    return false;
  }
}
var _guard5;
var init_mnemonic = __esm(() => {
  init_crypto2();
  init_utils();
  init_lang_en();
  _guard5 = {};
});

// node_modules/aes-js/lib.esm/aes.js
function convertToInt32(bytes2) {
  const result = [];
  for (let i = 0;i < bytes2.length; i += 4) {
    result.push(bytes2[i] << 24 | bytes2[i + 1] << 16 | bytes2[i + 2] << 8 | bytes2[i + 3]);
  }
  return result;
}

class AES {
  get key() {
    return __classPrivateFieldGet(this, _AES_key, "f").slice();
  }
  constructor(key) {
    _AES_key.set(this, undefined);
    _AES_Kd.set(this, undefined);
    _AES_Ke.set(this, undefined);
    if (!(this instanceof AES)) {
      throw Error("AES must be instanitated with `new`");
    }
    __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), "f");
    const rounds = numberOfRounds[this.key.length];
    if (rounds == null) {
      throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
    }
    __classPrivateFieldSet(this, _AES_Ke, [], "f");
    __classPrivateFieldSet(this, _AES_Kd, [], "f");
    for (let i = 0;i <= rounds; i++) {
      __classPrivateFieldGet(this, _AES_Ke, "f").push([0, 0, 0, 0]);
      __classPrivateFieldGet(this, _AES_Kd, "f").push([0, 0, 0, 0]);
    }
    const roundKeyCount = (rounds + 1) * 4;
    const KC = this.key.length / 4;
    const tk = convertToInt32(this.key);
    let index;
    for (let i = 0;i < KC; i++) {
      index = i >> 2;
      __classPrivateFieldGet(this, _AES_Ke, "f")[index][i % 4] = tk[i];
      __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
    }
    let rconpointer = 0;
    let t = KC, tt;
    while (t < roundKeyCount) {
      tt = tk[KC - 1];
      tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
      rconpointer += 1;
      if (KC != 8) {
        for (let i2 = 1;i2 < KC; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
      } else {
        for (let i2 = 1;i2 < KC / 2; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
        tt = tk[KC / 2 - 1];
        tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
        for (let i2 = KC / 2 + 1;i2 < KC; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
      }
      let i = 0, r, c;
      while (i < KC && t < roundKeyCount) {
        r = t >> 2;
        c = t % 4;
        __classPrivateFieldGet(this, _AES_Ke, "f")[r][c] = tk[i];
        __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
        t++;
      }
    }
    for (let r = 1;r < rounds; r++) {
      for (let c = 0;c < 4; c++) {
        tt = __classPrivateFieldGet(this, _AES_Kd, "f")[r][c];
        __classPrivateFieldGet(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
      }
    }
  }
  encrypt(plaintext) {
    if (plaintext.length != 16) {
      throw new TypeError("invalid plaintext size (must be 16 bytes)");
    }
    const rounds = __classPrivateFieldGet(this, _AES_Ke, "f").length - 1;
    const a = [0, 0, 0, 0];
    let t = convertToInt32(plaintext);
    for (let i = 0;i < 4; i++) {
      t[i] ^= __classPrivateFieldGet(this, _AES_Ke, "f")[0][i];
    }
    for (let r = 1;r < rounds; r++) {
      for (let i = 0;i < 4; i++) {
        a[i] = T12[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Ke, "f")[r][i];
      }
      t = a.slice();
    }
    const result = new Uint8Array(16);
    let tt = 0;
    for (let i = 0;i < 4; i++) {
      tt = __classPrivateFieldGet(this, _AES_Ke, "f")[rounds][i];
      result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
      result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
      result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
      result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
    }
    return result;
  }
  decrypt(ciphertext) {
    if (ciphertext.length != 16) {
      throw new TypeError("invalid ciphertext size (must be 16 bytes)");
    }
    const rounds = __classPrivateFieldGet(this, _AES_Kd, "f").length - 1;
    const a = [0, 0, 0, 0];
    let t = convertToInt32(ciphertext);
    for (let i = 0;i < 4; i++) {
      t[i] ^= __classPrivateFieldGet(this, _AES_Kd, "f")[0][i];
    }
    for (let r = 1;r < rounds; r++) {
      for (let i = 0;i < 4; i++) {
        a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Kd, "f")[r][i];
      }
      t = a.slice();
    }
    const result = new Uint8Array(16);
    let tt = 0;
    for (let i = 0;i < 4; i++) {
      tt = __classPrivateFieldGet(this, _AES_Kd, "f")[rounds][i];
      result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
      result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
      result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
      result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
    }
    return result;
  }
}
var __classPrivateFieldGet = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}, __classPrivateFieldSet = function(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}, _AES_key, _AES_Kd, _AES_Ke, numberOfRounds, rcon, S, Si, T12, T2, T3, T4, T5, T6, T7, T8, U1, U2, U3, U4;
var init_aes = __esm(() => {
  /*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
  numberOfRounds = { 16: 10, 24: 12, 32: 14 };
  rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
  S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
  Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
  T12 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
  T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
  T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
  T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
  T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
  T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
  T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239000, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
  T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998000, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
  U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
  U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
  U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239000, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
  U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998000, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
  _AES_key = new WeakMap, _AES_Kd = new WeakMap, _AES_Ke = new WeakMap;
});

// node_modules/aes-js/lib.esm/mode.js
class ModeOfOperation {
  constructor(name, key, cls) {
    if (cls && !(this instanceof cls)) {
      throw new Error(`${name} must be instantiated with "new"`);
    }
    Object.defineProperties(this, {
      aes: { enumerable: true, value: new AES(key) },
      name: { enumerable: true, value: name }
    });
  }
}
var init_mode = __esm(() => {
  init_aes();
});

// node_modules/aes-js/lib.esm/mode-cbc.js
var __classPrivateFieldSet2 = function(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}, __classPrivateFieldGet2 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}, _CBC_iv, _CBC_lastBlock, CBC;
var init_mode_cbc = __esm(() => {
  init_mode();
  CBC = class CBC extends ModeOfOperation {
    constructor(key, iv) {
      super("ECC", key, CBC);
      _CBC_iv.set(this, undefined);
      _CBC_lastBlock.set(this, undefined);
      if (iv) {
        if (iv.length % 16) {
          throw new TypeError("invalid iv size (must be 16 bytes)");
        }
        __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
      } else {
        __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
      }
      __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
    }
    get iv() {
      return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
    }
    encrypt(plaintext) {
      if (plaintext.length % 16) {
        throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
      }
      const ciphertext = new Uint8Array(plaintext.length);
      for (let i = 0;i < plaintext.length; i += 16) {
        for (let j = 0;j < 16; j++) {
          __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
        }
        __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
        ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
      }
      return ciphertext;
    }
    decrypt(ciphertext) {
      if (ciphertext.length % 16) {
        throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
      }
      const plaintext = new Uint8Array(ciphertext.length);
      for (let i = 0;i < ciphertext.length; i += 16) {
        const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
        for (let j = 0;j < 16; j++) {
          plaintext[i + j] = block[j] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j];
          __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
        }
      }
      return plaintext;
    }
  };
  _CBC_iv = new WeakMap, _CBC_lastBlock = new WeakMap;
});

// node_modules/aes-js/lib.esm/mode-ctr.js
var __classPrivateFieldSet3 = function(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}, __classPrivateFieldGet3 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}, _CTR_remaining, _CTR_remainingIndex, _CTR_counter, CTR;
var init_mode_ctr = __esm(() => {
  init_mode();
  CTR = class CTR extends ModeOfOperation {
    constructor(key, initialValue) {
      super("CTR", key, CTR);
      _CTR_remaining.set(this, undefined);
      _CTR_remainingIndex.set(this, undefined);
      _CTR_counter.set(this, undefined);
      __classPrivateFieldSet3(this, _CTR_counter, new Uint8Array(16), "f");
      __classPrivateFieldGet3(this, _CTR_counter, "f").fill(0);
      __classPrivateFieldSet3(this, _CTR_remaining, __classPrivateFieldGet3(this, _CTR_counter, "f"), "f");
      __classPrivateFieldSet3(this, _CTR_remainingIndex, 16, "f");
      if (initialValue == null) {
        initialValue = 1;
      }
      if (typeof initialValue === "number") {
        this.setCounterValue(initialValue);
      } else {
        this.setCounterBytes(initialValue);
      }
    }
    get counter() {
      return new Uint8Array(__classPrivateFieldGet3(this, _CTR_counter, "f"));
    }
    setCounterValue(value) {
      if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
        throw new TypeError("invalid counter initial integer value");
      }
      for (let index = 15;index >= 0; --index) {
        __classPrivateFieldGet3(this, _CTR_counter, "f")[index] = value % 256;
        value = Math.floor(value / 256);
      }
    }
    setCounterBytes(value) {
      if (value.length !== 16) {
        throw new TypeError("invalid counter initial Uint8Array value length");
      }
      __classPrivateFieldGet3(this, _CTR_counter, "f").set(value);
    }
    increment() {
      for (let i = 15;i >= 0; i--) {
        if (__classPrivateFieldGet3(this, _CTR_counter, "f")[i] === 255) {
          __classPrivateFieldGet3(this, _CTR_counter, "f")[i] = 0;
        } else {
          __classPrivateFieldGet3(this, _CTR_counter, "f")[i]++;
          break;
        }
      }
    }
    encrypt(plaintext) {
      var _a, _b;
      const crypttext = new Uint8Array(plaintext);
      for (let i = 0;i < crypttext.length; i++) {
        if (__classPrivateFieldGet3(this, _CTR_remainingIndex, "f") === 16) {
          __classPrivateFieldSet3(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet3(this, _CTR_counter, "f")), "f");
          __classPrivateFieldSet3(this, _CTR_remainingIndex, 0, "f");
          this.increment();
        }
        crypttext[i] ^= __classPrivateFieldGet3(this, _CTR_remaining, "f")[__classPrivateFieldSet3(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet3(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
      }
      return crypttext;
    }
    decrypt(ciphertext) {
      return this.encrypt(ciphertext);
    }
  };
  _CTR_remaining = new WeakMap, _CTR_remainingIndex = new WeakMap, _CTR_counter = new WeakMap;
});

// node_modules/aes-js/lib.esm/padding.js
function pkcs7Strip(data) {
  if (data.length < 16) {
    throw new TypeError("PKCS#7 invalid length");
  }
  const padder = data[data.length - 1];
  if (padder > 16) {
    throw new TypeError("PKCS#7 padding byte out of range");
  }
  const length = data.length - padder;
  for (let i = 0;i < padder; i++) {
    if (data[length + i] !== padder) {
      throw new TypeError("PKCS#7 invalid padding byte");
    }
  }
  return new Uint8Array(data.subarray(0, length));
}

// node_modules/aes-js/lib.esm/index.js
var init_lib = __esm(() => {
  init_mode_cbc();
  init_mode_ctr();
});

// node_modules/ethers/lib.esm/wallet/utils.js
function looseArrayify(hexString) {
  if (typeof hexString === "string" && !hexString.startsWith("0x")) {
    hexString = "0x" + hexString;
  }
  return getBytesCopy(hexString);
}
function zpad(value, length) {
  value = String(value);
  while (value.length < length) {
    value = "0" + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, "NFKC");
  }
  return getBytesCopy(password);
}
function spelunk(object2, _path) {
  const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
  assertArgument(match != null, "invalid path", "path", _path);
  const path = match[1];
  const type = match[3];
  const reqd = match[4] === "!";
  let cur = object2;
  for (const comp of path.toLowerCase().split(".")) {
    if (Array.isArray(cur)) {
      if (!comp.match(/^[0-9]+$/)) {
        break;
      }
      cur = cur[parseInt(comp)];
    } else if (typeof cur === "object") {
      let found = null;
      for (const key in cur) {
        if (key.toLowerCase() === comp) {
          found = cur[key];
          break;
        }
      }
      cur = found;
    } else {
      cur = null;
    }
    if (cur == null) {
      break;
    }
  }
  assertArgument(!reqd || cur != null, "missing required value", "path", path);
  if (type && cur != null) {
    if (type === "int") {
      if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
        return parseInt(cur);
      } else if (Number.isSafeInteger(cur)) {
        return cur;
      }
    }
    if (type === "number") {
      if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
        return parseFloat(cur);
      }
    }
    if (type === "data") {
      if (typeof cur === "string") {
        return looseArrayify(cur);
      }
    }
    if (type === "array" && Array.isArray(cur)) {
      return cur;
    }
    if (type === typeof cur) {
      return cur;
    }
    assertArgument(false, `wrong type found for ${type} `, "path", path);
  }
  return cur;
}
var init_utils4 = __esm(() => {
  init_utils();
});

// node_modules/ethers/lib.esm/wallet/json-keystore.js
function isKeystoreJson(json) {
  try {
    const data = JSON.parse(json);
    const version2 = data.version != null ? parseInt(data.version) : 0;
    if (version2 === 3) {
      return true;
    }
  } catch (error) {}
  return false;
}
function decrypt(data, key, ciphertext) {
  const cipher = spelunk(data, "crypto.cipher:string");
  if (cipher === "aes-128-ctr") {
    const iv = spelunk(data, "crypto.cipherparams.iv:data!");
    const aesCtr = new CTR(key, iv);
    return hexlify(aesCtr.decrypt(ciphertext));
  }
  assert(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
    operation: "decrypt"
  });
}
function getAccount(data, _key) {
  const key = getBytes(_key);
  const ciphertext = spelunk(data, "crypto.ciphertext:data!");
  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
  assertArgument(computedMAC === spelunk(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
  const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (!check.startsWith("0x")) {
      check = "0x" + check;
    }
    assertArgument(getAddress(check) === address, "keystore address/privateKey mismatch", "address", data.address);
  }
  const account = { address, privateKey };
  const version2 = spelunk(data, "x-ethers.version:string");
  if (version2 === "0.1") {
    const mnemonicKey = key.slice(32, 64);
    const mnemonicCiphertext = spelunk(data, "x-ethers.mnemonicCiphertext:data!");
    const mnemonicIv = spelunk(data, "x-ethers.mnemonicCounter:data!");
    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
    account.mnemonic = {
      path: spelunk(data, "x-ethers.path:string") || defaultPath,
      locale: spelunk(data, "x-ethers.locale:string") || "en",
      entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
    };
  }
  return account;
}
function getDecryptKdfParams(data) {
  const kdf = spelunk(data, "crypto.kdf:string");
  if (kdf && typeof kdf === "string") {
    if (kdf.toLowerCase() === "scrypt") {
      const salt = spelunk(data, "crypto.kdfparams.salt:data!");
      const N2 = spelunk(data, "crypto.kdfparams.n:int!");
      const r = spelunk(data, "crypto.kdfparams.r:int!");
      const p = spelunk(data, "crypto.kdfparams.p:int!");
      assertArgument(N2 > 0 && (N2 & N2 - 1) === 0, "invalid kdf.N", "kdf.N", N2);
      assertArgument(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
      const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
      assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
      return { name: "scrypt", salt, N: N2, r, p, dkLen: 64 };
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = spelunk(data, "crypto.kdfparams.salt:data!");
      const prf = spelunk(data, "crypto.kdfparams.prf:string!");
      const algorithm = prf.split("-").pop();
      assertArgument(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
      const count = spelunk(data, "crypto.kdfparams.c:int!");
      const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
      assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
      return { name: "pbkdf2", salt, count, dkLen, algorithm };
    }
  }
  assertArgument(false, "unsupported key-derivation function", "kdf", kdf);
}
function decryptKeystoreJsonSync(json, _password) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const params = getDecryptKdfParams(data);
  if (params.name === "pbkdf2") {
    const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
    const key2 = pbkdf2(password, salt2, count, dkLen2, algorithm);
    return getAccount(data, key2);
  }
  assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
  const { salt, N: N2, r, p, dkLen } = params;
  const key = scryptSync(password, salt, N2, r, p, dkLen);
  return getAccount(data, key);
}
function stall3(duration) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, duration);
  });
}
async function decryptKeystoreJson(json, _password, progress) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const params = getDecryptKdfParams(data);
  if (params.name === "pbkdf2") {
    if (progress) {
      progress(0);
      await stall3(0);
    }
    const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
    const key2 = pbkdf2(password, salt2, count, dkLen2, algorithm);
    if (progress) {
      progress(1);
      await stall3(0);
    }
    return getAccount(data, key2);
  }
  assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
  const { salt, N: N2, r, p, dkLen } = params;
  const key = await scrypt2(password, salt, N2, r, p, dkLen, progress);
  return getAccount(data, key);
}
function getEncryptKdfParams(options) {
  const salt = options.salt != null ? getBytes(options.salt, "options.salt") : randomBytes3(32);
  let N2 = 1 << 17, r = 8, p = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N2 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p = options.scrypt.p;
    }
  }
  assertArgument(typeof N2 === "number" && N2 > 0 && Number.isSafeInteger(N2) && (BigInt(N2) & BigInt(N2 - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N2);
  assertArgument(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
  assertArgument(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
  return { name: "scrypt", dkLen: 32, salt, N: N2, r, p };
}
function _encryptKeystore(key, kdf, account, options) {
  const privateKey = getBytes(account.privateKey, "privateKey");
  const iv = options.iv != null ? getBytes(options.iv, "options.iv") : randomBytes3(16);
  assertArgument(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
  const uuidRandom = options.uuid != null ? getBytes(options.uuid, "options.uuid") : randomBytes3(16);
  assertArgument(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
  const derivedKey = key.slice(0, 16);
  const macPrefix = key.slice(16, 32);
  const aesCtr = new CTR(derivedKey, iv);
  const ciphertext = getBytes(aesCtr.encrypt(privateKey));
  const mac = keccak256(concat([macPrefix, ciphertext]));
  const data = {
    address: account.address.substring(2).toLowerCase(),
    id: uuidV4(uuidRandom),
    version: 3,
    Crypto: {
      cipher: "aes-128-ctr",
      cipherparams: {
        iv: hexlify(iv).substring(2)
      },
      ciphertext: hexlify(ciphertext).substring(2),
      kdf: "scrypt",
      kdfparams: {
        salt: hexlify(kdf.salt).substring(2),
        n: kdf.N,
        dklen: 32,
        p: kdf.p,
        r: kdf.r
      },
      mac: mac.substring(2)
    }
  };
  if (account.mnemonic) {
    const client = options.client != null ? options.client : `ethers/${version}`;
    const path = account.mnemonic.path || defaultPath;
    const locale = account.mnemonic.locale || "en";
    const mnemonicKey = key.slice(32, 64);
    const entropy = getBytes(account.mnemonic.entropy, "account.mnemonic.entropy");
    const mnemonicIv = randomBytes3(16);
    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
    const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));
    const now = new Date;
    const timestamp = now.getUTCFullYear() + "-" + zpad(now.getUTCMonth() + 1, 2) + "-" + zpad(now.getUTCDate(), 2) + "T" + zpad(now.getUTCHours(), 2) + "-" + zpad(now.getUTCMinutes(), 2) + "-" + zpad(now.getUTCSeconds(), 2) + ".0Z";
    const gethFilename = "UTC--" + timestamp + "--" + data.address;
    data["x-ethers"] = {
      client,
      gethFilename,
      path,
      locale,
      mnemonicCounter: hexlify(mnemonicIv).substring(2),
      mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
      version: "0.1"
    };
  }
  return JSON.stringify(data);
}
function encryptKeystoreJsonSync(account, password, options) {
  if (options == null) {
    options = {};
  }
  const passwordBytes = getPassword(password);
  const kdf = getEncryptKdfParams(options);
  const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
  return _encryptKeystore(getBytes(key), kdf, account, options);
}
async function encryptKeystoreJson(account, password, options) {
  if (options == null) {
    options = {};
  }
  const passwordBytes = getPassword(password);
  const kdf = getEncryptKdfParams(options);
  const key = await scrypt2(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
  return _encryptKeystore(getBytes(key), kdf, account, options);
}
var defaultPath = "m/44'/60'/0'/0/0";
var init_json_keystore = __esm(() => {
  init_lib();
  init_address2();
  init_crypto2();
  init_transaction2();
  init_utils();
  init_utils4();
});

// node_modules/ethers/lib.esm/wallet/hdwallet.js
function zpad2(value, length) {
  let result = "";
  while (value) {
    result = Nibbles2[value % 16] + result;
    value = Math.trunc(value / 16);
  }
  while (result.length < length * 2) {
    result = "0" + result;
  }
  return "0x" + result;
}
function encodeBase58Check(_value) {
  const value = getBytes(_value);
  const check = dataSlice(sha2562(sha2562(value)), 0, 4);
  const bytes2 = concat([value, check]);
  return encodeBase58(bytes2);
}
function ser_I(index, chainCode, publicKey, privateKey) {
  const data = new Uint8Array(37);
  if (index & HardenedBit) {
    assert(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
      operation: "deriveChild"
    });
    data.set(getBytes(privateKey), 1);
  } else {
    data.set(getBytes(publicKey));
  }
  for (let i = 24;i >= 0; i -= 8) {
    data[33 + (i >> 3)] = index >> 24 - i & 255;
  }
  const I = getBytes(computeHmac("sha512", chainCode, data));
  return { IL: I.slice(0, 32), IR: I.slice(32) };
}
function derivePath(node, path) {
  const components = path.split("/");
  assertArgument(components.length > 0, "invalid path", "path", path);
  if (components[0] === "m") {
    assertArgument(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
    components.shift();
  }
  let result = node;
  for (let i = 0;i < components.length; i++) {
    const component = components[i];
    if (component.match(/^[0-9]+'$/)) {
      const index = parseInt(component.substring(0, component.length - 1));
      assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
      result = result.deriveChild(HardenedBit + index);
    } else if (component.match(/^[0-9]+$/)) {
      const index = parseInt(component);
      assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
      result = result.deriveChild(index);
    } else {
      assertArgument(false, "invalid path component", `path[${i}]`, component);
    }
  }
  return result;
}
function getAccountPath(_index) {
  const index = getNumber(_index, "index");
  assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
  return `m/44'/60'/${index}'/0/0`;
}
function getIndexedAccountPath(_index) {
  const index = getNumber(_index, "index");
  assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
  return `m/44'/60'/0'/0/${index}`;
}
var defaultPath2 = "m/44'/60'/0'/0/0", MasterSecret, HardenedBit = 2147483648, N2, Nibbles2 = "0123456789abcdef", _guard6, HDNodeWallet, HDNodeVoidWallet;
var init_hdwallet = __esm(() => {
  init_crypto2();
  init_providers();
  init_transaction2();
  init_utils();
  init_lang_en();
  init_base_wallet();
  init_mnemonic();
  init_json_keystore();
  MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
  N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  _guard6 = {};
  HDNodeWallet = class HDNodeWallet extends BaseWallet {
    publicKey;
    fingerprint;
    parentFingerprint;
    mnemonic;
    chainCode;
    path;
    index;
    depth;
    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
      super(signingKey, provider);
      assertPrivate(guard, _guard6, "HDNodeWallet");
      defineProperties(this, { publicKey: signingKey.compressedPublicKey });
      const fingerprint = dataSlice(ripemd1602(sha2562(this.publicKey)), 0, 4);
      defineProperties(this, {
        parentFingerprint,
        fingerprint,
        chainCode,
        path,
        index,
        depth
      });
      defineProperties(this, { mnemonic });
    }
    connect(provider) {
      return new HDNodeWallet(_guard6, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
    }
    #account() {
      const account = { address: this.address, privateKey: this.privateKey };
      const m = this.mnemonic;
      if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
        account.mnemonic = {
          path: this.path,
          locale: "en",
          entropy: m.entropy
        };
      }
      return account;
    }
    async encrypt(password, progressCallback) {
      return await encryptKeystoreJson(this.#account(), password, { progressCallback });
    }
    encryptSync(password) {
      return encryptKeystoreJsonSync(this.#account(), password);
    }
    get extendedKey() {
      assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
      return encodeBase58Check(concat([
        "0x0488ADE4",
        zpad2(this.depth, 1),
        this.parentFingerprint,
        zpad2(this.index, 4),
        this.chainCode,
        concat(["0x00", this.privateKey])
      ]));
    }
    hasPath() {
      return this.path != null;
    }
    neuter() {
      return new HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
    }
    deriveChild(_index) {
      const index = getNumber(_index, "index");
      assertArgument(index <= 4294967295, "invalid index", "index", index);
      let path = this.path;
      if (path) {
        path += "/" + (index & ~HardenedBit);
        if (index & HardenedBit) {
          path += "'";
        }
      }
      const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
      const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N2, 32));
      return new HDNodeWallet(_guard6, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
    }
    derivePath(path) {
      return derivePath(this, path);
    }
    static #fromSeed(_seed, mnemonic) {
      assertArgument(isBytesLike(_seed), "invalid seed", "seed", "[REDACTED]");
      const seed = getBytes(_seed, "seed");
      assertArgument(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
      const I = getBytes(computeHmac("sha512", MasterSecret, seed));
      const signingKey = new SigningKey(hexlify(I.slice(0, 32)));
      return new HDNodeWallet(_guard6, signingKey, "0x00000000", hexlify(I.slice(32)), "m", 0, 0, mnemonic, null);
    }
    static fromExtendedKey(extendedKey) {
      const bytes2 = toBeArray(decodeBase58(extendedKey));
      assertArgument(bytes2.length === 82 || encodeBase58Check(bytes2.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
      const depth = bytes2[4];
      const parentFingerprint = hexlify(bytes2.slice(5, 9));
      const index = parseInt(hexlify(bytes2.slice(9, 13)).substring(2), 16);
      const chainCode = hexlify(bytes2.slice(13, 45));
      const key = bytes2.slice(45, 78);
      switch (hexlify(bytes2.slice(0, 4))) {
        case "0x0488b21e":
        case "0x043587cf": {
          const publicKey = hexlify(key);
          return new HDNodeVoidWallet(_guard6, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
        }
        case "0x0488ade4":
        case "0x04358394 ":
          if (key[0] !== 0) {
            break;
          }
          return new HDNodeWallet(_guard6, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
      }
      assertArgument(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
    }
    static createRandom(password, path, wordlist2) {
      if (password == null) {
        password = "";
      }
      if (path == null) {
        path = defaultPath2;
      }
      if (wordlist2 == null) {
        wordlist2 = LangEn.wordlist();
      }
      const mnemonic = Mnemonic.fromEntropy(randomBytes3(16), password, wordlist2);
      return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
    }
    static fromMnemonic(mnemonic, path) {
      if (!path) {
        path = defaultPath2;
      }
      return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
    }
    static fromPhrase(phrase, password, path, wordlist2) {
      if (password == null) {
        password = "";
      }
      if (path == null) {
        path = defaultPath2;
      }
      if (wordlist2 == null) {
        wordlist2 = LangEn.wordlist();
      }
      const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist2);
      return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
    }
    static fromSeed(seed) {
      return HDNodeWallet.#fromSeed(seed, null);
    }
  };
  HDNodeVoidWallet = class HDNodeVoidWallet extends VoidSigner {
    publicKey;
    fingerprint;
    parentFingerprint;
    chainCode;
    path;
    index;
    depth;
    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
      super(address, provider);
      assertPrivate(guard, _guard6, "HDNodeVoidWallet");
      defineProperties(this, { publicKey });
      const fingerprint = dataSlice(ripemd1602(sha2562(publicKey)), 0, 4);
      defineProperties(this, {
        publicKey,
        fingerprint,
        parentFingerprint,
        chainCode,
        path,
        index,
        depth
      });
    }
    connect(provider) {
      return new HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
    }
    get extendedKey() {
      assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
      return encodeBase58Check(concat([
        "0x0488B21E",
        zpad2(this.depth, 1),
        this.parentFingerprint,
        zpad2(this.index, 4),
        this.chainCode,
        this.publicKey
      ]));
    }
    hasPath() {
      return this.path != null;
    }
    deriveChild(_index) {
      const index = getNumber(_index, "index");
      assertArgument(index <= 4294967295, "invalid index", "index", index);
      let path = this.path;
      if (path) {
        path += "/" + (index & ~HardenedBit);
        if (index & HardenedBit) {
          path += "'";
        }
      }
      const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
      const Ki = SigningKey.addPoints(IL, this.publicKey, true);
      const address = computeAddress(Ki);
      return new HDNodeVoidWallet(_guard6, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);
    }
    derivePath(path) {
      return derivePath(this, path);
    }
  };
});

// node_modules/ethers/lib.esm/wallet/json-crowdsale.js
function isCrowdsaleJson(json) {
  try {
    const data = JSON.parse(json);
    if (data.encseed) {
      return true;
    }
  } catch (error) {}
  return false;
}
function decryptCrowdsaleJson(json, _password) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const address = getAddress(spelunk(data, "ethaddr:string!"));
  const encseed = looseArrayify(spelunk(data, "encseed:string!"));
  assertArgument(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
  const key = getBytes(pbkdf2(password, password, 2000, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new CBC(key, iv);
  const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i = 0;i < seed.length; i++) {
    seedHex += String.fromCharCode(seed[i]);
  }
  return { address, privateKey: id(seedHex) };
}
var init_json_crowdsale = __esm(() => {
  init_lib();
  init_address2();
  init_crypto2();
  init_hash();
  init_utils();
  init_utils4();
});

// node_modules/ethers/lib.esm/wallet/wallet.js
function stall4(duration) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, duration);
  });
}
var Wallet;
var init_wallet = __esm(() => {
  init_crypto2();
  init_utils();
  init_base_wallet();
  init_hdwallet();
  init_json_crowdsale();
  init_json_keystore();
  init_mnemonic();
  Wallet = class Wallet extends BaseWallet {
    constructor(key, provider) {
      if (typeof key === "string" && !key.startsWith("0x")) {
        key = "0x" + key;
      }
      let signingKey = typeof key === "string" ? new SigningKey(key) : key;
      super(signingKey, provider);
    }
    connect(provider) {
      return new Wallet(this.signingKey, provider);
    }
    async encrypt(password, progressCallback) {
      const account = { address: this.address, privateKey: this.privateKey };
      return await encryptKeystoreJson(account, password, { progressCallback });
    }
    encryptSync(password) {
      const account = { address: this.address, privateKey: this.privateKey };
      return encryptKeystoreJsonSync(account, password);
    }
    static #fromAccount(account) {
      assertArgument(account, "invalid JSON wallet", "json", "[ REDACTED ]");
      if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
        const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);
        const wallet2 = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
        if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
          return wallet2;
        }
        console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
      }
      const wallet = new Wallet(account.privateKey);
      assertArgument(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
      return wallet;
    }
    static async fromEncryptedJson(json, password, progress) {
      let account = null;
      if (isKeystoreJson(json)) {
        account = await decryptKeystoreJson(json, password, progress);
      } else if (isCrowdsaleJson(json)) {
        if (progress) {
          progress(0);
          await stall4(0);
        }
        account = decryptCrowdsaleJson(json, password);
        if (progress) {
          progress(1);
          await stall4(0);
        }
      }
      return Wallet.#fromAccount(account);
    }
    static fromEncryptedJsonSync(json, password) {
      let account = null;
      if (isKeystoreJson(json)) {
        account = decryptKeystoreJsonSync(json, password);
      } else if (isCrowdsaleJson(json)) {
        account = decryptCrowdsaleJson(json, password);
      } else {
        assertArgument(false, "invalid JSON wallet", "json", "[ REDACTED ]");
      }
      return Wallet.#fromAccount(account);
    }
    static createRandom(provider) {
      const wallet = HDNodeWallet.createRandom();
      if (provider) {
        return wallet.connect(provider);
      }
      return wallet;
    }
    static fromPhrase(phrase, provider) {
      const wallet = HDNodeWallet.fromPhrase(phrase);
      if (provider) {
        return wallet.connect(provider);
      }
      return wallet;
    }
  };
});

// node_modules/ethers/lib.esm/wallet/index.js
var init_wallet2 = __esm(() => {
  init_base_wallet();
  init_hdwallet();
  init_json_crowdsale();
  init_json_keystore();
  init_mnemonic();
  init_wallet();
});

// node_modules/ethers/lib.esm/wordlists/bit-reader.js
function decodeBits(width, data) {
  const maxValue2 = (1 << width) - 1;
  const result = [];
  let accum = 0, bits = 0, flood = 0;
  for (let i = 0;i < data.length; i++) {
    accum = accum << 6 | Base64.indexOf(data[i]);
    bits += 6;
    while (bits >= width) {
      const value = accum >> bits - width;
      accum &= (1 << bits - width) - 1;
      bits -= width;
      if (value === 0) {
        flood += maxValue2;
      } else {
        result.push(value + flood);
        flood = 0;
      }
    }
  }
  return result;
}
var Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";

// node_modules/ethers/lib.esm/wordlists/decode-owla.js
function decodeOwlA(data, accents) {
  let words2 = decodeOwl(data).join(",");
  accents.split(/,/g).forEach((accent) => {
    const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
    assertArgument(match !== null, "internal error parsing accents", "accents", accents);
    let posOffset = 0;
    const positions = decodeBits(parseInt(match[3]), match[4]);
    const charCode = parseInt(match[2]);
    const regex = new RegExp(`([${match[1]}])`, "g");
    words2 = words2.replace(regex, (all, letter) => {
      const rem = --positions[posOffset];
      if (rem === 0) {
        letter = String.fromCharCode(letter.charCodeAt(0), charCode);
        posOffset++;
      }
      return letter;
    });
  });
  return words2.split(",");
}
var init_decode_owla = __esm(() => {
  init_utils();
  init_decode_owl();
});

// node_modules/ethers/lib.esm/wordlists/wordlist-owla.js
var WordlistOwlA;
var init_wordlist_owla = __esm(() => {
  init_wordlist_owl();
  init_decode_owla();
  WordlistOwlA = class WordlistOwlA extends WordlistOwl {
    #accent;
    constructor(locale, data, accent, checksum2) {
      super(locale, data, checksum2);
      this.#accent = accent;
    }
    get _accent() {
      return this.#accent;
    }
    _decodeWords() {
      return decodeOwlA(this._data, this._accent);
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-cz.js
var words2 = "0itatkastcenaovo$taouleraeki&chor*teci%enbalodaeladet'!Chn=0Di#%E%^1Resa2Rese3CeT'#0EjKohol0Pu)%0A&sDul#Ekdo)Ke)Ti#Ul|3}aOgan%0FaltI$@tPi,%TmaTronom0LasL{i#Ol0Tobus4Yl:B#}<CilCul#D!_Ge)GrHnoKterieLa^L{#LkonLon-LvanLzaMbusNkom!R[rR{RmanRokoRvaTer#TohVl&Zal#Zili#Zu#3D&RanSe^StieTonZin#ZmocZ)k3CyklD]Ft-KinyLan%Og,fO]gTvaZon2AhobytAt*/E/aEdu+EskIk!Iz&Ok|Oud Ud2B-BrDl.D~H!(JkotJ|K<ysLe$R>R'?TaUb_U/!U^U+Ur!Xer2A^v#Ambo,An#AtrEp)Ike)KoLohOnzOskevUn{#Usin#Z^Zy2Bl.Bn|})D _D#D'aF{Jar(Kv?LdokLvaN^NkrRzaTikVolZola3D+tL.T'#0Ukot:PartRev&3DrDu+J/JnLaLerLkemLn?N.Nn(N'#NtrumNz<StopisT#2AlupaAp`]Ar aA)E/t!EmieI/otIrurgL`Le[Lub M_Mu,ObotO/olOd[O+,Om=Op Oro[OvRapotRl RtRupTiv(Ud.Utn!V!Vil#V(Y[Y$!Yt 0Bu+Gare)H_&HlaNkotRkusSter&Ta%TrusZin>Z(2O&2KolivUv!4It_N(0Dn(Ke)KrPot0Ak~AlIkRkot2Kli$a:L-oRe[T_Tum1E,1B!a}'#Cib_Fic Fla%KlKr{Mokr!PreseRbyS#T-tiv3Kob,zKt|O^P]mSkSp+jV`]Vo/2AhaOuhoUhopis1Es0BroByt-C@t}ut DnesH+dHo^H,JemJn?Kl`KolaKt<Kum@tLarLevaL.MaM.ntMluv M'Nut P`PisPln PosudPr'odPu$ Raz R(RtSahSl'St!-SudSy)TazT-Tk~Uf!Utn!Voz%Z`uZn!Z<%2Aho)AkAm!ikAv>AzeDolObn(OgerieOzdSn(T Z(2B@}'noD-HaH'#S SnoT(0Oj?Or>2Nam :9O]gOnomie0EktronIpsa0AilIseO%P!ie2Izo^O/aOpejOs2EjEn%K<)Kymo0Ike)0F<ie0Olu%1Eku%KurzePed?P]zeP<tT,kt:C#Jf#Kul)N!ikN)zieRmacieV< Zo+3De,%J{onN#3Al#Gu,ntLozofLtrNan%N)Xa%0Ord1An_IrtOtila2NdSf<T[lT#Ton2Ak%Es#On)2KarNk%3Zi#:LejeRant3N{i#O]g3Lot.2Azu,Ejt2LemLfi$aTi#2AfAmofonAnu+EpIlOgOtes#2Ma:D?DrLaL@#N[NopisRfaRpu&V,n3Bk(J#lJnoJtmanK)rLmaM!omR>R&S]Zky3St<ik2Ad'#AsivkyAvaEd!EnO^v>OhOup(T!Ub.U/o)0AtO)Yz0IsOjivoOut0Bl.Boj}DinyDl!Dno)D|Jn(KejLin#L#LubMo+N [No,%RalR^RizontRkoRliv>RmonRn.RoskopR$voSpo^St.T'(U[UfUp!Us#V<2Ad[An?Av(Az^Bo+kD.D]D(N-Ob#Oma^OtOu^Oz@St#Ub(Yz!2B@(B~D[KotMrS aSto)0Ozd2Bn(D,ntGie&M&Sterik:2Yl#3Ned2O&0Uze0Un a0F-%Fla%KasoOva%Sp-%Tern{Vali^Ve$<Zer%3Onie:Blko})Ho^Kmi+K(L'>N)rRmarkRoSanSnoT#V<Zyk3Din>D+Dn!_HlanKotL@L oMn(NomP?S{erV Zd>Zero3NakNdyNo/Sk,Sto)Trn?Zva3En|1Gurt5R):Bar{B_Bin{}&D{Did]HanJakJu)KaoKtusLam aLhotyLibrLn(Me,MkolivM&Ni[lNoeNt<Pal.P_aP olaP#P+Po)PrPu$aPy[,Ram_Rot#RtonSaTa]gTed,U%UzaVa+cZaj#Ze)Ziv(2EkolivEsi0Dlub@MpRami#3No2A%kAdivoAmApotAsi#AunEcEn[Ep!Es~IdImaIs&Ob*kO#nOpaOubUb'&Us!Uzk(0EnIt!Otr0IhaOt0Al?Ber>B#BlihaBylaC*rH=J@>KosKtejlLapsLe^LizeLoMandoMe)MikMn!aMo,MpasMun aN!N%ptNd?N>NfeseNgresN.NkursN)ktNzervaPan>PieP~Pr'#Rb_R-t<Rmid]RoptevRpusRu&RytoRz{S!>St#T_T+)T*lUk!Up_&Us-Uz]VbojZaZ<oh2Ab?A/Aj.Al|AsopisAv!aEd EjcarEs[Eve)Ik{ItikIzeKav>Me+cMivoOcanOkOni#Op OupaOv#T-Uh`]Up?Ut(Vin#Y/+Yp)Y$alYt2Dlan#FrJn(KlaLaj^Li/L#Lom{Ltu,NaPodivuRtRz<Til0Al aAsin#E$<2No]gS_.Ta,T?T#T'>V`]:B,d<})nDn(IkKom>M_aMpaN'#S?SoStu,Tin#V.3B#CkdyD@Dn?D'#Dv.G@^GieG,%H%Hk(H~KtvarNo/odNtil#P@#Pid]T`]T>TmoTokruhVhartV a%Vobok3B,}ot#DojedDsk(H'.Jav>L-M{#NieN#No+umStop`T.T|5Bi$aDivodGi#GopedKal aK{Mc|P!aPu/RdSosTrU^lUhU#Usk!V>3Tiv(1Cer&CiferMpSkSt,%0I%2RaRi#S.:DamD]Gi$rHagonJ{-J _J< aKakK'?Kr_aL[L.L|Lv?Min#Nd+NkoRn(SakrSkotSopu$T?Tri#Tur aZan>ZivoZl Zur#2Lo[0}anikD a%D'.LasaL*nNtol#TlaTo^TrZe,3G,%H~Hu+K.KrofonL@>Lim{rL(Mi#Nc'&Ni[rNom{Nul(S#StrX|2Ad(HaH'.OkS!Uv 1I/Ohem0BilCn(D_#Dl [HylaKroL-ulaM@t#Nar/aNoklN$rumNt|NzunSazSkytStTiva%T<#Ty#U/aUdr(Zai#Z-Zol2Am<Av@>KevTvolaZ{Zut(0T _1DrcF]nL!MieN?S{Ta%ZeumZi#nt3Sliv>0Da:B*r!}yt!Da%Dbyt-DhozDobroDpisHlasHn!Hodi+H,d Iv aJedn*Ji$oJm=K]n Kon>Krm LevoMaz!Mluv Nom{rOkoOpakO$roP`!PevnoPln P~Pos+dPr(oRod RubyRy/]S` S-!S+poSt!TolikV@-Vr/Vzd<yZv!3Be}!CkyDa+koDb!DuhGa%H{Ho^J@JprveKlidLib(Mil(MocO/o)On#PokojR(RvSmyslS*l`Tv<UronV.Zvyk+3Co)JakKamKdyKlKte,kTro5C+hHav?M.%RaR-S _Sn(UzeVinyVo)Zd,5DaD+G{T Tn(Trie3Mfa:0AlArv AvaDivEcEhn!Ejm=Ez aHajo[Iln?Jasn J-tK]p La$L-Li[LohaLu^NosOh! Oj-OutRaz>R&Ru[RysSahSluhaS)r!UvVazVin VodVyk+Yv!_Z<0AsElEn Hl` Ho)H,&It~0BojByt}odCiz Ebr!Esl!Evzd!EzvaH`%Hod J{JinudKazK*p LivLu#Ml#Oln(P`PisPl=P<Pu$ Pyk!Raz#S*d StupSunTokTudVahaVe)Vol!V,%tZ&k1I&Sajd1LasNiskoRa^Roz Ryz-2ApEn?Li#NoOuzl OvyRasaResRs-RuhUpantUr#Us 0Ejn.Iz|0AkE+)Ez L`.L*v!LuvaYl0Ehdy1Ak|As-E,%I%Il(Is|O,Oz?RavduRoti1B al}e$rGieL?LojT_0A^}~I#IvoLavaLep Ln L' N'aO[Ol Pa+cT@T,haTu^Ty/Voj 0Epl IskOpRh!Rl(RokRubyV<1A~ArEsLivn O%1Id1Do[:}!_Ci@tD*/H<-KtLan^L>LivoLu[Mf+tMls-N@#Ni#N&N|N$voNtof+Pri#Rke)RodieR)Ru#Ry[Se#Siv aSt_#T@tTro&V*kZnehtZ*r-3C#DagogJs-K]LotonNal)Ndr-NzeRiskopRoStr(Tar^T?Tro+jVn.Xeso3Ani$aHaJav?K+KnikL.Ln(Lul#Nze)Pe)S!_Sto+Tev&Vn?V'ar2A%n)Ak!Am@Ane)A$i#At Avid]AzE/Em@oEn)EsEtivoEv_Iv!N NoO/aOd.Om[OutUkYn2Bav Byt}odC Ctiv>D!D%n Deps!Dh+dDiv Dkl`Dman DnikDo[Dpo,D,zD$!aDvodDzimEzieHan#Hnut#H'<HromaHybIn)Ji$#Jm=Kaz K+sKojKrokKu)KynLedneLib-Lk~LohaLynomMaluMi~Ml#MocM$aMys+tNe/!N<#Nur(P`!P_Pis-Pla/Pros Ps!PudR`%R%RodRu/aRyvS` SedSilaSkokSlan>S*d SpoluS)vaSud-SypTahT#nT+skTom-T,vaTupaTvo,U#zUtoUzdroVahaVidlaVlakVozVr/V$!VykVzde/Zd,vZem-Zn!-Z<Zv!2Ac|Ah<yAkti#A+sAot>Ap<-AseAv^IncipKnoObud O%ntoOdejOfeseOh,Oj-tO]m Omi+Onik!Op`OrokOs[OtonOut-OvazS#v#St@Udk(UtV-Voh<y0An>OvodTruh0Actvo0Ber)}DlKav>Kl.Kr+LtMpaNcP@SaSin#St.T|Ty#3Rami^SkT_::C-}otDia%Dn?DonFtGbyKe)K'.M@oMp*/NdeRa/R aS'&StrTo+$Zan%Zid]3Ag|Ak%CeptDakt<Fer@tF+xJnokKlamaK<dKrutKt<Pu)%VizeVmaVolverZerva3Sk|Ziko5Boti#Dokm@H'#K+KokoMan{oP'odPu/aRejsSolStl.Tmi$rTopedTun^Ub@#U/oUpU,V.Vn?Zb<Z/odZd!Zezn!Zhod%Zin#ZjezdZ#zZ]haZmarZp`Zru/ZsahZtokZumZvod5Bri#}`]Kav?Kopis3BaBol'}l(D]P`]T.Z(:Di$aH!KoM>Mizd!Mo)N #Rdin#San#T_ Z[Z@?0Or0H|1B,n#CeseD`]Dim@tD]Hn!Jm=Ke,K)Kun^KvojeM@oNoRvisS` Sho,SkokSl!St,SuvSyp!T[T.Tk!T~Trv!VerZ&m2O^R~0FonLn?R#Rot-RupTua%1AfandrAliskoAnz@AutEptikIcaL`[L@?LoLuzO[O#nOroRip)RzUp.V(Vr&0Abi#Adid]An.A$Avn(Ed|Ep>EvaEz.IbI&Izn?OnOup-OvoU/UhaUn%Up#Za0A,gdE)&Il$voL*vaOgR`RkRt#Ut-Ysl0AdAhaOb0Bo)}aD'#KolP#TvaUbojUc Ud%UhlasUl`Um,kUp,vaUsedUtokUvis{0Al'&As _IsLavOd-Oj@>OluOnz<Orn(Ou$aR/aU$ 1An^AzD%NaN>Ovn!P@StUb1An?Ar(aAti#Av[EhnoEz#OdolaO+kOpaOrnoOup!Ra/ResRh~RomRu&Ud&Upn?VolYk0Bj-tBtropy}arD(KnoNd!N=Rik!aR'.0AhAl$voEtrAt[Az-Is+It-Obo^Odid]Or#Rab2Kav#KotN-N'>P!Pk(R'(S_T(:B+t#Bu+H*nJemnoJfunJgaJ Jn(Kti#Mh+MponNc|N>NkerPe)V@.Z!_3}ni#HdyKut.LefonMno)Nd@%Ni$aN<P])P&PrveRapieRmos#Xtil3}oSkopisTu+k1Ad+cAn.0Ap#Esk!UkotUpa0El1A+)Pin#PolRzoUhaU+c2Ad?Akt<AmpAsaAverzaEf E$Ez<Hav.Hl.O/uOj?Os#Ou[P%P _Pk(Ub>U/l Uhl?UsV!2DyH~H(Nd,Ri$aR&jZemsko0ArohOr[Rd(Rz2GrKev:0Oh(OzeR!R*s-RusYt'&0HoTiv(0Iv 3R` 1Edn!I$ M=0Az!_Lidn Lon Otv Roj 0I%I)Ov 0Yv`]0Av If<maIk~1Ad~L!n Ly~Out!Rav 1AnAz 0Ed~Il|Mrt N`n N=Oud Tl!Tr~0Ah|K!Lum O~Op@>R*s 1Al Oln Oz'#3D,v ElEn.L.N!:GonL/aL*nNaN^lNil#RanRhanyR|1ElkuHod0Ova0DroGe)%J%Lbl*dL{rhL _LmocLry[Nk'Ran^RzeS_#SkrzeSn?SpoduS)Ter.Ver#3B,%}rDeoh,D.D+LaN?S{Tal aZeZ #0Ezd0L`Us0Aj#AkAs>EvoHk(IvN'#Oup!1Uc|Uk0DaDiv(Doz&kD$voJ@skyJ&JskoLantL[L LnoSk'#Zid]Z'&0Ravo1Ab>A%tAhA)Ba}o+kH!StvaTu+0Ad T*p Tup0Ip4Bav Br!}|D!D,Fot H+d!H~Hod H,d Hub Jasn J{Jm=K]p Kon!L-!Maz!Mez Miz{Mys+tNe/!Nik!Nut P`!Pl! P,v Pu$ Raz R'n!Rv!Sl' SokoS)v Su~Syp!Tas Tes!Tr! Vi~Vol!Vrh_Zdob Zn!0AduBud }op D<Du/Dy/!E$upH+demKazLyk!NikOr-P*,TahT-::993Lofon::Br!Byd+t}|DarmoDus F*k!Hlt Hod H,^Hy~J!>J{Ji$ K+p!K*p Lep Mez Mot!Mys+tNe/!Nik!Pl! Poj Ps!Raz S)v Su~Taj Temn Tk~Ujm=Val Ve+tVin Vol!Vrt!Zvon 0Av RusuUd|Yt-1A+#ArmaAtn(IvoOb RojVihYm`]0L@.ManM.Pt!Z`uZdola2At Lt~Lubo#Ot' Ru[0MaMn?0Emn 0Lam!Oum!R!#Umav#0AtoEh#O[OmO$Ozvyk0Ap|ArAt-IjeIz{Ocn Odr!Rzl.Ut|0AkAl(Am@!Ovu0B,z Tav Ub-Ufa+0Lod Omal RavaR( Rud#Rvu1A^An C`]N (NoOv&Y/l Zav(1I/aR! 0B'.Br0Ed~EnkuEs_aOnR!Uk'odYk", checksum2 = "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a", wordlist2 = null, LangCz;
var init_lang_cz = __esm(() => {
  init_wordlist_owl();
  LangCz = class LangCz extends WordlistOwl {
    constructor() {
      super("cz", words2, checksum2);
    }
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangCz;
      }
      return wordlist2;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-es.js
var words3 = "0arertoiotadonoaRteirroenaNonaLsolocoiliaralaorrenadaChoN$n0A>Dom,EjaI!#Oga&O'Or#RazoR*Ue=U<0Ab Adem@Ce<C~Ei)ElgaEn#Ept I&L  NeOg!O<TivoToTrizTu Ud*U!&Us 0Ic#Mit*Opt Or'Ua`Ul#0Reo0Ect Ic~In Irm 0IlIt On@Os#Ot Reg R$UaU&U?aUja0OgoOr+0ReSl 0Ed_zE'Us)1Ac[nAmb_ArmaBaBumCaldeDeaEg_Ej Er%E%F?!GaGo&nIa&I,#Iv$MaMejaMib T TezaTivoToTu[Um'Z 0AbleAn)Apo]ArgoAs B Bi#E'IgoIs%dOrP oPl$0|oC@'C]D D,Em@Gu=Il=ImoIsOt T,aTiguoTojoUalUl Unc$Ad*EjoO1Ag A[#Eti#IoLic O&Or)OyoR,d!Rob Ues%U+1A&A`ArBit+BolBus#|ivoCoD!D?]DuoEaI&IesM.i-esOmaPaP.Reg=RozRugaTeTis%0AA&Al#C,<Egur EoE<rI,#I=Ist*NoOmb+P!oT?]T+Tu#Um*Un#0AjoAqueArEn#EoI>Le%OmoRa!RozUn0DazD$GeLaM,#S,)T^0AlAnceA+EEl]`E`EstruzI.I<2ErU{U'0Af[nArO)Uc Uf_Ul:BaB^|eH@IleJ Lanz/c.LdeMbuN>Nd-oRb(>RnizR+Scu]S#nSu[Tal]T!@T*Tu%UlZ 3BeBid/=S SoSt@3|oEnNgo2An>OqueUsa2ABi`BoCaCi`DaDegaIn//!oLsaMb-{dNi#N}saiRdeRr SqueTeTinVe{Zal2AvoAzoEchaEveIl=In>IsaOcaOmaOnceO)UjaUs>U#2CeoCleE'EyFan{F.HoIt_L#Rbuj(l(+Sc TacaZ.:Bal=BezaBi`B[CaoDav!D,aErFeI{ImanJaJ.LLam Lc$L&Li{dLleLm/^LvoMaMb$Mel=Mi'Mp}c!Nd?Nel-gu+Nic-#N-.ObaOsPazPi%nPo)Pt Puch((b.RcelRe%Rg(i'RneRpe%R+R%SaS>S!oSpaS#rT^ceT_U{lUsaZo3Bol]D!D+Ld/eb_Lo<Lu]M,#Niz-t+Rc(&Rez(oRr R)zaSpedT+2AcalAle>AmpuAnc]ApaAr]I>Is)IvoOqueOzaUle%Up 0Cl.EgoE=EnEr#F[G +M->NeN%P_sR>Rue]SneTaU{d2Am^AnA+AseAveI,)ImaInica2B_Cc~|i'Ci`CoDigoDoF_G!He)JinJoL/ch/eg$Lg Lin/l LmoLum`Mba)M!Mi{Mo&Mpr-deNej}g-oc!Nsej}t PaPi(az.Rba%RchoR&nR.(r!S!SmosS%2AneoAt!E Ec!Ei&EmaIaIm,Ip%IsisOmoOnicaOque%U&Uz2Ad+Ar#At+BoBr*| aEl=En#Er{Es%EvaId Lebr/p/#Mb_Mpl*N-e%O%P.Pul( R$<R<RvaTis:M-z(R&T?3B!B?Ca{C*DoF,saFin*J LfinLga&Li#M^-<N%lP^)RechoR+%Sayu'SeoSf?eSnu&Sti'Sv$TalleT,!U{3AAb=AdemaAman)A`Ar$BujoCt En)E%EzFic?G'Lem/u*N!oRec#Rig*S>Se'Sf[zVaVi'5BleCeL^Ming}N Ra&Rm*R<SSis2Ag.Oga2|aDaE=E'LceOQueR Rez(o:0A'R$0H OUa&r0AdIc~Ific$I#rUc 1Ec#Icaz3EEmp=1Efan)Eg*Em,#Ev IpseI)Ix*Og$Ud*0Bu&It*Oc~Pa)Pe'PleoP_sa0A'C go|ufeC@EmigoE+Fa&F!moGa'Igm/aceOrmeRe&SayoS, T!oTr VaseV$1Oca0Uipo0Izo0Ca]C,aCol Crib*Cu&Enc@F!aFu!zoPa{PejoP@PosaPumaQuiT TeTi=Tufa0ApaEr'Ic-@1Ad*Alu En#It 1Ac#Am,Ce<CusaEn#Ig*Il$Ist*I#P!#Plic P.!T_mo:BricaBu]|a{C?C#rE`J/d/=L<Lt MaM?@Mo<Ra.Rmaci(olRsaSeTigaU`V^X3Br!o|/izORi(ozRt?Rv^Stin3AbleAnzaArB[Cc~|aDeoEb_ElE[Es%Gu[J JoL/e)L@lLt+NNc-g*Ni#Rma2A>Au%EchaOrO%U*UjoU^2B@CaGa%G.L$Lle#N&Rm(+Rtun(z SaTo2Aca<Ag?AnjaAseAudeE*E'EsaIoI#U%2EgoEn)ErzaGaM Nc~Nd(g.R@S?TbolTu+:Ce]FasI%JoL/!i/=Mb- Nch}g-<RajeRzaSoli`St ToV?an3Me=M*NN!}$N)Ran$R,)Rm,S#3Gan)M`s$R Ro2Aci OboOr@2LLfoLo<LpeM(&R?([TaTeoZ 2A{Afi>A'AsaAtisAveIe%Il=IpeIsI#O<rUaUe<UmoUpo2An)ApoArd@Er[IaI'I.I<It [Sa'St :B!B?Bl C!|aD/l Mac(i`ZZa`3B?]B[|oLa&L$Mbr(*Rma'RoeRv*3E=Er+Ga&Gi,eJoM'S#r@5Ci>G Gu!aJaMb_Ng}^Nr((mig('St?Yo5E>ElgaEr%E<EvoI{IrMa'Me&M?deM}d*RacanR#:1O'0EalIomaO=2Lesi/uUal4EgalUs~0Ag,AnIt P P!$P.!Pul<0CapazDiceEr)FielF^meG,$Ic$M,<MuneNa#Sec#S%n)T!esTimoTu*Ut?Vi!'3AIsOn@0L/o):BaliB.M.RabeRdinR[U]Zmin3FeRinga3Ne)5R`d(obaV,Ya5ErgaEvesEzGa&rGoGue)Ic$N>Ngl-$Nt Pit!R S#V,?Zg :7Lo5A]:B$C$C[DoD+nG #GrimaGu`I>M!Mi`Mp --ch-gos%NzaPizRgoRvaStimaTaTexT*U_lV Zo3AlCc~|eC#rErG~Gumb_Ja'Ngu-#NaOnOp &S~TalT[VeY,{3B!%dB+C^D!Di EnzoGaG!oMaMi)M.Mp$NceN&Ne-go)N}t!`Qui&SoS%T!aT$T+2AgaAmaAn#AveEg En Ev Or Ov!Uv@2BoC~CoCu[GicaG+MbrizM}jaTe5|aC*G J}-esPaSt+ToZ:Ce%|oD!aD_Du+Est+F@G@GoIzL{dLe%Ll/oMaMboMutN>N&Nej Ng-iquiNj N}<N%Na`PaQuin(R>Re(f?Rg,Ri&RmolR+nR)sRzoSaSc aSivoT T!@TizTrizXimoY^Z^ca3|aDal]D$Du]J?]J^L,/.M^i-^NsajeN)NuRca&R,gueRi#SS.TaT!To&T+Zc]3E&ElEmb+G/Lag+Lit Ll.M}-!}im}u#OpeR SaS!@S?SmoTadTo5|?aC~DaDe=HoJ LdeL!Li'M,#Mi- c-ed-j-#NoRad(d!Re'R*R+Rs(%lScaStr TivoV!V?Zo5|oD EbleE]Er)Est[G_J!L/e%L%N&Nec(alRoScu=SeoSgoSicaS=:C C~D IpeRanj(izRr SalTalTivoTu[lUseaValVeVi{d3C$Ct G Goc$G+OnRv$ToUt+V V!a3|oDoEb]E#NezNoTi&Vel5Bleza|eMin(i(m()TaTic@Va#Ve]V$5BeCaCleoD?=DoE[EveEzLoM!oTr@:Sis0E<IspoJe#R(!oS!v T,!V$0AA<Ea'H,%HoIoReTavoTub_Ul#Up Urr*0I IoIsea0S)0EnsaEr%Ic$Rec!0Ro1DoR0O1AEa{Fa#IvoLaMoOrVi&0Bligo0DaZa1A>C~E[In On!T TicaUes#1Ac~A&rAlBi%CaD,EjaGa'G@Gul=I,)Ig,Il]OQues%Uga0Ad@Cu+Ez'OT[0O'Ro1EjaU=1I&Ige'0En)0O':C#D_El]Gi`GoIsJ oLabr/>Le%Li&Lm/om/p NNalNi>Nt!-ue=PaPelP?]Que)R Rcel(edR*RoRpa&RqueR[foR)S SeoS~SoS%TaT$Tr@UsaU%VoYa<3A#nCa&C!a|oDalD*G IneL L{'Le/ig+LlejoLoLuc--s N.OnOrPi'Que'R(ch(d!Rez(f?Ri>Rl(mi<R+Rs.aSaScaSimoS%`Ta=T+leoZZu`3C |.EEd[Er`EzaJam/ Lo#Mi,%N}#rNz-aOjoP(a%S Sci`SoS%T.Zca2AcaAnA%AyaAzaEi#E'OmoUmaU[l2B_CoD!D$EmaEs@E%L,Lici/=LvoMa{Me=MoMp-!Rc~R%lSa{Se!SibleS)T,c@T+Zo2A&E>zEgun%Em$EnsaE<Ev$ImoIncipeIs~Iv OaOb Oce<Oduc#OezaOfe<rOg[maOleOmesaOn#Op$OximoUeba2Bli>|!oD^Eb=Er%Es#Lg/*Lm.LpoL<M-#NalNoPaP?(e:99Ed EjaEm Er!E<Ie#ImicaInceIt :Ba'B@BoC~DicalIzMaMp-ch}goPazPi&P#SgoSpaToYoZaZ.3Acc~Ali{dBa'Bo)Ca!Ce%|azoCog!C_oC#Cur<DD.&Duc*FlejoF^maF[nFug$Ga=G*G]G_<H,I'IrJ/a#LevoLieveLle'LojM Med$M}>rNd*N%P #Pet*Po<Pt?SSca)Si`Spe#S#Sum,T*oT^'T[#Un*VesVis%YZ 3CoEgoEn{EsgoFaGi&G^Nc.N.OQuezaSaTmoToZo5BleCeCi D DeoD?]ErJizoJoM!oMp!NN>N{PaP!oSaScaSt+T 5BiB^DoE{G*I&In/e%LoMboM^Ptu[TaTi`:Ba&B!B$BleC GazG[&L/&L!oL*Lm.L.Ls/#LudLv Mb-c~Ndi-e Ng_Ni{dN}#PoQueRdin()nSt_TanU`Xof.3Cc~CoC_#C%DGu*IsL=LvaMa`M?l-d-<rNalN^P  P@Qui(RieRm.Rv*S,%S~TaT,%V!oXoX#3D[Es%E)G=G'Lab/b L,c$L]Mbo=M$R,aS)maT$Tu 5B_C$D$LLap/{&Le{dLi&Lt Luc~Mbr-de}i&No+NrisaPaPl P^)R&Rp_s()oS)nTa'5AveB*Ce<D^Eg[E=E'Er)Fr*Je#L%nM P! Pl*P.!P_moRR>Re'Rg*S#T?:Ba>BiqueB]BuCoC#JoL L>L,#Ll/.Ma'Mb^Ng}quePaPe)P@P.Qu?l(deRe(if(je%RotR+R%TuajeU+ZaZ.3At+|oC]CnicaJa&J!Ji&L/efo'MaM^Mp=NazNd!N!NisN<Ori(api(>Rmi'Rnur(+rSisSo+StigoT!aX#Z3B$Bu+nEmpoEn{Er[E<G_J!/deMb_Mi&M}%OPi>PoR(.TanT!eTu=Za5Al]B?=C Ci'DoG/&M N}#P PeQueRaxR!oRm,%RneoRoRpe&R_R<RtugaSS>S!Xi>2AbajoAc#rA!Afi>AgoAjeAmoAnceA#AumaAz EbolEguaEin%EnEp EsIbuIgoIpaIs)IunfoOfeoOmpaOn>OpaO)OzoU>Ue'Ufa2B!@BoEr#MbaM^NelNic(bin(ismoR'T^:0Ic 9C!a0B[l0I{dIrIv!<OT A3Ba'BeG,)Na0ArU $0IlOp@1A:CaC$Cu`G GoI`J?l/eLi&LleL^Lvu]Mp*oR(i R.So3Ci'C#rHicu=In)JezL/!oLozN-c!Nd-e'Ng N*N%NusRRa'RboRdeRed(j(<Rt!3AAjeBr C$CtimaDaDeoDr$EjoErnesG^LLl-ag_N}e&OlinRalRgoRtudS^Sp!aS%Tami`U&VazV!oV*Vo5LcanLum,Lv!RazT ToZ5E=Lg :::C!Te3GuaM('So9DoGaGur:F*}jaPa#Rza93N(+5MoR&", accents = "aeiou7695@@BZWWavwUJkO@Y-Kn))YEGq#E@O)cI@#ZkMHv$e*))M!!)D**$GW!oKm*Acoh^k&It-pi^SYW)$^n!G)bO!Wkzam(jS#X)Og*^l^RW!bQ#QygBKXfzE))hti!Qm)Cng%%c)mJiI*HJWbmYniCLwNdYyY%WKO^bnT$PuGOr!IvHu&G(GKbtBuhiW&!eO@XMeoYQeCa#!MrTJCq!OW&CHG(WCcW%%)$rfrIegu$)w!G)JGmWWw)MnD%SXXWIT^LWAZuVWB^W)eTL^x&$WGHW(nKWEMA)#$F$x$Waekqs,n7715)W*HM-$WAcCiu(a))VCZ)GG%(*CWWdW%$D!UCO$M", checksum3 = "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300", wordlist3 = null, LangEs;
var init_lang_es = __esm(() => {
  init_wordlist_owla();
  LangEs = class LangEs extends WordlistOwlA {
    constructor() {
      super("es", words3, accents, checksum3);
    }
    static wordlist() {
      if (wordlist3 == null) {
        wordlist3 = new LangEs;
      }
      return wordlist3;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-fr.js
var words4 = "0erreleontiteurinueiriet cegeanseali medenel q)eniluxaus ch0Ais}And$Diqu E`#Ol*Ord Ou%rOy RasifReuv Ri,Rog RuptS_-SoluS'@UsifYss=0A@m+AjouAr+nCab]Cep,Clam Cola@Cro~eCu}ErbeHatHe,Idu]I Omp&Qu *R$y?Te'TifT)l0Ep&EquatHesifJec%fJug Mett!M* Op,Or Ouc*Res<RoitUl&V be0R R$ef0Fai!Fec,Fi~eF!{Fub]0Ac Enc I#I,Raf Reab#Ru?1D Gu`#L>Mab#S/-0Ou,Us,1Arm Chim+Er&Geb!G)I_ I?ntLeg Lia.Lou Lum O'd*PagaTes<Veo#0A&'BiguB!Enag Ertu?Id$Ir=Orc O'Ovib#Phib+P#'Us/t0Aly<Apho!Ar~+Atom+C+nE/%rG#Gois<Gu#{Im=Nex N$-N)lOd(Om=+Ony?Orm=T_[Tido&X+{1Ai}Eri%fL/*Olog+Pa!`Pe]Por,Puy 0UariumUeduc0Bit!Bus&De'Doi<G_tLequ(Matu!Me?ntMoi!Mu!P_,Ra~ Riv Ro}S_icT +lTic#0PectPh=&P* S|tS v*S+t&Soc>S' TicotT!Tu-0El>O?RiumRo-Ta^T_%fT* Trap 0Ba(eB .Da-Dib#G' Ro!Tom[Tru~e0A]Anc Ari-En*Er<Eug#Ia&'I@I$I}O(eOu R`1I=Io?:D.Fou Ga.G)t&Igna@L/c Lc$Le(eLisa.Mb(Ncai!Nda.Nl+)Nn>eNqu>Rb>R`R$R^Rra.Ss(S%$Ta`#Te|T,+Udr>Vard 3Let&L>Lo&Nefi-R-|Rg Rl(eRmudaSa-Sog[Ta`Ur!3B $Cyc#Du#JouL/L(g)LlardNai!Olog+Ops+OtypeScuitS$Sto'iTu?Zar!2AfardAg)An~*Ess/tInd OndOqu Ous$2BardB(eI!I}Li@Nb$Nd*Nhe'Nif>NusRdu!R[T&Uc#Ue{Ug+Ul$Uqu(Ur<Usso#U%^Xe'2An~eAs>AveEbisE~eEuva.Ico]Iga@Ill/tIo~eI^O~u!Od Onz Ous<Oye'U?Us^Ut=Uy/t2Ff#Iss$L#%nRe|R(S% T( To*Vab#Vet&:B/$B(eChet&De|D!Fe(eIllouIss$Lcu]Lep(Lib!Lm Lomn+Lvai!Mara@M aMi$Mpag[N=Net$N$N%[NularPab#Por=Pri-Psu#P,Pu~eRab(eRb$eRes}RibouRna.Rot&R!|Rt$Sca@S>S^Ssu!U}U%$V=>V [Viar3D`#Intu!Les&Llu#Ndr>Ns' Ntr=Rc#Rebr=Ri<Rn Rve|S}2Agr(Ai<A#'Amb!An-Apit!Arb$As<'At$Auss$Av* Emi<En`#Equ>Er~ Ev=I_Iff!Ign$Im eIotLoru!OcolatOis*O<O)t&Ro?U&0Ga!Gog[M_,NemaNtr Rcu]R R^T [Toy_Tr$V`2A*$A?'Aqu As<Av>I_tIgn ImatIva.O~eOna.Opor&2B=tBraCas<Co% D Dif>Ff!Gn Hesi$Iff Inc L eLibriLl(eLma,L$elMbatMed+Mm/@MpactNc tNdui!Nf>N.]Nno,Ns$[NtactNvexePa(P+Ra`Rbe|Rda.Rni~eRpusR!ctR&.Smi^Stu?T$U@Upu!Ura.U&|Uvr*Yo&2AbeA(&Ava&Ay$Eatu!Edi,E?{Eu}Evet&Ib]I Ist=I,eOi!Oqu Ota#Uci=UelYp,2Bi^E`l*Il]eIs(eIv!Lm( L%v Mu]Pi@Ra%fR<'3Anu!C#L(d!Ni^:Ign M>Ng N<'Uph(3Batt!Bi,Bord Brid But/tC= Cemb!Ch* Cid Clar Cor Cri!Cup]Da#Duc%fEs<F_sifFi]Fray Gag Givr Glu%rGraf Jeun Li-Log M/d Me' Mol*Ni~ Nou N&l#Nud PartP_}Pha}Plac Po}R/g Rob Sast!S-n&S tSign Sobe*Ss( Str>Ta~ Tes,To' T!s<V/c V_*V( Vo*3Ab#Alog)Am/tC,Ff  G  Git=G[Lu M/~eM(u Oxy@Rec%fRig Scu,Spo}Ssip St/-V %rVi}5Ci#C&'G?IgtMa(eMici#Mp,Na&'Nj$Nn Pam(eRto*Ru!Sa.Se'Ss>Ta%$U/>Ub#U-'U,Y_2Ag$Ap Es}Ibb]Oitu!2P +P#xeRab#Rc*3Nas%e:0Lou*0Ar,HarpeHel#La* Lip<Lo!Lu<O#Onom+Or-Ou,Ra}Rem Riva(RouU?U!u`0If>Uqu 1Fac Fec%fFig+FortFray Fusi$0Ali}Ar 2Ec,1Abor Arg*Ectr$Eg/tEph/tEveIgib#I%s?O.Ucid Ud 0B=]Bell*Bry$Er|@Issi$M_ O%$Ouvo*P e'Ploy Por,Pri<Ulsi$0Cadr Ch eClaveCo~eDigu Dos}DroitDui!Erg+F/-F m Fou*Gag G(Glob Ig?Jamb JeuLev NemiNuye{Ri~*Roba.Seig[Tas}T_d!T>To' Trav Um  Vah*Viab#Voy Zy?0L+n0Aiss*Arg[At/tAu#Ic +I@m+I Ilog)I[Iso@ItapheO^ReuveRouv Uis/t0U !Uipe0Ig Osi$Re'Up%$0C=>Pad$Pe-P+g#Po*PritQuiv Say S_-S+uSor Ti?TomacTra@0Ag eA]An~eA%^E(d!Endo*Er[lH/olHi^Hn+Ir Off Oi#Onn/tO'd*R/.RoitU@0Phor+0Alu Asi$Enta`I@n-I,Olu%fOqu 1ActAg  Auc Cel]Cit/tClusifCu<Ecu,Emp#Erc H= Hor,I.n-I]Is,O%^Ped>Plor Po}Prim QuisT_sifTrai!Ul,:B#Bu#{Cet&Ci#Ctu!Ibl*Lai<Me{M`#R-'RfeluR(eRou~eSc( T=Tig)Uc$U%fVe'Vori3Bri#C$d D  L(M?M'Ndo*Od=Rm Ro-Rve'S%v=U`#Ut!Vr>3AscoCe]C%fDe#Gu!Latu!Leta.L>eL#ulLm LouLtr N/c N*O#R?Ssu!X 2A* Am?As^At&'E|E~eE'Exi$Oc$O!Uctu Ui@Uvi=2L+Nd +Ngib#Nta(eRc Rg $Rmu]Rtu[Ssi#Ud!Ug eU`]Ulu!Urmi2Agi#Ai<An~*App Aye'Ega&E( El$Em*E[s+E!Iab#Ic%$Iss$Ivo#OidOma.Ont=Ot,Uit2Gi%fI&Re'R+{R%fSi$T':Gn Lax+L +Mbad R/%rRd+nRn*Rrig)Zel#Z$3AntLa%[Lu#Ndar?N =N+NouN%lOlog+O?t!R/iumR?St)lY}3B>C]RafeV!2A-AiveIs}ObeOi!Or+{2Lfe'M?Nf]R.R`#Udr$Uff!UlotUp`#Urm/dUt&2Ad)lAffi%A(eAndApp(AtuitAv*EnatIffu!Il]Imp Ogn Ond Ot&OupeUg U% Uy e2EpardErr>I@Im|veIta!Sta%f3Mnas&Rostat:Bitu@Cho*L&Me|NgarN[t$RicotRm$+Rp$Sard3LiumMato?RbeRiss$Rm(eR$Si,U!{3B n BouLar/tStoi!V 5MardMma.Mo.[N['Nor N&{R@Riz$Rlo.Rm$eRrib#U#{Us<5BlotI#{Ma(Mb#Mi@Mo'R]3Dro?lG+[M[Pno<:2Yl#2Nor U/e4Lici&Lusi$0A.Bib I,M_<Mobi#Muab#PactP i=Plor Po}Prim Pu,0Carn C_d+Ci@ntCl( Colo!Dex Di-Duc%fEditEp%eExactF(iFlig Form Fusi$G  H= Hib Jec,Ju!No-ntOcu]Ond Scri!Sec&Sig[Soli&Sp* S%nctSul,TactT_<Ti?Trig)Tui%fU%#Vasi$V_,Vi,Voqu 3Oni^Rad>ReelRi,0O]2Oi!Res<:GuarIll*MbeNv>Rd(Ug U[Velot3Tab#T$UdiU[s<9Ind!N~ Ng]Ue'UissifUrn=Vi=Y|Ye{5Bi]Ge?ntNiorP$Ris&S%-Te{V_i#:Yak7M$oOs^:BelBi=Bo' C  Cto<Gu[I[Is}I% Mbe|Mel#MpeN-'Nga.N,[P(R.'R?Ur>VaboVo*3Ctu!G=G Gu?SsiveTt!V>Xi^Zard3As<B  B!C_-Cor[E.Ev!Gatu!Go,G)M Mi&M$a@Mpi@Neai!NgotOn-|Qui@S>eS,ThiumTi.Ttor=V!'5Gi^Inta(Is*MbricT +U UrdUt!UveY=5B+Ci@Cra%fE'Gub!Is/tM>eNai!NdiR$T,X){:Ch(eGas(G_taGi^Ig!Ill$In%_Ir+Is$Jor Lax Lefi-Lhe'Li-L#t&MmouthNda,Niab#Nqu/tN&|N)lRath$Rb!R~/dRdiRi%?R^'Rr$R&]Scot&SsifT +lT>eTra^Udi!Ussa@UveXim=3Ch/tC$nuDa`#Dec(Di,Du<Il#'L/.Lod+Mb!Moi!Nac N Nh*Ns$.NtorRc!diRi&R#Ssag Su!T=Teo!Tho@T>Ub#3Au]CrobeEt&Gn$Gr L+uLli$Mi^N-N =Nim=Nor Nu&Rac#Roi,Ssi#X&5Bi#D [El#{Ndi=Ni&'Nna+Not$eNst!Ntag[Nu?ntQ)'R-|Rsu!R% Te'TifU~eUf#Ul(Uss$Ut$Uv/t5L%p#Ni%$Ra`#Re[Rmu!Sc#SeumSic+nTa%$T T)l3Ria@R%l#S,eThi^:Ge'PpeRquoisRr Ta%$Ti$Tu!Ufra.U%^Vi!3Bu#{CtarFas&Ga%$Glig Goc>I.Rve{Ttoy Ur$eUtr$Veu3CheCkelTra&Ve|5B#CifCt'[Ir-'I<t&Ma@Mb!{Mm Rma%fTab#Tif>Toi!Urr*Uve|Va&'Vemb!Vi-5A.Anc I!Isib#M oP%=Q)Tri%f:0E*Jec%fLig Sc'S v Stac#T_*T' 0Casi$Cup E/Tob!Troy Tup]Ulai!0E'Or/t1F_}Fic>Fr*0Ive1Se|S`l$2Fac%fIv>0Bra.Ett!0Ct){Du]E!{Iri^1A#A^Er Ini$PortunPrim T Ti^1A.{An.Bi&D$n E`#G/eG)`Ifi-Ne?ntQ)T+0C`]Mo<Satu!0Ar+0Rag/Rs$T`Trag Vra.0A%$1Y@Y.[1O[:Isib#La-Lma!sLo'@Lp Na~eNdaNgol(Niqu N[|NoramaNt=$PayeP>Po,PyrusRadoxeR-l#Res<Rfum R]Ro#Rra(R<m Rtag Ru!Rv_*Ssi$S&^T [lT+n-Tr$V`l$Voi}Y Ysa.3Ig[Int!La.Lic/L#Lou<Lu~eNdu#Netr Nib#NsifN'+Pi&PlumRdrixRfor Rio@Rmu,Rp#xeRs`R&S Ta#TitTr*Up#2Ara$Ob+O^Ot$Ra<Ysi^0AnoCt'=E-Er!Euv!Lo&N-|Pet&Qu Rog)Sc(eSt$Vo,XelZza2AcardAf$dAis*An A^Astr$A&|E' ExusIa.OmbOng U+Uma.2Chet&Es+E&In&Ir>Iss$Iv!Lai!Lic>L#nLyg$eMma@Mp>Nct)lNd  NeyR%^Si%$S<d Stu!Tag Te|Ti$U-Ula(Um$Urp!Uss(Uvo*2A*+A%^Ec+{Edi!EfixeElu@EnomE<n-E&x&Evo*Imi%fIn-Is$Iv Ob#?O-d Odi.Of$dOg!sO+Oje,Olog)O?n Op!Osp eO&g O)s<Ov beU@n-U[|0Y~o<1BlicC $I}LpeLsarNai<Ni%fPit!Rif>Zz#3Rami@:99AsarE!l#Es%$Ietu@It,O%_t:C(eC$,D+{G$d(I@'Is(L_%rLl$.Mas}Pi@Sa.Tis}Vag V(Y$n 3Ac%fAg*Ali}Anim Cevo*Ci,Clam Col,Cru,Cu]Cyc]Dig Dou,Fai!F#xeForm Fra(Fu.G=+nGi$Gla.Gul>I, Je,Jou La%fLev L+fMar^Me@Mi<M$,Mpl*Mu NardNfortNif]N$c Ntr NvoiPl>Por,Pri<P%#Qu(S veS(e{Soud!SpectS,SultatTabl*T_*Ticu#Tomb Trac Uni$Uss*V/~eViv!Vol&Vulsif3Ches<De|E'Gi@Go]Nc Pos,Sib#S^T)lV=V>e5Che{M/-Mp!N-Nd(Se|S>Ta%fTorTu#U.U`#U#|U%[Y|?5B/BisCheEl#G){In Is<|S S%^3Th?:B]Bo,B!Co~eFariGes<Is*La@LiveL$Lu MediNc%$Ngl>Rcas?Rd(eT' Ug!nuUm$U,Uva.V/tV$n 1AlpelAnda#E]atEnarioEpt!HemaI_-Ind O!Ru%nUlp,1An-Cab#Ch Cou C!,Da%fDui!Ig['Jo'Lec%fMa(eMb]M_-M(=Na&'Nsib#N&n-Par Q)n-Re(R.ntR+{Rru!RumRvi-Sa?V*Vra.Xtup#3D =Ec#Eg Ff]G#Gn=L_-LiciumMp#Nc eNist!Ph$RopSmi^Tu 1I 3Ci=C#DiumIg[{LdatLe`Litu@Lub#Mb!M?`Mno]N@N.'N[t&No!Rc>R%rS+T%<Uc+{Udu!Uff#U#v UpapeUr-U%r Uv_*0Ac+{A%=Eci=H eIr=3Ab#A%$ErnumImulusIpu]RictUd+{Upe'Ylis&0Bli?BstratB%lBv_*C-sC!FfixeGg  Ive'Lfa&P bePpl>Rfa-Rica&R?n Rpri<Rs|tRv+Spect3LlabeMbo#Metr+Nap<NtaxeS&?:BacBl>C%#Il]L_tLism/L$n Mbo'Mi}Ngib#PisQu( Rd RifR%[S<TamiToua.UpeU!|X 3Mo(Mpo!lNa`#Nd!Ne'N*Nsi$Rm( R[Rrib#T(eX&2E?Eor+Erap+Orax0BiaE@Mi@Reli!Ro*SsuT/eT!Tub 5Bogg/L /tMa&Ni^N[|P$y?R~eRd!Rna@Rp`#R!ntR<Rt)TemU~ Urna.Us}X(e2Ac%$AficAgi^Ah*A(An~ Ava`Ef#Emp EsorEu`Ia.Ibun=Ico,Ilog+IompheIp]It' Ivi=Omb$eOncOpic=Oupe|2I#LipeMul&N[lRb(eTe'Toy Y|3Mp/Ph$Pi^R/:0Ues^9Ti?Tras$1Ani?If>I$I^Itai!Iv s3AniumBa(Tic/t0A.I[UelU!0I#Op+:Car?Cc(Gab$dG)Ill/tInc!Is<|Lab#Li<Ll$LveMpi!N`#Pe'R>Se{Ss=S&3C&'Det&Get=Hicu#InardLo-Nd!diN  Ng Ni?{Ntou<Rdu!R(Rn*RrouR}RtuSt$T /Tus&X/tX 3AducAn@Ctoi!D/.DeoG[t&G)'La(Lla.Naig!Ol$P eRe?ntRtuo<RusSa.Se'Si$S^{S)lT=Tes<Tico#Tr(eVa-Vipa!5Ca%$Gu I#Is(Itu!La`#Lc/L%g Lu?Ra-R&xT Ulo*Ya.Yel#:G$:3N$:Cht:3B!NithS&9Olog+", accents2 = "e7693&)U*o&)Ry^)*)W))))#X^))))@@)#Wf)m%)#!))AG)&IIAQIIIBIIHJNAgBIILIDJGo)))HIQIIIIA(IGgJHH(BIIxX#)Ou)@*IAAPIIIJHQJ)&QIQPYI(HYAQC%)!))QHJJ@)#)^f*^AXCJ))$%CP))%&m)u)@e^A#G#))W@!(IKK%!(I%))O@QA))@GG#e))))WHJIWh))my@IIBT^)!)HAYGETHI*))!QnUDG)))nBoKAC*HwyQh))$&)G&)UGO)G)))(BX#v**)%O,e7686)I))@)&)gdMP()))ud)p#L))I^FIHYdWG))D@DFV)QA)o%MyTh%*)Z)%)n(XANc^R)YS", checksum4 = "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045", wordlist4 = null, LangFr;
var init_lang_fr = __esm(() => {
  init_wordlist_owla();
  LangFr = class LangFr extends WordlistOwlA {
    constructor() {
      super("fr", words4, accents2, checksum4);
    }
    static wordlist() {
      if (wordlist4 == null) {
        wordlist4 = new LangFr;
      }
      return wordlist4;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-ja.js
function hex(word) {
  return hexlify(toUtf8Bytes(word));
}
function toString2(data2) {
  return toUtf8String(new Uint8Array(data2));
}
function loadWords() {
  if (_wordlist !== null) {
    return _wordlist;
  }
  const wordlist5 = [];
  const transform = {};
  transform[toString2([227, 130, 154])] = false;
  transform[toString2([227, 130, 153])] = false;
  transform[toString2([227, 130, 133])] = toString2([227, 130, 134]);
  transform[toString2([227, 129, 163])] = toString2([227, 129, 164]);
  transform[toString2([227, 130, 131])] = toString2([227, 130, 132]);
  transform[toString2([227, 130, 135])] = toString2([227, 130, 136]);
  function normalize(word) {
    let result = "";
    for (let i = 0;i < word.length; i++) {
      let kana = word[i];
      const target = transform[kana];
      if (target === false) {
        continue;
      }
      if (target) {
        kana = target;
      }
      result += kana;
    }
    return result;
  }
  function sortJapanese(a, b2) {
    a = normalize(a);
    b2 = normalize(b2);
    if (a < b2) {
      return -1;
    }
    if (a > b2) {
      return 1;
    }
    return 0;
  }
  for (let length = 3;length <= 9; length++) {
    const d = data[length - 3];
    for (let offset = 0;offset < d.length; offset += length) {
      const word = [];
      for (let i = 0;i < length; i++) {
        const k = mapping.indexOf(d[offset + i]);
        word.push(227);
        word.push(k & 64 ? 130 : 129);
        word.push((k & 63) + 128);
      }
      wordlist5.push(toString2(word));
    }
  }
  wordlist5.sort(sortJapanese);
  if (hex(wordlist5[442]) === KiYoKu && hex(wordlist5[443]) === KyoKu) {
    const tmp = wordlist5[442];
    wordlist5[442] = wordlist5[443];
    wordlist5[443] = tmp;
  }
  const checksum5 = id(wordlist5.join(`
`) + `
`);
  if (checksum5 !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
    throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
  }
  _wordlist = wordlist5;
  return wordlist5;
}
var data, mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt", _wordlist = null, KiYoKu = "0xe3818de38284e3818f", KyoKu = "0xe3818de38283e3818f", wordlist5 = null, LangJa;
var init_lang_ja = __esm(() => {
  init_hash();
  init_utils();
  init_wordlist();
  data = [
    "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
    "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
    "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
    "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
    "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
    "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
    "IJBEJqXZJ"
  ];
  LangJa = class LangJa extends Wordlist {
    constructor() {
      super("ja");
    }
    getWord(index) {
      const words5 = loadWords();
      assertArgument(index >= 0 && index < words5.length, `invalid word index: ${index}`, "index", index);
      return words5[index];
    }
    getWordIndex(word) {
      return loadWords().indexOf(word);
    }
    split(phrase) {
      return phrase.split(/(?:\u3000| )+/g);
    }
    join(words5) {
      return words5.join("\u3000");
    }
    static wordlist() {
      if (wordlist5 == null) {
        wordlist5 = new LangJa;
      }
      return wordlist5;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-ko.js
function getHangul(code) {
  if (code >= 40) {
    code = code + 168 - 40;
  } else if (code >= 19) {
    code = code + 97 - 19;
  }
  return toUtf8String(new Uint8Array([225, (code >> 6) + 132, (code & 63) + 128]));
}
function loadWords2() {
  if (_wordlist2 != null) {
    return _wordlist2;
  }
  const wordlist6 = [];
  data2.forEach((data3, length) => {
    length += 4;
    for (let i = 0;i < data3.length; i += length) {
      let word = "";
      for (let j = 0;j < length; j++) {
        word += getHangul(codes.indexOf(data3[i + j]));
      }
      wordlist6.push(word);
    }
  });
  wordlist6.sort();
  const checksum5 = id(wordlist6.join(`
`) + `
`);
  if (checksum5 !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
    throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
  }
  _wordlist2 = wordlist6;
  return wordlist6;
}
var data2, codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*", _wordlist2 = null, wordlist6 = null, LangKo;
var init_lang_ko = __esm(() => {
  init_hash();
  init_utils();
  init_wordlist();
  data2 = [
    "OYAa",
    "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
    "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
    "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
    "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
    "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
    "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
    "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
  ];
  LangKo = class LangKo extends Wordlist {
    constructor() {
      super("ko");
    }
    getWord(index) {
      const words5 = loadWords2();
      assertArgument(index >= 0 && index < words5.length, `invalid word index: ${index}`, "index", index);
      return words5[index];
    }
    getWordIndex(word) {
      return loadWords2().indexOf(word);
    }
    static wordlist() {
      if (wordlist6 == null) {
        wordlist6 = new LangKo;
      }
      return wordlist6;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-it.js
var words5 = "0torea noica!iosorolotaleratelanena%oiadoencotivomai t ca%a0A]Bagl'Bin#E.Is(Oli!Rasi_Rog#0Cade!C[$Cus#E <Hil,I@QuaReRil>Roba+U 0Ag'Deb{DomeEgu#Eri!IpeOtt&Ul&1Fabi,Fe|Fis(F-n Oris`O(R~$0AveEn.E_,Ganc'I!It&OnismoR>*Rume Uzzo4AbardaA Bat)Ber#BoBumeCeCol>E|<FaGeb-Ian.IbiIm[ Lag#Leg)Lie_Lo@/Lusi_Me$Oge$Pa}Pest!Ta,=Ter$T%c'T)veUn$Veo*Z&0Alga`Ani+A!=B{Br#EbaEr~E^s+I]Mas(M[daMir&Mon{O!P'Pli&U, 0A}r@Ag-feAlis+Arch?At-CaCel/Co-D&D!aEl*Ge*Gol&Gus I`Neg&Nid#NoNunc'OnimoT%ipoZi1At>Ertu-OdePari!Pe^ Pogg'P)@Pun Ri,1Ab~AchideAgos+Ald~Anc'Atu-AzzoBit)Chiv'D{Eni,G[ Gi<Gu IaMon?NeseRed#RingaRos S[>SoTef%eZil*0Ciu|Col EpsiEtt>Fal I$O/Pir#P)Sagg'SeSolu Sur@TaT[u T%eT-|0Av>EismoOm>O$TesaTiv&Tor$Tr{Tua,0Sil'Str?Tis+To$moTun$0Anz#E!V[i!Vi(Volge!3Io<O ZimoZur):Be,C}$Ci$CoDessaDi/+Gn#I+L]<L@Le=L/+Lza$Mbi$Ndi!RaondaRba)R}R{$RlumeRoc]Sil>S(Tos+Ttu U,VaVosa3C]FfaLg'LvaNdaNe_,Nig$Nzi=ReRli=Ta3Bi+CiDo<Fi@GaLanc?MboNo]*O*goPedePol&Rban.R-S]|Ses S$n$Son.SturiZzar)2An@At+2Ll{Nif>R@S]Tan>T^$Zzo*2Acc'AdipoA`An}Avu-E.l/Eve|EzzaIgl?Il/n.Ind&Oc]*O@Onzi=Ul*U$2Bbo<CaDi$Ffo<IoLboO$R*<R-s}S(/S+:De|Du]La`)L]*LesseLib)LmoLor?MbusaMe-+M%?Mmi$Mo/Mpa,NapaNde/NeNi$No|N^=PacePel*P{*Pogi)Ppe)P-Psu/RapaceR}ssaR@Ris`Rova=R!|R li=Sacc'S}+Ser`SoS(<S.l*Sua,Tas+Te=T-meU Vil*3Dibi,D-+Fa*Leb!Llul&NaNo<N.simoRam~Rc&R RumeRvel*So?SpoTo2E/Ia)Ic}Iede!Ime-I=IrurgoI+r-0AoClismoFr&G$Lind)O|*R}R)siTr>T+di$UffoVet+Vi,2Ass>In~O)2C]Dar@D%eE!n.G$meLl&Lm#Lo!Lpo(L^v#LzaMaMe+M`n@Mo@Mpu.rMu<Nci(Ndur!Nfer`Ngel&NiugeN<s(Nosce!NsumoN^nuoNveg$Per P'<Pp?Pr~poRazzaRda+R%#Rn%eRol/RpoR!@Rs?R.seSm>S+n.Ttu-V#2A.!Avat+E#Ede!Emo(Esci+E+Ice I=,IsiIt>OceO=}Os++Uc?,Us}2Ci!Cu*Gi$Ll#Po/R#!R(!R_Sci$S de:DoI$L`+Meri$Nie/N$(Nz&T#Van^Vve)3Bu|C[n'Ci(Cli$Col*C! D%#Fin{FormeG$Leg&Lfi$Lir'L+M[zaNot#Nt)Pos{Rapa+Riv&RogaScri|Ser Sider'Sume!Tersi_Vo 3Amet)Cemb!Ed)Fe(Ffu(Geri!Gi+,Luv'Nam>N=nziPin P*`Po*Rad&ReRo|RupoSag'Sc! Sf&Sge*Spos S+nzaSu`$ToVa$Vel Vide!Vor#5B*<C[.Ga=,G`LceM#M[~Min&N@*NoRmi!TeT !Vu Zzi=2AgoUi@2Bb'Bit&Ca,NaOmoPl%eRatu):0A$0Ces(CoLissiO$m?0E-I]/I,I r?Uc&2Emon?LiOismoReg'4Abor#Argi!Egan.Enc#E|Ev&F>I}MoSaU(0An#B,`Es(I)O^_Oz'<Pir>U*0Dem>Du)Erg?FasiO.}Tr&Zi`1A^.I*goI(d'O},Pu!0U#!0Ar'BaBo(EdeEmi+Ige!Met>OeOsi_Ran.0Ago$AmeAnimeAudi!CaEmp'Erc{Ib{Ig[.Is.!I OfagoOrt#O(Pan(P!s(S[zaSoTe(Tim&Ton?T)(Ult&0Il>N>Rus]To0ClideoRopa0A(Id[zaIt#Olu Viva:Bbr~Cc[daChi)L]Migl?Na,Nfa-NgoN+s`ReRfal/Ri$(R`]Sc?S (Sul*T%&ToVo*(3Bb!Co/DeG#LpaLt)Mmi=Nde!Nome$Rm[ R)R^,Ssu-S^_T+U@3AbaDuc?FaGur#LoNanzaNest-Ni!O!S},S>Ume2A]<Am[]EboEm`Ori@U[.Uo)2B>Cacc?Co(Der#Gl'La+Lc*!Lgo!Nd[.Net>N?N+=Rb{Rchet+Res+Rm~R='RoR.zzaRz&Sf#S(2A}s(A=Assi$A.l*Eccet+E=+Es]IgoOlli$OndeUga,Ut+2Ci/+Cs?Gg[.Lmi<L_Man.Me|Mo(NeNz'<O]RboRgo<Ro!SoTi,:Bb?$FfeLa.oLli=LoppoMbe)M`Ranz?RboRofa$Rzo<S@|Sol'Str>T Ud'ZeboZzel/3CoLa^=L(Mel*Mm#NeN{!N='No^poRgo2Epar@Iacc'Isa0Al*LdaNep)Oc&Oiel*Or$OveR#Ro<T++Udiz'Ur#Us 2Obu*U^<1Omo0BbaLfM{Mmo<Nf'N=Ver$2Aci,A@Af>AmmoAndeAtt&A_(Az?E}EggeIfo<Ig'InzaOt+Uppo2Adag$A'An Ard&FoId&::0Ern#0O=0Ent>Ill'O*RaR>Roge$2Ie<Na)Nor#4A!Le(Log>Lude!0Bal*Bevu Boc]Bu Ma<Mer(Mol#Pac]Pe PiegoPor P)n+0Al&Arc&At^_Can C[d'Chi$Cisi_Clu(Cont)C)c'CuboDagi<D?Do,Ed{Fat^Fil&Fli|Gagg'Geg$G,seGor@G)s(Nes]O@!Oltr&Ond#Sa$Se|SiemeSonn?Suli=Tas#Te)To=]Tu{Umidi!Vali@VeceV{1Erbo,Not>O.siP~1IdeLandaOn>Rig#Ror&0Ol#O poTer>Titu Tr%e0Al?Er&:::Bb)Birin C}Cer#Cri`Cu=D@veGoMpoNcet+N.r=R@(RgaRingeSt-T[zaTi$TtugaVag=Vo)3Ga,Gge)MboN.zzaNzaO<P!Si_Ss#S T.-,VaVig#3Be)DoEv{L/Matu-Mit&Mpi@Ne&NguaQui@RaR~S}TeTig'V!a5CandaDeG~Mb&Nd-Nge_QuaceR[zoToT.r?5CeCid#Ma}Mi$(NgoPoPpo*SingaS(T :Cab)Cchi=Ce)Cin#Da`G>Gl?G<.G)Iol~LafedeLg-@Lin.(Lsa$L Lumo!NaNc?N@r/Ngi&Nifes N=)Nov-NsardaN^deNubr'PpaR#=Rci!Ret+RmoRsup'Sche-Ssa?S^$Te-s(Tr>/T <Tu)Zur}3And)C}n>Ce=.DesimoDit&GaLassaLisLod?NingeNoN(/Rcur'R[daR*Schi$SeSse!S *Tal*To@T.!3Agol&CaCel'Che,C)boDol*E,Gl'!La$Li.MosaNe-,NiNo!Ri$R^l*Sce/SsivaS Sur&TezzaTig&T-T.n.4Emon>0Del*Dif~Du*Ga$G'LeLos(Nas.)N]Ndi=Ne+r'Ni,No $N(<Nt#Nvi(RaRde!Rs%#St)Tiv#TosegaT V[zaVim[ Zzo5C}CosaFfaGhe|G='La|Li<l*L^p*Mm?N Ove!Ra,SaS]*S~Te_,To:BabboF+Nomet)Rci(R%eRr#Sce!Str&Tu-,Ut~Vigl'3Bu*saC)siGa^_Goz'Mme$Ofi+Re|R_Ssu$Ttu$Ut-,VeV)t>3Cch?NfaTi@5Bi,Ci_DoMeMi=Rd>R`,RvegeseSt-$T&Tiz?Ttur$Vel/5C,oL/Me)O_Tri!Vo/Z?,:Si0Bedi!BligoElis]L'O*So, 0Cas'<Ch'Cid[.Cor!!Cult&RaUl#0Ier$Or&1Fer+Fri!Fusc#0Ge|GiNu$4AndeseFa|I#IvaOg-m`T!0Agg'Bel>B-EgaIss'<0Do(E!IceNi_)O!_,Ta1Er#In'<Pos 1A]*AfoDi<Ecchi$Ef%eFa$Gan>Igi<Izzon.MaMegg'Na^_O*g'R[@Ribi,T[s?T~Za+Zo0A!Cur&MosiPeda,Pi.SaSid&Ta]*Te0I.ReTago$TimoTob!1A,EstI$Ipa)Oc{UnqueVi&3Io:Cche|CeCif>Del/D)<EseGaGi=Lazzi=Les&Lli@LoLudeN@)N<l*O*O=zzoPr~Rabo/Rcel/Re!Rgo*RiRl#Ro/R^!Rv[zaRz?,Ssi_St%}Tac}To*g?TtumeVo<3Cc#Dal&Do=,Gg'Lo(N&Nd%eNi(/Nnu Nomb-Ns&N /PePi+Rbe<R]r(R@n#Rfor&Rgame=R'@Rmes(R$Rp,s(Rsua(Rtug'Rva(S#!Sis+SoS^fe)Ta*T^<Tu/n.Zzo3Ace!An+At^$Cci$CozzaEgaEt-Ffe)G?`Gol'G)LaLife)L*/Lo+Mpan.Ne+N=No*Ogg?OmboRamideRet>Ri.RolisiTo<Zz>2AceboAn&As`A+$E=r'2ChezzaDe)(DismoEs?Ggi&L[+Ligo$Ll%eLmoni.Lpet+L(Lt)=Lve!M%eMo@)N.Po*(Rfi@Ro(Rpo-R!R++SaSi^_Sses(Stul#Tass'Te!2AnzoAssiAt~Eclu(Ed~Efis(Egi#Elie_Eme!E$t&Epar#Es[zaE.s Eval(I`IncipeIv#Ob,`Ocu-Odur!OfumoOge|OlungaOmessaO$meOpos+O)gaO.(OvaUd[.Ug=Ur{0Iche1Bbl>D~Gil#G$LceL{Lsan.Nt&PazzoPil/Ro:99Ad)Al]saAsiE!/O+:C]l D@pp'D~,Dun#Ff~GazzoG'<G$Mar)MingoMoNdag'N l&P#Pi=Pp!(Satu-Schi#S[.Sseg=St!l*TaVvedu 3A,Cepi!Cin Clu+Cond{Cupe)Dd{Dime!Gal#Gist)Go/G!s(Laz'<M&Mo N=Pl~Prime!Put&SaSid[.Spon(S+u)TeTi=Tor~T^f~Voc#3Assun Badi!Bel,B!zzoCar~C]Ceve!C%l#Cor@C!du D>*Dur!Fas&F,s(For`Fug'G&Gett#Ghel*Lass#Lev#Ma<!MbalzoMed'Morch'Nasci+N})NforzoN$_Nom#Nsav{N c]Nunc?Nv[i!Par#Petu Pie$Port&P!saPuli!Sa+Sch'ServaSibi,SoSpe|S )Sult#S_l Tar@Teg$Tm>T)_Un'<VaVer(Vinci+Vol Zo`5BaBot>Bus Cc?CoDagg'De!D{!G{Ll'Mant>Mpe!Nz'Sol&SpoTan.Ton@Tu/Vesc'5BizzoBr~GaLli$Mi<Mo)(O*PeSs&St>:B#Bbi&Bot#Go`Las(Ldatu-Lgem`Liv&Lmo<Lo<Lt&Lu L_Pe!Pi@Por{Race$R}smoR S((Telli.Ti-Tol*Tur$Va=V'Zi#0Adigl'AlzoAnc#Ar-At.!Av&End&Irci&Locc#Occi#Rin&Ruffo<Uff&0Ab)(Ad[zaA/Ambi&Anda*Apo/Ar(A.n&Av#El En>Ett)HedaHie=IarpaI[zaInde!IppoI)ppoI_*Ler&Odel/Olp{Ompar Onfor Opri!Or+Os(<OzzeseRibaRoll&Ru^n'Uder?Ul !Uo/U)Us&0Ebit&Ogan&0C}tu-Con@Da$Gg'/G=l#G!g#Gu{Lci#Let^_L/Lvagg'Mafo)Mbr&MeMin#Mp!N(N^!Pol Qu[zaRa+Rb#Re$R'Rp[.R-gl'Rvi!S^=To/T^`=0Ace*Ald&Am#Arzo(At%#E-IdaIl#IngeOc#Oder&OgoOl^!Orz#Ra|Rutt#Ugg{Um&U(0Abel*Arb#Onfi&Orb'Rass#Uar@1Bi*C]meEr-G/G$!L[z'L/baMbo*Mpat>Mul#Nfon?Ngo*Nist)NoN.siNu(idePar'S`S ,Tu#2It+Ogatu-Ove$0Arr{Emor#En^ E-l@IlzoOnt&Ott#Uss#0Elli!Erv#O@0BbalzoBr'C]r(C?,Da,Ffi|G$Ld#L[<Li@L/zzoLoLubi,Lv[.Mat>M`NdaNe|Nnife)Pi!Ppe(P-Rge!Rpas(Rri(R(R.gg'R_l#Spi)S+T^,0AdaAl/Arge!A /Av[ Azzo/EcieEdi!Eg<!E/tu-E-nzaEs(!Ett-,Ezz#IaIgo*(Ill#I$(I-,L[di@Or^_O(RangaRec&Ron#RuzzoUn^$0Uil*0Ad%&O l#1Abi,Ac]AffaAgn&Amp#Ant'Arnu Ase-Atu E*EppaErzoI,|I`IrpeIva,Izzo(On#Or>RappoReg#Ridu*Rozz&Ru|Ucc&UfoUp[@0B[t)C](Do!Gger{GoL+$On&PerboPpor Rgel#R)g#Ssur)Tu-0Ag&EdeseEgl'El&Enu Ez?IluppoIs+Izze-Ol+Uot&:Bac]Bul#Cci&Citur$LeLis`$Mpo<Nni$RaRdi_Rg#RiffaRp&R+rugaS Tt>Ver=Vo/+Zza3CaCn>Lefo$Me-r'MpoMu N@<Ne)Ns'<N+]*O!`RmeR-zzoRze|SiSser#St#T)T ?3F&Gel/Mb)N P>Pog-foRagg'RoTan'To*Tuban.Z'Zzo<5Cc&L,r&L Mbo/MoNfoNsil/Paz'Po*g?PpaRbaRn&R)<R -S}$Ssi!S+tu-Ta$2Aboc]AcheaAfi/Aged?Alc'Amon Ans{Apa$Ar!As*]Att#AveEcc?Emol'Espo*Ibu Iche]Ifogl'Il*InceaIoIs.zzaItur#Ivel/OmbaO$OppoO|/Ov&Ucc#2Batu-Ff#Lipa$Mul Nis?Rb&Rchi$TaTe/:0Ic#0Cel*Ci(!0I!I^_1FaF%'0Ua,4IsseTim#0A$I,Orismo0Ci<|Ge!Ghe!seI]r$If%#I($I+r'Te0Vo0Upa1Aga$G[zaLo0AnzaA C{Ig$*U-'0Ensi,IlizzoOp?:Can.Ccin#Gabon@Gli#LangaLgoL>L,t+Lo)(Lut&L_/Mpa+Ng&N{(NoN+gg'Nve-Po!Ra$Rc#R?n.S}3Det+DovaDu Ge+,I]*Lc)Li=Llu LoceN#Ndemm?N RaceRba,Rgog=Rif~RoRru}Rt~,Sc~Ssil*S+,Te-$Tri=Tus 3Andan.B-n.C[daChingoCi=nzaDim&Gil?G< Go!LeL/$MiniNc{!O/Pe-Rgo/Ro*goRu,n S](S'<SpoSsu Su-TaTel*T^`VandaVi@Zi&5CeGaLa^,Le!LpeRagi<5L}$::::Mpog=N=Pp#T.-Vor-3Fi)Lan.LoNze)Rbi$3Be|N]R]<T 5L/T>5Cche)Fo*LuPpa", checksum5 = "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620", wordlist7 = null, LangIt;
var init_lang_it = __esm(() => {
  init_wordlist_owl();
  LangIt = class LangIt extends WordlistOwl {
    constructor() {
      super("it", words5, checksum5);
    }
    static wordlist() {
      if (wordlist7 == null) {
        wordlist7 = new LangIt;
      }
      return wordlist7;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-pt.js
var words6 = "0arad!ototealirertainrasoent hoandoaR#riareha!aroele'oronul0Aca%AixoAl A%rDuz'El]Er$IsmoO$ R<g(Revi Rig Rup$S*$Solu$Sur=Ut[0Ab#Alm Amp Anh A,Ei.El( En ErvoEss E$naHa.IdezImaI}#Irr Lam LiveOlhidaOmod Opl Ord Um~ Us?0Ap.EgaEnt_Ep$Equ Er-%EsivoEusI<%ItivoJetivoJun$M' Or Qu''UboV(,Vog#0R}ave0As.Er'EtivoIn?Iv` Li$Lu-%R}.0Ach Arr As&/Enci Iliz Io)It#O+R! Res%Rup U d Ul]2O`h Ud Us.1AmedaArmeAstr Av<caB(gueB*oCat+De@EcrimEgr@Er.FaceF*e%GumHeioI Ica%I- Inh Ivi Mof^Oc Pis%T( TitudeUc* Ug UnoUsivoVo0Aci A=rA[loAss BasBi-%EixaEniz I=Is$,Iz!eOl?On$ O_,Ost+P  Pli Pola0Ag+maAlis Arqu@A$m@DaimeElExoG~ Im JoOm&@Ot#Sio,T(i|Uid!eUnci Zol1Ag?Alp Anh#EgoEli=Ert^Es Eti%I$Lau,Lic^OioOn.Os)R-dizRov 0Uec(0AmeAn]A+C^D-%E@Ej Eni$Es)Gilo,GolaMaQuivoRai&Reba%Risc Rob>um S-&T(i&TigoVo[=0F&.Il#P' S?S* So&/Sun$Tr&0Ac#Adu+Al/A[f E End(Er_EuIng'Ir?IvoOl{oRac Revi=RizU&Um0Di$rM-.R>o+TismoT|@Tu 0Ali An%Ar@Ent&Es,I?Is Ul,1Ila1Ar E=Ei%Ulejo:B BosaC&]uCh `C@GagemI<oIl I}e)Ir_Ixis)J~ Le@LizaLsaN&Nd{aN/N'Nque%Ra$Rb#R}es>+c>~/Se#S)n%Ta)Te=rTidaTomTuc Unil]3B(IjoIr^IsebolLd!eLezaLgaLisc Ndi$Ng&aNz(RimbauRl*d>_Sou_XigaZ(_3CoCu=En&Foc&Furc G|naLhe%Mest[Mo$rOlog@OmboOsf(aPol Rr-$Scoi$Sne$SpoSsex$TolaZ _2Ind#OcoOque 2A$BagemC#CejoChec]Ico.L^LetimL]LoMb{oNdeNecoNi)Rb~h>d>e&R+c]V*oXe?2AncoAsaAvezaEuIgaIl/Inc OaOchu+Onze O$Uxo2C]DismoF LeRacoScaS$Z*a:B<aB`oBideBoBri$CauCet^C/r_CiqueDast_De#Fez&IaqueIp'aIxo%J#JuLafrioLc~ Ld{aLibr Lm<%Lo)M^Mbis)MisaMomilaMp<]Mufl Navi&Nc` Ne)NguruN/$Nive%NoaNs#N.Nu=Pac/P`aP* Po.Pric/Pt?PuzRacolRb}oRde&Rec>imb Rn{oRpe%R['>)zRv&/SacoScaSeb[S%loS~oT a)Tiv UleUs?U%l V&oV(na3BolaDil]G}]Lebr L~ Nou+N,N%ioRc Rr#R%'oRvejaTimV^2Aco)Al{aAm#Ap^ArmeAticeAveEfeEg^E'oEqueIco%If[In`oOc&/Ov(UmboU.Uva0CatrizCl}eD!eD['aEn%G<aM-$N$Nz><d>cui$Rurg@T 2A[zaE_Ic OneUbe2A=Ag'Ba@B($rBr C^El/Ent_E,Gum`oIb'IfaIo%L L{aLh(Lid'Lme@L}oLunaM<=Mb* M-.MitivaMov(MplexoMumNc]N=rNec.Nfu,Ng` Nhec(Njug Nsum'Nt+$Nvi%Op( P{oPi?PoQue%lRagemRdi&Rne)R}h>p|&R[ioR%joRuj>voSs-oS%laT}e%U_UveVilZ*]2A%+AvoEcheE=rEmeErEspoI^Im*&Io~oIseItic Os)UaUz{o2B<oEcaId#JoLat+Lm* Lp Ltu+Mpr'Nh#Pi=RativoRr&Rs R$Sp'S% T`o:MascoT 3Ba%rBi.BocheB~h C&queCim&CliveCo%C[.D&Dic#Duz'FesaFum G`oG+uGus.It#Ix La$rLeg#L*e L}gaM<daMit'Moli=Ntis)P-#Pil PoisP[ssaPur Riv>+m SafioSbo.Sc<,S-/Sfi#Sgas%Sigu&SlizeSmam SovaSpesaS)queSvi T&h T-$rT} Tri$UsaV(Vi=Vot#Z-a3Ag+maAle$Da)Fu,Gi.Lat#Lu-%M*u'Nast@Nh{oOceseRe$Sc[)Sf ceSp oSque%Ssip S)n%T?UrnoV(,Vi,rV~g Z(5Br?L|i=M?M*#NativoNz`>m-%Rs&SagemUr#U$r2EnagemIbleOg @2El EndeE$PloQues><%Vi=,:1Lod'O Olog@0Ific It&Uc#1Ei$Etiv 3E.1Ab| Eg(Ei$rEncoEv?Im* Ogi 0B goBol#Br~/Buti=EndaErg'Is,rPat@P-/P*#Polg P[goPurr Ul?0CaixeC-#Ch-%C}t_Deus Doss Faix Fei%FimGaj#G-/Glob Gom#G+x Gu@Jo La.Qu<$Raiz Rol#Rug SaioSe^S*oSop#T<$Te#Tid!eT|.Tr^T~/V(g Vi#Volv(XameX($Xof[Xu$1Id(me0Uip 0E$Gui=Ra)VaVil]0B<j B`$CamaColaCri)Cu)F*geFol F[g Fum#GrimaM&%P<$P`/PigaP}jaP[i)Pum Qu(daTacaT{aTic Tof#T[laTu=Vazi 0AnolIque)0F|i>opeu0Acu Ap| AsivoEntu&Id-%Olu'1Ag(oAl Am* A$Aus$Ces,Ci.Clam Ecu.EmploIb'Ig-%On( P<d'P`'P' Pl< Pos$P[s,P~s T(noT*$T+$:Bric B~o,Ce)Ci&DaDigaIxaL L)Mili Nd<goNf +N$cheRd#R`oR*h>of>p>tu+T@T|V|i)X*aZ-da3Ch#Ijo^I+n%L*oM**oNdaNoR>i#RrugemRv(S%j T&Ud&3ApoB_seC Ch{oGur#L{aL/LmeLtr RmezaSg^Ssu+TaV`aX?Xo2AcidezAm*goAn`aEch^O+Utu Uxo2C&C*/Foc GoGue%IceLg#Lhe$Rj Rmig>noR%ScoSsa2Aga)AldaAngoAscoA%rnoE'aEn%E.IezaI,Itu+On]Ustr U%'a2G'L<oLigemNd NgoNilR?Rio,Tebol:B i$B*e%DoIa$IolaIvo)LegaL/L*]Loc]Nh RagemRfoRg&oRimpoRoup>+faSodu$S$TaTil/Ve)Z`a3L#Le@LoM^M(Mi=N(o,NgivaNi&NomaN_Ologi>?Rm* S,S$r3Nas)Nc<aNg#Raf>*o2Aci&IcoseOb&Orio,2ElaIabaLfeLpe Rdu+Rje)R_S$,T{aV(n 2AcejoAdu&Afi%Al]AmpoAn^Atui$Ave$AxaEgoElh EveIloIs&/I.@Os,O%scoUd#Unhi=U)2AcheA+niAx*imEr[ I Inc/Is#LaLo,Ru:Bi.Rm}@S%V(3C.eRd Res@Si.3A$B(n D+.EnaNoPismoPnosePo%ca5JeLofo%MemNes$Nr#Rm}&Sped 5M|#:Te2E@O,2N|#RejaU<a4E,HaUdi=Um* Ustr 0AgemEd@$En,ErsivoIn-%It?Ort&Pac$Ped'Pl<%P|Pr-saPuneUniz 0Al?Ap$AtivoC-,Ch Cid'Clu'Col|Deci,D'e$Du$rEficazEr-%F<tilFes.F*i$Flam F|m&F+$rG('Ibi=Ici&ImigoJe.Oc-%O=_Ov?OxQuie$Scri$Se$Sist'Spe$rSt& S~$Tac$Tegr&Tim Toc#TrigaVa,rV(noVic$Voc 0Gur%2Ani<oOniz Re&Rit#0CaEn$Ol#Qu{o0Ali<o:N{oNg^N)R ac>dimR_SmimToV&iZida3Jum9An*]Elh^G?I>n&Rr Vem5BaDeuDocaIzLg?L/R#Ris)RoS)::B edaB|&C[C)n%Dril/G )GoaJeMb(M-.M* MpejoNchePid P,R<j>{>gu+S<]St_T(&Ti=V<daVou+Vr?X<%Z(3Ald!eB[G#G-d Gis)IgoIlo Itu+Mb[%MeNh?Ntil]OaSmaS%TivoT['oV VezaVi.3B(&Bi=D( G G{oMi.Mo{oMp?NdaNe N]gemQuidezS)gemSu+T|&V_XaX{a5C?Cu$rJis)MboNaNgeNt+RdeT#T(@Ucu+UsaUv 5ArCidezC_Ne)St[T?Va:CacoCe%Ch#CioD{aDr*]Gna)G[zaI|IsL<d_L]Lo%LucoMiloMo{oMu%N^Nc]Nda$NequimN/,Niv`aNobr NsaN%rNuse Pe#Qu* Rc?Resi>fimRgemR*/Rmi)Ro$RquiseR[coR%loRujoSco%Sm|+SsagemStig Tag&T(noT*&Tu.Xil 3D&]DidaDusaGaf}eIgaL<c@L/rMb_M|i&N*oNosNsagemNt&Rec(Rg~/S^Scl SmoSqui)St[T!eTeo_T+gemX(Xic<o3C_G&]Gr Lag[L- Lh M#N( N/caNist_N|@OloR<%RtiloStur 5Cid!eD(noD~ EdaErIn/I)Ldu+LezaL/L*e%LuscoN)n]Quec><goRcegoR=moR-aSaicoSque%S.daT`TimToTriz5DaI$La)Lh(L.Ndi&Ni=R&h>c/Sc~ SeuSic&:Ci}&D?JaMo_R*>r#Sc(TivaTu[zaV&]Veg Vio3Bl*aB~o,GativaGoci Gri$Rvo,TaUr&VascaVo{o3N N/TidezV` 5B[zaI%IvaMe M*&Rdes%R% T Tici TurnoV`oVil/Vo5Bl#DezM(&Pci&Tr'Vem:0Cec#Edec(JetivoRig#Scu_S%t+T(Tur 0Id-%Io,Orr(Ulis)Up#2Eg<%EnsivaEr-daIc*aUsc#0Iva4Ar@Eo,H Iv{a0B_Ele%Is,It'0D~#E_,Tem1Ci}&Er?On-%OrtunoOs$1ArBi.DemD*&F<a$GasmoG~/I-t&IgemIun=LaTo=xoV&/0Cil S^SoT-.0Imismo0S!@T}oTub_Vi=0El]Ul 1Id Ig- :Ca$Ci-%Co%Ctu D @Dr*/G GodeIn`Ir IsagemLav+Lest+Lhe)Li$Lm^Lpi.Nc^N`aNfle$NquecaN)n&PagaioP`^P'oRaf*>ci&Rd&RedeRtidaSmoSs#S%lTam T-%T* T_noUl^Us 3C~i D& Dest[D@t+D+G^I$r&IxeLeLic<oNcaNdur N{aN]scoNs?N%Rceb(Rfei$Rgun)Ri$Rmit'Rn>plexoRsi<>%nceRucaSc#SquisaS,aTisc 3AdaC#Ed!eGm-$Last+Lh#Lo.M-)Nc`NguimN]No%N.On{oPocaQue%R<h>esRue)Sc S$laT<gaVe%2An)Aque)At*aEbeuUmagemUvi&1Eu0DaE'aEtisaLeg^Lici Lu-%Lvil/M MbaNd( N.@P~o,R)Ssu'St&TeUp U,Vo 2A@Anc]A$AxeEceEd?Efei$Emi Ens Ep  Esil]E%x$Ev-'Ez Ima)IncesaIsmaIv#Oces,Odu$Ofe)Oibi=Oje$Ome%rOpag OsaO%$rOv?2Blic DimL Lm} Ls{aNh&N'PiloRezaX?:99Ad+Ant@Ar$AseEbr EdaEijoEn%Eri=Im}oInaIosque:B<^BiscoCh Ci} Di&I In]IoIvaJ^L#M&Ng(Nhu+P!u+P`PidezPosaQue%Rid!eS<%Scun/Sg Sp?S%'aSur Taz<aTo{a3AlezaAnim Av(Baix B`deBol C#C-%CheioCiboC|d Cru.Cu DeDim'D}daDuzidaEnvioF* Flet'Fog F[scoFugi G&@GimeG+In#I$rJei.LativoM?M-=M|,Nov#P oP`'Ple$Pol/P[saPudi Qu((S-]Sfri Sga.Sid'Solv(Spei$SsacaS)n%Sum'T&/T(T' Tom^T+.V` Vi,rVol)3Ac/CaGidezGo_,M NgueS^ScoS}/5B&oChe=D^DeioDov@E=rLe)M<oNc S#S{aS$TaT{oT*aT~ UcoUpaXo5B_Gi=Go,IvoMoPest[S,:B|Ci ColaCud'DioF'aGaGr^Ib_L^L{oLg#LivaLpic Lsic]L.Lv?Mb Mu+iN Nf}aNgueNid!ePa$Rd>g-$Rje)Tur Ud!eXof}eZ}&3C C~ DaD-$Di#Do,Du$rGm-$G[=Gun=IvaLe$LvagemM<&M-%N?N/rNsu&Nt#P #Rei>*g>+RvoTemb_T|3GiloLhue)Lic}eMetr@Mpat@M~ N&Nc(oNg~ NopseN$ni>-eRiTu#5B(<oB+C|_G_JaLdaLetr L%'oMbrioNa)Nd Neg Nh?NoP+noQue%Rr'R%ioSsegoTaqueT(r V#Z*/5Aviz BidaBm(,B,loBt+'Ca)Ces,CoDes%FixoG?G('Jei$Lfa$M'OrP(i|Plic Pos$Prim'Rd*>fis)Rp[s>[&Rt'Sp'oS%n$:B`aBle%Bu^C/G `aLh(LoLvezM</Mb|imMpaNg-%N$P Pioc>dioRef>j>+xaTuagemUr*oXativoXis)3Atr&C(Ci=Cl#Dio,IaIm Lef}eLh#Mp(oN-%N,rN.Rm&RnoRr-oSeSou+St#ToXtu+Xugo3A+G`aJoloMbr MidezNgi=N%'oRagemT~ 5Al]C]L( LiceM^Mil/N`Ntu+Pe%R>ci=RneioRqueRr!>$S.UcaUp{aX*a2Ab&/Acej Adu$rAfeg Aje$AmaAnc ApoAs{oAt?Av E*oEm(Epid EvoIagemIboIcicloId-%Ilog@Ind!eIploItur Iunf&Oc Ombe)OvaUnfoUque2B~ C<oDoLipaPiRboRm>quesaT` T|i&:7V 3Bigo0HaId!eIf|me3Olog@SoTigaUbu0A=InaUfru':C*aDi G o,I=,LaL-%Lid!eLo[sN)gemQu{oR<d>e)Rr(Sc~ Sil]S,u+Z Zio3A=D Ge.Ic~ L{oLhiceLu=Nce=rNdav&N( Nt[Rb&Rd!eRe?Rg}h>m`/RnizRs R%n%SpaSti=T|i&3Adu$AgemAj Atu+Br?D{aDr @ElaGaG-%Gi G| L ejoNcoNhe)NilOle)R!>tudeSi.S$Tr&V{oZ*/5A=rArG&L<%LeibolL)gemLumo,Nt!e5L$Vuz`a::D[zRope3QueRe.Rife3Ng ::Ng#Rp 3BuL?9Mb Olog@5Mbi=", checksum6 = "0x2219000926df7b50d8aa0a3d495826b988287df4657fbd100e6fe596c8f737ac", wordlist8 = null, LangPt;
var init_lang_pt = __esm(() => {
  init_wordlist_owl();
  LangPt = class LangPt extends WordlistOwl {
    constructor() {
      super("pt", words6, checksum6);
    }
    static wordlist() {
      if (wordlist8 == null) {
        wordlist8 = new LangPt;
      }
      return wordlist8;
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/lang-zh.js
function loadWords3(locale) {
  if (_wordlist3[locale] != null) {
    return _wordlist3[locale];
  }
  const wordlist9 = [];
  let deltaOffset = 0;
  for (let i = 0;i < 2048; i++) {
    const s = style.indexOf(data3[i * 3]);
    const bytes2 = [
      228 + (s >> 2),
      128 + codes2.indexOf(data3[i * 3 + 1]),
      128 + codes2.indexOf(data3[i * 3 + 2])
    ];
    if (locale === "zh_tw") {
      const common = s % 4;
      for (let i2 = common;i2 < 3; i2++) {
        bytes2[i2] = codes2.indexOf(deltaData[deltaOffset++]) + (i2 == 0 ? 228 : 128);
      }
    }
    wordlist9.push(toUtf8String(new Uint8Array(bytes2)));
  }
  const checksum7 = id(wordlist9.join(`
`) + `
`);
  if (checksum7 !== Checks[locale]) {
    throw new Error(`BIP39 Wordlist for ${locale} (Chinese) FAILED`);
  }
  _wordlist3[locale] = wordlist9;
  return wordlist9;
}
var data3 = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH", deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL", _wordlist3, Checks, codes2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", style = "~!@#$%^&*_-=[]{}|;:,.()<>?", wordlists, LangZh;
var init_lang_zh = __esm(() => {
  init_hash();
  init_utils();
  init_wordlist();
  _wordlist3 = {
    zh_cn: null,
    zh_tw: null
  };
  Checks = {
    zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
    zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
  };
  wordlists = {};
  LangZh = class LangZh extends Wordlist {
    constructor(dialect) {
      super("zh_" + dialect);
    }
    getWord(index) {
      const words7 = loadWords3(this.locale);
      assertArgument(index >= 0 && index < words7.length, `invalid word index: ${index}`, "index", index);
      return words7[index];
    }
    getWordIndex(word) {
      return loadWords3(this.locale).indexOf(word);
    }
    split(phrase) {
      phrase = phrase.replace(/(?:\u3000| )+/g, "");
      return phrase.split("");
    }
    static wordlist(dialect) {
      if (wordlists[dialect] == null) {
        wordlists[dialect] = new LangZh(dialect);
      }
      return wordlists[dialect];
    }
  };
});

// node_modules/ethers/lib.esm/wordlists/wordlists.js
var wordlists2;
var init_wordlists = __esm(() => {
  init_lang_cz();
  init_lang_en();
  init_lang_es();
  init_lang_fr();
  init_lang_ja();
  init_lang_ko();
  init_lang_it();
  init_lang_pt();
  init_lang_zh();
  wordlists2 = {
    cz: LangCz.wordlist(),
    en: LangEn.wordlist(),
    es: LangEs.wordlist(),
    fr: LangFr.wordlist(),
    it: LangIt.wordlist(),
    pt: LangPt.wordlist(),
    ja: LangJa.wordlist(),
    ko: LangKo.wordlist(),
    zh_cn: LangZh.wordlist("cn"),
    zh_tw: LangZh.wordlist("tw")
  };
});

// node_modules/ethers/lib.esm/wordlists/index.js
var init_wordlists2 = __esm(() => {
  init_wordlist();
  init_lang_en();
  init_wordlist_owl();
  init_wordlist_owla();
  init_wordlists();
});

// node_modules/ethers/lib.esm/ethers.js
var exports_ethers = {};
__export(exports_ethers, {
  zeroPadValue: () => zeroPadValue,
  zeroPadBytes: () => zeroPadBytes,
  wordlists: () => wordlists2,
  version: () => version,
  verifyTypedData: () => verifyTypedData,
  verifyMessage: () => verifyMessage,
  verifyAuthorization: () => verifyAuthorization,
  uuidV4: () => uuidV4,
  toUtf8String: () => toUtf8String,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8Bytes: () => toUtf8Bytes,
  toTwos: () => toTwos,
  toQuantity: () => toQuantity,
  toNumber: () => toNumber,
  toBigInt: () => toBigInt,
  toBeHex: () => toBeHex,
  toBeArray: () => toBeArray,
  stripZerosLeft: () => stripZerosLeft,
  solidityPackedSha256: () => solidityPackedSha256,
  solidityPackedKeccak256: () => solidityPackedKeccak256,
  solidityPacked: () => solidityPacked,
  showThrottleMessage: () => showThrottleMessage,
  sha512: () => sha512,
  sha256: () => sha2562,
  scryptSync: () => scryptSync,
  scrypt: () => scrypt2,
  ripemd160: () => ripemd1602,
  resolveProperties: () => resolveProperties,
  resolveAddress: () => resolveAddress,
  recoverAddress: () => recoverAddress,
  randomBytes: () => randomBytes3,
  pbkdf2: () => pbkdf2,
  parseUnits: () => parseUnits,
  parseEther: () => parseEther,
  namehash: () => namehash,
  mask: () => mask,
  makeError: () => makeError,
  lock: () => lock,
  keccak256: () => keccak256,
  isValidName: () => isValidName,
  isKeystoreJson: () => isKeystoreJson,
  isHexString: () => isHexString,
  isError: () => isError,
  isCrowdsaleJson: () => isCrowdsaleJson,
  isCallException: () => isCallException,
  isBytesLike: () => isBytesLike,
  isAddressable: () => isAddressable,
  isAddress: () => isAddress,
  id: () => id,
  hexlify: () => hexlify,
  hashMessage: () => hashMessage,
  hashAuthorization: () => hashAuthorization,
  getUint: () => getUint,
  getNumber: () => getNumber,
  getIndexedAccountPath: () => getIndexedAccountPath,
  getIcapAddress: () => getIcapAddress,
  getDefaultProvider: () => getDefaultProvider,
  getCreateAddress: () => getCreateAddress,
  getCreate2Address: () => getCreate2Address,
  getBytesCopy: () => getBytesCopy,
  getBytes: () => getBytes,
  getBigInt: () => getBigInt,
  getAddress: () => getAddress,
  getAccountPath: () => getAccountPath,
  fromTwos: () => fromTwos,
  formatUnits: () => formatUnits,
  formatEther: () => formatEther,
  ensNormalize: () => ensNormalize,
  encryptKeystoreJsonSync: () => encryptKeystoreJsonSync,
  encryptKeystoreJson: () => encryptKeystoreJson,
  encodeRlp: () => encodeRlp,
  encodeBytes32String: () => encodeBytes32String,
  encodeBase64: () => encodeBase64,
  encodeBase58: () => encodeBase58,
  dnsEncode: () => dnsEncode,
  defineProperties: () => defineProperties,
  defaultPath: () => defaultPath2,
  decryptKeystoreJsonSync: () => decryptKeystoreJsonSync,
  decryptKeystoreJson: () => decryptKeystoreJson,
  decryptCrowdsaleJson: () => decryptCrowdsaleJson,
  decodeRlp: () => decodeRlp,
  decodeBytes32String: () => decodeBytes32String,
  decodeBase64: () => decodeBase64,
  decodeBase58: () => decodeBase58,
  dataSlice: () => dataSlice,
  dataLength: () => dataLength,
  copyRequest: () => copyRequest,
  concat: () => concat,
  computeHmac: () => computeHmac,
  computeAddress: () => computeAddress,
  checkResultErrors: () => checkResultErrors,
  authorizationify: () => authorizationify,
  assertPrivate: () => assertPrivate,
  assertNormalize: () => assertNormalize,
  assertArgumentCount: () => assertArgumentCount,
  assertArgument: () => assertArgument,
  assert: () => assert,
  accessListify: () => accessListify,
  ZeroHash: () => ZeroHash,
  ZeroAddress: () => ZeroAddress,
  WordlistOwlA: () => WordlistOwlA,
  WordlistOwl: () => WordlistOwl,
  Wordlist: () => Wordlist,
  WeiPerEther: () => WeiPerEther,
  WebSocketProvider: () => WebSocketProvider,
  Wallet: () => Wallet,
  VoidSigner: () => VoidSigner,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  UnmanagedSubscriber: () => UnmanagedSubscriber,
  UndecodedEventLog: () => UndecodedEventLog,
  TypedDataEncoder: () => TypedDataEncoder,
  Typed: () => Typed,
  TransactionResponse: () => TransactionResponse,
  TransactionReceipt: () => TransactionReceipt,
  TransactionDescription: () => TransactionDescription,
  Transaction: () => Transaction,
  StructFragment: () => StructFragment,
  SocketSubscriber: () => SocketSubscriber,
  SocketProvider: () => SocketProvider,
  SocketPendingSubscriber: () => SocketPendingSubscriber,
  SocketEventSubscriber: () => SocketEventSubscriber,
  SocketBlockSubscriber: () => SocketBlockSubscriber,
  SigningKey: () => SigningKey,
  Signature: () => Signature,
  Result: () => Result,
  QuickNodeProvider: () => QuickNodeProvider,
  PocketProvider: () => PocketProvider,
  ParamType: () => ParamType,
  NonceManager: () => NonceManager,
  NetworkPlugin: () => NetworkPlugin,
  Network: () => Network,
  NamedFragment: () => NamedFragment,
  N: () => N,
  MulticoinProviderPlugin: () => MulticoinProviderPlugin,
  Mnemonic: () => Mnemonic,
  MinInt256: () => MinInt256,
  MessagePrefix: () => MessagePrefix,
  MaxUint256: () => MaxUint256,
  MaxInt256: () => MaxInt256,
  LogDescription: () => LogDescription,
  Log: () => Log,
  LangEn: () => LangEn,
  JsonRpcSigner: () => JsonRpcSigner,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcApiProvider: () => JsonRpcApiProvider,
  IpcSocketProvider: () => IpcSocketProvider,
  Interface: () => Interface,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  InfuraProvider: () => InfuraProvider,
  Indexed: () => Indexed,
  HDNodeWallet: () => HDNodeWallet,
  HDNodeVoidWallet: () => HDNodeVoidWallet,
  GasCostPlugin: () => GasCostPlugin,
  FunctionFragment: () => FunctionFragment,
  Fragment: () => Fragment,
  FixedNumber: () => FixedNumber,
  FetchUrlFeeDataNetworkPlugin: () => FetchUrlFeeDataNetworkPlugin,
  FetchResponse: () => FetchResponse,
  FetchRequest: () => FetchRequest,
  FetchCancelSignal: () => FetchCancelSignal,
  FeeDataNetworkPlugin: () => FeeDataNetworkPlugin,
  FeeData: () => FeeData,
  FallbackProvider: () => FallbackProvider,
  FallbackFragment: () => FallbackFragment,
  EventPayload: () => EventPayload,
  EventLog: () => EventLog,
  EventFragment: () => EventFragment,
  EtherscanProvider: () => EtherscanProvider,
  EtherscanPlugin: () => EtherscanPlugin,
  EtherSymbol: () => EtherSymbol,
  ErrorFragment: () => ErrorFragment,
  ErrorDescription: () => ErrorDescription,
  EnsResolver: () => EnsResolver,
  EnsPlugin: () => EnsPlugin,
  ContractUnknownEventPayload: () => ContractUnknownEventPayload,
  ContractTransactionResponse: () => ContractTransactionResponse,
  ContractTransactionReceipt: () => ContractTransactionReceipt,
  ContractFactory: () => ContractFactory,
  ContractEventPayload: () => ContractEventPayload,
  Contract: () => Contract,
  ConstructorFragment: () => ConstructorFragment,
  CloudflareProvider: () => CloudflareProvider,
  ChainstackProvider: () => ChainstackProvider,
  BrowserProvider: () => BrowserProvider,
  BlockscoutProvider: () => BlockscoutProvider,
  Block: () => Block,
  BaseWallet: () => BaseWallet,
  BaseContract: () => BaseContract,
  AnkrProvider: () => AnkrProvider,
  AlchemyProvider: () => AlchemyProvider,
  AbstractSigner: () => AbstractSigner,
  AbstractProvider: () => AbstractProvider,
  AbiCoder: () => AbiCoder
});
var init_ethers = __esm(() => {
  init_abi();
  init_address2();
  init_constants();
  init_contract2();
  init_crypto2();
  init_hash();
  init_providers();
  init_transaction2();
  init_utils();
  init_wallet2();
  init_wordlists2();
});

// node_modules/ethers/lib.esm/index.js
var init_lib2 = __esm(() => {
  init_ethers();
  init_ethers();
});

// src/jurisdiction-loader.ts
var exports_jurisdiction_loader = {};
__export(exports_jurisdiction_loader, {
  loadJurisdictions: () => loadJurisdictions,
  getCachedJurisdictions: () => getCachedJurisdictions,
  clearJurisdictionsCache: () => clearJurisdictionsCache
});
import * as fs from "fs";
function loadJurisdictions() {
  if (cachedJurisdictions) {
    return cachedJurisdictions;
  }
  try {
    const jurisdictionsContent = fs.readFileSync("./jurisdictions.json", "utf8");
    cachedJurisdictions = JSON.parse(jurisdictionsContent);
    console.log("\uD83D\uDCCB Jurisdictions loaded from file (cached for future use)");
    console.log(`  \u251C\u2500 Version: ${cachedJurisdictions.version}`);
    console.log(`  \u251C\u2500 Last updated: ${cachedJurisdictions.lastUpdated}`);
    console.log(`  \u2514\u2500 Jurisdictions: ${Object.keys(cachedJurisdictions.jurisdictions).join(", ")}`);
    return cachedJurisdictions;
  } catch (error) {
    console.error("\u274C Failed to load jurisdictions.json:", error);
    cachedJurisdictions = {
      version: "1.0.0",
      lastUpdated: new Date().toISOString(),
      jurisdictions: {},
      defaults: {
        timeout: 30000,
        retryAttempts: 3,
        gasLimit: 1e6
      }
    };
    return cachedJurisdictions;
  }
}
function clearJurisdictionsCache() {
  cachedJurisdictions = null;
  console.log("\uD83D\uDD04 Jurisdictions cache cleared");
}
function getCachedJurisdictions() {
  return cachedJurisdictions;
}
var cachedJurisdictions = null;
var init_jurisdiction_loader = () => {};

// src/evm.ts
var exports_evm = {};
__export(exports_evm, {
  transferNameBetweenEntities: () => transferNameBetweenEntities,
  submitSettle: () => submitSettle,
  submitReserveToReserve: () => submitReserveToReserve,
  submitProcessBatch: () => submitProcessBatch,
  submitPrefundAccount: () => submitPrefundAccount,
  registerNumberedEntityOnChain: () => registerNumberedEntityOnChain,
  getNextEntityNumber: () => getNextEntityNumber,
  getJurisdictions: () => getJurisdictions,
  getJurisdictionByAddress: () => getJurisdictionByAddress,
  getEntityInfoFromChain: () => getEntityInfoFromChain,
  getAvailableJurisdictions: () => getAvailableJurisdictions,
  generateJurisdictions: () => generateJurisdictions,
  fundEntityReserves: () => fundEntityReserves,
  debugFundReserves: () => debugFundReserves,
  connectToEthereum: () => connectToEthereum,
  assignNameOnChain: () => assignNameOnChain,
  ENTITY_PROVIDER_ABI: () => ENTITY_PROVIDER_ABI,
  DEPOSITORY_ABI: () => DEPOSITORY_ABI,
  DEFAULT_JURISDICTIONS: () => DEFAULT_JURISDICTIONS
});
var ENTITY_PROVIDER_ABI, DEPOSITORY_ABI, connectToEthereum = async (jurisdiction) => {
  try {
    const rpcUrl = jurisdiction.address || jurisdiction.rpc;
    const entityProviderAddress = jurisdiction.entityProviderAddress || jurisdiction.contracts?.entityProvider;
    const depositoryAddress = jurisdiction.depositoryAddress || jurisdiction.contracts?.depository;
    if (!rpcUrl) {
      throw new Error("Jurisdiction missing RPC URL (address or rpc property)");
    }
    if (!entityProviderAddress || !depositoryAddress) {
      throw new Error("Jurisdiction missing contract addresses (entityProvider and depository)");
    }
    const provider = new exports_ethers.JsonRpcProvider(rpcUrl);
    const signer = await provider.getSigner(0);
    const entityProvider = new exports_ethers.Contract(entityProviderAddress, ENTITY_PROVIDER_ABI, signer);
    const depository = new exports_ethers.Contract(depositoryAddress, DEPOSITORY_ABI, signer);
    return { provider, signer, entityProvider, depository };
  } catch (error) {
    console.error(`Failed to connect to ${jurisdiction.name}:`, error);
    throw error;
  }
}, debugFundReserves = async (jurisdiction, entityId, tokenId, amount) => {
  try {
    console.log(`\uD83D\uDCB0 DEBUG: Funding entity ${entityId.slice(0, 10)} with ${amount} of token ${tokenId}...`);
    const { depository } = await connectToEthereum(jurisdiction);
    const tx = await depository.debugFundReserves(entityId, tokenId, amount);
    console.log(`\uD83D\uDCE1 Debug funding transaction: ${tx.hash}`);
    const receipt = await tx.wait();
    console.log(`\u2705 Debug funding confirmed in block ${receipt.blockNumber}`);
    const newBalance = await depository._reserves(entityId, tokenId);
    console.log(`\uD83D\uDCB0 Entity ${entityId.slice(0, 10)} now has ${newBalance.toString()} of token ${tokenId}`);
    return { transaction: tx, receipt, newBalance };
  } catch (error) {
    console.error(`\u274C Failed to fund reserves:`, error);
    throw error;
  }
}, fundEntityReserves = async (entityId, assets) => {
  console.log(`\uD83D\uDCB0 Funding entity ${entityId.slice(0, 10)}... with ${assets.length} assets`);
  for (const asset of assets) {
    console.log(`  \uD83D\uDCB3 Adding ${asset.symbol}: ${asset.amount} (token ${asset.tokenId})`);
    await fundReserves(entityId, asset.tokenId, asset.amount);
  }
  console.log(`\u2705 Entity ${entityId.slice(0, 10)}... funded with all assets`);
}, submitPrefundAccount = async (jurisdiction, entityId, counterpartyEntityId, tokenId, amount) => {
  try {
    console.log(`\uD83D\uDCB0 Prefunding account between ${entityId.slice(0, 10)}... and ${counterpartyEntityId.slice(0, 10)}...`);
    console.log(`\uD83D\uDD0D TOKEN: ${tokenId}, AMOUNT: ${amount}`);
    const { depository, provider } = await connectToEthereum(jurisdiction);
    console.log(`\uD83D\uDD0D CONTRACT ADDRESS: ${depository.target}`);
    const code = await provider.getCode(depository.target);
    if (code === "0x") {
      throw new Error("Contract not deployed at this address");
    }
    const currentBalance = await depository._reserves(entityId, tokenId);
    console.log(`\uD83D\uDD0D Current balance: ${currentBalance.toString()}`);
    console.log(`\uD83D\uDD0D Requested amount: ${amount}`);
    if (currentBalance < BigInt(amount)) {
      throw new Error(`Insufficient reserves: have ${currentBalance.toString()}, need ${amount}`);
    }
    console.log(`\uD83D\uDCDE Calling prefundAccount(${counterpartyEntityId}, ${tokenId}, ${amount})`);
    const tx = await depository.prefundAccount(counterpartyEntityId, tokenId, amount);
    console.log(`\u23F3 Transaction sent: ${tx.hash}`);
    const receipt = await tx.wait();
    console.log(`\u2705 Prefunding confirmed in block ${receipt.blockNumber}`);
    return {
      hash: tx.hash,
      receipt
    };
  } catch (error) {
    console.error(`\u274C Failed to prefund account:`, error);
    throw error;
  }
}, submitProcessBatch = async (jurisdiction, entityId, batch) => {
  try {
    console.log(`\uD83D\uDCB8 Submitting processBatch to ${jurisdiction.name} as entity ${entityId.slice(0, 10)}...`);
    console.log(`\uD83D\uDD0D BATCH DEBUG:`, JSON.stringify(batch, null, 2));
    console.log(`\uD83D\uDD0D ENTITY DEBUG: ${entityId}`);
    console.log(`\uD83D\uDD0D JURISDICTION DEBUG:`, jurisdiction);
    console.log(`\uD83D\uDD0D JURISDICTION SOURCE: Reading from jurisdictions.json file`);
    console.log(`\uD83D\uDD0D DEPOSITORY ADDRESS FROM JURISDICTION: ${jurisdiction.depositoryAddress}`);
    console.log(`\uD83D\uDD0D ENTITY PROVIDER ADDRESS FROM JURISDICTION: ${jurisdiction.entityProviderAddress}`);
    if (batch.reserveToReserve) {
      for (let i = 0;i < batch.reserveToReserve.length; i++) {
        const transfer = batch.reserveToReserve[i];
        if (typeof transfer.amount === "number") {
          const weiAmount = BigInt(Math.floor(transfer.amount * 1000000000000000000)).toString();
          console.log(`\uD83D\uDD27 Converting amount ${transfer.amount} \u2192 ${weiAmount} wei`);
          transfer.amount = weiAmount;
        }
      }
    }
    console.log(`\uD83D\uDD0D FIXED BATCH:`, JSON.stringify(batch, null, 2));
    const { depository, provider } = await connectToEthereum(jurisdiction);
    console.log(`\uD83D\uDD0D CONTRACT ADDRESS: ${depository.target}`);
    const code = await provider.getCode(depository.target);
    console.log(`\uD83D\uDD0D CONTRACT CODE LENGTH: ${code.length} characters`);
    if (code === "0x") {
      throw new Error("Contract not deployed at this address");
    }
    try {
      console.log(`\uD83D\uDD0D Testing if contract has debugBulkFundEntities...`);
      await depository.debugBulkFundEntities.staticCall();
      console.log(`\u2705 This is our NEW contract with debug functions!`);
    } catch (debugError) {
      console.log(`\u274C This is OLD contract - no debug functions:`, debugError.message);
    }
    console.log(`\uD83D\uDD0D Checking balance for entity ${entityId} token ${batch.reserveToReserve[0]?.tokenId || 1}...`);
    try {
      const currentBalance = await depository._reserves(entityId, batch.reserveToReserve[0]?.tokenId || 1);
      console.log(`\uD83D\uDD0D Current balance: ${currentBalance.toString()}`);
      if (currentBalance.toString() === "0") {
        console.log(`\u26A0\uFE0F Entity has no reserves - this suggests old contract without pre-funding`);
        throw new Error(`Entity ${entityId.slice(0, 10)} has no reserves! Contract should be pre-funded.`);
      }
    } catch (balanceError) {
      console.log(`\u274C Failed to check balance:`, balanceError.message);
      throw balanceError;
    }
    console.log(`\uD83D\uDD0D Function signature: processBatch(bytes32,tuple)`);
    console.log(`\uD83D\uDD0D Entity ID: ${entityId}`);
    console.log(`\uD83D\uDD0D Batch structure:`, Object.keys(batch));
    console.log(`\uD83D\uDD0D reserveToReserve array:`, batch.reserveToReserve);
    const functionFragments = depository.interface.fragments.filter((f2) => f2.type === "function");
    const functions = functionFragments.map((f2) => f2.name);
    const hasProcessBatch = functions.includes("processBatch");
    console.log(`\uD83D\uDD0D Contract has processBatch function: ${hasProcessBatch}`);
    console.log(`\uD83D\uDD0D Available functions:`, functions.slice(0, 10), "...");
    console.log(`\uD83D\uDD0D DEEP DEBUG: Contract interface analysis`);
    console.log(`\uD83D\uDD0D Contract target address: ${depository.target}`);
    const processBatchFunc = depository.interface.getFunction("processBatch");
    const processBatchSelector = processBatchFunc?.selector || "NOT_FOUND";
    console.log(`\uD83D\uDD0D Function selector: ${processBatchSelector}`);
    const bytecode = await provider.getCode(depository.target);
    const hasSelector = bytecode.includes(processBatchSelector.slice(2));
    console.log(`\uD83D\uDD0D Deployed bytecode contains processBatch selector: ${hasSelector}`);
    console.log(`\uD83D\uDD0D Bytecode length: ${bytecode.length} chars`);
    const abiHash = exports_ethers.keccak256(exports_ethers.toUtf8Bytes(JSON.stringify(depository.interface.fragments.map((f2) => f2.format()))));
    console.log(`\uD83D\uDD0D ABI hash: ${abiHash.slice(0, 10)}...`);
    const callData = depository.interface.encodeFunctionData("processBatch", [entityId, batch]);
    console.log(`\uD83D\uDD0D Call data length: ${callData.length} chars`);
    console.log(`\uD83D\uDD0D Call data start: ${callData.slice(0, 20)}...`);
    console.log(`\uD83D\uDD0D Testing with different entity addresses...`);
    try {
      const balance0 = await depository._reserves("0x0000000000000000000000000000000000000000000000000000000000000000", 0);
      console.log(`\uD83D\uDD0D Entity 0 Token 0 balance: ${balance0.toString()}`);
    } catch (e) {
      console.log(`\u274C Entity 0 balance check failed: ${e.message}`);
    }
    const emptyBatch = {
      reserveToExternalToken: [],
      externalTokenToReserve: [],
      reserveToReserve: [],
      reserveToCollateral: [],
      cooperativeUpdate: [],
      cooperativeDisputeProof: [],
      initialDisputeProof: [],
      finalDisputeProof: [],
      flashloans: [],
      hub_id: 0
    };
    console.log(`\uD83D\uDD0D Testing empty batch first...`);
    try {
      const emptyResult = await depository.processBatch.staticCall(entityId, emptyBatch);
      console.log(`\u2705 Empty batch works: ${emptyResult}`);
      console.log(`\uD83D\uDD0D Now testing our batch...`);
      const result = await depository.processBatch.staticCall(entityId, batch);
      console.log(`\u2705 Static call successful: ${result}`);
    } catch (staticError) {
      console.error(`\u274C Static call failed:`, staticError);
      console.log(`\uD83D\uDD0D Error details:`, {
        code: staticError.code,
        data: staticError.data,
        reason: staticError.reason
      });
      throw staticError;
    }
    console.log(`\uD83D\uDD0D Estimating gas for processBatch...`);
    try {
      const gasEstimate = await depository.processBatch.estimateGas(entityId, batch);
      console.log(`\uD83D\uDD0D Gas estimate: ${gasEstimate.toString()}`);
    } catch (gasError) {
      console.error(`\u274C Gas estimation failed:`, gasError);
      throw gasError;
    }
    const tx = await depository.processBatch(entityId, batch);
    console.log(`\uD83D\uDCE1 Transaction submitted: ${tx.hash}`);
    const receipt = await tx.wait();
    console.log(`\u2705 Transaction confirmed in block ${receipt.blockNumber}`);
    return { transaction: tx, receipt };
  } catch (error) {
    console.error(`\u274C Failed to submit processBatch to ${jurisdiction.name}:`, error);
    throw error;
  }
}, registerNumberedEntityOnChain = async (config, name) => {
  if (!config.jurisdiction) {
    throw new Error("Jurisdiction required for on-chain registration");
  }
  try {
    const { entityProvider } = await connectToEthereum(config.jurisdiction);
    const encodedBoard = encodeBoard(config);
    const boardHash = hashBoard(encodedBoard);
    if (DEBUG)
      console.log(`\uD83C\uDFDB\uFE0F Registering numbered entity "${name}" on chain`);
    if (DEBUG)
      console.log(`   Jurisdiction: ${config.jurisdiction.name}`);
    if (DEBUG)
      console.log(`   EntityProvider: ${config.jurisdiction.entityProviderAddress}`);
    if (DEBUG)
      console.log(`   Board Hash: ${boardHash}`);
    try {
      const nextNumber = await entityProvider.nextNumber();
      if (DEBUG)
        console.log(`   \uD83D\uDCCA Next entity number will be: ${nextNumber}`);
    } catch (error) {
      throw new Error(`Failed to call nextNumber(): ${error}`);
    }
    const tx = await entityProvider.registerNumberedEntity(boardHash);
    if (DEBUG)
      console.log(`   \uD83D\uDCE4 Transaction sent: ${tx.hash}`);
    const receipt = await tx.wait();
    if (DEBUG)
      console.log(`   \u2705 Transaction confirmed in block ${receipt.blockNumber}`);
    if (receipt.status === 0) {
      throw new Error(`Transaction reverted! Hash: ${tx.hash}`);
    }
    if (DEBUG) {
      console.log(`   \uD83D\uDCCB Receipt logs count: ${receipt.logs.length}`);
      receipt.logs.forEach((log, i) => {
        try {
          const parsed = entityProvider.interface.parseLog(log);
          console.log(`   \uD83D\uDCDD Log ${i}: ${parsed?.name} - ${JSON.stringify(parsed?.args)}`);
        } catch {
          console.log(`   \uD83D\uDCDD Log ${i}: Unable to parse log - ${log.topics?.[0]}`);
        }
      });
    }
    const event = receipt.logs.find((log) => {
      try {
        const parsed = entityProvider.interface.parseLog(log);
        return parsed?.name === "EntityRegistered";
      } catch {
        return false;
      }
    });
    if (!event) {
      throw new Error("EntityRegistered event not found in transaction logs");
    }
    const parsedEvent = entityProvider.interface.parseLog(event);
    const entityId = parsedEvent?.args[0];
    const entityNumber = Number(parsedEvent?.args[1]);
    if (DEBUG)
      console.log(`\u2705 Numbered entity registered!`);
    if (DEBUG)
      console.log(`   TX: ${tx.hash}`);
    if (DEBUG)
      console.log(`   Entity Number: ${entityNumber}`);
    return { txHash: tx.hash, entityNumber };
  } catch (error) {
    console.error("\u274C Blockchain registration failed:", error);
    throw error;
  }
}, assignNameOnChain = async (name, entityNumber, jurisdiction) => {
  try {
    const { entityProvider } = await connectToEthereum(jurisdiction);
    if (DEBUG)
      console.log(`\uD83C\uDFF7\uFE0F  Assigning name "${name}" to entity #${entityNumber}`);
    const tx = await entityProvider.assignName(name, entityNumber);
    if (DEBUG)
      console.log(`   \uD83D\uDCE4 Transaction sent: ${tx.hash}`);
    const receipt = await tx.wait();
    if (DEBUG)
      console.log(`   \u2705 Transaction confirmed in block ${receipt.blockNumber}`);
    if (receipt.status === 0) {
      throw new Error(`Transaction reverted! Hash: ${tx.hash}`);
    }
    if (DEBUG)
      console.log(`\u2705 Name assigned successfully!`);
    if (DEBUG)
      console.log(`   TX: ${tx.hash}`);
    return { txHash: tx.hash };
  } catch (error) {
    console.error("\u274C Name assignment failed:", error);
    throw error;
  }
}, getEntityInfoFromChain = async (entityId, jurisdiction) => {
  try {
    const { entityProvider } = await connectToEthereum(jurisdiction);
    const entityInfo = await entityProvider.entities(entityId);
    if (entityInfo.status === 0) {
      return { exists: false };
    }
    const entityType = detectEntityType(entityId);
    let entityNumber;
    let name;
    if (entityType === "numbered") {
      const extractedNumber = extractNumberFromEntityId(entityId);
      if (extractedNumber !== null) {
        entityNumber = extractedNumber;
        try {
          const retrievedName = await entityProvider.numberToName(entityNumber);
          name = retrievedName || undefined;
        } catch {}
      }
    }
    return { exists: true, entityNumber, name };
  } catch (error) {
    console.error("\u274C Failed to get entity info from chain:", error);
    return { exists: false };
  }
}, getNextEntityNumber = async (jurisdiction) => {
  try {
    if (!jurisdiction) {
      throw new Error("Jurisdiction parameter is required");
    }
    const entityProviderAddress = jurisdiction.entityProviderAddress || jurisdiction.contracts?.entityProvider;
    if (!jurisdiction.name || !entityProviderAddress) {
      throw new Error("Jurisdiction object is missing required properties (name, entityProvider address)");
    }
    const { entityProvider } = await connectToEthereum(jurisdiction);
    if (DEBUG)
      console.log(`\uD83D\uDD0D Fetching next entity number from ${entityProviderAddress} (${jurisdiction.name})`);
    const nextNumber = await entityProvider.nextNumber();
    const result = Number(nextNumber);
    if (DEBUG)
      console.log(`\uD83D\uDD22 Next entity number: ${result}`);
    return result;
  } catch (error) {
    console.error("\u274C Failed to get next entity number:", error);
    throw error;
  }
}, transferNameBetweenEntities = async (name, fromNumber, toNumber2, jurisdiction) => {
  if (DEBUG)
    console.log(`\uD83D\uDD04 Transferring name "${name}" from #${fromNumber} to #${toNumber2}`);
  throw new Error("Name transfer not implemented - requires blockchain integration");
}, generateJurisdictions = async () => {
  const jurisdictions = new Map;
  try {
    let config;
    if (!isBrowser && typeof process !== "undefined") {
      console.log("\uD83D\uDD0D JURISDICTION SOURCE: Using centralized jurisdiction-loader");
      config = loadJurisdictions();
      console.log("\uD83D\uDD0D JURISDICTION DEBUG: Loaded config with contracts:", config.jurisdictions?.ethereum?.contracts);
      console.log("\u2705 Loaded jurisdictions from centralized loader (cached)");
    } else {
      const response = await fetch("./jurisdictions.json");
      if (!response.ok) {
        throw new Error(`Failed to fetch jurisdictions.json: ${response.status} ${response.statusText}`);
      }
      config = await response.json();
      console.log("\uD83D\uDD0D JURISDICTION DEBUG: Browser loaded config with contracts:", config.jurisdictions?.ethereum?.contracts);
      console.log("\u2705 Loaded jurisdictions from server");
    }
    const jurisdictionData = config.jurisdictions;
    for (const [key, data4] of Object.entries(jurisdictionData)) {
      const jData = data4;
      jurisdictions.set(key, {
        address: jData.rpc,
        name: jData.name,
        entityProviderAddress: jData.contracts.entityProvider,
        depositoryAddress: jData.contracts.depository,
        chainId: jData.chainId
      });
    }
  } catch (error) {
    console.error("\u274C Failed to load jurisdictions:", error);
  }
  return jurisdictions;
}, DEFAULT_JURISDICTIONS = null, getJurisdictions = async () => {
  if (isBrowser && DEFAULT_JURISDICTIONS !== null) {
    console.log("\uD83D\uDD0D JURISDICTIONS: Using cached browser data");
    return DEFAULT_JURISDICTIONS;
  }
  DEFAULT_JURISDICTIONS = await generateJurisdictions();
  return DEFAULT_JURISDICTIONS;
}, getAvailableJurisdictions = async () => {
  const jurisdictions = await getJurisdictions();
  return Array.from(jurisdictions.values());
}, getJurisdictionByAddress = async (address) => {
  const jurisdictions = await getJurisdictions();
  return jurisdictions.get(address);
}, submitSettle = async (jurisdiction, leftEntity, rightEntity, diffs) => {
  try {
    console.log(`\u2696\uFE0F Submitting settle transaction between ${leftEntity.slice(0, 10)}... and ${rightEntity.slice(0, 10)}...`);
    console.log(`\uD83D\uDD0D DIFFS:`, diffs.map((d) => ({
      ...d,
      leftDiff: d.leftDiff.toString(),
      rightDiff: d.rightDiff.toString(),
      collateralDiff: d.collateralDiff.toString()
    })));
    const { depository, provider } = await connectToEthereum(jurisdiction);
    console.log(`\uD83D\uDD0D CONTRACT ADDRESS: ${depository.target}`);
    const code = await provider.getCode(depository.target);
    if (code === "0x") {
      throw new Error("Contract not deployed at this address");
    }
    console.log(`\uD83D\uDCE4 Calling settle function...`);
    const tx = await depository.settle(leftEntity, rightEntity, diffs);
    console.log(`\uD83D\uDCAB Transaction sent: ${tx.hash}`);
    const receipt = await tx.wait();
    console.log(`\u2705 Settlement confirmed in block ${receipt.blockNumber}`);
    if (receipt.status === 0) {
      throw new Error(`Settlement transaction reverted! Hash: ${tx.hash}`);
    }
    console.log(`\uD83C\uDF89 Settlement successful! Both entities should receive SettlementProcessed events`);
    return { txHash: tx.hash, blockNumber: receipt.blockNumber };
  } catch (error) {
    console.error("\u274C Settlement failed:", error);
    throw error;
  }
}, submitReserveToReserve = async (jurisdiction, fromEntity, toEntity, tokenId, amount) => {
  try {
    console.log(`\uD83D\uDCB8 DIRECT R2R: ${fromEntity.slice(0, 10)} \u2192 ${toEntity.slice(0, 10)}, token ${tokenId}, amount ${amount}`);
    const { depository, provider } = await connectToEthereum(jurisdiction);
    console.log(`\uD83D\uDD0D CONTRACT ADDRESS: ${depository.target}`);
    const code = await provider.getCode(depository.target);
    if (code === "0x") {
      throw new Error("Contract not deployed at this address");
    }
    console.log(`\uD83D\uDCE4 Calling reserveToReserve(${fromEntity}, ${toEntity}, ${tokenId}, ${amount})...`);
    const tx = await depository.reserveToReserve(fromEntity, toEntity, tokenId, amount);
    console.log(`\uD83D\uDCAB Transaction sent: ${tx.hash}`);
    const receipt = await tx.wait();
    console.log(`\u2705 R2R confirmed in block ${receipt.blockNumber}`);
    if (receipt.status === 0) {
      throw new Error(`R2R transaction reverted! Hash: ${tx.hash}`);
    }
    console.log(`\uD83C\uDF89 Direct R2R successful!`);
    return { txHash: tx.hash, blockNumber: receipt.blockNumber };
  } catch (error) {
    console.error("\u274C Direct R2R failed:", error);
    throw error;
  }
};
var init_evm = __esm(() => {
  init_lib2();
  init_jurisdiction_loader();
  init_entity_factory();
  init_utils5();
  ENTITY_PROVIDER_ABI = [
    "function registerNumberedEntity(bytes32 boardHash) external returns (uint256 entityNumber)",
    "function assignName(string memory name, uint256 entityNumber) external",
    "function transferName(string memory name, uint256 newEntityNumber) external",
    "function entities(bytes32 entityId) external view returns (tuple(uint256 boardHash, uint8 status, uint256 activationTime))",
    "function nameToNumber(string memory name) external view returns (uint256)",
    "function numberToName(uint256 entityNumber) external view returns (string memory)",
    "function nextNumber() external view returns (uint256)",
    "function getTokenIds(uint256 entityNumber) external pure returns (uint256 controlTokenId, uint256 dividendTokenId)",
    "function getGovernanceInfo(uint256 entityNumber) external view returns (uint256 controlTokenId, uint256 dividendTokenId, uint256 controlSupply, uint256 dividendSupply, bool hasActiveProposal, bytes32 articlesHash)",
    "function balanceOf(address account, uint256 id) external view returns (uint256)",
    "function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) external",
    "event EntityRegistered(bytes32 indexed entityId, uint256 indexed entityNumber, bytes32 boardHash)",
    "event NameAssigned(string indexed name, uint256 indexed entityNumber)",
    "event NameTransferred(string indexed name, uint256 indexed oldEntityNumber, uint256 indexed newEntityNumber)",
    "event GovernanceEnabled(bytes32 indexed entityId, uint256 controlTokenId, uint256 dividendTokenId)"
  ];
  DEPOSITORY_ABI = [
    "function debugFundReserves(bytes32 entity, uint256 tokenId, uint256 amount) external",
    "function debugBulkFundEntities() external",
    "function reserveToReserve(bytes32 fromEntity, bytes32 toEntity, uint256 tokenId, uint256 amount) external returns (bool)",
    "function processBatch(bytes32 entity, tuple(tuple(bytes32 receivingEntity, uint256 tokenId, uint256 amount)[] reserveToExternalToken, tuple(bytes32 entity, bytes32 packedToken, uint256 internalTokenId, uint256 amount)[] externalTokenToReserve, tuple(bytes32 receivingEntity, uint256 tokenId, uint256 amount)[] reserveToReserve, tuple(uint256 tokenId, bytes32 receivingEntity, tuple(bytes32 entity, uint256 amount)[] pairs)[] reserveToCollateral, tuple(bytes32 leftEntity, bytes32 rightEntity, tuple(uint256 tokenId, int256 leftDiff, int256 rightDiff, int256 collateralDiff, int256 ondeltaDiff)[] diffs)[] settlements, tuple(bytes32 counterentity, tuple(uint256 tokenId, int256 peerReserveDiff, int256 collateralDiff, int256 ondeltaDiff)[] diffs, uint256[] forgiveDebtsInTokenIds, bytes sig)[] cooperativeUpdate, tuple(bytes32 counterentity, tuple(int256[] offdeltas, uint256[] tokenIds, tuple(address subcontractProviderAddress, bytes encodedBatch, tuple(uint256 deltaIndex, uint256 rightAllowence, uint256 leftAllowence)[] allowences)[] subcontracts) proofbody, bytes initialArguments, bytes finalArguments, bytes sig)[] cooperativeDisputeProof, tuple(bytes32 counterentity, uint256 cooperativeNonce, uint256 disputeNonce, bytes32 proofbodyHash, bytes sig, bytes initialArguments)[] initialDisputeProof, tuple(bytes32 counterentity, uint256 initialCooperativeNonce, uint256 initialDisputeNonce, uint256 disputeUntilBlock, bytes32 initialProofbodyHash, bytes initialArguments, bool startedByLeft, uint256 finalCooperativeNonce, uint256 finalDisputeNonce, tuple(int256[] offdeltas, uint256[] tokenIds, tuple(address subcontractProviderAddress, bytes encodedBatch, tuple(uint256 deltaIndex, uint256 rightAllowence, uint256 leftAllowence)[] allowences)[] subcontracts) finalProofbody, bytes finalArguments, bytes sig)[] finalDisputeProof, tuple(uint256 tokenId, uint256 amount)[] flashloans, uint256 hub_id) batch) external returns (bool)",
    "function prefundAccount(bytes32 counterpartyEntity, uint256 tokenId, uint256 amount) external returns (bool)",
    "function settle(bytes32 leftEntity, bytes32 rightEntity, tuple(uint256 tokenId, int256 leftDiff, int256 rightDiff, int256 collateralDiff)[] diffs) external returns (bool)",
    "function _reserves(bytes32 entity, uint256 tokenId) external view returns (uint256)",
    "event ReserveUpdated(bytes32 indexed entity, uint256 indexed tokenId, uint256 newBalance)",
    "event ReserveTransferred(bytes32 indexed from, bytes32 indexed to, uint256 indexed tokenId, uint256 amount)",
    "event SettlementProcessed(bytes32 indexed leftEntity, bytes32 indexed rightEntity, uint256 indexed tokenId, uint256 leftReserve, uint256 rightReserve, uint256 collateral, int256 ondelta)"
  ];
});

// src/entity-factory.ts
var encodeBoard = (config) => {
  const delegates = config.validators.map((validator) => ({
    entityId: validator,
    votingPower: Number(config.shares[validator] || 1n)
  }));
  const board = {
    votingThreshold: Number(config.threshold),
    delegates
  };
  return JSON.stringify(board, Object.keys(board).sort());
}, hashBoard = (encodedBoard) => {
  return exports_ethers.keccak256(exports_ethers.toUtf8Bytes(encodedBoard));
}, generateLazyEntityId = (validators, threshold) => {
  let validatorData;
  if (typeof validators[0] === "string") {
    validatorData = validators.map((name) => ({ name, weight: 1 }));
  } else {
    validatorData = validators;
  }
  const sortedValidators = validatorData.slice().sort((a, b2) => a.name.localeCompare(b2.name));
  const quorumData = {
    validators: sortedValidators,
    threshold: threshold.toString()
  };
  const serialized = JSON.stringify(quorumData);
  return hashBoard(serialized);
}, generateNumberedEntityId = (entityNumber) => {
  return `0x${entityNumber.toString(16).padStart(64, "0")}`;
}, generateNamedEntityId = (name) => {
  return hashBoard(name);
}, detectEntityType = (entityId) => {
  if (entityId.startsWith("0x") && entityId.length === 66) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return "numbered";
      }
      return "lazy";
    } catch {
      return "lazy";
    }
  }
  if (/^[0-9]+$/.test(entityId)) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return "numbered";
      }
      return "lazy";
    } catch {
      return "lazy";
    }
  }
  return "lazy";
}, extractNumberFromEntityId = (entityId) => {
  if (!entityId || typeof entityId !== "string") {
    return null;
  }
  if (entityId.startsWith("0x") && entityId.length === 66) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return Number(num);
      }
      return null;
    } catch {
      return null;
    }
  }
  if (/^[0-9]+$/.test(entityId)) {
    try {
      const num = BigInt(entityId);
      if (num > 0n && num < 1000000n) {
        return Number(num);
      }
      return null;
    } catch {
      return null;
    }
  }
  return null;
}, createLazyEntity = (name, validators, threshold, jurisdiction) => {
  const entityId = generateLazyEntityId(validators, threshold);
  if (DEBUG)
    console.log(`\uD83D\uDD12 Creating lazy entity: ${name}`);
  if (DEBUG)
    console.log(`   EntityID: ${entityId} (quorum hash)`);
  if (DEBUG)
    console.log(`   Validators: ${validators.join(", ")}`);
  if (DEBUG)
    console.log(`   Threshold: ${threshold}`);
  if (DEBUG)
    console.log(`   \uD83C\uDD93 FREE - No gas required`);
  const shares = {};
  validators.forEach((validator) => {
    shares[validator] = 1n;
  });
  return {
    mode: "proposer-based",
    threshold,
    validators,
    shares,
    jurisdiction
  };
}, createNumberedEntity = async (name, validators, threshold, jurisdiction) => {
  if (!jurisdiction) {
    throw new Error("Jurisdiction required for numbered entity registration");
  }
  const boardHash = hashBoard(encodeBoard({
    mode: "proposer-based",
    threshold,
    validators,
    shares: validators.reduce((acc, v) => ({ ...acc, [v]: 1n }), {}),
    jurisdiction
  }));
  if (DEBUG)
    console.log(`\uD83D\uDD22 Creating numbered entity: ${name}`);
  if (DEBUG)
    console.log(`   Board Hash: ${boardHash}`);
  if (DEBUG)
    console.log(`   Jurisdiction: ${jurisdiction.name}`);
  if (DEBUG)
    console.log(`   \uD83D\uDCB8 Gas required for registration`);
  const { getNextEntityNumber: getNextEntityNumber2, registerNumberedEntityOnChain: registerNumberedEntityOnChain2 } = await Promise.resolve().then(() => (init_evm(), exports_evm));
  try {
    const nextNumber = await getNextEntityNumber2(jurisdiction);
    const { entityNumber } = await registerNumberedEntityOnChain2({ mode: "proposer-based", threshold, validators, shares: validators.reduce((acc, v) => ({ ...acc, [v]: 1n }), {}), jurisdiction }, name);
    const entityId = generateNumberedEntityId(entityNumber);
    if (DEBUG)
      console.log(`   \u2705 Registered Entity Number: ${entityNumber}`);
    if (DEBUG)
      console.log(`   EntityID: ${entityId}`);
    const shares = {};
    validators.forEach((validator) => {
      shares[validator] = 1n;
    });
    const config = {
      mode: "proposer-based",
      threshold,
      validators,
      shares,
      jurisdiction
    };
    return { config, entityNumber, entityId };
  } catch (error) {
    console.error("\u274C Failed to register numbered entity on blockchain:", error);
    throw error;
  }
}, requestNamedEntity = async (name, entityNumber, jurisdiction) => {
  if (!jurisdiction) {
    throw new Error("Jurisdiction required for named entity");
  }
  if (DEBUG)
    console.log(`\uD83C\uDFF7\uFE0F Requesting named entity assignment`);
  if (DEBUG)
    console.log(`   Name: ${name}`);
  if (DEBUG)
    console.log(`   Target Entity Number: ${entityNumber}`);
  if (DEBUG)
    console.log(`   Jurisdiction: ${jurisdiction.name}`);
  if (DEBUG)
    console.log(`   \uD83D\uDC51 Requires admin approval`);
  const requestId = `req_${Math.random().toString(16).substring(2, 10)}`;
  if (DEBUG)
    console.log(`   \uD83D\uDCDD Name assignment request submitted: ${requestId}`);
  if (DEBUG)
    console.log(`   \u23F3 Waiting for admin approval...`);
  return requestId;
}, resolveEntityIdentifier = async (identifier) => {
  if (identifier.startsWith("#")) {
    const number2 = parseInt(identifier.slice(1));
    return {
      entityId: generateNumberedEntityId(number2),
      type: "numbered"
    };
  } else if (/^\d+$/.test(identifier)) {
    const number2 = parseInt(identifier);
    return {
      entityId: generateNumberedEntityId(number2),
      type: "numbered"
    };
  } else if (identifier.startsWith("0x")) {
    return {
      entityId: identifier,
      type: detectEntityType(identifier)
    };
  } else {
    if (DEBUG)
      console.log(`\uD83D\uDD0D Looking up named entity: ${identifier}`);
    const simulatedNumber = identifier === "coinbase" ? 42 : 0;
    if (simulatedNumber > 0) {
      return {
        entityId: generateNumberedEntityId(simulatedNumber),
        type: "named"
      };
    } else {
      throw new Error(`Named entity "${identifier}" not found`);
    }
  }
}, isEntityRegistered = async (entityId) => {
  const type = detectEntityType(entityId);
  if (type === "lazy") {
    return false;
  }
  if (!/^[0-9]+$/.test(entityId)) {
    return false;
  }
  try {
    const num = BigInt(entityId);
    return num > 0n && num < 1000000n;
  } catch {
    return false;
  }
};
var init_entity_factory = __esm(() => {
  init_lib2();
  init_utils5();
});

// node_modules/ms/index.js
var require_ms = __commonJS((exports, module) => {
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n2 = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n2 * y;
      case "weeks":
      case "week":
      case "w":
        return n2 * w;
      case "days":
      case "day":
      case "d":
        return n2 * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n2 * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n2 * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n2 * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n2;
      default:
        return;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n2, name) {
    var isPlural = msAbs >= n2 * 1.5;
    return Math.round(ms / n2) + " " + name + (isPlural ? "s" : "");
  }
});

// node_modules/debug/src/common.js
var require_common2 = __commonJS((exports, module) => {
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require_ms();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash3 = 0;
      for (let i = 0;i < namespace.length; i++) {
        hash3 = (hash3 << 5) - hash3 + namespace.charCodeAt(i);
        hash3 |= 0;
      }
      return createDebug.colors[Math.abs(hash3) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        if (!debug.enabled) {
          return;
        }
        const self2 = debug;
        const curr = Number(new Date);
        const ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy;
      Object.defineProperty(debug, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split3 = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const ns of split3) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  module.exports = setup;
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS((exports, module) => {
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.destroy = (() => {
    let warned = false;
    return () => {
      if (!warned) {
        warned = true;
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
    };
  })();
  exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    let m;
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  exports.log = console.debug || console.log || (() => {});
  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem("debug", namespaces);
      } else {
        exports.storage.removeItem("debug");
      }
    } catch (error) {}
  }
  function load() {
    let r;
    try {
      r = exports.storage.getItem("debug") || exports.storage.getItem("DEBUG");
    } catch (error) {}
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {}
  }
  module.exports = require_common2()(exports);
  var { formatters } = module.exports;
  formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS((exports, module) => {
  module.exports = (flag, argv = process.argv) => {
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf("--");
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
  };
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS((exports, module) => {
  var os = __require("os");
  var tty = __require("tty");
  var hasFlag = require_has_flag();
  var { env } = process;
  var flagForceColor;
  if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
    flagForceColor = 0;
  } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    flagForceColor = 1;
  }
  function envForceColor() {
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        return 1;
      }
      if (env.FORCE_COLOR === "false") {
        return 0;
      }
      return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
    }
  }
  function translateLevel(level) {
    if (level === 0) {
      return false;
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  function supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
    const noFlagForceColor = envForceColor();
    if (noFlagForceColor !== undefined) {
      flagForceColor = noFlagForceColor;
    }
    const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
    if (forceColor === 0) {
      return 0;
    }
    if (sniffFlags) {
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
      return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === "dumb") {
      return min;
    }
    if (process.platform === "win32") {
      const osRelease = os.release().split(".");
      if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }
      return 1;
    }
    if ("CI" in env) {
      if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((sign) => (sign in env)) || env.CI_NAME === "codeship") {
        return 1;
      }
      return min;
    }
    if ("TEAMCITY_VERSION" in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
      return 3;
    }
    if ("TERM_PROGRAM" in env) {
      const version2 = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          return version2 >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }
    if ("COLORTERM" in env) {
      return 1;
    }
    return min;
  }
  function getSupportLevel(stream, options = {}) {
    const level = supportsColor(stream, {
      streamIsTTY: stream && stream.isTTY,
      ...options
    });
    return translateLevel(level);
  }
  module.exports = {
    supportsColor: getSupportLevel,
    stdout: getSupportLevel({ isTTY: tty.isatty(1) }),
    stderr: getSupportLevel({ isTTY: tty.isatty(2) })
  };
});

// node_modules/debug/src/node.js
var require_node = __commonJS((exports, module) => {
  var tty = __require("tty");
  var util = __require("util");
  exports.init = init2;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.destroy = util.deprecate(() => {}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  exports.colors = [6, 2, 3, 4, 5, 1];
  try {
    const supportsColor = require_supports_color();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (error) {}
  exports.inspectOpts = Object.keys(process.env).filter((key) => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
      return k.toUpperCase();
    });
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  function formatArgs(args) {
    const { namespace: name, useColors: useColors2 } = this;
    if (useColors2) {
      const c = this.color;
      const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name} \x1B[0m`;
      args[0] = prefix + args[0].split(`
`).join(`
` + prefix);
      args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = getDate() + name + " " + args[0];
    }
  }
  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return "";
    }
    return new Date().toISOString() + " ";
  }
  function log(...args) {
    return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + `
`);
  }
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      delete process.env.DEBUG;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function init2(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for (let i = 0;i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }
  module.exports = require_common2()(exports);
  var { formatters } = module.exports;
  formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split(`
`).map((str) => str.trim()).join(" ");
  };
  formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
});

// node_modules/debug/src/index.js
var require_src = __commonJS((exports, module) => {
  if (typeof process === "undefined" || process.type === "renderer" || false || process.__nwjs) {
    module.exports = require_browser();
  } else {
    module.exports = require_node();
  }
});

// src/utils.ts
var isBrowser, createHash2, randomBytes4, getBuffer = () => {
  if (isBrowser) {
    return {
      from: (data4, encoding = "utf8") => {
        if (typeof data4 === "string") {
          return new TextEncoder().encode(data4);
        }
        return new Uint8Array(data4);
      }
    };
  }
  return __require("buffer").Buffer;
}, Buffer2, createDebug = (namespace) => {
  const shouldLog = namespace.includes("state") || namespace.includes("tx") || namespace.includes("block") || namespace.includes("error") || namespace.includes("diff") || namespace.includes("info");
  return shouldLog ? console.log.bind(console, `[${namespace}]`) : () => {};
}, debug, log, DEBUG = true, clearDatabase = async (db) => {
  console.log("Clearing database and resetting history...");
  if (db) {
    await db.clear();
    console.log("\u2705 Database cleared via provided instance");
  } else {
    if (typeof indexedDB !== "undefined") {
      const dbNames = ["db", "level-js-db", "level-db"];
      try {
        const clearPromises = dbNames.map((dbName) => {
          return new Promise((resolve) => {
            const deleteReq = indexedDB.deleteDatabase(dbName);
            deleteReq.onsuccess = () => {
              console.log(`\u2705 Cleared IndexedDB: ${dbName}`);
              resolve();
            };
            deleteReq.onerror = () => {
              console.log(`\u26A0\uFE0F Could not clear IndexedDB: ${dbName} (may not exist)`);
              resolve();
            };
            deleteReq.onblocked = () => {
              console.log(`\u26A0\uFE0F IndexedDB deletion blocked: ${dbName}`);
              resolve();
            };
          });
        });
        await Promise.all(clearPromises);
        console.log("\u2705 All databases cleared, re-initializing...");
        if (typeof window !== "undefined" && window.reinitializeAfterClear) {
          window.reinitializeAfterClear();
        }
        return;
      } catch (error) {
        console.log("\u274C Error clearing IndexedDB:", error);
        if (typeof window !== "undefined" && window.reinitializeAfterClear) {
          window.reinitializeAfterClear();
        }
        return;
      }
    }
  }
  console.log("Database cleared.");
}, formatEntityDisplay = (entityId) => {
  if (!entityId) {
    return "undefined";
  }
  const number2 = extractNumberFromEntityId(entityId);
  if (number2 !== null) {
    return number2.toString();
  } else {
    return entityId;
  }
}, getEntityDisplayInfo = (entityId) => {
  if (!entityId) {
    return {
      name: "Entity (undefined)",
      avatar: "\u2753",
      type: "numbered"
    };
  }
  const number2 = extractNumberFromEntityId(entityId);
  if (number2 !== null) {
    return {
      name: `Entity #${number2}`,
      avatar: generateEntityAvatar(entityId),
      type: "numbered"
    };
  } else {
    return {
      name: entityId,
      avatar: generateEntityAvatar(entityId),
      type: "lazy"
    };
  }
}, DEMO_SIGNERS, formatSignerDisplay = (signerId) => {
  const signerInfo = DEMO_SIGNERS[signerId];
  if (signerInfo) {
    return `\uD83D\uDC64 ${signerInfo.name}`;
  }
  return signerId;
}, getSignerDisplayInfo = (signerId) => {
  const signerInfo = DEMO_SIGNERS[signerId];
  if (signerInfo) {
    return {
      name: signerInfo.name,
      address: signerInfo.address,
      avatar: generateSignerAvatar(signerId)
    };
  }
  return {
    name: signerId,
    address: signerId,
    avatar: generateSignerAvatar(signerId)
  };
}, getSignerAddress = (signerId) => {
  const signerInfo = DEMO_SIGNERS[signerId];
  if (signerInfo) {
    return signerInfo.address;
  }
  return signerId;
}, generateEntityAvatar = (entityId) => {
  try {
    const svg = toSvg(entityId, 40);
    return `data:image/svg+xml,${encodeURIComponent(svg)}`;
  } catch (error) {
    return generateFallbackAvatar(entityId);
  }
}, generateSignerAvatar = (signerId) => {
  try {
    const address = getSignerAddress(signerId);
    const svg = toSvg(address, 32);
    return `data:image/svg+xml,${encodeURIComponent(svg)}`;
  } catch (error) {
    return generateFallbackAvatar(signerId);
  }
}, generateFallbackAvatar = (seed) => {
  let hash3 = 0;
  for (let i = 0;i < seed.length; i++) {
    hash3 = (hash3 << 5) - hash3 + seed.charCodeAt(i) & 4294967295;
  }
  const hue = Math.abs(hash3) % 360;
  const saturation = 70;
  const lightness = 50;
  const svg = `<svg width="32" height="32" xmlns="http://www.w3.org/2000/svg">
    <circle cx="16" cy="16" r="16" fill="hsl(${hue}, ${saturation}%, ${lightness}%)"/>
  </svg>`;
  const base64 = Buffer2.from(svg).toString("base64");
  return `data:image/svg+xml;base64,${base64}`;
};
var init_utils5 = __esm(() => {
  init_jdenticon_node();
  init_entity_factory();
  if (typeof global === "undefined") {
    globalThis.global = globalThis;
  }
  isBrowser = typeof window !== "undefined";
  createHash2 = isBrowser ? (algorithm) => ({
    update: (data4) => ({
      digest: (encoding) => {
        const encoder = new TextEncoder;
        const dataBuffer = encoder.encode(data4);
        let hash3 = 0;
        for (let i = 0;i < data4.length; i++) {
          const char = data4.charCodeAt(i);
          hash3 = (hash3 << 5) - hash3 + char;
          hash3 = hash3 & hash3;
        }
        const baseHash = Math.abs(hash3).toString(16).padStart(8, "0");
        const fullHash = (baseHash + baseHash + baseHash + baseHash).slice(0, 64);
        if (encoding === "hex") {
          return fullHash;
        } else {
          const bytes2 = new Uint8Array(32);
          for (let i = 0;i < 32; i++) {
            bytes2[i] = parseInt(fullHash.substr(i * 2, 2), 16);
          }
          return Buffer2.from(bytes2);
        }
      }
    })
  }) : __require("crypto").createHash;
  randomBytes4 = isBrowser ? (size) => {
    const array = new Uint8Array(size);
    crypto.getRandomValues(array);
    return array;
  } : __require("crypto").randomBytes;
  Buffer2 = getBuffer();
  if (isBrowser) {
    Uint8Array.prototype.toString = function(encoding = "utf8") {
      return new TextDecoder().decode(this);
    };
    window.Buffer = Buffer2;
  }
  debug = isBrowser ? createDebug : require_src();
  log = {
    state: debug("state:\uD83D\uDD35"),
    tx: debug("tx:\uD83D\uDFE1"),
    block: debug("block:\uD83D\uDFE2"),
    error: debug("error:\uD83D\uDD34"),
    diff: debug("diff:\uD83D\uDFE3"),
    info: debug("info:\u2139\uFE0F")
  };
  DEMO_SIGNERS = {
    alice: {
      name: "alice.eth",
      address: "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"
    },
    bob: {
      name: "bob.eth",
      address: "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC"
    },
    carol: {
      name: "carol.eth",
      address: "0x90F79bf6EB2c4f870365E785982E1f101E93b906"
    },
    david: {
      name: "david.eth",
      address: "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65"
    },
    eve: {
      name: "eve.eth",
      address: "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc"
    }
  };
});

// src/account-utils.ts
function deriveDelta(delta, isLeft) {
  const totalDelta = delta.ondelta + delta.offdelta;
  const collateral = nonNegative(delta.collateral);
  let ownCreditLimit = delta.leftCreditLimit;
  let peerCreditLimit = delta.rightCreditLimit;
  let inCollateral = totalDelta > 0n ? nonNegative(collateral - totalDelta) : collateral;
  let outCollateral = totalDelta > 0n ? totalDelta > collateral ? collateral : totalDelta : 0n;
  let inOwnCredit = nonNegative(-totalDelta);
  if (inOwnCredit > ownCreditLimit)
    inOwnCredit = ownCreditLimit;
  let outPeerCredit = nonNegative(totalDelta - collateral);
  if (outPeerCredit > peerCreditLimit)
    outPeerCredit = peerCreditLimit;
  let outOwnCredit = nonNegative(ownCreditLimit - inOwnCredit);
  let inPeerCredit = nonNegative(peerCreditLimit - outPeerCredit);
  let inAllowence = delta.rightAllowence;
  let outAllowence = delta.leftAllowence;
  const totalCapacity = collateral + ownCreditLimit + peerCreditLimit;
  let inCapacity = nonNegative(inOwnCredit + inCollateral + inPeerCredit - inAllowence);
  let outCapacity = nonNegative(outPeerCredit + outCollateral + outOwnCredit - outAllowence);
  if (!isLeft) {
    [
      inCollateral,
      inAllowence,
      inCapacity,
      outCollateral,
      outAllowence,
      outCapacity
    ] = [
      outCollateral,
      outAllowence,
      outCapacity,
      inCollateral,
      inAllowence,
      inCapacity
    ];
    [ownCreditLimit, peerCreditLimit] = [peerCreditLimit, ownCreditLimit];
    [outOwnCredit, inOwnCredit, outPeerCredit, inPeerCredit] = [inPeerCredit, outPeerCredit, inOwnCredit, outOwnCredit];
  }
  return {
    delta: totalDelta,
    collateral,
    inCollateral,
    outCollateral,
    inOwnCredit,
    outPeerCredit,
    inAllowence,
    outAllowence,
    totalCapacity,
    ownCreditLimit,
    peerCreditLimit,
    inCapacity,
    outCapacity,
    outOwnCredit,
    inPeerCredit
  };
}
var nonNegative = (x) => x < 0n ? 0n : x;
var init_account_utils = () => {};

// src/snapshot-coder.ts
var USE_MSGPACK = false, jsonReplacer = (key, value) => {
  if (value instanceof Map) {
    return { _dataType: "Map", value: Array.from(value.entries()) };
  }
  if (typeof value === "bigint") {
    return { _dataType: "BigInt", value: value.toString() };
  }
  return value;
}, jsonReviver = (key, value) => {
  if (typeof value === "object" && value !== null) {
    if (value._dataType === "Map")
      return new Map(value.value);
    if (value._dataType === "BigInt")
      return BigInt(value.value);
  }
  return value;
}, encode = (data4) => {
  if (data4 && data4.replicas) {
    console.log(`\uD83D\uDD0D ENCODE-VALIDATION: Checking ${data4.replicas.size} replicas for jBlock integrity`);
    for (const [replicaKey, replica] of data4.replicas.entries()) {
      console.log(`\uD83D\uDD0D ENCODE-CHECK: Replica ${replicaKey} exists: ${!!replica}, state exists: ${!!replica?.state}`);
      if (replica && replica.state) {
        const jBlock = replica.state.jBlock;
        console.log(`\uD83D\uDD0D ENCODE-JBLOCK: ${replicaKey} jBlock=${jBlock} (${typeof jBlock})`);
        if (typeof jBlock !== "number") {
          console.error(`\uD83D\uDCA5 CRITICAL: Attempting to save invalid jBlock for replica ${replicaKey}`);
          console.error(`\uD83D\uDCA5   Expected: number, Got: ${typeof jBlock}, Value: ${jBlock}`);
          console.error(`\uD83D\uDCA5   AUTO-FIXING: Setting jBlock to 0 and continuing save`);
          replica.state.jBlock = 0;
        }
      }
    }
  }
  if (USE_MSGPACK) {
    throw new Error("Msgpack mode requires async initialization - use encodeAsync instead");
  } else {
    return Buffer.from(JSON.stringify(data4, jsonReplacer));
  }
}, decode2 = (buffer) => {
  if (USE_MSGPACK) {
    throw new Error("Msgpack mode requires async initialization - use decodeAsync instead");
  } else {
    const decoded = JSON.parse(buffer.toString(), jsonReviver);
    if (decoded && decoded.replicas) {
      for (const [replicaKey, replica] of decoded.replicas.entries()) {
        if (replica && replica.state) {
          const jBlock = replica.state.jBlock;
          if (typeof jBlock !== "number") {
            const fallbackJBlock = Number(decoded.height) || 0;
            console.warn(`\u26A0\uFE0F jBlock missing for replica ${replicaKey}, using height ${fallbackJBlock} as fallback`);
            replica.state.jBlock = fallbackJBlock;
          }
        }
      }
    }
    return decoded;
  }
};
var init_snapshot_coder = () => {};

// src/state-helpers.ts
function cloneEntityState(entityState) {
  const originalJBlock = entityState.jBlock;
  console.log(`\uD83D\uDD0D CLONE-TRACE: About to clone entity state, jBlock=${originalJBlock} (${typeof originalJBlock})`);
  try {
    const cloned = structuredClone(entityState);
    if (typeof cloned.jBlock !== "number") {
      console.error(`\uD83D\uDCA5 CLONE-CORRUPTION: structuredClone corrupted jBlock!`);
      console.error(`\uD83D\uDCA5   Original: ${entityState.jBlock} (${typeof entityState.jBlock})`);
      console.error(`\uD83D\uDCA5   Cloned: ${cloned.jBlock} (${typeof cloned.jBlock})`);
      cloned.jBlock = entityState.jBlock ?? 0;
    }
    console.log(`\u2705 CLONE-SUCCESS: Cloned state, jBlock=${cloned.jBlock} (${typeof cloned.jBlock})`);
    return cloned;
  } catch (error) {
    console.warn(`\u26A0\uFE0F structuredClone failed, using manual clone: ${error.message}`);
    const manual = manualCloneEntityState(entityState);
    console.log(`\u2705 MANUAL-CLONE: Manual clone completed, jBlock=${manual.jBlock} (${typeof manual.jBlock})`);
    return manual;
  }
}
function manualCloneEntityState(entityState) {
  return {
    ...entityState,
    nonces: cloneMap(entityState.nonces),
    messages: cloneArray(entityState.messages),
    proposals: new Map(Array.from(entityState.proposals.entries()).map(([id2, proposal]) => [
      id2,
      { ...proposal, votes: cloneMap(proposal.votes) }
    ])),
    reserves: cloneMap(entityState.reserves),
    accounts: new Map(Array.from(entityState.accounts.entries()).map(([id2, account]) => [
      id2,
      {
        ...account,
        mempool: cloneArray(account.mempool),
        deltas: cloneMap(account.deltas),
        proofHeader: { ...account.proofHeader },
        proofBody: {
          tokenIds: [...account.proofBody.tokenIds],
          deltas: [...account.proofBody.deltas]
        }
      }
    ])),
    accountInputQueue: cloneArray(entityState.accountInputQueue || []),
    jBlock: entityState.jBlock ?? 0
  };
}
function cloneAccountMachine(account) {
  try {
    return structuredClone(account);
  } catch (error) {
    console.warn(`\u26A0\uFE0F structuredClone failed for AccountMachine, using manual clone`);
    return manualCloneAccountMachine(account);
  }
}
function manualCloneAccountMachine(account) {
  return {
    ...account,
    mempool: [...account.mempool],
    currentFrame: {
      ...account.currentFrame,
      tokenIds: [...account.currentFrame.tokenIds],
      deltas: [...account.currentFrame.deltas]
    },
    deltas: new Map(Array.from(account.deltas.entries()).map(([key, delta]) => [key, { ...delta }])),
    globalCreditLimits: { ...account.globalCreditLimits },
    pendingSignatures: [...account.pendingSignatures],
    pendingFrame: account.pendingFrame ? {
      ...account.pendingFrame,
      accountTxs: [...account.pendingFrame.accountTxs],
      tokenIds: [...account.pendingFrame.tokenIds],
      deltas: [...account.pendingFrame.deltas]
    } : undefined,
    clonedForValidation: undefined,
    proofHeader: { ...account.proofHeader },
    proofBody: {
      ...account.proofBody,
      tokenIds: [...account.proofBody.tokenIds],
      deltas: [...account.proofBody.deltas]
    }
  };
}
var cloneMap = (map) => new Map(map), cloneArray = (arr) => [...arr], cloneEntityReplica = (replica) => {
  return {
    entityId: replica.entityId,
    signerId: replica.signerId,
    state: cloneEntityState(replica.state),
    mempool: cloneArray(replica.mempool),
    proposal: replica.proposal ? {
      height: replica.proposal.height,
      txs: cloneArray(replica.proposal.txs),
      hash: replica.proposal.hash,
      newState: replica.proposal.newState,
      signatures: cloneMap(replica.proposal.signatures)
    } : undefined,
    lockedFrame: replica.lockedFrame ? {
      height: replica.lockedFrame.height,
      txs: cloneArray(replica.lockedFrame.txs),
      hash: replica.lockedFrame.hash,
      newState: replica.lockedFrame.newState,
      signatures: cloneMap(replica.lockedFrame.signatures)
    } : undefined,
    isProposer: replica.isProposer
  };
}, captureSnapshot = (env, envHistory, db, serverInput, serverOutputs, description) => {
  const snapshot = {
    height: env.height,
    timestamp: env.timestamp,
    replicas: new Map(Array.from(env.replicas.entries()).map(([key, replica]) => [key, cloneEntityReplica(replica)])),
    serverInput: {
      serverTxs: [...serverInput.serverTxs],
      entityInputs: serverInput.entityInputs.map((input) => ({
        ...input,
        entityTxs: input.entityTxs ? [...input.entityTxs] : undefined,
        precommits: input.precommits ? new Map(input.precommits) : undefined
      }))
    },
    serverOutputs: serverOutputs.map((output2) => ({
      ...output2,
      entityTxs: output2.entityTxs ? [...output2.entityTxs] : undefined,
      precommits: output2.precommits ? new Map(output2.precommits) : undefined
    })),
    description
  };
  envHistory.push(snapshot);
  const batch = db.batch();
  batch.put(Buffer.from(`snapshot:${snapshot.height}`), encode(snapshot));
  batch.put(Buffer.from("latest_height"), Buffer.from(snapshot.height.toString()));
  batch.write();
  if (DEBUG) {
    console.log(`\uD83D\uDCF8 Snapshot captured: "${description}" (${envHistory.length} total)`);
    if (serverInput.serverTxs.length > 0) {
      console.log(`    \uD83D\uDDA5\uFE0F  ServerTxs: ${serverInput.serverTxs.length}`);
      serverInput.serverTxs.forEach((tx, i) => {
        console.log(`      ${i + 1}. ${tx.type} ${tx.entityId}:${tx.signerId} (${tx.data.isProposer ? "proposer" : "validator"})`);
      });
    }
    if (serverInput.entityInputs.length > 0) {
      console.log(`    \uD83D\uDCE8 EntityInputs: ${serverInput.entityInputs.length}`);
      serverInput.entityInputs.forEach((input, i) => {
        const parts = [];
        if (input.entityTxs?.length)
          parts.push(`${input.entityTxs.length} txs`);
        if (input.precommits?.size)
          parts.push(`${input.precommits.size} precommits`);
        if (input.proposedFrame)
          parts.push(`frame: ${input.proposedFrame.hash.slice(0, 10)}...`);
        console.log(`      ${i + 1}. ${input.entityId}:${input.signerId} (${parts.join(", ") || "empty"})`);
      });
    }
  }
};
var init_state_helpers = __esm(() => {
  init_snapshot_coder();
  init_utils5();
});

// src/account-tx/crypto.ts
function signAccountFrame(entityId, frameHash, privateData = "mock-private-key") {
  const content = `${entityId}-${frameHash}-${privateData}`;
  const signature = `sig_${Buffer.from(content).toString("base64").slice(0, 32)}`;
  console.log(`\u270D\uFE0F Signed frame ${frameHash.slice(0, 10)} by ${entityId.slice(-4)}: ${signature.slice(0, 20)}...`);
  return signature;
}
function verifyAccountSignature(entityId, frameHash, signature, privateData = "mock-private-key") {
  const expectedSignature = signAccountFrame(entityId, frameHash, privateData);
  const isValid = signature === expectedSignature;
  if (isValid) {
    console.log(`\u2705 Valid signature from ${entityId.slice(-4)} for frame ${frameHash.slice(0, 10)}`);
  } else {
    console.log(`\u274C Invalid signature from ${entityId.slice(-4)} for frame ${frameHash.slice(0, 10)}`);
    console.log(`   Expected: ${expectedSignature.slice(0, 20)}...`);
    console.log(`   Received: ${signature.slice(0, 20)}...`);
  }
  return isValid;
}

// src/crypto-utils.ts
async function hash3(content) {
  const encoder = new TextEncoder;
  const data4 = encoder.encode(content);
  const hashBuffer = await crypto.subtle.digest("SHA-256", data4);
  const hashArray = new Uint8Array(hashBuffer);
  const hashHex = Array.from(hashArray).map((b2) => b2.toString(16).padStart(2, "0")).join("");
  return `0x${hashHex}`;
}
async function hash20(content) {
  const fullHash = await hash3(content);
  return fullHash.slice(0, 42);
}
var init_crypto_utils = () => {};

// src/account-consensus.ts
var exports_account_consensus = {};
__export(exports_account_consensus, {
  validateMessageCounter: () => validateMessageCounter,
  validateAccountFrame: () => validateAccountFrame,
  shouldProposeFrame: () => shouldProposeFrame,
  proposeAccountFrame: () => proposeAccountFrame,
  processAccountTx: () => processAccountTx,
  handleAccountInput: () => handleAccountInput,
  getAccountsToProposeFrames: () => getAccountsToProposeFrames,
  generateAccountProof: () => generateAccountProof,
  addToAccountMempool: () => addToAccountMempool
});
function validateAccountFrame(frame) {
  if (frame.frameId < 0)
    return false;
  if (frame.accountTxs.length > 100)
    return false;
  if (frame.tokenIds.length !== frame.deltas.length)
    return false;
  const now = Date.now();
  if (Math.abs(frame.timestamp - now) > 300000)
    return false;
  return true;
}
function validateMessageCounter(accountMachine, counter) {
  if (counter <= 0 || counter > MAX_MESSAGE_COUNTER)
    return false;
  if (counter <= accountMachine.ackedTransitions) {
    console.log(`\u274C Counter replay: ${counter} <= ${accountMachine.ackedTransitions}`);
    return false;
  }
  const now = Date.now();
  if (counter > now + 60000) {
    console.log(`\u274C Counter too far in future: ${counter} vs ${now}`);
    return false;
  }
  return true;
}
async function createFrameHash(frame) {
  const txsContent = frame.accountTxs.map((tx) => `${tx.type}:${JSON.stringify(tx.data, (k, v) => typeof v === "bigint" ? v.toString() : v)}`).join("|");
  const content = `${frame.frameId}-${frame.timestamp}-${txsContent}-${frame.tokenIds.join(",")}-${frame.deltas.map((d) => d.toString()).join(",")}`;
  return await hash20(content);
}
function processAccountTx(accountMachine, accountTx, isOurFrame = true) {
  console.log(`\uD83D\uDD04 Processing ${accountTx.type} for ${accountMachine.counterpartyEntityId.slice(-4)} (ourFrame: ${isOurFrame})`);
  const events = [];
  switch (accountTx.type) {
    case "direct_payment": {
      const { tokenId, amount, route, description } = accountTx.data;
      let delta = accountMachine.deltas.get(tokenId);
      if (!delta) {
        delta = {
          tokenId,
          collateral: 0n,
          ondelta: 0n,
          offdelta: 0n,
          leftCreditLimit: 1000000n,
          rightCreditLimit: 1000000n,
          leftAllowence: 0n,
          rightAllowence: 0n
        };
        accountMachine.deltas.set(tokenId, delta);
      }
      const isOutgoing = isOurFrame;
      if (isOutgoing) {
        const derived = deriveDelta(delta, accountMachine.isProposer);
        if (amount > derived.outCapacity) {
          return {
            success: false,
            error: `Insufficient capacity: need ${amount.toString()}, available ${derived.outCapacity.toString()}`,
            events
          };
        }
        const newDelta = delta.ondelta + delta.offdelta + amount;
        if (tokenId === 3 && newDelta > accountMachine.globalCreditLimits.peerLimit) {
          return {
            success: false,
            error: `Exceeds global credit limit: ${newDelta.toString()} > ${accountMachine.globalCreditLimits.peerLimit.toString()}`,
            events
          };
        }
        delta.offdelta += amount;
        events.push(`\uD83D\uDCB8 Sent ${amount.toString()} token ${tokenId} to Entity ${accountMachine.counterpartyEntityId.slice(-4)} ${description ? "(" + description + ")" : ""}`);
      } else {
        delta.offdelta -= amount;
        events.push(`\uD83D\uDCB0 Received ${amount.toString()} token ${tokenId} from Entity ${accountMachine.counterpartyEntityId.slice(-4)} ${description ? "(" + description + ")" : ""}`);
      }
      const tokenIndex = accountMachine.currentFrame.tokenIds.indexOf(tokenId);
      const totalDelta = delta.ondelta + delta.offdelta;
      if (tokenIndex >= 0) {
        accountMachine.currentFrame.deltas[tokenIndex] = totalDelta;
      } else {
        accountMachine.currentFrame.tokenIds.push(tokenId);
        accountMachine.currentFrame.deltas.push(totalDelta);
      }
      if (route && route.length > 1 && !isOutgoing) {
        const nextHop = route[0];
        const finalTarget = route[route.length - 1];
        if (accountMachine.counterpartyEntityId === nextHop) {
          console.error(`\u274C Routing error: received from ${nextHop} but should forward to them`);
        } else {
          events.push(`\u21AA\uFE0F Forwarding payment to ${finalTarget.slice(-4)} via ${route.length} more hops`);
          accountMachine.pendingForward = {
            tokenId,
            amount,
            route: route.slice(1),
            description
          };
        }
      }
      return { success: true, events };
    }
    default:
      return { success: false, error: `Unknown accountTx type: ${accountTx.type}`, events };
  }
}
async function proposeAccountFrame(accountMachine) {
  console.log(`\uD83D\uDE80 E-MACHINE: Proposing account frame for ${accountMachine.counterpartyEntityId.slice(-4)}`);
  const events = [];
  if (accountMachine.mempool.length > MEMPOOL_LIMIT) {
    return { success: false, error: `Mempool overflow: ${accountMachine.mempool.length} > ${MEMPOOL_LIMIT}`, events };
  }
  if (accountMachine.mempool.length === 0) {
    return { success: false, error: "No transactions to propose", events };
  }
  if (accountMachine.pendingFrame) {
    console.log(`\u23F3 Waiting for ACK on pending frame #${accountMachine.pendingFrame.frameId}`);
    return { success: false, error: "Waiting for ACK on pending frame", events };
  }
  const clonedMachine = cloneAccountMachine(accountMachine);
  const allEvents = [];
  for (const accountTx of accountMachine.mempool) {
    const result = processAccountTx(clonedMachine, accountTx, true);
    if (!result.success) {
      return { success: false, error: `Tx validation failed: ${result.error}`, events: allEvents };
    }
    allEvents.push(...result.events);
  }
  const newFrame = {
    frameId: accountMachine.currentFrameId + 1,
    timestamp: Date.now(),
    accountTxs: [...accountMachine.mempool],
    previousStateHash: accountMachine.currentFrameId === 0 ? "genesis" : await createFrameHash({
      frameId: accountMachine.currentFrameId,
      timestamp: accountMachine.currentFrame.timestamp,
      accountTxs: [],
      previousStateHash: "",
      stateHash: "",
      isProposer: accountMachine.isProposer,
      tokenIds: accountMachine.currentFrame.tokenIds,
      deltas: accountMachine.currentFrame.deltas
    }),
    stateHash: "",
    isProposer: accountMachine.isProposer,
    tokenIds: clonedMachine.currentFrame.tokenIds,
    deltas: clonedMachine.currentFrame.deltas
  };
  newFrame.stateHash = await createFrameHash(newFrame);
  const signature = signAccountFrame(accountMachine.proofHeader.fromEntity, newFrame.stateHash);
  accountMachine.pendingFrame = newFrame;
  accountMachine.sentTransitions = accountMachine.mempool.length;
  accountMachine.clonedForValidation = clonedMachine;
  accountMachine.mempool = [];
  events.push(`\uD83D\uDE80 Proposed frame ${newFrame.frameId} with ${newFrame.accountTxs.length} transactions`);
  const accountInput = {
    fromEntityId: accountMachine.proofHeader.fromEntity,
    toEntityId: accountMachine.proofHeader.toEntity,
    frameId: newFrame.frameId,
    newAccountFrame: newFrame,
    newSignatures: [signature],
    counter: Date.now(),
    accountFrame: newFrame
  };
  return { success: true, accountInput, events };
}
function handleAccountInput(accountMachine, input) {
  console.log(`\uD83D\uDCE8 A-MACHINE: Received AccountInput from ${input.fromEntityId.slice(-4)}`);
  const events = [];
  if (input.counter && accountMachine.currentFrameId > 0) {
    const counterValid = validateMessageCounter(accountMachine, input.counter);
    console.log(`\uD83D\uDD0D Counter validation: ${input.counter} vs acked=${accountMachine.ackedTransitions}, frameId=${accountMachine.currentFrameId}, valid=${counterValid}`);
    if (!counterValid) {
      return { success: false, error: `Invalid message counter: ${input.counter} vs ${accountMachine.ackedTransitions}`, events };
    }
  } else if (input.counter) {
    console.log(`\uD83D\uDD0D Initial frame - accepting counter ${input.counter} without strict validation`);
  }
  if (input.counter) {
    accountMachine.ackedTransitions = Math.max(accountMachine.ackedTransitions, input.counter);
  }
  if (accountMachine.pendingFrame && input.frameId === accountMachine.pendingFrame.frameId && input.prevSignatures) {
    console.log(`\u2705 Received confirmation for pending frame ${input.frameId}`);
    const frameHash = accountMachine.pendingFrame.stateHash;
    const expectedSigner = accountMachine.proofHeader.toEntity;
    if (input.prevSignatures.length > 0 && verifyAccountSignature(expectedSigner, frameHash, input.prevSignatures[0])) {
      if (accountMachine.clonedForValidation) {
        accountMachine.deltas = accountMachine.clonedForValidation.deltas;
        accountMachine.currentFrame = {
          frameId: accountMachine.pendingFrame.frameId,
          timestamp: accountMachine.pendingFrame.timestamp,
          tokenIds: accountMachine.pendingFrame.tokenIds,
          deltas: accountMachine.pendingFrame.deltas
        };
        accountMachine.currentFrameId = accountMachine.pendingFrame.frameId;
      }
      accountMachine.pendingFrame = undefined;
      accountMachine.sentTransitions = 0;
      accountMachine.clonedForValidation = undefined;
      accountMachine.rollbackCount = Math.max(0, accountMachine.rollbackCount - 1);
      events.push(`\u2705 Frame ${input.frameId} confirmed and committed`);
      return { success: true, events };
    } else {
      return { success: false, error: "Invalid confirmation signature", events };
    }
  }
  if (input.newAccountFrame) {
    const receivedFrame = input.newAccountFrame;
    if (!validateAccountFrame(receivedFrame)) {
      return { success: false, error: "Invalid frame structure", events };
    }
    if (receivedFrame.frameId === accountMachine.currentFrameId + 1 && accountMachine.pendingFrame && accountMachine.pendingFrame.frameId === receivedFrame.frameId) {
      console.log(`\uD83D\uDD04 Simultaneous proposals detected for frame ${receivedFrame.frameId}`);
      const ourHash = accountMachine.pendingFrame.stateHash;
      const theirHash = receivedFrame.stateHash;
      if (ourHash < theirHash) {
        console.log(`\uD83D\uDCE4 Our frame wins (hash comparison), ignoring received frame`);
        return { success: false, error: "Frame conflict - our frame has priority", events };
      } else {
        console.log(`\uD83D\uDCE5 Their frame wins (hash comparison), accepting and rolling back ours`);
        accountMachine.pendingFrame = undefined;
        accountMachine.sentTransitions = 0;
        accountMachine.clonedForValidation = undefined;
      }
    }
    if (receivedFrame.frameId !== accountMachine.currentFrameId + 1) {
      console.log(`\u274C Frame sequence mismatch: expected ${accountMachine.currentFrameId + 1}, got ${receivedFrame.frameId}`);
      return { success: false, error: `Frame sequence mismatch: expected ${accountMachine.currentFrameId + 1}, got ${receivedFrame.frameId}`, events };
    }
    if (input.newSignatures && input.newSignatures.length > 0) {
      const isValid = verifyAccountSignature(input.fromEntityId, receivedFrame.stateHash, input.newSignatures[0]);
      if (!isValid) {
        return { success: false, error: "Invalid frame signature", events };
      }
    }
    const clonedMachine = cloneAccountMachine(accountMachine);
    const processEvents = [];
    for (const accountTx of receivedFrame.accountTxs) {
      const result = processAccountTx(clonedMachine, accountTx, false);
      if (!result.success) {
        return { success: false, error: `Frame application failed: ${result.error}`, events };
      }
      processEvents.push(...result.events);
    }
    accountMachine.deltas = clonedMachine.deltas;
    accountMachine.currentFrame = {
      frameId: receivedFrame.frameId,
      timestamp: receivedFrame.timestamp,
      tokenIds: receivedFrame.tokenIds,
      deltas: receivedFrame.deltas
    };
    accountMachine.currentFrameId = receivedFrame.frameId;
    events.push(...processEvents);
    events.push(`\uD83E\uDD1D Accepted frame ${receivedFrame.frameId} from Entity ${input.fromEntityId.slice(-4)}`);
    const confirmationSig = signAccountFrame(accountMachine.proofHeader.fromEntity, receivedFrame.stateHash);
    const response = {
      fromEntityId: accountMachine.proofHeader.fromEntity,
      toEntityId: input.fromEntityId,
      frameId: receivedFrame.frameId,
      prevSignatures: [confirmationSig],
      counter: Date.now()
    };
    return { success: true, response, events };
  }
  return { success: true, events };
}
function addToAccountMempool(accountMachine, accountTx) {
  if (accountMachine.mempool.length >= MEMPOOL_LIMIT) {
    console.log(`\u274C Mempool full: ${accountMachine.mempool.length} >= ${MEMPOOL_LIMIT}`);
    return false;
  }
  accountMachine.mempool.push(accountTx);
  console.log(`\uD83D\uDCE5 Added ${accountTx.type} to mempool (${accountMachine.mempool.length}/${MEMPOOL_LIMIT})`);
  return true;
}
function shouldProposeFrame(accountMachine) {
  return accountMachine.mempool.length > 0 && accountMachine.isProposer && !accountMachine.pendingFrame;
}
function getAccountsToProposeFrames(entityState) {
  const accountsToProposeFrames = [];
  if (!entityState.accounts || !(entityState.accounts instanceof Map)) {
    console.log(`\u26A0\uFE0F No accounts or accounts not a Map: ${typeof entityState.accounts}`);
    return accountsToProposeFrames;
  }
  for (const [counterpartyEntityId, accountMachine] of entityState.accounts) {
    if (shouldProposeFrame(accountMachine)) {
      accountsToProposeFrames.push(counterpartyEntityId);
    }
  }
  return accountsToProposeFrames;
}
async function generateAccountProof(accountMachine) {
  accountMachine.proofBody = {
    tokenIds: Array.from(accountMachine.deltas.keys()).sort((a, b2) => a - b2),
    deltas: Array.from(accountMachine.deltas.keys()).sort((a, b2) => a - b2).map((tokenId) => {
      const delta = accountMachine.deltas.get(tokenId);
      return delta.ondelta + delta.offdelta;
    })
  };
  const proofData = {
    fromEntity: accountMachine.proofHeader.fromEntity,
    toEntity: accountMachine.proofHeader.toEntity,
    cooperativeNonce: accountMachine.proofHeader.cooperativeNonce,
    disputeNonce: accountMachine.proofHeader.disputeNonce,
    tokenIds: accountMachine.proofBody.tokenIds,
    deltas: accountMachine.proofBody.deltas.map((d) => d.toString())
  };
  const proofContent = JSON.stringify(proofData);
  const fullHash = await hash3(proofContent);
  const proofHash = fullHash.slice(2);
  const signature = signAccountFrame(accountMachine.proofHeader.fromEntity, `0x${proofHash}`);
  accountMachine.hankoSignature = signature;
  console.log(`\uD83D\uDD10 Generated account proof: ${accountMachine.proofBody.tokenIds.length} tokens, hash: 0x${proofHash.slice(0, 20)}...`);
  console.log(`\uD83D\uDD10 ProofBody tokens: [${accountMachine.proofBody.tokenIds.join(",")}]`);
  console.log(`\uD83D\uDD10 ProofBody deltas: [${accountMachine.proofBody.deltas.map((d) => d.toString()).join(",")}]`);
  return { proofHash: `0x${proofHash}`, signature };
}
var MEMPOOL_LIMIT = 1000, MAX_MESSAGE_COUNTER = 1e6;
var init_account_consensus = __esm(() => {
  init_state_helpers();
  init_account_utils();
  init_crypto_utils();
});

// node_modules/level/index.js
var $Level = require_classic_level().ClassicLevel;

// src/entity-helpers.ts
function getEntityNumber(entityId) {
  if (!entityId || entityId === "0x" || entityId === "0x0") {
    return 0;
  }
  try {
    const num = parseInt(entityId, 16);
    return isNaN(num) ? 0 : num;
  } catch {
    return 0;
  }
}
function formatEntityId(entityId) {
  const num = getEntityNumber(entityId);
  return num > 0 ? `#${num}` : "Unknown";
}

// src/name-resolution.ts
init_utils5();
var storeProfile = async (db, profile) => {
  if (!db) {
    console.warn("Database not available for profile storage");
    return;
  }
  try {
    await db.put(`profile:${profile.entityId}`, JSON.stringify(profile));
    await updateNameIndex(db, profile.name, profile.entityId);
    console.log(`\uD83D\uDCDD Stored profile for ${profile.name} (${formatEntityDisplay(profile.entityId)})`);
  } catch (error) {
    console.error("Error storing profile:", error);
  }
};
var getProfile = async (db, entityId) => {
  if (!db)
    return null;
  try {
    const data4 = await db.get(`profile:${entityId}`);
    return JSON.parse(data4);
  } catch (error) {
    return null;
  }
};
var updateNameIndex = async (db, name, entityId) => {
  try {
    let nameIndex = {};
    try {
      const data4 = await db.get("name-index");
      nameIndex = JSON.parse(data4);
    } catch {}
    nameIndex[name.toLowerCase()] = entityId;
    await db.put("name-index", JSON.stringify(nameIndex));
  } catch (error) {
    console.error("Error updating name index:", error);
  }
};
var searchEntityNames = async (db, query, limit = 10) => {
  if (!db || !query.trim())
    return [];
  try {
    const data4 = await db.get("name-index");
    const nameIndex = JSON.parse(data4);
    const queryLower = query.toLowerCase();
    const results = [];
    for (const [name, entityId] of Object.entries(nameIndex)) {
      if (name.includes(queryLower)) {
        let relevance = 0;
        if (name.startsWith(queryLower)) {
          relevance = 1;
        } else if (name.includes(queryLower)) {
          relevance = 0.7;
        }
        const profile = await getProfile(db, entityId);
        const avatar = profile?.avatar || generateEntityAvatar(entityId);
        results.push({
          entityId,
          name: profile?.name || formatEntityDisplay(entityId),
          avatar,
          relevance
        });
      }
    }
    results.sort((a, b2) => {
      if (a.relevance !== b2.relevance) {
        return b2.relevance - a.relevance;
      }
      return a.name.localeCompare(b2.name);
    });
    return results.slice(0, limit);
  } catch (error) {
    console.error("Error searching entity names:", error);
    return [];
  }
};
var createProfileUpdateTx = (updates) => {
  return {
    type: "profile-update",
    data: updates
  };
};
var processProfileUpdate = async (db, entityId, updates, hankoSignature, env) => {
  console.log(`\uD83C\uDFF7\uFE0F processProfileUpdate called for ${entityId} with updates:`, updates);
  try {
    let profile = await getProfile(db, entityId);
    if (!profile) {
      profile = {
        entityId,
        name: formatEntityDisplay(entityId),
        lastUpdated: Date.now(),
        hankoSignature
      };
    }
    if (updates.name !== undefined)
      profile.name = updates.name;
    if (updates.avatar !== undefined)
      profile.avatar = updates.avatar;
    if (updates.bio !== undefined)
      profile.bio = updates.bio;
    if (updates.website !== undefined)
      profile.website = updates.website;
    profile.lastUpdated = Date.now();
    profile.hankoSignature = hankoSignature;
    if (env?.gossip?.announce) {
      try {
        env.gossip.announce({
          entityId,
          capabilities: updates.capabilities || [],
          hubs: updates.hubs || [],
          metadata: {
            name: profile.name,
            avatar: profile.avatar,
            bio: profile.bio,
            website: profile.website,
            lastUpdated: profile.lastUpdated,
            hankoSignature: profile.hankoSignature
          }
        });
        console.log(`\uD83D\uDCE1 Synced profile update to gossip: ${entityId}`);
      } catch (gossipError) {
        console.error(`\u274C Failed to sync profile to gossip layer for ${entityId}:`, gossipError);
      }
    }
    await storeProfile(db, profile);
    console.log(`\u2705 Updated profile for ${profile.name} (${formatEntityDisplay(entityId)})`);
  } catch (error) {
    console.error("Error processing profile update:", error);
  }
};
var resolveEntityName = async (db, entityId) => {
  const profile = await getProfile(db, entityId);
  return profile?.name || formatEntityDisplay(entityId);
};
var getEntityDisplayInfo2 = async (db, entityId) => {
  const profile = await getProfile(db, entityId);
  return {
    name: profile?.name || formatEntityDisplay(entityId),
    avatar: profile?.avatar || generateEntityAvatar(entityId)
  };
};

// src/entity-tx/apply.ts
init_utils5();

// src/gossip-helper.ts
init_account_utils();
function buildEntityProfile(entityState) {
  const accounts = [];
  for (const [counterpartyId, accountMachine] of entityState.accounts.entries()) {
    const tokenCapacities = new Map;
    for (const [tokenId, delta] of accountMachine.deltas.entries()) {
      const derived = deriveDelta(delta, accountMachine.isProposer);
      tokenCapacities.set(tokenId, {
        inCapacity: derived.inCapacity,
        outCapacity: derived.outCapacity
      });
    }
    accounts.push({
      counterpartyId,
      tokenCapacities
    });
  }
  const profile = {
    entityId: entityState.entityId,
    capabilities: [],
    hubs: [],
    metadata: {
      name: entityState.profile?.name,
      bio: entityState.profile?.bio,
      lastUpdated: Date.now(),
      isHub: false,
      routingFeePPM: entityState.profile?.routingFeePPM || 100,
      baseFee: entityState.profile?.baseFee || 0n
    },
    accounts
  };
  return profile;
}

// src/entity-tx/handlers/account.ts
init_account_consensus();
init_state_helpers();
function createDemoDelta(tokenId, collateral, ondelta) {
  return {
    tokenId,
    collateral,
    ondelta,
    offdelta: 0n,
    leftCreditLimit: 1000000n,
    rightCreditLimit: 1000000n,
    leftAllowence: 0n,
    rightAllowence: 0n
  };
}
async function handleAccountInput2(state, input, env) {
  console.log(`\uD83D\uDE80 APPLY accountInput: ${input.fromEntityId} \u2192 ${input.toEntityId}`, input.accountTx);
  const newState = cloneEntityState(state);
  const outputs = [];
  if (input.accountTx && input.accountTx.type) {
    newState.messages.push(`\uD83D\uDCE8 Received ${input.accountTx.type} from Entity ${input.fromEntityId.slice(-4)}`);
  } else if (!input.accountTx) {
    console.warn(`\u26A0\uFE0F Received accountInput without accountTx from ${input.fromEntityId}`);
    newState.messages.push(`\uD83D\uDCE8 Received account request from Entity ${input.fromEntityId.slice(-4)}`);
  }
  let accountMachine = newState.accounts.get(input.fromEntityId);
  if (!accountMachine) {
    const initialDeltas = new Map;
    initialDeltas.set(2, {
      tokenId: 2,
      collateral: 0n,
      ondelta: 0n,
      offdelta: 0n,
      leftCreditLimit: 1000000n,
      rightCreditLimit: 1000000n,
      leftAllowence: 0n,
      rightAllowence: 0n
    });
    accountMachine = {
      counterpartyEntityId: input.fromEntityId,
      mempool: [],
      currentFrame: {
        frameId: 0,
        timestamp: Date.now(),
        tokenIds: [],
        deltas: []
      },
      sentTransitions: 0,
      ackedTransitions: 0,
      deltas: initialDeltas,
      globalCreditLimits: {
        ownLimit: 1000000n,
        peerLimit: 1000000n
      },
      currentFrameId: 0,
      pendingFrame: undefined,
      pendingSignatures: [],
      rollbackCount: 0,
      isProposer: state.entityId < input.fromEntityId,
      clonedForValidation: undefined,
      proofHeader: {
        fromEntity: state.entityId,
        toEntity: input.fromEntityId,
        cooperativeNonce: 0,
        disputeNonce: 0
      },
      proofBody: {
        tokenIds: [1, 2, 3],
        deltas: [0n, -100n, 50n]
      }
    };
    newState.accounts.set(input.fromEntityId, accountMachine);
    console.log(`\uD83D\uDCB3 Created new account machine for counterparty ${input.fromEntityId}`);
  }
  if (input.accountTx && input.accountTx.type === "account_settle") {
    const settleData = input.accountTx.data;
    const tokenId = settleData.tokenId;
    console.log(`\uD83D\uDCB0 Processing settlement for token ${tokenId}:`, settleData);
    let delta = accountMachine.deltas.get(tokenId);
    if (!delta) {
      delta = createDemoDelta(tokenId, 0n, 0n);
      accountMachine.deltas.set(tokenId, delta);
    }
    delta.collateral = BigInt(settleData.collateral);
    delta.ondelta = BigInt(settleData.ondelta);
    console.log(`\uD83D\uDCB0 Updated delta for token ${tokenId}:`, {
      tokenId: delta.tokenId,
      collateral: delta.collateral.toString(),
      ondelta: delta.ondelta.toString(),
      offdelta: delta.offdelta.toString()
    });
    const frameTokenIds = accountMachine.currentFrame.tokenIds;
    const frameDeltas = [...accountMachine.currentFrame.deltas];
    const tokenIndex = frameTokenIds.indexOf(tokenId);
    if (tokenIndex >= 0) {
      frameDeltas[tokenIndex] = delta.ondelta + delta.offdelta;
    } else {
      frameTokenIds.push(tokenId);
      frameDeltas.push(delta.ondelta + delta.offdelta);
    }
    accountMachine.currentFrame = {
      frameId: accountMachine.currentFrame.frameId + 1,
      timestamp: Date.now(),
      tokenIds: frameTokenIds,
      deltas: frameDeltas
    };
    const message = `\uD83D\uDCB0 Settlement processed: Token ${tokenId}, Collateral ${settleData.collateral}, OnDelta ${settleData.ondelta}`;
    newState.messages.push(message);
    console.log(`\u2705 Settlement processed for Entity ${input.toEntityId.slice(-4)}, Token ${tokenId}`);
  } else if (input.frameId || input.newAccountFrame || input.accountFrame) {
    console.log(`\uD83E\uDD1D Processing frame-level AccountInput from ${input.fromEntityId.slice(-4)}`);
    const result = handleAccountInput(accountMachine, input);
    if (result.success) {
      newState.messages.push(...result.events);
      if (result.response) {
        console.log(`\uD83D\uDCE4 Sending AccountInput ACK back to ${result.response.toEntityId.slice(-4)}`);
        let targetProposerId = "alice";
        const targetReplicaKeys = Array.from(env.replicas.keys()).filter((key) => key.startsWith(result.response.toEntityId + ":"));
        if (targetReplicaKeys.length > 0) {
          const firstTargetReplica = env.replicas.get(targetReplicaKeys[0]);
          if (firstTargetReplica?.state.config.validators[0]) {
            targetProposerId = firstTargetReplica.state.config.validators[0];
          }
        }
        outputs.push({
          entityId: result.response.toEntityId,
          signerId: targetProposerId,
          entityTxs: [{
            type: "accountInput",
            data: result.response
          }]
        });
        console.log(`\u2705 ACK queued for Entity ${result.response.toEntityId.slice(-4)}`);
      }
    } else {
      console.log(`\u274C Frame consensus failed: ${result.error}`);
      newState.messages.push(`\u274C Frame consensus failed with Entity ${input.fromEntityId.slice(-4)}: ${result.error}`);
    }
  } else if (input.accountTx) {
    if (input.accountTx && input.accountTx.type === "direct_payment") {
      const paymentData = input.accountTx.data;
      console.log(`\uD83D\uDCB8 Processing direct_payment relay: route=${paymentData.route}, amount=${paymentData.amount}`);
      if (!paymentData.route || paymentData.route.length === 0) {
        newState.messages.push(`\uD83D\uDCB0 Received payment: ${paymentData.amount} (token ${paymentData.tokenId}) - ${paymentData.description}`);
        console.log(`\u2705 Payment received at final destination`);
      } else if (paymentData.route.length === 1 && paymentData.route[0] === state.entityId) {
        newState.messages.push(`\uD83D\uDCB0 Received payment: ${paymentData.amount} (token ${paymentData.tokenId}) - ${paymentData.description}`);
        console.log(`\u2705 Payment received at final destination (single hop)`);
      } else {
        const nextHop = paymentData.route[0];
        const remainingRoute = paymentData.route.slice(1);
        console.log(`\uD83D\uDCB8 Forwarding payment to next hop: ${nextHop}, remaining route: ${remainingRoute}`);
        if (!newState.accounts.has(nextHop)) {
          console.error(`\u274C Cannot forward payment: No account with ${nextHop}`);
          newState.messages.push(`\u274C Payment routing failed: No account with Entity ${nextHop.slice(-4)}`);
        } else {
          const forwardedPayment = {
            type: "direct_payment",
            data: {
              tokenId: paymentData.tokenId,
              amount: paymentData.amount,
              route: remainingRoute,
              description: paymentData.description
            }
          };
          const nextHopAccount = newState.accounts.get(nextHop);
          if (nextHopAccount) {
            nextHopAccount.mempool.push(forwardedPayment);
            newState.messages.push(`\u26A1 Relaying payment to Entity ${nextHop.slice(-4)} (${remainingRoute.length} hops remaining)`);
            console.log(`\uD83D\uDCE4 Payment forwarded to ${nextHop} account mempool`);
          }
        }
      }
    } else if (input.accountTx) {
      console.log(`\uD83D\uDCE5 Received ${input.accountTx.type} from ${input.fromEntityId.slice(-4)} - will be processed in next frame`);
      newState.messages.push(`\uD83D\uDCE8 Received ${input.accountTx.type} from Entity ${input.fromEntityId.slice(-4)}`);
    }
  }
  return { newState, outputs };
}

// src/entity-tx/j-events.ts
init_utils5();
init_state_helpers();
var TOKEN_REGISTRY = {
  0: { symbol: "NULL", name: "Null Token", decimals: 18 },
  1: { symbol: "ETH", name: "Ethereum", decimals: 18 },
  2: { symbol: "USDT", name: "Tether USD", decimals: 18 },
  3: { symbol: "USDC", name: "USD Coin", decimals: 18 },
  4: { symbol: "ACME", name: "ACME Corp Shares", decimals: 18 },
  5: { symbol: "BTC", name: "Bitcoin Shares", decimals: 8 }
};
var getTokenSymbol = (tokenId) => {
  return TOKEN_REGISTRY[tokenId]?.symbol || `TKN${tokenId}`;
};
var getTokenDecimals = (tokenId) => {
  return TOKEN_REGISTRY[tokenId]?.decimals || 18;
};
var handleJEvent = (entityState, entityTxData) => {
  const { from, event, observedAt, blockNumber, transactionHash } = entityTxData;
  const currentJBlock = entityState.jBlock || 0;
  console.log(`\uD83D\uDD0D J-EVENT-CHECK: ${event.type} block=${blockNumber} vs entity.jBlock=${currentJBlock} (raw=${entityState.jBlock}), from=${from}`);
  if (blockNumber <= currentJBlock) {
    console.log(`\uD83D\uDD04 IGNORING OLD J-EVENT: ${event.type} from block ${blockNumber} (entity already at j-block ${entityState.jBlock})`);
    return entityState;
  }
  console.log(`\u2705 J-EVENT-ACCEPTED: ${event.type} block=${blockNumber} > entity.jBlock=${entityState.jBlock}, will process`);
  const newEntityState = cloneEntityState(entityState);
  newEntityState.jBlock = blockNumber ?? (entityState.jBlock ?? 0);
  const timestamp = new Date(observedAt).toLocaleTimeString();
  const txHashShort = transactionHash ? transactionHash.slice(0, 10) + "..." : "unknown";
  let elaborateMessage = "";
  if (event.type === "reserve_transferred") {
    const { from: fromEntity, to: toEntity, tokenId, amount, direction } = event.data;
    const tokenSymbol = getTokenSymbol(tokenId);
    const decimals = getTokenDecimals(tokenId);
    const amountDisplay = (Number(amount) / 10 ** decimals).toFixed(4);
    if (direction === "sent") {
      elaborateMessage = `\uD83D\uDCB8 ${from} observed RESERVE TRANSFER: Sent ${amountDisplay} ${tokenSymbol} to Entity ${toEntity.slice(-1)}
\uD83D\uDCCD Block: ${blockNumber} | \u23F0 ${timestamp} | \uD83D\uDD17 Tx: ${txHashShort}
\uD83C\uDFAF Event: ReserveTransferred | \uD83D\uDD22 TokenID: ${tokenId} | \uD83D\uDCB0 Amount: ${amount} (raw)`;
    } else {
      elaborateMessage = `\uD83D\uDCB0 ${from} observed RESERVE TRANSFER: Received ${amountDisplay} ${tokenSymbol} from Entity ${fromEntity.slice(-1)}
\uD83D\uDCCD Block: ${blockNumber} | \u23F0 ${timestamp} | \uD83D\uDD17 Tx: ${txHashShort}
\uD83C\uDFAF Event: ReserveTransferred | \uD83D\uDD22 TokenID: ${tokenId} | \uD83D\uDCB0 Amount: ${amount} (raw)`;
    }
  } else if (event.type === "ReserveUpdated") {
    const { tokenId, newBalance } = event.data;
    const tokenSymbol = getTokenSymbol(tokenId);
    const decimals = getTokenDecimals(tokenId);
    const balanceDisplay = (Number(newBalance) / 10 ** decimals).toFixed(4);
    elaborateMessage = `\uD83D\uDCCA ${from} observed RESERVE UPDATE: ${tokenSymbol} balance now ${balanceDisplay} (accepted: event.block=${blockNumber} > entity.jBlock=${currentJBlock})
\uD83D\uDCCD Block: ${blockNumber} | \u23F0 ${timestamp} | \uD83D\uDD17 Tx: ${txHashShort}
\uD83C\uDFAF Event: ReserveUpdated | \uD83D\uDD22 TokenID: ${tokenId} | \uD83D\uDCB0 New Balance: ${newBalance} (raw)
\uD83C\uDFE6 Decimals: ${decimals} | \uD83D\uDD24 Symbol: ${tokenSymbol}`;
  } else if (event.type === "SettlementProcessed") {
    const { counterpartyEntityId, tokenId, ownReserve, counterpartyReserve, collateral, ondelta, side } = event.data;
    const tokenSymbol = getTokenSymbol(tokenId);
    const decimals = getTokenDecimals(tokenId);
    const ownBalanceDisplay = (Number(ownReserve) / 10 ** decimals).toFixed(4);
    const counterpartyBalanceDisplay = (Number(counterpartyReserve) / 10 ** decimals).toFixed(4);
    const collateralDisplay = (Number(collateral) / 10 ** decimals).toFixed(4);
    elaborateMessage = `\u2696\uFE0F ${from} observed SETTLEMENT: ${tokenSymbol} settled with Entity ${counterpartyEntityId.slice(-4)}
\uD83D\uDCCD Block: ${blockNumber} | \u23F0 ${timestamp} | \uD83D\uDD17 Tx: ${txHashShort}
\uD83C\uDFAF Event: SettlementProcessed | \uD83D\uDD22 TokenID: ${tokenId} | \uD83D\uDC64 Side: ${side}
\uD83D\uDCB0 Own Reserve: ${ownBalanceDisplay} | \uD83E\uDD1D Counterparty: ${counterpartyBalanceDisplay}
\uD83D\uDD12 Collateral: ${collateralDisplay} | \uD83D\uDCCA OnDelta: ${ondelta}`;
  } else {
    elaborateMessage = `\uD83D\uDD0D ${from} observed J-EVENT: ${event.type}
\uD83D\uDCCD Block: ${blockNumber} | \u23F0 ${timestamp} | \uD83D\uDD17 Tx: ${txHashShort}
\uD83D\uDCCB Data: ${JSON.stringify(event.data, null, 2)}`;
  }
  newEntityState.messages.push(elaborateMessage);
  if (event.type === "ReserveUpdated") {
    const { entity, tokenId, newBalance, name, symbol, decimals } = event.data;
    if (entity === entityState.entityId) {
      newEntityState.reserves.set(String(tokenId), BigInt(newBalance));
      if (DEBUG)
        console.log(`\u2705 Reserve updated for ${entity.slice(0, 10)}...: Token ${tokenId} new balance is ${newBalance}`);
    }
  } else if (event.type === "reserve_transferred") {
    const { from: from2, to, tokenId, amount, direction } = event.data;
    if (direction === "sent") {
      const currentReserve = newEntityState.reserves.get(String(tokenId)) || 0n;
      const newAmount = currentReserve - BigInt(amount);
      newEntityState.reserves.set(String(tokenId), newAmount >= 0n ? newAmount : 0n);
    } else if (direction === "received") {
      const currentReserve = newEntityState.reserves.get(String(tokenId)) || 0n;
      newEntityState.reserves.set(String(tokenId), currentReserve + BigInt(amount));
    }
    if (DEBUG)
      console.log(`\u2705 Reserve transfer processed: ${direction} ${amount} token ${tokenId}`);
  } else if (event.type === "SettlementProcessed") {
    const { counterpartyEntityId, tokenId, ownReserve, counterpartyReserve, collateral, ondelta, side } = event.data;
    newEntityState.reserves.set(String(tokenId), BigInt(ownReserve));
    const accountInput = {
      fromEntityId: entityState.entityId,
      toEntityId: counterpartyEntityId,
      accountTx: {
        type: "account_settle",
        data: {
          tokenId: Number(tokenId),
          ownReserve,
          counterpartyReserve,
          collateral,
          ondelta,
          side,
          blockNumber,
          transactionHash
        }
      },
      metadata: {
        purpose: "settlement_consensus",
        description: `Settlement event from j-machine for token ${tokenId}`
      }
    };
    if (!newEntityState.accountInputQueue) {
      newEntityState.accountInputQueue = [];
    }
    newEntityState.accountInputQueue.push(accountInput);
    if (DEBUG)
      console.log(`\u2705 SettlementProcessed: Created accountInput for token ${tokenId} with counterparty ${counterpartyEntityId.slice(0, 10)}...`);
  } else {
    newEntityState.messages.push(`\u26A0\uFE0F Unhandled j-event type: ${event.type}`);
  }
  return newEntityState;
};

// src/entity-tx/proposals.ts
init_utils5();
var generateProposalId = (action, proposer, entityState) => {
  const proposalData = JSON.stringify({
    type: action.type,
    data: action.data,
    proposer,
    timestamp: entityState.timestamp
  });
  const hash4 = createHash2("sha256").update(proposalData).digest("hex");
  return `prop_${hash4.slice(0, 12)}`;
};
var executeProposal = (entityState, proposal) => {
  if (proposal.action.type === "collective_message") {
    const message = `[COLLECTIVE] ${proposal.action.data.message}`;
    if (DEBUG)
      console.log(`    \uD83C\uDFDB\uFE0F  Executing collective proposal: "${message}"`);
    const newMessages = [...entityState.messages, message];
    if (newMessages.length > 10) {
      newMessages.shift();
    }
    return {
      ...entityState,
      messages: newMessages
    };
  }
  return entityState;
};

// src/entity-tx/validation.ts
init_utils5();
var validateMessage = (message) => {
  try {
    if (typeof message !== "string") {
      log.error(`\u274C Message must be string, got: ${typeof message}`);
      return false;
    }
    if (message.length > 1000) {
      log.error(`\u274C Message too long: ${message.length} > 1000 chars`);
      return false;
    }
    if (message.length === 0) {
      log.error(`\u274C Empty message not allowed`);
      return false;
    }
    return true;
  } catch (error) {
    log.error(`\u274C Message validation error: ${error}`);
    return false;
  }
};

// src/entity-tx/apply.ts
init_state_helpers();
var applyEntityTx = async (env, entityState, entityTx) => {
  if (!entityTx) {
    console.error(`\u274C EntityTx is undefined!`);
    return { newState: entityState, outputs: [] };
  }
  console.log(`\uD83D\uDEA8\uD83D\uDEA8 APPLY-ENTITY-TX: type="${entityTx?.type}" (typeof: ${typeof entityTx?.type})`);
  console.log(`\uD83D\uDEA8\uD83D\uDEA8 APPLY-ENTITY-TX: data=`, JSON.stringify(entityTx?.data, (key, value) => typeof value === "bigint" ? value.toString() : value, 2));
  console.log(`\uD83D\uDEA8\uD83D\uDEA8 APPLY-ENTITY-TX: Available types: profile-update, j_event, accountInput, openAccount, directPayment`);
  try {
    if (entityTx.type === "chat") {
      const { from, message } = entityTx.data;
      if (!validateMessage(message)) {
        log.error(`\u274C Invalid chat message from ${from}`);
        return { newState: entityState, outputs: [] };
      }
      const currentNonce = entityState.nonces.get(from) || 0;
      const expectedNonce = currentNonce + 1;
      const newEntityState = cloneEntityState(entityState);
      newEntityState.nonces.set(from, expectedNonce);
      newEntityState.messages.push(`${from}: ${message}`);
      if (newEntityState.messages.length > 10) {
        newEntityState.messages.shift();
      }
      return { newState: newEntityState, outputs: [] };
    }
    if (entityTx.type === "propose") {
      const { action, proposer } = entityTx.data;
      const proposalId = generateProposalId(action, proposer, entityState);
      if (DEBUG)
        console.log(`    \uD83D\uDCDD Creating proposal ${proposalId} by ${proposer}: ${action.data.message}`);
      const proposal = {
        id: proposalId,
        proposer,
        action,
        votes: new Map([
          [proposer, "yes"]
        ]),
        status: "pending",
        created: entityState.timestamp
      };
      const proposerPower = entityState.config.shares[proposer] || BigInt(0);
      const shouldExecuteImmediately = proposerPower >= entityState.config.threshold;
      let newEntityState = cloneEntityState(entityState);
      if (shouldExecuteImmediately) {
        proposal.status = "executed";
        newEntityState = executeProposal(newEntityState, proposal);
        if (DEBUG)
          console.log(`    \u26A1 Proposal executed immediately - proposer has ${proposerPower} >= ${entityState.config.threshold} threshold`);
      } else {
        if (DEBUG)
          console.log(`    \u23F3 Proposal pending votes - proposer has ${proposerPower} < ${entityState.config.threshold} threshold`);
      }
      newEntityState.proposals.set(proposalId, proposal);
      return { newState: newEntityState, outputs: [] };
    }
    if (entityTx.type === "vote") {
      console.log(`\uD83D\uDDF3\uFE0F PROCESSING VOTE: entityTx.data=`, entityTx.data);
      const { proposalId, voter, choice, comment } = entityTx.data;
      const proposal = entityState.proposals.get(proposalId);
      console.log(`\uD83D\uDDF3\uFE0F Vote lookup: proposalId=${proposalId}, found=${!!proposal}, status=${proposal?.status}`);
      console.log(`\uD83D\uDDF3\uFE0F Available proposals:`, Array.from(entityState.proposals.keys()));
      if (!proposal || proposal.status !== "pending") {
        console.log(`    \u274C Vote ignored - proposal ${proposalId.slice(0, 12)}... not found or not pending`);
        return { newState: entityState, outputs: [] };
      }
      console.log(`    \uD83D\uDDF3\uFE0F  Vote by ${voter}: ${choice} on proposal ${proposalId.slice(0, 12)}...`);
      const newEntityState = cloneEntityState(entityState);
      const updatedProposal = {
        ...proposal,
        votes: new Map(proposal.votes)
      };
      const voteData = comment !== undefined ? { choice, comment } : choice;
      updatedProposal.votes.set(voter, voteData);
      const yesVoters = Array.from(updatedProposal.votes.entries()).filter(([_voter, voteData2]) => {
        const vote = typeof voteData2 === "object" ? voteData2.choice : voteData2;
        return vote === "yes";
      }).map(([voter2, _voteData]) => voter2);
      const totalYesPower = calculateQuorumPower(entityState.config, yesVoters);
      if (DEBUG) {
        const totalShares = Object.values(entityState.config.shares).reduce((sum, val) => sum + val, BigInt(0));
        const percentage = (Number(totalYesPower) / Number(entityState.config.threshold) * 100).toFixed(1);
        console.log(`    \uD83D\uDD0D Proposal votes: ${totalYesPower} / ${totalShares} [${percentage}% threshold${Number(totalYesPower) >= Number(entityState.config.threshold) ? "+" : ""}]`);
      }
      if (totalYesPower >= entityState.config.threshold) {
        updatedProposal.status = "executed";
        const executedState = executeProposal(newEntityState, updatedProposal);
        executedState.proposals.set(proposalId, updatedProposal);
        return executedState;
      }
      newEntityState.proposals.set(proposalId, updatedProposal);
      return { newState: newEntityState, outputs: [] };
    }
    if (entityTx.type === "profile-update") {
      console.log(`\uD83C\uDFF7\uFE0F Profile update transaction processing - data:`, entityTx.data);
      const profileData = entityTx.data.profile;
      console.log(`\uD83C\uDFF7\uFE0F Extracted profileData:`, profileData);
      if (profileData && profileData.entityId) {
        console.log(`\uD83C\uDFF7\uFE0F Calling processProfileUpdate for entity ${profileData.entityId}`);
        try {
          await processProfileUpdate(db, profileData.entityId, profileData, profileData.hankoSignature || "", env);
        } catch (error) {
          console.error(`\u274C Failed to process profile update for ${profileData.entityId}:`, error);
        }
      } else {
        console.warn(`\u26A0\uFE0F Invalid profile-update transaction data:`, entityTx.data);
        console.warn(`\u26A0\uFE0F ProfileData missing or invalid:`, profileData);
      }
      return { newState: entityState, outputs: [] };
    }
    if (entityTx.type === "j_event") {
      const newState = handleJEvent(entityState, entityTx.data);
      return { newState, outputs: [] };
    }
    if (entityTx.type === "accountInput") {
      const result = await handleAccountInput2(entityState, entityTx.data, env);
      return result;
    }
    if (entityTx.type === "openAccount") {
      console.log(`\uD83D\uDCB3 OPEN-ACCOUNT: Opening account with ${entityTx.data.targetEntityId}`);
      const newState = cloneEntityState(entityState);
      const outputs = [];
      newState.messages.push(`\uD83D\uDCB3 Opening account with Entity ${formatEntityId(entityTx.data.targetEntityId)}...`);
      if (!newState.accounts.has(entityTx.data.targetEntityId)) {
        console.log(`\uD83D\uDCB3 LOCAL-ACCOUNT: Creating local account with Entity ${formatEntityId(entityTx.data.targetEntityId)}...`);
        const initialDeltas = new Map;
        initialDeltas.set(2, {
          tokenId: 2,
          collateral: 0n,
          ondelta: 0n,
          offdelta: 0n,
          leftCreditLimit: 1000000n,
          rightCreditLimit: 1000000n,
          leftAllowence: 0n,
          rightAllowence: 0n
        });
        newState.accounts.set(entityTx.data.targetEntityId, {
          counterpartyEntityId: entityTx.data.targetEntityId,
          mempool: [],
          currentFrame: { frameId: 0, timestamp: Date.now(), tokenIds: [], deltas: [] },
          sentTransitions: 0,
          ackedTransitions: 0,
          deltas: initialDeltas,
          globalCreditLimits: {
            ownLimit: 1000000n,
            peerLimit: 1000000n
          },
          currentFrameId: 0,
          pendingFrame: undefined,
          pendingSignatures: [],
          rollbackCount: 0,
          isProposer: entityState.entityId < entityTx.data.targetEntityId,
          clonedForValidation: undefined,
          proofHeader: {
            fromEntity: entityState.entityId,
            toEntity: entityTx.data.targetEntityId,
            cooperativeNonce: 0,
            disputeNonce: 0
          },
          proofBody: { tokenIds: [], deltas: [] }
        });
      }
      console.log(`\uD83D\uDCB3 Account created locally. Counterparty will create matching account when they see our gossip.`);
      newState.messages.push(`\u2705 Account opening request sent to Entity ${formatEntityId(entityTx.data.targetEntityId)}`);
      if (env.gossip) {
        const profile = buildEntityProfile(newState);
        env.gossip.announce(profile);
        console.log(`\uD83D\uDCE1 Broadcast profile for ${entityState.entityId} with ${newState.accounts.size} accounts`);
      }
      return { newState, outputs };
    }
    if (entityTx.type === "directPayment") {
      console.log(`\uD83D\uDCB8 DIRECT-PAYMENT: Initiating payment to ${entityTx.data.targetEntityId}`);
      const newState = cloneEntityState(entityState);
      const outputs = [];
      let { targetEntityId, tokenId, amount, route, description } = entityTx.data;
      if (!route || route.length === 0) {
        if (newState.accounts.has(targetEntityId)) {
          console.log(`\uD83D\uDCB8 Direct account exists with ${formatEntityId(targetEntityId)}`);
          route = [entityState.entityId, targetEntityId];
        } else {
          console.log(`\uD83D\uDCB8 No direct account, finding route to ${formatEntityId(targetEntityId)}`);
          if (env.gossip) {
            const networkGraph = env.gossip.getNetworkGraph();
            const paths = networkGraph.findPaths(entityState.entityId, targetEntityId);
            if (paths.length > 0) {
              route = paths[0].path;
              console.log(`\uD83D\uDCB8 Found route: ${route.map((e) => formatEntityId(e)).join(" \u2192 ")}`);
            } else {
              console.error(`\u274C No route found to ${formatEntityId(targetEntityId)}`);
              newState.messages.push(`\u274C Payment failed: No route to ${formatEntityId(targetEntityId)}`);
              return { newState, outputs: [] };
            }
          } else {
            console.error(`\u274C Cannot find route: Gossip layer not available`);
            newState.messages.push(`\u274C Payment failed: Network routing unavailable`);
            return { newState, outputs: [] };
          }
        }
      }
      if (route.length < 2 || route[0] !== entityState.entityId) {
        console.error(`\u274C Invalid route: doesn't start with current entity`);
        return { newState: entityState, outputs: [] };
      }
      const nextHop = route[1];
      if (!newState.accounts.has(nextHop)) {
        console.error(`\u274C No account with next hop: ${nextHop}`);
        newState.messages.push(`\u274C Payment failed: No account with ${formatEntityId(nextHop)}`);
        return { newState, outputs: [] };
      }
      const accountTx = {
        type: "direct_payment",
        data: {
          tokenId,
          amount,
          route: route.slice(1),
          description: description || `Payment to ${formatEntityId(targetEntityId)}`
        }
      };
      const accountMachine = newState.accounts.get(nextHop);
      if (accountMachine) {
        accountMachine.mempool.push(accountTx);
        console.log(`\uD83D\uDCB8 Added payment to mempool for account with ${formatEntityId(nextHop)}`);
        console.log(`\uD83D\uDCB8 Account mempool now has ${accountMachine.mempool.length} pending transactions`);
        console.log(`\uD83D\uDCB8 Is proposer: ${accountMachine.isProposer}, Has pending frame: ${!!accountMachine.pendingFrame}`);
        newState.messages.push(`\uD83D\uDCB8 Sending ${amount} (token ${tokenId}) to ${formatEntityId(targetEntityId)} via ${route.length - 1} hops`);
        console.log(`\uD83D\uDCB8 Payment queued for bilateral consensus with ${formatEntityId(nextHop)}`);
        console.log(`\uD83D\uDCB8 Account ${formatEntityId(nextHop)} should be added to proposableAccounts`);
        outputs.push({
          entityId: entityState.entityId,
          signerId: entityState.config.validators[0],
          entityTxs: []
        });
        console.log(`\uD83D\uDCB8 Added processing trigger to ensure bilateral consensus runs`);
      }
      return { newState, outputs };
    }
    return { newState: entityState, outputs: [] };
  } catch (error) {
    log.error(`\u274C Transaction execution error: ${error}`);
    return { newState: entityState, outputs: [] };
  }
};
// src/entity-consensus.ts
init_utils5();
var validateEntityInput = (input) => {
  try {
    if (!input.entityId || typeof input.entityId !== "string") {
      log.error(`\u274C Invalid entityId: ${input.entityId}`);
      return false;
    }
    if (!input.signerId || typeof input.signerId !== "string") {
      log.error(`\u274C Invalid signerId: ${input.signerId}`);
      return false;
    }
    if (input.entityTxs) {
      if (!Array.isArray(input.entityTxs)) {
        log.error(`\u274C EntityTxs must be array, got: ${typeof input.entityTxs}`);
        return false;
      }
      if (input.entityTxs.length > 1000) {
        log.error(`\u274C Too many transactions: ${input.entityTxs.length} > 1000`);
        return false;
      }
      for (const tx of input.entityTxs) {
        if (!tx.type || !tx.data) {
          log.error(`\u274C Invalid transaction: ${JSON.stringify(tx)}`);
          return false;
        }
        if (typeof tx.type !== "string" || !["chat", "propose", "vote", "profile-update", "j_event", "accountInput", "openAccount", "directPayment"].includes(tx.type)) {
          log.error(`\u274C Invalid transaction type: ${tx.type}`);
          return false;
        }
      }
    }
    if (input.precommits) {
      if (!(input.precommits instanceof Map)) {
        log.error(`\u274C Precommits must be Map, got: ${typeof input.precommits}`);
        return false;
      }
      if (input.precommits.size > 100) {
        log.error(`\u274C Too many precommits: ${input.precommits.size} > 100`);
        return false;
      }
      for (const [signerId, signature] of input.precommits) {
        if (typeof signerId !== "string" || typeof signature !== "string") {
          log.error(`\u274C Invalid precommit format: ${signerId} -> ${signature}`);
          return false;
        }
      }
    }
    if (input.proposedFrame) {
      const frame = input.proposedFrame;
      if (typeof frame.height !== "number" || frame.height < 0) {
        log.error(`\u274C Invalid frame height: ${frame.height}`);
        return false;
      }
      if (!Array.isArray(frame.txs)) {
        log.error(`\u274C Frame txs must be array`);
        return false;
      }
      if (!frame.hash || typeof frame.hash !== "string") {
        log.error(`\u274C Invalid frame hash: ${frame.hash}`);
        return false;
      }
    }
    return true;
  } catch (error) {
    log.error(`\u274C Input validation error: ${error}`);
    return false;
  }
};
var validateEntityReplica = (replica) => {
  try {
    if (!replica.entityId || !replica.signerId) {
      log.error(`\u274C Invalid replica IDs: ${replica.entityId}:${replica.signerId}`);
      return false;
    }
    if (replica.state.height < 0) {
      log.error(`\u274C Invalid state height: ${replica.state.height}`);
      return false;
    }
    if (replica.mempool.length > 1e4) {
      log.error(`\u274C Mempool overflow: ${replica.mempool.length} > 10000`);
      return false;
    }
    return true;
  } catch (error) {
    log.error(`\u274C Replica validation error: ${error}`);
    return false;
  }
};
var detectByzantineFault = (signatures, signerId, newSignature) => {
  try {
    const existingSig = signatures.get(signerId);
    if (existingSig && existingSig !== newSignature) {
      log.error(`\u274C BYZANTINE FAULT: Double-sign detected from ${signerId}`);
      log.error(`\u274C Existing: ${existingSig}`);
      log.error(`\u274C New: ${newSignature}`);
      return true;
    }
    return false;
  } catch (error) {
    log.error(`\u274C Byzantine detection error: ${error}`);
    return false;
  }
};
var validateTimestamp = (proposedTime, currentTime) => {
  try {
    const maxDrift = 30000;
    const drift = Math.abs(proposedTime - currentTime);
    if (drift > maxDrift) {
      log.error(`\u274C Timestamp drift too large: ${drift}ms > ${maxDrift}ms`);
      log.error(`\u274C Proposed: ${new Date(proposedTime).toISOString()}`);
      log.error(`\u274C Current: ${new Date(currentTime).toISOString()}`);
      return false;
    }
    return true;
  } catch (error) {
    log.error(`\u274C Timestamp validation error: ${error}`);
    return false;
  }
};
var validateVotingPower = (power) => {
  try {
    if (power < 0n) {
      log.error(`\u274C Negative voting power: ${power}`);
      return false;
    }
    if (power > BigInt(Number.MAX_SAFE_INTEGER)) {
      log.error(`\u274C Voting power overflow: ${power} > ${Number.MAX_SAFE_INTEGER}`);
      return false;
    }
    return true;
  } catch (error) {
    log.error(`\u274C Voting power validation error: ${error}`);
    return false;
  }
};
var applyEntityInput = async (env, entityReplica, entityInput) => {
  const entityDisplay = formatEntityDisplay(entityInput.entityId);
  const timestamp = Date.now();
  const currentProposalHash = entityReplica.proposal?.hash?.slice(0, 10) || "none";
  const frameHash = entityInput.proposedFrame?.hash?.slice(0, 10) || "none";
  console.log(`\uD83D\uDD0D INPUT-RECEIVED: [${timestamp}] Processing input for Entity #${entityDisplay}:${formatSignerDisplay(entityInput.signerId)}`);
  console.log(`\uD83D\uDD0D INPUT-STATE: Current proposal: ${currentProposalHash}, Mempool: ${entityReplica.mempool.length}, isProposer: ${entityReplica.isProposer}`);
  console.log(`\uD83D\uDD0D INPUT-DETAILS: txs=${entityInput.entityTxs?.length || 0}, precommits=${entityInput.precommits?.size || 0}, frame=${frameHash}`);
  if (entityInput.precommits?.size) {
    const precommitSigners = Array.from(entityInput.precommits.keys());
    console.log(`\uD83D\uDD0D INPUT-PRECOMMITS: Received precommits from: ${precommitSigners.join(", ")}`);
    const firstPrecommit = entityInput.precommits.values().next().value;
    const proposalHashFromSig = firstPrecommit ? firstPrecommit.split("_")[2]?.slice(0, 10) : "unknown";
    console.log(`\uD83D\uDD0D PRECOMMIT-PROPOSAL: These precommits are for proposal: ${proposalHashFromSig}`);
  }
  if (!validateEntityInput(entityInput)) {
    log.error(`\u274C Invalid input for ${entityInput.entityId}:${entityInput.signerId}`);
    return { newState: entityReplica.state, outputs: [] };
  }
  if (!validateEntityReplica(entityReplica)) {
    log.error(`\u274C Invalid replica state for ${entityReplica.entityId}:${entityReplica.signerId}`);
    return { newState: entityReplica.state, outputs: [] };
  }
  const entityOutbox = [];
  if (entityInput.entityTxs?.length) {
    const voteTransactions = entityInput.entityTxs.filter((tx) => tx.type === "vote");
    if (voteTransactions.length > 0) {
      console.log(`\uD83D\uDDF3\uFE0F VOTE-MEMPOOL: ${entityReplica.signerId} receiving ${voteTransactions.length} vote transactions`);
      voteTransactions.forEach((tx) => {
        console.log(`\uD83D\uDDF3\uFE0F VOTE-TX:`, tx);
      });
    }
    if (entityReplica.signerId === "alice") {
      console.log(`\uD83D\uDD25 ALICE-RECEIVES: Alice receiving ${entityInput.entityTxs.length} txs from input`);
      console.log(`\uD83D\uDD25 ALICE-RECEIVES: Transaction types:`, entityInput.entityTxs.map((tx) => tx.type));
      console.log(`\uD83D\uDD25 ALICE-RECEIVES: Alice isProposer=${entityReplica.isProposer}, current mempool=${entityReplica.mempool.length}`);
    }
    entityReplica.mempool.push(...entityInput.entityTxs);
    if (DEBUG)
      console.log(`    \u2192 Added ${entityInput.entityTxs.length} txs to mempool (total: ${entityReplica.mempool.length})`);
    if (DEBUG && entityInput.entityTxs.length > 3) {
      console.log(`    \u26A0\uFE0F  CORNER CASE: Large batch of ${entityInput.entityTxs.length} transactions`);
    }
  } else if (entityInput.entityTxs && entityInput.entityTxs.length === 0) {
    if (DEBUG)
      console.log(`    \u26A0\uFE0F  CORNER CASE: Empty transaction array received - no mempool changes`);
  }
  if (!entityReplica.isProposer && entityReplica.mempool.length > 0) {
    if (DEBUG)
      console.log(`    \u2192 Non-proposer sending ${entityReplica.mempool.length} txs to proposer`);
    const proposerId = entityReplica.state.config.validators[0];
    console.log(`\uD83D\uDD25 BOB-TO-ALICE: Bob sending ${entityReplica.mempool.length} txs to proposer ${proposerId}`);
    console.log(`\uD83D\uDD25 BOB-TO-ALICE: Transaction types:`, entityReplica.mempool.map((tx) => tx.type));
    entityOutbox.push({
      entityId: entityInput.entityId,
      signerId: proposerId,
      entityTxs: [...entityReplica.mempool]
    });
    entityReplica.mempool.length = 0;
  }
  if (entityInput.precommits?.size && entityInput.proposedFrame && !entityReplica.proposal) {
    const signers = Array.from(entityInput.precommits.keys());
    const totalPower = calculateQuorumPower(entityReplica.state.config, signers);
    if (totalPower >= entityReplica.state.config.threshold) {
      if (DEBUG)
        console.log(`    \u2192 Received commit notification with ${entityInput.precommits.size} signatures`);
      entityReplica.state = {
        ...entityInput.proposedFrame.newState,
        height: entityReplica.state.height + 1
      };
      entityReplica.mempool.length = 0;
      entityReplica.lockedFrame = undefined;
      if (DEBUG)
        console.log(`    \u2192 Applied commit, new state: ${entityReplica.state.messages.length} messages, height: ${entityReplica.state.height}`);
      return { newState: entityReplica.state, outputs: entityOutbox };
    }
  }
  if (entityInput.proposedFrame && (!entityReplica.proposal || entityReplica.state.config.mode === "gossip-based" && entityReplica.isProposer)) {
    const frameSignature = `sig_${entityReplica.signerId}_${entityInput.proposedFrame.hash}`;
    const config = entityReplica.state.config;
    entityReplica.lockedFrame = entityInput.proposedFrame;
    if (DEBUG)
      console.log(`    \u2192 Validator locked to frame ${entityInput.proposedFrame.hash.slice(0, 10)}...`);
    if (config.mode === "gossip-based") {
      config.validators.forEach((validatorId) => {
        console.log(`\uD83D\uDD0D GOSSIP: [${timestamp}] ${entityReplica.signerId} sending precommit to ${validatorId} for entity ${entityInput.entityId.slice(0, 10)}, proposal ${frameHash}, sig: ${frameSignature.slice(0, 20)}...`);
        entityOutbox.push({
          entityId: entityInput.entityId,
          signerId: validatorId,
          precommits: new Map([[entityReplica.signerId, frameSignature]])
        });
      });
      if (DEBUG)
        console.log(`    \u2192 Signed proposal, gossiping precommit to ${config.validators.length} validators`);
    } else {
      const proposerId = config.validators[0];
      console.log(`\uD83D\uDD0D PROPOSER: [${timestamp}] ${entityReplica.signerId} sending precommit to ${proposerId} for entity ${entityInput.entityId.slice(0, 10)}, proposal ${frameHash}, sig: ${frameSignature.slice(0, 20)}...`);
      console.log(`\uD83D\uDD0D PROPOSER-REASON: Signed new proposal, current state: proposal=${currentProposalHash}, locked=${entityReplica.lockedFrame?.hash?.slice(0, 10) || "none"}`);
      entityOutbox.push({
        entityId: entityInput.entityId,
        signerId: proposerId,
        precommits: new Map([[entityReplica.signerId, frameSignature]])
      });
      if (DEBUG)
        console.log(`    \u2192 Signed proposal, sending precommit to ${proposerId}`);
    }
  }
  if (entityInput.precommits?.size && entityReplica.proposal) {
    for (const [signerId, signature] of entityInput.precommits) {
      if (detectByzantineFault(entityReplica.proposal.signatures, signerId, signature)) {
        log.error(`\u274C Rejecting Byzantine input from ${signerId}`);
        return { newState: entityReplica.state, outputs: entityOutbox };
      }
      entityReplica.proposal.signatures.set(signerId, signature);
    }
    if (DEBUG)
      console.log(`    \u2192 Collected ${entityInput.precommits.size} signatures (total: ${entityReplica.proposal.signatures.size})`);
    const signers = Array.from(entityReplica.proposal.signatures.keys());
    const totalPower = calculateQuorumPower(entityReplica.state.config, signers);
    if (!validateVotingPower(totalPower)) {
      log.error(`\u274C Invalid voting power calculation: ${totalPower}`);
      return { newState: entityReplica.state, outputs: entityOutbox };
    }
    if (DEBUG) {
      const totalShares = Object.values(entityReplica.state.config.shares).reduce((sum, val) => sum + val, BigInt(0));
      const percentage = (Number(totalPower) / Number(entityReplica.state.config.threshold) * 100).toFixed(1);
      log.info(`    \uD83D\uDD0D Threshold check: ${totalPower} / ${totalShares} [${percentage}% threshold${Number(totalPower) >= Number(entityReplica.state.config.threshold) ? "+" : ""}]`);
      if (entityReplica.state.config.mode === "gossip-based") {
        console.log(`    \u26A0\uFE0F  CORNER CASE: Gossip mode - all validators receive precommits`);
      }
    }
    if (totalPower >= entityReplica.state.config.threshold) {
      entityReplica.state = {
        ...entityReplica.proposal.newState,
        height: entityReplica.state.height + 1
      };
      if (DEBUG)
        console.log(`    \u2192 Threshold reached! Committing frame, height: ${entityReplica.state.height}`);
      const sortedSignatures = sortSignatures(entityReplica.proposal.signatures, entityReplica.state.config);
      const committedFrame = entityReplica.proposal;
      entityReplica.mempool.length = 0;
      entityReplica.proposal = undefined;
      entityReplica.lockedFrame = undefined;
      if (entityReplica.state.config.mode === "proposer-based") {
        const committedProposalHash = committedFrame.hash.slice(0, 10);
        console.log(`\uD83D\uDD0D COMMIT-START: [${timestamp}] ${entityReplica.signerId} reached threshold for proposal ${committedProposalHash}, sending commit notifications...`);
        entityReplica.state.config.validators.forEach((validatorId) => {
          if (validatorId !== entityReplica.signerId) {
            const precommitSigners = Array.from(sortedSignatures.keys());
            console.log(`\uD83D\uDD0D COMMIT: [${timestamp}] ${entityReplica.signerId} sending commit notification to ${validatorId} for entity ${entityInput.entityId.slice(0, 10)}, proposal ${committedProposalHash} (${sortedSignatures.size} precommits from: ${precommitSigners.join(", ")})`);
            entityOutbox.push({
              entityId: entityInput.entityId,
              signerId: validatorId,
              precommits: sortedSignatures,
              proposedFrame: committedFrame
            });
          }
        });
        const notifiedCount = entityReplica.state.config.validators.length - 1;
        if (DEBUG)
          console.log(`    \u2192 Sending commit notifications to ${notifiedCount} validators (excluding self)`);
      } else {
        console.log(`\uD83D\uDD0D GOSSIP-COMMIT: [${timestamp}] ${entityReplica.signerId} NOT sending commit notifications (gossip mode) for entity ${entityInput.entityId.slice(0, 10)}...`);
        if (DEBUG)
          console.log(`    \u2192 Gossip mode: No commit notifications needed (everyone has precommits via gossip)`);
      }
    }
  }
  console.log(`\uD83C\uDFAF CONSENSUS-CHECK: Entity ${entityReplica.entityId}:${entityReplica.signerId}`);
  console.log(`\uD83C\uDFAF   isProposer: ${entityReplica.isProposer}`);
  console.log(`\uD83C\uDFAF   mempool.length: ${entityReplica.mempool.length}`);
  console.log(`\uD83C\uDFAF   hasProposal: ${!!entityReplica.proposal}`);
  if (entityReplica.mempool.length > 0) {
    console.log(`\uD83C\uDFAF   mempoolTypes:`, entityReplica.mempool.map((tx) => tx.type));
  }
  if (entityReplica.isProposer && entityReplica.mempool.length > 0 && !entityReplica.proposal) {
    console.log(`\uD83D\uDD25 ALICE-PROPOSES: Alice auto-propose triggered!`);
    console.log(`\uD83D\uDD25 ALICE-PROPOSES: mempool=${entityReplica.mempool.length}, isProposer=${entityReplica.isProposer}, hasProposal=${!!entityReplica.proposal}`);
    console.log(`\uD83D\uDD25 ALICE-PROPOSES: Mempool transaction types:`, entityReplica.mempool.map((tx) => tx.type));
    const isSingleSigner = entityReplica.state.config.validators.length === 1 && entityReplica.state.config.threshold === BigInt(1);
    if (isSingleSigner) {
      console.log(`\uD83D\uDE80 SINGLE-SIGNER: Direct execution without consensus for single signer entity`);
      const { newState: newEntityState2, outputs: frameOutputs } = await applyEntityFrame(env, entityReplica.state, entityReplica.mempool);
      entityReplica.state = {
        ...newEntityState2,
        height: entityReplica.state.height + 1
      };
      entityOutbox.push(...frameOutputs);
      entityReplica.mempool.length = 0;
      if (DEBUG)
        console.log(`    \u26A1 Single signer entity: transactions applied directly, height: ${entityReplica.state.height}`);
      return { newState: entityReplica.state, outputs: entityOutbox };
    }
    if (DEBUG)
      console.log(`    \uD83D\uDE80 Auto-propose triggered: mempool=${entityReplica.mempool.length}, isProposer=${entityReplica.isProposer}, hasProposal=${!!entityReplica.proposal}`);
    const { newState: newEntityState, outputs: proposalOutputs } = await applyEntityFrame(env, entityReplica.state, entityReplica.mempool);
    entityOutbox.push(...proposalOutputs);
    const newTimestamp = Date.now();
    if (!validateTimestamp(newTimestamp, Date.now())) {
      log.error(`\u274C Invalid proposal timestamp: ${newTimestamp}`);
      return { newState: entityReplica.state, outputs: entityOutbox };
    }
    const frameHash2 = `frame_${entityReplica.state.height + 1}_${newTimestamp}`;
    const selfSignature = `sig_${entityReplica.signerId}_${frameHash2}`;
    entityReplica.proposal = {
      height: entityReplica.state.height + 1,
      txs: [...entityReplica.mempool],
      hash: frameHash2,
      newState: {
        ...newEntityState,
        height: entityReplica.state.height + 1,
        timestamp: newTimestamp
      },
      signatures: new Map([[entityReplica.signerId, selfSignature]])
    };
    if (DEBUG)
      console.log(`    \u2192 Auto-proposing frame ${entityReplica.proposal.hash} with ${entityReplica.proposal.txs.length} txs and self-signature.`);
    entityReplica.state.config.validators.forEach((validatorId) => {
      if (validatorId !== entityReplica.signerId) {
        entityOutbox.push({
          entityId: entityInput.entityId,
          signerId: validatorId,
          proposedFrame: entityReplica.proposal
        });
      }
    });
  } else if (entityReplica.isProposer && entityReplica.mempool.length === 0 && !entityReplica.proposal) {
    if (DEBUG)
      console.log(`    \u26A0\uFE0F  CORNER CASE: Proposer with empty mempool - no auto-propose`);
  } else if (!entityReplica.isProposer && entityReplica.mempool.length > 0) {
    if (DEBUG)
      console.log(`    \u2192 Non-proposer sending ${entityReplica.mempool.length} txs to proposer`);
    const proposerId = entityReplica.state.config.validators[0];
    console.log(`\uD83D\uDD25 BOB-TO-ALICE: Bob sending ${entityReplica.mempool.length} txs to proposer ${proposerId}`);
    console.log(`\uD83D\uDD25 BOB-TO-ALICE: Transaction types:`, entityReplica.mempool.map((tx) => tx.type));
    entityOutbox.push({
      entityId: entityInput.entityId,
      signerId: proposerId,
      entityTxs: [...entityReplica.mempool]
    });
    entityReplica.mempool.length = 0;
  } else if (entityReplica.isProposer && entityReplica.proposal) {
    if (DEBUG)
      console.log(`    \u26A0\uFE0F  CORNER CASE: Proposer already has pending proposal - no new auto-propose`);
  }
  console.log(`\uD83D\uDD0D OUTPUT-GENERATED: [${timestamp}] Entity #${entityDisplay}:${formatSignerDisplay(entityReplica.signerId)} generating ${entityOutbox.length} outputs`);
  console.log(`\uD83D\uDD0D OUTPUT-FINAL-STATE: proposal=${entityReplica.proposal?.hash?.slice(0, 10) || "none"}, mempool=${entityReplica.mempool.length}, locked=${entityReplica.lockedFrame?.hash?.slice(0, 10) || "none"}`);
  entityOutbox.forEach((output2, index) => {
    const targetDisplay = formatEntityDisplay(output2.entityId);
    const outputFrameHash = output2.proposedFrame?.hash?.slice(0, 10) || "none";
    console.log(`\uD83D\uDD0D OUTPUT-${index + 1}: [${timestamp}] To Entity #${targetDisplay}:${formatSignerDisplay(output2.signerId)} - txs=${output2.entityTxs?.length || 0}, precommits=${output2.precommits?.size || 0}, frame=${outputFrameHash}`);
    if (output2.precommits?.size) {
      const precommitSigners = Array.from(output2.precommits.keys());
      console.log(`\uD83D\uDD0D OUTPUT-${index + 1}-PRECOMMITS: Sending precommits from: ${precommitSigners.join(", ")}`);
      output2.precommits.forEach((sig, signer) => {
        const sigShort = sig.slice(0, 20);
        const proposalFromSig = sig.split("_")[2]?.slice(0, 10) || "unknown";
        console.log(`\uD83D\uDD0D OUTPUT-${index + 1}-SIG-DETAIL: ${signer} -> ${sigShort}... (proposal: ${proposalFromSig})`);
      });
    }
    if (output2.proposedFrame && output2.precommits?.size) {
      console.log(`\uD83D\uDD0D OUTPUT-${index + 1}-TYPE: COMMIT_NOTIFICATION (frame + precommits)`);
    } else if (output2.precommits?.size) {
      console.log(`\uD83D\uDD0D OUTPUT-${index + 1}-TYPE: PRECOMMIT_VOTE (precommits only)`);
    } else if (output2.proposedFrame) {
      console.log(`\uD83D\uDD0D OUTPUT-${index + 1}-TYPE: PROPOSAL (frame only)`);
    } else if (output2.entityTxs?.length) {
      console.log(`\uD83D\uDD0D OUTPUT-${index + 1}-TYPE: TRANSACTION_FORWARD (txs only)`);
    } else {
      console.log(`\uD83D\uDD0D OUTPUT-${index + 1}-TYPE: UNKNOWN (empty output)`);
    }
  });
  return { newState: entityReplica.state, outputs: entityOutbox };
};
var applyEntityFrame = async (env, entityState, entityTxs) => {
  console.log(`\uD83C\uDFAF APPLY-ENTITY-FRAME: Processing ${entityTxs.length} transactions`);
  entityTxs.forEach((tx, index) => {
    console.log(`\uD83C\uDFAF Transaction ${index}: type="${tx.type}", data=`, tx.data);
  });
  let currentEntityState = entityState;
  const allOutputs = [];
  const proposableAccounts = new Set;
  for (const entityTx of entityTxs) {
    const { newState, outputs } = await applyEntityTx(env, currentEntityState, entityTx);
    currentEntityState = newState;
    allOutputs.push(...outputs);
    if (entityTx.type === "accountInput" && entityTx.data) {
      const fromEntity = entityTx.data.fromEntityId;
      const accountMachine = currentEntityState.accounts.get(fromEntity);
      if (accountMachine) {
        const isNewFrame = entityTx.data.newAccountFrame;
        const isAck = entityTx.data.frameId && entityTx.data.prevSignatures;
        const hasAccountTx = entityTx.data.accountTx;
        const hasPendingTxs = accountMachine.mempool.length > 0;
        if (isNewFrame || hasPendingTxs && !accountMachine.pendingFrame || hasAccountTx) {
          proposableAccounts.add(fromEntity);
          console.log(`\uD83D\uDD04 Added ${fromEntity.slice(0, 10)} to proposable - NewFrame:${isNewFrame}, AccTx:${hasAccountTx}, Pending:${hasPendingTxs}`);
        } else if (isAck) {
          console.log(`\u2705 Received ACK from ${fromEntity.slice(0, 10)}, no action needed (mempool empty)`);
        }
      }
    } else if (entityTx.type === "directPayment" && entityTx.data) {
      const route = entityTx.data.route;
      if (route && route.length >= 2) {
        const nextHop = route[1];
        const accountMachine = currentEntityState.accounts.get(nextHop);
        if (accountMachine && accountMachine.mempool.length > 0) {
          proposableAccounts.add(nextHop);
          console.log(`\uD83D\uDD04 Added ${nextHop.slice(0, 10)} to proposable (payment in mempool: ${accountMachine.mempool.length} txs)`);
        }
      }
    } else if (entityTx.type === "openAccount" && entityTx.data) {
      const targetEntity = entityTx.data.targetEntityId;
      const accountMachine = currentEntityState.accounts.get(targetEntity);
      if (accountMachine && accountMachine.isProposer) {
        proposableAccounts.add(targetEntity);
        console.log(`\uD83D\uDD04 Added ${targetEntity.slice(0, 10)} to proposable (new account opened)`);
      }
    }
  }
  const { getAccountsToProposeFrames: getAccountsToProposeFrames2, proposeAccountFrame: proposeAccountFrame2 } = await Promise.resolve().then(() => (init_account_consensus(), exports_account_consensus));
  const additionalAccounts = getAccountsToProposeFrames2(currentEntityState);
  additionalAccounts.forEach((accountId) => proposableAccounts.add(accountId));
  const accountsToProposeFrames = Array.from(proposableAccounts);
  if (accountsToProposeFrames.length > 0) {
    console.log(`\uD83D\uDD04 AUTO-PROPOSE: ${accountsToProposeFrames.length} accounts need frame proposals`);
    for (const counterpartyEntityId of accountsToProposeFrames) {
      console.log(`\uD83D\uDD04 AUTO-PROPOSE: Proposing frame for account with ${counterpartyEntityId.slice(0, 10)}`);
      const accountMachine = currentEntityState.accounts.get(counterpartyEntityId);
      if (accountMachine) {
        const proposal = await proposeAccountFrame2(accountMachine);
        if (proposal.success && proposal.accountInput) {
          let targetProposerId = "alice";
          const targetReplicaKeys = Array.from(env.replicas.keys()).filter((key) => key.startsWith(proposal.accountInput.toEntityId + ":"));
          if (targetReplicaKeys.length > 0) {
            const firstTargetReplica = env.replicas.get(targetReplicaKeys[0]);
            if (firstTargetReplica?.state.config.validators[0]) {
              targetProposerId = firstTargetReplica.state.config.validators[0];
            }
          }
          allOutputs.push({
            entityId: proposal.accountInput.toEntityId,
            signerId: targetProposerId,
            entityTxs: [{
              type: "accountInput",
              data: proposal.accountInput
            }]
          });
          currentEntityState.messages.push(...proposal.events);
        }
      }
    }
  }
  return { newState: currentEntityState, outputs: allOutputs };
};
var calculateQuorumPower = (config, signers) => {
  return signers.reduce((total, signerId) => {
    return total + (config.shares[signerId] || 0n);
  }, 0n);
};
var sortSignatures = (signatures, config) => {
  const sortedEntries = Array.from(signatures.entries()).sort(([a], [b2]) => {
    const indexA = config.validators.indexOf(a);
    const indexB = config.validators.indexOf(b2);
    return indexA - indexB;
  });
  return new Map(sortedEntries);
};
var mergeEntityInputs = (inputs) => {
  const merged = new Map;
  let duplicateCount = 0;
  const timestamp = Date.now();
  console.log(`\uD83D\uDD0D MERGE-START: [${timestamp}] Processing ${inputs.length} entity inputs for merging`);
  const inputAnalysis = inputs.map((input, i) => {
    const entityShort = input.entityId.slice(0, 10);
    const frameHash = input.proposedFrame?.hash?.slice(0, 10) || "none";
    const precommitCount = input.precommits?.size || 0;
    const precommitSigners = input.precommits ? Array.from(input.precommits.keys()).join(",") : "none";
    return `${i + 1}:${entityShort}:${input.signerId}(txs=${input.entityTxs?.length || 0},pc=${precommitCount}[${precommitSigners}],f=${frameHash})`;
  });
  console.log(`\uD83D\uDD0D MERGE-INPUTS: ${inputAnalysis.join(" | ")}`);
  const carolInputs = inputs.filter((input) => input.signerId.includes("carol"));
  if (carolInputs.length > 1) {
    console.log(`\uD83D\uDD0D MERGE-CAROL-ALERT: Found ${carolInputs.length} inputs from Carol - potential duplicate source!`);
    carolInputs.forEach((input, i) => {
      const entityShort = input.entityId.slice(0, 10);
      const precommitSigners = input.precommits ? Array.from(input.precommits.keys()).join(",") : "none";
      console.log(`\uD83D\uDD0D MERGE-CAROL-${i + 1}: ${entityShort}:${input.signerId} - precommits: ${precommitSigners}`);
    });
  }
  for (const input of inputs) {
    const key = `${input.entityId}:${input.signerId}`;
    const entityShort = input.entityId.slice(0, 10);
    if (merged.has(key)) {
      const existing = merged.get(key);
      duplicateCount++;
      console.log(`\uD83D\uDD0D DUPLICATE-FOUND: Merging duplicate input ${duplicateCount} for ${entityShort}:${input.signerId}`);
      if (input.entityTxs) {
        existing.entityTxs = [...existing.entityTxs || [], ...input.entityTxs];
        console.log(`\uD83D\uDD0D MERGE-TXS: Added ${input.entityTxs.length} transactions`);
      }
      if (input.precommits) {
        const existingPrecommits = existing.precommits || new Map;
        console.log(`\uD83D\uDD0D MERGE-PRECOMMITS: Merging ${input.precommits.size} precommits into existing ${existingPrecommits.size} for ${entityShort}:${input.signerId}`);
        input.precommits.forEach((signature, signerId) => {
          console.log(`\uD83D\uDD0D MERGE-DETAIL: Adding precommit from ${signerId} (sig: ${signature.slice(0, 20)}...)`);
          existingPrecommits.set(signerId, signature);
        });
        existing.precommits = existingPrecommits;
        console.log(`\uD83D\uDD0D MERGE-RESULT: Total ${existingPrecommits.size} precommits after merge`);
      }
      if (input.proposedFrame)
        existing.proposedFrame = input.proposedFrame;
      console.log(`    \uD83D\uDD04 Merging inputs for ${key}: txs=${input.entityTxs?.length || 0}, precommits=${input.precommits?.size || 0}, frame=${!!input.proposedFrame}`);
    } else {
      merged.set(key, { ...input });
    }
  }
  if (duplicateCount > 0) {
    console.log(`    \u26A0\uFE0F  CORNER CASE: Merged ${duplicateCount} duplicate inputs (${inputs.length} \u2192 ${merged.size})`);
  }
  return Array.from(merged.values());
};

// src/server.ts
init_entity_factory();
init_evm();

// src/gossip.ts
function createGossipLayer() {
  const profiles = new Map;
  const announce = (profile) => {
    const existing = profiles.get(profile.entityId);
    const newTimestamp = profile.metadata?.lastUpdated || 0;
    const existingTimestamp = existing?.metadata?.lastUpdated || 0;
    if (!existing || newTimestamp > existingTimestamp) {
      profiles.set(profile.entityId, profile);
      console.log(`\uD83D\uDCE1 Gossip updated for ${profile.entityId} (timestamp: ${newTimestamp})`);
    } else {
      console.log(`\uD83D\uDCE1 Gossip ignored older update for ${profile.entityId} (${newTimestamp} <= ${existingTimestamp})`);
    }
  };
  const getProfiles = () => {
    return Array.from(profiles.values());
  };
  return {
    profiles,
    announce,
    getProfiles
  };
}

// src/gossip-loader.ts
async function loadPersistedProfiles(db2, gossip) {
  try {
    let profileCount = 0;
    const iterator = db2.iterator({ gte: "profile:", lt: "profile:\xFF" });
    for await (const [key, value] of iterator) {
      try {
        const profile = JSON.parse(value);
        gossip.announce({
          entityId: profile.entityId,
          capabilities: profile.capabilities || [],
          hubs: profile.hubs || [],
          metadata: {
            name: profile.name,
            avatar: profile.avatar,
            bio: profile.bio,
            website: profile.website,
            lastUpdated: profile.lastUpdated,
            hankoSignature: profile.hankoSignature
          }
        });
        profileCount++;
      } catch (parseError) {
        console.warn(`\u26A0\uFE0F Failed to parse profile from key ${key}:`, parseError);
      }
    }
    console.log(`\uD83D\uDCE1 Restored ${profileCount} profiles from DB into gossip`);
    return profileCount;
  } catch (error) {
    console.error("\u274C Failed to load persisted profiles:", error);
    return 0;
  }
}

// src/j-event-watcher.ts
init_lib2();
var DEBUG2 = false;
var HEAVY_LOGS = false;

class JEventWatcher {
  provider;
  entityProviderContract;
  depositoryContract;
  config;
  signers = new Map;
  isWatching = false;
  entityProviderABI = [
    "event EntityRegistered(bytes32 indexed entityId, uint256 indexed entityNumber, bytes32 boardHash)",
    "event ControlSharesReleased(bytes32 indexed entityId, address indexed depository, uint256 controlAmount, uint256 dividendAmount, string purpose)",
    "event NameAssigned(string indexed name, uint256 indexed entityNumber)"
  ];
  depositoryABI = [
    "event ControlSharesReceived(address indexed entityProvider, address indexed fromEntity, uint256 indexed tokenId, uint256 amount, bytes data)",
    "event ReserveUpdated(bytes32 indexed entity, uint256 indexed tokenId, uint256 newBalance)",
    "event ReserveTransferred(bytes32 indexed from, bytes32 indexed to, uint256 indexed tokenId, uint256 amount)",
    "event SettlementProcessed(bytes32 indexed leftEntity, bytes32 indexed rightEntity, uint256 indexed tokenId, uint256 leftReserve, uint256 rightReserve, uint256 collateral, int256 ondelta)"
  ];
  constructor(config) {
    this.config = config;
    this.provider = new exports_ethers.JsonRpcProvider(config.rpcUrl);
    this.entityProviderContract = new exports_ethers.Contract(config.entityProviderAddress, this.entityProviderABI, this.provider);
    this.depositoryContract = new exports_ethers.Contract(config.depositoryAddress, this.depositoryABI, this.provider);
    if (DEBUG2) {
      console.log(`\uD83D\uDD2D J-WATCHER: Initialized with RPC: ${config.rpcUrl}`);
      console.log(`\uD83D\uDD2D J-WATCHER: EntityProvider: ${config.entityProviderAddress}`);
      console.log(`\uD83D\uDD2D J-WATCHER: Depository: ${config.depositoryAddress}`);
    }
  }
  addSigner(signerId, privateKey, entityIds) {
    this.signers.set(signerId, {
      signerId,
      privateKey,
      entityIds
    });
    if (DEBUG2) {
      console.log(`\uD83D\uDD2D J-WATCHER: Added signer ${signerId} monitoring entities: ${entityIds.join(", ")}`);
    }
  }
  async startWatching(env) {
    if (this.isWatching) {
      console.log("\uD83D\uDD2D J-WATCHER: Already watching");
      return;
    }
    this.isWatching = true;
    console.log("\uD83D\uDD2D J-WATCHER: Starting simple first-principles watcher...");
    try {
      const currentBlock = await this.provider.getBlockNumber();
      console.log(`\uD83D\uDD2D J-WATCHER: Connected to blockchain at block ${currentBlock}`);
    } catch (error) {
      console.log(`\uD83D\uDD2D\u26A0\uFE0F  J-WATCHER: Blockchain not ready, will retry: ${error.message}`);
    }
    setInterval(async () => {
      if (!this.isWatching)
        return;
      try {
        await this.syncAllProposerReplicas(env);
      } catch (error) {
        if (DEBUG2 && !error.message.includes("ECONNREFUSED")) {
          console.error("\uD83D\uDD2D\u274C J-WATCHER: Sync error:", error.message);
        }
      }
    }, 1000);
    console.log("\uD83D\uDD2D J-WATCHER: Started with simple 1s polling");
  }
  stopWatching() {
    this.isWatching = false;
    this.entityProviderContract.removeAllListeners();
    this.depositoryContract.removeAllListeners();
    console.log("\uD83D\uDD2D J-WATCHER: Stopped watching");
  }
  async syncAllProposerReplicas(env) {
    try {
      const currentBlock = await this.provider.getBlockNumber();
      if (DEBUG2) {
        console.log(`\uD83D\uDD2D\uD83D\uDD0D SYNC-START: Current blockchain block=${currentBlock}, total replicas=${env.replicas.size}`);
        console.log(`\uD83D\uDD2D\uD83D\uDD0D SYNC-ENV-TIMESTAMP: env.timestamp=${env.timestamp}`);
        for (const [replicaKey, replica] of env.replicas.entries()) {
          console.log(`\uD83D\uDD2D\uD83D\uDD0D REPLICA-STATE: ${replicaKey} \u2192 jBlock=${replica.state.jBlock}, height=${replica.state.height}, isProposer=${replica.isProposer}`);
        }
      }
      const proposerReplicas = [];
      for (const [replicaKey, replica] of env.replicas.entries()) {
        if (replica.isProposer) {
          const [entityId, signerId] = replicaKey.split(":");
          const lastJBlock = replica.state.jBlock || 0;
          if (DEBUG2) {
            console.log(`\uD83D\uDD2D\uD83D\uDD0D REPLICA-CHECK: ${signerId} \u2192 Entity ${entityId.slice(0, 10)}... jBlock=${lastJBlock}, currentBlock=${currentBlock}, isProposer=${replica.isProposer}`);
          }
          if (lastJBlock < currentBlock) {
            proposerReplicas.push({ entityId, signerId, lastJBlock });
            if (HEAVY_LOGS) {
              console.log(`\uD83D\uDD2D\uD83D\uDD0D PROPOSER-SYNC: Found proposer ${signerId} for entity ${entityId.slice(0, 10)}... at jBlock ${lastJBlock}, needs sync to ${currentBlock}`);
            }
          } else {
            if (DEBUG2) {
              console.log(`\uD83D\uDD2D\u2705 REPLICA-SYNCED: ${signerId} \u2192 Entity ${entityId.slice(0, 10)}... already synced (jBlock=${lastJBlock} >= currentBlock=${currentBlock})`);
            }
          }
        }
      }
      if (proposerReplicas.length === 0) {
        return;
      }
      if (DEBUG2) {
        console.log(`\uD83D\uDD2D\u26A1 SYNC: ${proposerReplicas.length} proposer replicas need sync to block ${currentBlock}`);
        for (const { entityId, signerId, lastJBlock } of proposerReplicas) {
          console.log(`\uD83D\uDD2D\uD83D\uDCCB SYNC-QUEUE: ${signerId} \u2192 Entity ${entityId.slice(0, 10)}... from j-block ${lastJBlock + 1} to ${currentBlock}`);
        }
      }
      for (const { entityId, signerId, lastJBlock } of proposerReplicas) {
        await this.syncEntityFromJBlock(entityId, signerId, lastJBlock + 1, currentBlock, env);
      }
    } catch (error) {
      if (!error.message.includes("ECONNREFUSED")) {
        throw error;
      }
    }
  }
  async syncEntityFromJBlock(entityId, signerId, fromBlock, toBlock, env) {
    if (fromBlock > toBlock)
      return;
    if (DEBUG2) {
      console.log(`\uD83D\uDD2D\uD83D\uDCE1 ENTITY-SYNC: Entity ${entityId.slice(0, 10)}... (${signerId}) from j-block ${fromBlock} to ${toBlock}`);
    }
    try {
      const events = await this.getEntityEventsInRange(entityId, fromBlock, toBlock);
      if (events.length === 0) {
        if (HEAVY_LOGS) {
          console.log(`\uD83D\uDD2D\u26AA ENTITY-SYNC: No events found for entity ${entityId.slice(0, 10)}... in blocks ${fromBlock}-${toBlock}`);
        }
        return;
      }
      console.log(`\uD83D\uDD2D\uD83D\uDCE6 ENTITY-SYNC: Found ${events.length} new events for entity ${entityId.slice(0, 10)}... in blocks ${fromBlock}-${toBlock}`);
      for (const event of events) {
        this.feedEventToProposer(entityId, signerId, event, env);
      }
      console.log(`\uD83D\uDD2D\u2705 ENTITY-SYNC: Queued ${events.length} events for entity ${entityId.slice(0, 10)}... (${signerId})`);
    } catch (error) {
      console.error(`\uD83D\uDD2D\u274C ENTITY-SYNC: Error syncing entity ${entityId.slice(0, 10)}...`, error.message);
    }
  }
  async getEntityEventsInRange(entityId, fromBlock, toBlock) {
    if (HEAVY_LOGS) {
      console.log(`\uD83D\uDD2D\uD83D\uDD0D EVENT-QUERY: Fetching events for entity ${entityId.slice(0, 10)}... blocks ${fromBlock}-${toBlock}`);
    }
    const [reserveEvents, settlementEventsLeft, settlementEventsRight] = await Promise.all([
      this.depositoryContract.queryFilter(this.depositoryContract.filters.ReserveUpdated(entityId), fromBlock, toBlock),
      this.depositoryContract.queryFilter(this.depositoryContract.filters.SettlementProcessed(entityId, null, null), fromBlock, toBlock),
      this.depositoryContract.queryFilter(this.depositoryContract.filters.SettlementProcessed(null, entityId, null), fromBlock, toBlock)
    ]);
    if (HEAVY_LOGS) {
      console.log(`\uD83D\uDD2D\uD83D\uDD0D EVENT-QUERY: Entity ${entityId.slice(0, 10)}... - Reserve: ${reserveEvents.length}, SettlementLeft: ${settlementEventsLeft.length}, SettlementRight: ${settlementEventsRight.length}`);
    }
    const allEvents = [
      ...reserveEvents.map((e) => ({ ...e, eventType: "ReserveUpdated" })),
      ...settlementEventsLeft.map((e) => ({ ...e, eventType: "SettlementProcessed", side: "left" })),
      ...settlementEventsRight.map((e) => ({ ...e, eventType: "SettlementProcessed", side: "right" }))
    ].sort((a, b2) => {
      if (a.blockNumber !== b2.blockNumber) {
        return a.blockNumber - b2.blockNumber;
      }
      return (a.transactionIndex || 0) - (b2.transactionIndex || 0);
    });
    if (HEAVY_LOGS && allEvents.length > 0) {
      console.log(`\uD83D\uDD2D\uD83D\uDD0D EVENT-QUERY: Entity ${entityId.slice(0, 10)}... total events: ${allEvents.length}`);
      allEvents.forEach((event, i) => {
        console.log(`\uD83D\uDD2D\uD83D\uDD0D EVENT-${i}: ${event.eventType} at block ${event.blockNumber} tx ${event.transactionIndex}`);
      });
    }
    return allEvents;
  }
  feedEventToProposer(entityId, signerId, event, env) {
    let entityTx;
    if (event.eventType === "ReserveUpdated") {
      entityTx = {
        type: "j_event",
        data: {
          from: signerId,
          event: {
            type: "ReserveUpdated",
            data: {
              entity: entityId,
              tokenId: Number(event.args.tokenId),
              newBalance: event.args.newBalance.toString(),
              symbol: `TKN${event.args.tokenId}`,
              decimals: 18
            }
          },
          observedAt: Date.now(),
          blockNumber: event.blockNumber,
          transactionHash: event.transactionHash
        }
      };
      if (DEBUG2) {
        console.log(`\uD83D\uDD2D\uD83D\uDCB0 R2R-EVENT: Entity ${entityId.slice(0, 10)}... Token ${event.args.tokenId} Balance ${(Number(event.args.newBalance) / 1000000000000000000).toFixed(4)} (block ${event.blockNumber})`);
      }
    } else if (event.eventType === "SettlementProcessed") {
      const isLeft = event.side === "left";
      const counterpartyId = isLeft ? event.args.rightEntity.toString() : event.args.leftEntity.toString();
      const ownReserve = isLeft ? event.args.leftReserve : event.args.rightReserve;
      const counterpartyReserve = isLeft ? event.args.rightReserve : event.args.leftReserve;
      const ondelta = isLeft ? event.args.ondelta : -event.args.ondelta;
      entityTx = {
        type: "j_event",
        data: {
          from: signerId,
          event: {
            type: "SettlementProcessed",
            data: {
              leftEntity: event.args.leftEntity.toString(),
              rightEntity: event.args.rightEntity.toString(),
              counterpartyEntityId: counterpartyId,
              tokenId: Number(event.args.tokenId),
              ownReserve: ownReserve.toString(),
              counterpartyReserve: counterpartyReserve.toString(),
              collateral: event.args.collateral.toString(),
              ondelta: ondelta.toString(),
              side: event.side
            }
          },
          observedAt: Date.now(),
          blockNumber: event.blockNumber,
          transactionHash: event.transactionHash
        }
      };
      if (DEBUG2) {
        console.log(`\uD83D\uDD2D\uD83D\uDCB1 SETTLE-EVENT: Entity ${entityId.slice(0, 10)}... vs ${counterpartyId.slice(0, 10)}... (${event.side} side, block ${event.blockNumber})`);
      }
    }
    if (entityTx) {
      console.log(`\uD83D\uDEA8 J-WATCHER-CREATING-EVENT: ${signerId} creating j-event ${event.eventType} block=${event.blockNumber} for entity ${entityId.slice(0, 10)}...`);
      env.serverInput.entityInputs.push({
        entityId,
        signerId,
        entityTxs: [entityTx]
      });
      console.log(`\uD83D\uDD2D\u2705 J-WATCHER-QUEUED: ${signerId} \u2192 Entity ${entityId.slice(0, 10)}... (${event.eventType}) block=${event.blockNumber} - Queue length now: ${env.serverInput.entityInputs.length}`);
    }
  }
  async syncNewlyCreatedEntities(env) {
    if (DEBUG2) {
      console.log("\uD83D\uDD2D\u26A0\uFE0F  J-WATCHER: syncNewlyCreatedEntities called (legacy) - first-principles design handles this automatically");
    }
    return false;
  }
  async getCurrentBlockNumber() {
    try {
      return await this.provider.getBlockNumber();
    } catch (error) {
      if (DEBUG2) {
        console.log(`\uD83D\uDD2D\u26A0\uFE0F  J-WATCHER: Could not get current block, using 0:`, error.message);
      }
      return 0;
    }
  }
  getStatus() {
    return {
      isWatching: this.isWatching,
      signerCount: this.signers.size
    };
  }
}
function createJEventWatcher(config) {
  return new JEventWatcher(config);
}
async function setupJEventWatcher(env, rpcUrl, entityProviderAddr, depositoryAddr) {
  const watcher = createJEventWatcher({
    rpcUrl,
    entityProviderAddress: entityProviderAddr,
    depositoryAddress: depositoryAddr,
    startBlock: 0
  });
  watcher.addSigner("s1", "s1-private-key", ["1", "2", "3", "4", "5"]);
  watcher.addSigner("s2", "s2-private-key", ["1", "2", "3", "4", "5"]);
  watcher.addSigner("s3", "s3-private-key", ["1", "2", "3", "4", "5"]);
  await watcher.startWatching(env);
  if (DEBUG2) {
    console.log("\uD83D\uDD2D\u2705 J-WATCHER: Setup complete with first-principles design");
  }
  return watcher;
}

// src/rundemo.ts
init_entity_factory();
init_evm();
init_utils5();
var createDepositEvent = (entityId, signerId, asset, eventType = "DEPOSIT") => {
  const event = {
    entityId,
    signerId,
    entityTxs: [{
      type: "j_event",
      data: {
        from: signerId,
        event: {
          type: "ReserveUpdated",
          data: {
            entity: entityId,
            tokenId: asset.tokenId,
            newBalance: asset.amount,
            name: asset.asset,
            symbol: asset.asset,
            decimals: asset.decimals
          }
        },
        observedAt: Date.now(),
        blockNumber: 1,
        transactionHash: `0xDEMO_${eventType}_${asset.asset}_${entityId.slice(0, 10)}`
      }
    }]
  };
  if (DEBUG) {
    console.log(`\uD83C\uDFAD Mock j_event created: ${eventType} ${asset.amount} ${asset.asset} for entity ${entityId.slice(0, 10)}...`);
  }
  return event;
};
var runDemo = async (env) => {
  if (DEBUG) {
    console.log("\uD83D\uDE80 Starting XLN Demo: First Principles");
  }
  const ethereumJurisdiction = await getJurisdictionByAddress("ethereum");
  if (!ethereumJurisdiction) {
    throw new Error("\u274C Ethereum jurisdiction not found");
  }
  const s1 = "s1";
  const s2 = "s2";
  console.log(`
\uD83D\uDCCB Forming entities e1=[${s1}] and e2=[${s2}]...`);
  const e1_config = {
    mode: "proposer-based",
    threshold: BigInt(1),
    validators: [s1],
    shares: { [s1]: BigInt(1) },
    jurisdiction: ethereumJurisdiction
  };
  const e1_id = generateNumberedEntityId(1);
  const e2_config = {
    mode: "proposer-based",
    threshold: BigInt(1),
    validators: [s2],
    shares: { [s2]: BigInt(1) },
    jurisdiction: ethereumJurisdiction
  };
  const e2_id = generateNumberedEntityId(2);
  await applyServerInput(env, {
    serverTxs: [
      { type: "importReplica", entityId: e1_id, signerId: s1, data: { config: e1_config, isProposer: true } },
      { type: "importReplica", entityId: e2_id, signerId: s2, data: { config: e2_config, isProposer: true } }
    ],
    entityInputs: []
  });
  await processUntilEmpty(env, []);
  const e1_replica = env.replicas.get(`${e1_id}:${s1}`);
  const e2_replica = env.replicas.get(`${e2_id}:${s2}`);
  if (e1_replica) {
    console.log(`\uD83E\uDDF9 Cleared ${e1_replica.mempool.length} leftover transactions from e1 mempool`);
    e1_replica.mempool.length = 0;
  }
  if (e2_replica) {
    console.log(`\uD83E\uDDF9 Cleared ${e2_replica.mempool.length} leftover transactions from e2 mempool`);
    e2_replica.mempool.length = 0;
  }
  console.log(`\u2705 Entity ${formatEntityDisplay(e1_id)} and ${formatEntityDisplay(e2_id)} created.`);
  console.log(`
\uD83D\uDCB0 Prefunding entity ${formatEntityDisplay(e1_id)}...`);
  const initialPortfolio = [
    { asset: "ETH", amount: "100000000000000000000", decimals: 18, tokenId: 1 },
    { asset: "USDT", amount: "5000000000", decimals: 6, tokenId: 2 }
  ];
  const depositInputs = initialPortfolio.map((asset) => createDepositEvent(e1_id, s1, asset));
  await applyServerInput(env, { serverTxs: [], entityInputs: depositInputs });
  await processUntilEmpty(env, []);
  const e1_replica_after_funding = env.replicas.get(`${e1_id}:${s1}`);
  if (DEBUG) {
    console.log("\uD83D\uDCCA Debug - Reserves after funding:");
    if (e1_replica_after_funding?.state.reserves) {
      for (const [tokenId, balance] of e1_replica_after_funding.state.reserves.entries()) {
        console.log(`  Token ${tokenId}: ${balance.toString()}`);
      }
    } else {
      console.log("  No reserves found");
    }
  }
  const ethReserve = e1_replica_after_funding?.state.reserves.get("1");
  const expectedETHAmount = 100000000000000000000n;
  if (!e1_replica_after_funding) {
    throw new Error("\u274C Verification failed: e1 replica not found after funding.");
  }
  if (ethReserve === undefined) {
    throw new Error("\u274C Verification failed: e1 ETH reserve not found. Available reserves: " + Array.from(e1_replica_after_funding.state.reserves.keys()).join(", "));
  }
  if (ethReserve !== expectedETHAmount) {
    throw new Error(`\u274C Verification failed: e1 ETH amount mismatch. Expected: ${expectedETHAmount}, Got: ${ethReserve}`);
  }
  console.log(`\u2705 ${formatEntityDisplay(e1_id)} funded successfully with ${ethReserve / 10n ** 18n} ETH.`);
  console.log(`
\uD83D\uDCB8 Performing reserve transfer from ${formatEntityDisplay(e1_id)} to ${formatEntityDisplay(e2_id)}...`);
  const transferAmount = 1000000000000000000n;
  const transferTokenId = 1;
  const e1_replica_before_transfer = env.replicas.get(`${e1_id}:${s1}`);
  const e2_replica_before_transfer = env.replicas.get(`${e2_id}:${s2}`);
  if (!e1_replica_before_transfer) {
    throw new Error("\u274C Entity 1 replica not found before transfer");
  }
  const e1_current_balance = e1_replica_before_transfer.state.reserves.get("1") || 0n;
  const e2_current_balance = e2_replica_before_transfer?.state.reserves.get("1") || 0n;
  console.log(`\uD83D\uDCCA Pre-transfer: e1=${e1_current_balance}, e2=${e2_current_balance}`);
  const e1_new_balance = e1_current_balance - transferAmount;
  const e2_new_balance = e2_current_balance + transferAmount;
  console.log(`\uD83D\uDCCA Post-transfer: e1=${e1_new_balance}, e2=${e2_new_balance}`);
  const transferEvents = [
    createDepositEvent(e1_id, s1, {
      asset: "ETH",
      amount: e1_new_balance.toString(),
      decimals: 18,
      tokenId: transferTokenId
    }, "TRANSFER_OUT"),
    createDepositEvent(e2_id, s2, {
      asset: "ETH",
      amount: e2_new_balance.toString(),
      decimals: 18,
      tokenId: transferTokenId
    }, "TRANSFER_IN")
  ];
  console.log(`\uD83D\uDCB8 Simulating jurisdiction events for reserve transfer...`);
  await applyServerInput(env, { serverTxs: [], entityInputs: transferEvents });
  await processUntilEmpty(env, []);
  console.log("\u2705 Transfer transaction submitted.");
  const e1_replica_after_transfer = env.replicas.get(`${e1_id}:${s1}`);
  const e2_replica_after_transfer = env.replicas.get(`${e2_id}:${s2}`);
  if (DEBUG) {
    console.log("\uD83D\uDCCA Debug - Final reserves after transfer:");
    console.log("Entity 1 reserves:");
    if (e1_replica_after_transfer?.state.reserves) {
      for (const [tokenId, balance] of e1_replica_after_transfer.state.reserves.entries()) {
        console.log(`  Token ${tokenId}: ${balance.toString()}`);
      }
    }
    console.log("Entity 2 reserves:");
    if (e2_replica_after_transfer?.state.reserves) {
      for (const [tokenId, balance] of e2_replica_after_transfer.state.reserves.entries()) {
        console.log(`  Token ${tokenId}: ${balance.toString()}`);
      }
    }
  }
  const e1_final_balance = e1_replica_after_transfer?.state.reserves.get("1");
  const e2_final_balance = e2_replica_after_transfer?.state.reserves.get("1");
  const expectedE1Balance = 99000000000000000000n;
  const expectedE2Balance = 1000000000000000000n;
  if (e1_final_balance !== expectedE1Balance) {
    throw new Error(`\u274C Verification failed: e1 has incorrect final ETH balance. Expected: ${expectedE1Balance}, Got: ${e1_final_balance}`);
  }
  if (e2_final_balance !== expectedE2Balance) {
    throw new Error(`\u274C Verification failed: e2 did not receive ETH. Expected: ${expectedE2Balance}, Got: ${e2_final_balance}`);
  }
  console.log(`\u2705 State verified: e1 has ${e1_final_balance / 10n ** 18n} ETH, e2 has ${e2_final_balance / 10n ** 18n} ETH.`);
  console.log(`
\uD83D\uDCB3 Opening account between ${formatEntityDisplay(e1_id)} and ${formatEntityDisplay(e2_id)}...`);
  const accountOpeningInput = {
    entityId: e1_id,
    signerId: s1,
    entityTxs: [{
      type: "account_request",
      data: { targetEntityId: e2_id, requestType: "open" }
    }]
  };
  await applyServerInput(env, { serverTxs: [], entityInputs: [accountOpeningInput] });
  await processUntilEmpty(env, []);
  console.log(`\u2705 Account opened between ${formatEntityDisplay(e1_id)} and ${formatEntityDisplay(e2_id)}`);
  console.log(`
\uD83D\uDCB8 ${formatEntityDisplay(e1_id)} sending direct payment to ${formatEntityDisplay(e2_id)}...`);
  const directPaymentInput = {
    entityId: e1_id,
    signerId: s1,
    entityTxs: [{
      type: "accountInput",
      data: {
        fromEntityId: e1_id,
        toEntityId: e2_id,
        accountTx: {
          type: "direct_payment",
          data: {
            tokenId: 3,
            amount: 50000n,
            description: "Demo direct payment from e1 to e2"
          }
        },
        metadata: {
          purpose: "account_direct_payment",
          description: "Testing direct payment with global credit limits"
        }
      }
    }]
  };
  await applyServerInput(env, { serverTxs: [], entityInputs: [directPaymentInput] });
  await processUntilEmpty(env, []);
  console.log(`\u2705 Direct payment sent: $500 USD from ${formatEntityDisplay(e1_id)} to ${formatEntityDisplay(e2_id)}`);
  const e1_final_replica = env.replicas.get(`${e1_id}:${s1}`);
  const e2_final_replica = env.replicas.get(`${e2_id}:${s2}`);
  console.log(`
\uD83D\uDD0D BILATERAL BALANCE VERIFICATION:`);
  if (e1_final_replica?.state.accounts.has(e2_id) && e2_final_replica?.state.accounts.has(e1_id)) {
    const e1_account = e1_final_replica.state.accounts.get(e2_id);
    const e2_account = e2_final_replica.state.accounts.get(e1_id);
    const e1_delta = e1_account.deltas.get(3);
    const e2_delta = e2_account.deltas.get(3);
    if (e1_delta && e2_delta) {
      const e1_total = e1_delta.ondelta + e1_delta.offdelta;
      const e2_total = e2_delta.ondelta + e2_delta.offdelta;
      const sum = e1_total + e2_total;
      console.log(`\uD83D\uDCB0 E1 owes E2: ${e1_total.toString()} cents ($${(Number(e1_total) / 100).toFixed(2)})`);
      console.log(`\uD83D\uDCB0 E2 owes E1: ${e2_total.toString()} cents ($${(Number(e2_total) / 100).toFixed(2)})`);
      console.log(`\uD83D\uDCB0 Sum: ${sum.toString()} cents (should be 0)`);
      if (sum === 0n) {
        console.log(`\u2705 CONSERVATION LAW VERIFIED: Bilateral balance maintained in rundemo!`);
      } else {
        console.log(`\u274C CONSERVATION VIOLATED: Bilateral imbalance detected!`);
      }
      if (e1_total === 50000n && e2_total === -50000n) {
        console.log(`\u2705 PAYMENT VERIFIED: $500 correctly transferred from E1 to E2`);
      } else {
        console.log(`\u274C PAYMENT MISMATCH: Expected E1:+500, E2:-500, got E1:${e1_total}, E2:${e2_total}`);
      }
    } else {
      console.log(`\u26A0\uFE0F Missing deltas for verification`);
    }
  } else {
    console.log(`\u26A0\uFE0F Account machines not found for verification`);
  }
  const e1_replica_final = env.replicas.get(`${e1_id}:${s1}`);
  const e2_replica_final = env.replicas.get(`${e2_id}:${s2}`);
  if (e1_replica_final?.state.accounts.has(e2_id)) {
    const e1_account = e1_replica_final.state.accounts.get(e2_id);
    console.log(`\uD83D\uDCB3 ${formatEntityDisplay(e1_id)} account with ${formatEntityDisplay(e2_id)}:`);
    console.log(`   Credit limits: own=${e1_account.globalCreditLimits.ownLimit.toString()} USD, peer=${e1_account.globalCreditLimits.peerLimit.toString()} USD`);
    console.log(`   Frame ${e1_account.currentFrame.frameId}: tokens=[${e1_account.currentFrame.tokenIds.join(",")}], deltas=[${e1_account.currentFrame.deltas.map((d) => d.toString()).join(",")}]`);
    console.log(`   Sent transitions: ${e1_account.sentTransitions}, mempool: ${e1_account.mempool.length}`);
  }
  if (e2_replica_final?.state.accounts.has(e1_id)) {
    const e2_account = e2_replica_final.state.accounts.get(e1_id);
    console.log(`\uD83D\uDCB3 ${formatEntityDisplay(e2_id)} account with ${formatEntityDisplay(e1_id)}:`);
    console.log(`   Credit limits: own=${e2_account.globalCreditLimits.ownLimit.toString()} USD, peer=${e2_account.globalCreditLimits.peerLimit.toString()} USD`);
    console.log(`   Frame ${e2_account.currentFrame.frameId}: tokens=[${e2_account.currentFrame.tokenIds.join(",")}], deltas=[${e2_account.currentFrame.deltas.map((d) => d.toString()).join(",")}]`);
    console.log(`   Sent transitions: ${e2_account.sentTransitions}, mempool: ${e2_account.mempool.length}`);
  }
  console.log(`
\uD83C\uDFAF J-MOCKED Demo completed with Account System!`);
  console.log("\uD83D\uDCCA Check the dashboard to verify final reserve states and account states.");
  console.log("\uD83D\uDCB3 Account system: 1M USD credit limits, direct payment processed");
  console.log('\uD83C\uDF10 For REAL blockchain integration, use the "Run Demo" button in the UI!');
  return env;
};

// src/server.ts
init_snapshot_coder();
init_state_helpers();

// src/test-hanko-complete.ts
init_lib2();

// src/hanko-real.ts
init_lib2();
init_utils5();
var bufferConcat = (buffers) => {
  if (typeof Buffer.concat === "function") {
    return Buffer.concat(buffers);
  } else {
    const totalLength = buffers.reduce((sum, buf) => sum + buf.length, 0);
    const result = new Uint8Array(totalLength);
    let offset = 0;
    for (const buf of buffers) {
      result.set(buf, offset);
      offset += buf.length;
    }
    return Buffer.from(result);
  }
};
var bufferAlloc = (size, fill) => {
  if (typeof Buffer.alloc === "function") {
    return Buffer.alloc(size, fill);
  } else {
    const result = new Uint8Array(size);
    if (fill !== undefined) {
      result.fill(fill);
    }
    return Buffer.from(result);
  }
};
var createDirectHashSignature = async (hash4, privateKey) => {
  try {
    const wallet = new exports_ethers.Wallet(exports_ethers.hexlify(privateKey));
    const hashHex = exports_ethers.hexlify(hash4);
    const signature = await wallet.signMessage(exports_ethers.getBytes(hash4));
    const signingKey = new exports_ethers.SigningKey(exports_ethers.hexlify(privateKey));
    const sig = signingKey.sign(hashHex);
    const r = exports_ethers.getBytes(sig.r);
    const s = exports_ethers.getBytes(sig.s);
    const v = sig.v;
    const rPadded = new Uint8Array(32);
    const sPadded = new Uint8Array(32);
    rPadded.set(r, 32 - r.length);
    sPadded.set(s, 32 - s.length);
    console.log(`\uD83D\uDD11 Created signature: r=${exports_ethers.hexlify(r).slice(0, 10)}..., s=${exports_ethers.hexlify(s).slice(0, 10)}..., v=${v}`);
    return bufferConcat([Buffer.from(rPadded), Buffer.from(sPadded), Buffer.from([v])]);
  } catch (error) {
    console.error(`\u274C Failed to create direct hash signature: ${error}`);
    throw error;
  }
};
var verifySignatureRecovery = async (hash4, signature, expectedAddress) => {
  try {
    const r = exports_ethers.hexlify(signature.slice(0, 32));
    const s = exports_ethers.hexlify(signature.slice(32, 64));
    const v = signature[64];
    const recoveredAddress = exports_ethers.recoverAddress(exports_ethers.hexlify(hash4), { r, s, v });
    const matches = recoveredAddress.toLowerCase() === expectedAddress.toLowerCase();
    console.log(`\uD83D\uDD0D Recovery test: expected=${expectedAddress.slice(0, 10)}..., recovered=${recoveredAddress.slice(0, 10)}..., match=${matches}`);
    return matches;
  } catch (error) {
    console.error(`\u274C Failed to verify signature recovery: ${error}`);
    return false;
  }
};
var packRealSignatures = (signatures) => {
  console.log(`\uD83D\uDCE6 Packing ${signatures.length} REAL signatures...`);
  if (signatures.length === 0) {
    return bufferAlloc(0);
  }
  for (let i = 0;i < signatures.length; i++) {
    if (signatures[i].length !== 65) {
      throw new Error(`Invalid signature ${i}: ${signatures[i].length} bytes (expected 65)`);
    }
    const v = signatures[i][64];
    if (v !== 27 && v !== 28) {
      throw new Error(`Invalid v value in signature ${i}: ${v} (expected 27 or 28)`);
    }
  }
  const rsValues = bufferAlloc(signatures.length * 64);
  let rsOffset = 0;
  for (const sig of signatures) {
    const rsBytes = sig.slice(0, 64);
    rsValues.set(rsBytes, rsOffset);
    rsOffset += 64;
  }
  const vBytesNeeded = Math.ceil(signatures.length / 8);
  const vValues = bufferAlloc(vBytesNeeded);
  for (let i = 0;i < signatures.length; i++) {
    const vByte = signatures[i][64];
    const byteIndex = Math.floor(i / 8);
    const bitIndex = i % 8;
    if (vByte === 28) {
      vValues[byteIndex] |= 1 << bitIndex;
    }
  }
  const packed = bufferConcat([rsValues, vValues]);
  console.log(`\u2705 Packed ${signatures.length} real signatures: ${packed.length} bytes`);
  return packed;
};
var detectSignatureCount = (packedSignatures) => {
  if (packedSignatures.length === 0)
    return 0;
  for (let count = 1;count <= 16000; count++) {
    const expectedRSBytes = count * 64;
    const expectedVBytes = Math.ceil(count / 8);
    const expectedTotal = expectedRSBytes + expectedVBytes;
    if (packedSignatures.length === expectedTotal) {
      console.log(`\uD83D\uDD0D Detected ${count} signatures from ${packedSignatures.length} bytes`);
      return count;
    }
    if (expectedTotal > packedSignatures.length) {
      break;
    }
  }
  throw new Error(`Invalid packed signature length: ${packedSignatures.length} bytes - cannot detect count`);
};
var unpackRealSignatures = (packedSignatures) => {
  const signatureCount = detectSignatureCount(packedSignatures);
  console.log(`\uD83D\uDCE6 Unpacking ${signatureCount} REAL signatures...`);
  if (signatureCount === 0)
    return [];
  const expectedRSBytes = signatureCount * 64;
  const expectedVBytes = Math.ceil(signatureCount / 8);
  const expectedTotal = expectedRSBytes + expectedVBytes;
  if (packedSignatures.length !== expectedTotal) {
    throw new Error(`Invalid packed signature length: ${packedSignatures.length} (expected ${expectedTotal})`);
  }
  const rsValues = packedSignatures.slice(0, expectedRSBytes);
  const vValues = packedSignatures.slice(expectedRSBytes);
  const signatures = [];
  for (let i = 0;i < signatureCount; i++) {
    const rs = rsValues.slice(i * 64, (i + 1) * 64);
    const byteIndex = Math.floor(i / 8);
    const bitIndex = i % 8;
    const vBit = vValues[byteIndex] >> bitIndex & 1;
    const vByte = vBit === 0 ? 27 : 28;
    const signature = bufferConcat([rs, Buffer.from([vByte])]);
    signatures.push(signature);
  }
  console.log(`\u2705 Unpacked ${signatures.length} real signatures`);
  return signatures;
};
var buildRealHanko = async (hashToSign, config) => {
  console.log(`\uD83D\uDD8B\uFE0F  Building REAL hanko: ${config.claims.length} claims, ${config.privateKeys.length} signatures`);
  const signatures = [];
  const signerAddresses = [];
  for (let i = 0;i < config.privateKeys.length; i++) {
    const privateKey = config.privateKeys[i];
    const wallet = new exports_ethers.Wallet(exports_ethers.hexlify(privateKey));
    signerAddresses.push(wallet.address);
    console.log(`\uD83D\uDD11 Signing with key ${i + 1}/${config.privateKeys.length}: ${wallet.address.slice(0, 10)}...`);
    const signature = await createDirectHashSignature(hashToSign, privateKey);
    signatures.push(signature);
    const verifySuccess = await verifySignatureRecovery(hashToSign, signature, wallet.address);
    if (!verifySuccess) {
      throw new Error(`Signature verification failed for key ${i}`);
    }
  }
  const packedSignatures = packRealSignatures(signatures);
  const claims = config.claims.map((claim) => ({
    entityId: claim.entityId,
    entityIndexes: claim.entityIndexes,
    weights: claim.weights,
    threshold: claim.threshold,
    expectedQuorumHash: claim.expectedQuorumHash
  }));
  const hanko = {
    placeholders: config.noEntities,
    packedSignatures,
    claims
  };
  console.log(`\u2705 Built REAL hanko with verifiable signatures`);
  console.log(`   \uD83D\uDCCB Signers: ${signerAddresses.map((addr) => addr.slice(0, 10) + "...").join(", ")}`);
  console.log(`   \uD83D\uDCCA Signature count: ${signatures.length} (detected from length)`);
  return hanko;
};
var recoverHankoEntities = async (hanko, hash4) => {
  console.log("\uD83D\uDD0D Recovering hanko entities with flashloan governance...");
  const signatures = unpackRealSignatures(hanko.packedSignatures);
  const yesEntities = [];
  for (let i = 0;i < signatures.length; i++) {
    try {
      const sig = signatures[i];
      const r = exports_ethers.hexlify(sig.slice(0, 32));
      const s = exports_ethers.hexlify(sig.slice(32, 64));
      const v = sig[64];
      const recoveredAddress = exports_ethers.recoverAddress(exports_ethers.hexlify(hash4), { r, s, v });
      const addressAsBytes32 = Buffer.from(exports_ethers.zeroPadValue(recoveredAddress, 32).slice(2), "hex");
      yesEntities.push(addressAsBytes32);
      console.log(`\u2705 Recovered signer ${i + 1}: ${recoveredAddress.slice(0, 10)}...`);
    } catch (error) {
      console.log(`\u274C Failed to recover signature ${i + 1}: ${error}`);
    }
  }
  for (let claimIndex = 0;claimIndex < hanko.claims.length; claimIndex++) {
    const claim = hanko.claims[claimIndex];
    console.log(`\uD83D\uDD04 Processing claim ${claimIndex + 1}/${hanko.claims.length}: Entity ${exports_ethers.hexlify(claim.entityId).slice(0, 10)}...`);
    let totalVotingPower = 0;
    const totalEntities = hanko.placeholders.length + signatures.length + hanko.claims.length;
    for (let i = 0;i < claim.entityIndexes.length; i++) {
      const entityIndex = claim.entityIndexes[i];
      if (entityIndex >= totalEntities) {
        console.log(`\u274C Entity index ${entityIndex} out of bounds (max: ${totalEntities})`);
        continue;
      }
      const referencedClaimIndex = entityIndex - hanko.placeholders.length - signatures.length;
      if (referencedClaimIndex === claimIndex) {
        console.log(`\u274C Claim ${claimIndex} cannot reference itself`);
        continue;
      }
      if (entityIndex < hanko.placeholders.length) {
        console.log(`  \uD83D\uDCCD Index ${entityIndex}: Placeholder (no power)`);
        continue;
      } else if (entityIndex < hanko.placeholders.length + signatures.length) {
        console.log(`  \uD83D\uDD11 Index ${entityIndex}: EOA signature (power: ${claim.weights[i]})`);
        totalVotingPower += claim.weights[i];
      } else {
        const refClaimIdx = referencedClaimIndex;
        console.log(`  \uD83D\uDD25 Index ${entityIndex}: ASSUME claim ${refClaimIdx} = YES (power: ${claim.weights[i]})`);
        totalVotingPower += claim.weights[i];
      }
    }
    if (totalVotingPower >= claim.threshold) {
      yesEntities.push(claim.entityId);
      console.log(`\u2705 Claim ${claimIndex + 1} passed: ${totalVotingPower}/${claim.threshold} (flashloan assumption)`);
    } else {
      console.log(`\u274C Claim ${claimIndex + 1} failed: ${totalVotingPower}/${claim.threshold}`);
    }
  }
  console.log(`\uD83D\uDCCA Flashloan recovery complete: ${yesEntities.length} yes, ${hanko.placeholders.length} placeholders`);
  return {
    yesEntities,
    noEntities: hanko.placeholders,
    claims: hanko.claims
  };
};
var testFullCycle = async () => {
  console.log(`
\uD83E\uDDEA === FULL CYCLE TEST: TypeScript \u2192 Solidity ===
`);
  const hashToSign = createHash2("sha256").update("Test hanko message").digest();
  const privateKey1 = randomBytes4(32);
  const privateKey2 = randomBytes4(32);
  const wallet1 = new exports_ethers.Wallet(exports_ethers.hexlify(privateKey1));
  const wallet2 = new exports_ethers.Wallet(exports_ethers.hexlify(privateKey2));
  console.log(`\uD83D\uDCC4 Hash to sign: 0x${hashToSign.toString("hex")}`);
  console.log(`\uD83D\uDD11 Signer 1: ${wallet1.address}`);
  console.log(`\uD83D\uDD11 Signer 2: ${wallet2.address}`);
  const hanko = await buildRealHanko(hashToSign, {
    noEntities: [],
    privateKeys: [privateKey1, privateKey2],
    claims: [
      {
        entityId: Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex"),
        entityIndexes: [0, 1],
        weights: [1, 1],
        threshold: 2,
        expectedQuorumHash: randomBytes4(32)
      }
    ]
  });
  const unpacked = unpackRealSignatures(hanko.packedSignatures);
  console.log(`
\uD83D\uDCE6 Signature verification:`);
  for (let i = 0;i < unpacked.length; i++) {
    const expectedAddr = i === 0 ? wallet1.address : wallet2.address;
    const verified = await verifySignatureRecovery(hashToSign, unpacked[i], expectedAddr);
    console.log(`   Signature ${i + 1}: ${verified ? "\u2705" : "\u274C"} ${expectedAddr.slice(0, 10)}...`);
  }
  const abiEncoded = exports_ethers.AbiCoder.defaultAbiCoder().encode(["tuple(bytes32[],bytes,tuple(bytes32,uint256[],uint256[],uint256,bytes32)[])"], [
    [
      hanko.placeholders.map((p) => "0x" + Buffer.from(p).toString("hex")),
      "0x" + Buffer.from(hanko.packedSignatures).toString("hex"),
      hanko.claims.map((c) => [
        "0x" + Buffer.from(c.entityId).toString("hex"),
        c.entityIndexes,
        c.weights,
        c.threshold,
        "0x" + Buffer.from(c.expectedQuorumHash).toString("hex")
      ])
    ]
  ]);
  console.log(`
\uD83D\uDCCB ABI Encoded hanko: ${abiEncoded.length} bytes`);
  return { hanko, abiEncoded, hashToSign };
};
var testGasOptimization = async () => {
  console.log(`
\u26FD === GAS OPTIMIZATION TEST ===
`);
  const { hanko, abiEncoded, hashToSign } = await testFullCycle();
  console.log(`\uD83D\uDCCA Method 1 - Full Hanko:`);
  console.log(`   Calldata size: ${abiEncoded.length} bytes`);
  console.log(`   Solidity function: verifyHankoSignature(bytes,bytes32)`);
  const recovered = await recoverHankoEntities(hanko, hashToSign);
  const optimizedEncoded = exports_ethers.AbiCoder.defaultAbiCoder().encode(["bytes32[]", "bytes32[]", "tuple(bytes32,uint256[],uint256[],uint256,bytes32)[]"], [
    recovered.yesEntities.map((entity) => "0x" + Buffer.from(entity).toString("hex")),
    recovered.noEntities.map((entity) => "0x" + Buffer.from(entity).toString("hex")),
    recovered.claims.map((c) => [
      "0x" + Buffer.from(c.entityId).toString("hex"),
      c.entityIndexes,
      c.weights,
      c.threshold,
      "0x" + Buffer.from(c.expectedQuorumHash).toString("hex")
    ])
  ]);
  console.log(`\uD83D\uDCCA Method 2 - Pre-recovered:`);
  console.log(`   Calldata size: ${optimizedEncoded.length} bytes`);
  console.log(`   Solidity function: verifyQuorumClaims(bytes32[],bytes32[],HankoClaim[])`);
  console.log(`   Gas savings: ~${Math.round((1 - optimizedEncoded.length / abiEncoded.length) * 100)}% calldata reduction`);
  console.log(`   Additional savings: No signature recovery gas cost on-chain`);
  console.log(`
\uD83D\uDCA1 Recommendation: Use Method 2 for gas-sensitive applications`);
};

// src/test-hanko-complete.ts
init_utils5();
var generateTestKeys = (count) => {
  const keys = [];
  for (let i = 0;i < count; i++) {
    keys.push(randomBytes4(32));
  }
  return keys;
};
var getWalletFromKey = (privateKey) => {
  return new exports_ethers.Wallet(exports_ethers.hexlify(privateKey));
};
var testRealSignatures = async () => {
  console.log(`
\uD83D\uDD10 === REAL SIGNATURE TESTS ===
`);
  const testHash = createHash2("sha256").update("test message").digest();
  const privateKey = randomBytes4(32);
  const wallet = getWalletFromKey(privateKey);
  console.log(`\uD83D\uDCC4 Test hash: 0x${testHash.toString("hex")}`);
  console.log(`\uD83D\uDD11 Test wallet: ${wallet.address}`);
  const signature = await createDirectHashSignature(testHash, privateKey);
  console.log(`\u2705 Created signature: ${signature.length} bytes`);
  const verified = await verifySignatureRecovery(testHash, signature, wallet.address);
  console.log(`\u2705 Signature verification: ${verified ? "PASS" : "FAIL"}`);
  if (!verified) {
    throw new Error("Signature verification failed");
  }
};
var testSignaturePacking = async () => {
  console.log(`
\uD83D\uDCE6 === SIGNATURE PACKING TESTS ===
`);
  const testHash = createHash2("sha256").update("packing test").digest();
  const keys = generateTestKeys(3);
  const signatures = [];
  for (let i = 0;i < keys.length; i++) {
    const sig = await createDirectHashSignature(testHash, keys[i]);
    signatures.push(sig);
  }
  console.log(`\uD83D\uDCC4 Original signatures: ${signatures.length} \xD7 65 bytes = ${signatures.length * 65} bytes`);
  const packed = packRealSignatures(signatures);
  console.log(`\uD83D\uDCE6 Packed signatures: ${packed.length} bytes`);
  const unpacked = unpackRealSignatures(packed);
  console.log(`\uD83D\uDCE6 Unpacked signatures: ${unpacked.length} signatures`);
  for (let i = 0;i < signatures.length; i++) {
    const original = signatures[i];
    const recovered = unpacked[i];
    const originalHex = Buffer.from(original).toString("hex");
    const recoveredHex = Buffer.from(recovered).toString("hex");
    const match = originalHex === recoveredHex;
    console.log(`   Signature ${i + 1}: ${match ? "\u2705" : "\u274C"} Match`);
    if (!match) {
      throw new Error(`Signature ${i + 1} packing/unpacking failed`);
    }
  }
};
var testBasicHanko = async () => {
  console.log(`
\uD83D\uDD8B\uFE0F  === BASIC HANKO TESTS ===
`);
  const testHash = createHash2("sha256").update("basic hanko test").digest();
  const keys = generateTestKeys(2);
  const wallets = keys.map(getWalletFromKey);
  console.log(`\uD83D\uDD11 Signers: ${wallets.map((w) => w.address.slice(0, 10) + "...").join(", ")}`);
  const hanko = await buildRealHanko(testHash, {
    noEntities: [],
    privateKeys: keys,
    claims: [
      {
        entityId: Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex"),
        entityIndexes: [0, 1],
        weights: [1, 1],
        threshold: 2,
        expectedQuorumHash: randomBytes4(32)
      }
    ]
  });
  console.log(`\u2705 Built hanko with ${hanko.claims.length} claims`);
  console.log(`\uD83D\uDCE6 Packed signatures: ${hanko.packedSignatures.length} bytes`);
  console.log(`\uD83D\uDCCB Placeholders: ${hanko.placeholders.length}`);
  const recovered = await recoverHankoEntities(hanko, testHash);
  console.log(`\uD83D\uDD0D Recovered: ${recovered.yesEntities.length} yes, ${recovered.noEntities.length} no`);
  if (recovered.yesEntities.length !== 3) {
    throw new Error(`Expected 3 yes entities, got ${recovered.yesEntities.length}`);
  }
};
var testHierarchicalHanko = async () => {
  console.log(`
\uD83C\uDFD7\uFE0F  === HIERARCHICAL HANKO TESTS ===
`);
  const testHash = createHash2("sha256").update("hierarchical hanko test").digest();
  const keys = generateTestKeys(4);
  const wallets = keys.map(getWalletFromKey);
  console.log(`\uD83D\uDD11 EOA Signers: ${wallets.map((w) => w.address.slice(0, 10) + "...").join(", ")}`);
  const hanko = await buildRealHanko(testHash, {
    noEntities: [],
    privateKeys: keys,
    claims: [
      {
        entityId: Buffer.from("000000000000000000000000000000000000000000000000000000000000000A", "hex"),
        entityIndexes: [0, 1, 2],
        weights: [1, 1, 1],
        threshold: 2,
        expectedQuorumHash: randomBytes4(32)
      },
      {
        entityId: Buffer.from("000000000000000000000000000000000000000000000000000000000000000B", "hex"),
        entityIndexes: [4, 3],
        weights: [1, 1],
        threshold: 2,
        expectedQuorumHash: randomBytes4(32)
      }
    ]
  });
  console.log(`\u2705 Built hierarchical hanko:`);
  console.log(`   Entity A: 3 EOAs \u2192 threshold 2`);
  console.log(`   Entity B: Entity A + 1 EOA \u2192 threshold 2`);
  const recovered = await recoverHankoEntities(hanko, testHash);
  console.log(`\uD83D\uDD0D Flashloan recovery: ${recovered.yesEntities.length} yes entities`);
  if (recovered.yesEntities.length !== 6) {
    throw new Error(`Expected 6 yes entities, got ${recovered.yesEntities.length}`);
  }
};
var testEdgeCases = async () => {
  console.log(`
\u26A0\uFE0F  === EDGE CASE TESTS ===
`);
  const testHash = createHash2("sha256").update("edge case test").digest();
  console.log("\uD83E\uDDEA Test 1: Empty hanko");
  try {
    const emptyHanko = await buildRealHanko(testHash, {
      noEntities: [],
      privateKeys: [],
      claims: []
    });
    console.log("\u2705 Empty hanko created successfully");
  } catch (error) {
    console.log("\u274C Empty hanko failed:", error);
  }
  console.log("\uD83E\uDDEA Test 2: Single signature hanko");
  const singleKey = [randomBytes4(32)];
  const singleHanko = await buildRealHanko(testHash, {
    noEntities: [],
    privateKeys: singleKey,
    claims: [
      {
        entityId: Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex"),
        entityIndexes: [0],
        weights: [1],
        threshold: 1,
        expectedQuorumHash: randomBytes4(32)
      }
    ]
  });
  console.log("\u2705 Single signature hanko created");
  console.log("\uD83E\uDDEA Test 3: Hanko with failed entities");
  const failedHanko = await buildRealHanko(testHash, {
    noEntities: [randomBytes4(32), randomBytes4(32)],
    privateKeys: singleKey,
    claims: [
      {
        entityId: Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex"),
        entityIndexes: [0, 1, 2],
        weights: [1, 1, 1],
        threshold: 1,
        expectedQuorumHash: randomBytes4(32)
      }
    ]
  });
  console.log("\u2705 Failed entities hanko created");
  const failedRecovered = await recoverHankoEntities(failedHanko, testHash);
  console.log(`   Recovered: ${failedRecovered.yesEntities.length} yes, ${failedRecovered.noEntities.length} placeholders`);
};
var testPerformance = async () => {
  console.log(`
\u26A1 === PERFORMANCE TESTS ===
`);
  const testHash = createHash2("sha256").update("performance test").digest();
  const LARGE_COUNT = 50;
  console.log(`\uD83C\uDFC3 Testing with ${LARGE_COUNT} signatures...`);
  const startTime = Date.now();
  const largeKeys = generateTestKeys(LARGE_COUNT);
  const largeHanko = await buildRealHanko(testHash, {
    noEntities: [],
    privateKeys: largeKeys,
    claims: [
      {
        entityId: Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex"),
        entityIndexes: Array.from({ length: LARGE_COUNT }, (_, i) => i),
        weights: Array.from({ length: LARGE_COUNT }, () => 1),
        threshold: Math.floor(LARGE_COUNT * 0.66),
        expectedQuorumHash: randomBytes4(32)
      }
    ]
  });
  const buildTime = Date.now() - startTime;
  console.log(`\u2705 Built large hanko in ${buildTime}ms`);
  console.log(`\uD83D\uDCE6 Size: ${largeHanko.packedSignatures.length} bytes packed signatures`);
  const recoverStart = Date.now();
  const recovered = await recoverHankoEntities(largeHanko, testHash);
  const recoverTime = Date.now() - recoverStart;
  console.log(`\uD83D\uDD0D Recovery took ${recoverTime}ms`);
  console.log(`\uD83D\uDCCA Throughput: ${Math.round(LARGE_COUNT / (buildTime + recoverTime) * 1000)} sigs/sec`);
};
var testIntegration = async () => {
  console.log(`
\uD83D\uDD17 === INTEGRATION TESTS ===
`);
  console.log("\uD83E\uDDEA Running full cycle test...");
  const cycleResult = await testFullCycle();
  console.log("\u2705 Full cycle test completed");
  console.log("\uD83E\uDDEA Running gas optimization test...");
  await testGasOptimization();
  console.log("\u2705 Gas optimization test completed");
};
var runAllTests = async () => {
  console.log("\uD83D\uDE80 === COMPREHENSIVE HANKO TESTS ===");
  try {
    await testRealSignatures();
    await testSignaturePacking();
    await testBasicHanko();
    await testHierarchicalHanko();
    await testEdgeCases();
    await testPerformance();
    await testIntegration();
    console.log(`
\uD83C\uDF89 === ALL TESTS PASSED ===`);
    console.log("\u2705 Real signatures working");
    console.log("\u2705 Packing/unpacking working");
    console.log("\u2705 Basic hanko working");
    console.log("\u2705 Hierarchical hanko working");
    console.log("\u2705 Edge cases handled");
    console.log("\u2705 Performance acceptable");
    console.log("\u2705 Integration working");
  } catch (error) {
    console.error(`
\u274C === TEST FAILED ===`);
    console.error(error);
    if (typeof process !== "undefined") {
      process.exit(1);
    }
  }
};
if (typeof process !== "undefined" && import.meta.url === `file://${process.argv[1]}`) {
  runAllTests();
}

// src/server.ts
init_utils5();

// src/prepopulate.ts
init_entity_factory();
async function prepopulate(env, processUntilEmpty2) {
  console.log("\uD83C\uDF10 Starting XLN Prepopulation");
  console.log("================================");
  console.log("Creating network topology:");
  console.log("  \u2022 3 Hubs (E1, E2, E3) - fully connected");
  console.log("  \u2022 7 Users (E4-E10) - connected to hubs");
  console.log("    - E4, E5 \u2192 Hub E1");
  console.log("    - E6, E7 \u2192 Hub E2");
  console.log("    - E8, E9, E10 \u2192 Hub E3");
  console.log(`================================
`);
  const ethereum = {
    name: "Ethereum",
    address: "http://127.0.0.1:8545",
    entityProviderAddress: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    depositoryAddress: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  };
  console.log("\uD83D\uDCE6 Step 1: Creating 10 entities with blockchain-assigned IDs...");
  console.log("  Each entity will get sequential ID from the blockchain");
  const entities = [];
  const createEntityTxs = [];
  for (let i = 1;i <= 10; i++) {
    const signer = `s${i}`;
    const isHub = i <= 3;
    const entityName = isHub ? `Hub ${i}` : `User ${i}`;
    try {
      const { config, entityNumber, entityId } = await createNumberedEntity(entityName, [signer], 1n, ethereum);
      entities.push({ id: entityId, signer, isHub });
      console.log(`  \u2713 Created ${entityName}: Entity #${entityNumber} (${entityId.slice(0, 10)}...)`);
      createEntityTxs.push({
        type: "importReplica",
        entityId,
        signerId: signer,
        data: {
          isProposer: true,
          config
        }
      });
    } catch (error) {
      console.error(`  \u274C Failed to create ${entityName}:`, error);
      const entityNumber = i;
      const entityId = "0x" + entityNumber.toString(16).padStart(64, "0");
      entities.push({ id: entityId, signer, isHub });
      createEntityTxs.push({
        type: "importReplica",
        entityId,
        signerId: signer,
        data: {
          isProposer: true,
          config: {
            mode: "proposer-based",
            threshold: 1n,
            validators: [signer],
            shares: { [signer]: 1n },
            jurisdiction: ethereum
          }
        }
      });
      console.log(`  \u26A0\uFE0F Using fallback ID for ${entityName}: Entity #${entityNumber}`);
    }
  }
  await applyServerInput(env, {
    serverTxs: createEntityTxs,
    entityInputs: []
  });
  console.log(`
  \u2705 Imported ${entities.length} entities`);
  entities.forEach((e, i) => {
    const entityNum = parseInt(e.id.slice(2), 16);
    console.log(`    \u2022 Entity #${entityNum}: ${e.isHub ? "HUB" : "User"} (signer: ${e.signer})`);
  });
  console.log(`
\uD83D\uDCE1 Step 2: Connecting hubs to each other...`);
  const hubs = entities.slice(0, 3);
  for (let i = 0;i < hubs.length; i++) {
    for (let j = i + 1;j < hubs.length; j++) {
      const hub1 = hubs[i];
      const hub2 = hubs[j];
      await processUntilEmpty2(env, [{
        entityId: hub1.id,
        signerId: hub1.signer,
        entityTxs: [{
          type: "openAccount",
          data: { targetEntityId: hub2.id }
        }]
      }]);
      const hub1Num = parseInt(hub1.id.slice(2), 16);
      const hub2Num = parseInt(hub2.id.slice(2), 16);
      console.log(`  \uD83D\uDD17 Hub E${hub1Num} \u2190\u2192 Hub E${hub2Num} connected`);
    }
  }
  console.log(`
\uD83D\uDC65 Step 3: Connecting users to hubs...`);
  const userHubMapping = [
    { users: [3, 4], hub: 0 },
    { users: [5, 6], hub: 1 },
    { users: [7, 8, 9], hub: 2 }
  ];
  for (const mapping2 of userHubMapping) {
    for (const userIndex of mapping2.users) {
      const user = entities[userIndex];
      const hub = entities[mapping2.hub];
      await processUntilEmpty2(env, [{
        entityId: user.id,
        signerId: user.signer,
        entityTxs: [{
          type: "openAccount",
          data: { targetEntityId: hub.id }
        }]
      }]);
      const userNum = parseInt(user.id.slice(2), 16);
      const hubNum = parseInt(hub.id.slice(2), 16);
      console.log(`  \uD83D\uDC64 User E${userNum} \u2192 Hub E${hubNum} connected`);
    }
  }
  console.log(`
\uD83C\uDFAF Step 4: Setting hub profiles with lower fees...`);
  for (let i = 0;i < 3; i++) {
    const hub = hubs[i];
    const hubNum = parseInt(hub.id.slice(2), 16);
    await processUntilEmpty2(env, [{
      entityId: hub.id,
      signerId: hub.signer,
      entityTxs: [{
        type: "profile-update",
        data: {
          profile: {
            entityId: hub.id,
            name: `Hub ${hubNum}`,
            bio: `Professional routing hub with high capacity and low fees`,
            isHub: true,
            routingFeePPM: 50,
            baseFee: 0n
          }
        }
      }]
    }]);
    console.log(`  \uD83D\uDCB0 Hub E${hubNum} - routing fee: 50 PPM (0.005%)`);
  }
  console.log(`
================================`);
  console.log("\u2705 Prepopulation Complete!");
  console.log(`
Network topology created:`);
  console.log("  \u2022 3 Hubs with full mesh connectivity");
  console.log("  \u2022 7 Users connected to hubs");
  console.log("  \u2022 Total accounts: 9 (3 hub-to-hub + 6 user-to-hub)");
  console.log(`
You can now:`);
  console.log("  1. Send payments between any entities");
  console.log("  2. Payments will route through hubs automatically");
  console.log("  3. View the network in the Network Directory");
  console.log(`================================
`);
}

// src/server.ts
var db = new $Level("db", {
  valueEncoding: "buffer",
  keyEncoding: "binary"
});
var envChangeCallback = null;
var env;
var jWatcher = null;
var jWatcherStarted = false;
var registerEnvChangeCallback = (callback) => {
  envChangeCallback = callback;
};
var notifyEnvChange = (env2) => {
  if (envChangeCallback) {
    envChangeCallback(env2);
  }
};
var startJEventWatcher = async (env2) => {
  try {
    const ethereum = await getJurisdictionByAddress("ethereum");
    if (!ethereum) {
      console.warn("\u26A0\uFE0F Ethereum jurisdiction not found, skipping j-watcher");
      return;
    }
    jWatcher = await setupJEventWatcher(env2, ethereum.address, ethereum.entityProviderAddress, ethereum.depositoryAddress);
    console.log("\u2705 J-Event Watcher started successfully");
    console.log(`\uD83D\uDD2D Monitoring: ${ethereum.address}`);
    console.log(`\uD83D\uDCCD EntityProvider: ${ethereum.entityProviderAddress}`);
    console.log(`\uD83D\uDCCD Depository: ${ethereum.depositoryAddress}`);
    setInterval(async () => {
      if (env2.serverInput.entityInputs.length > 0) {
        const eventCount = env2.serverInput.entityInputs.length;
        console.log(`\uD83D\uDD2D J-WATCHER: Processing ${eventCount} J-machine events`);
        await applyServerInput(env2, {
          serverTxs: [],
          entityInputs: [...env2.serverInput.entityInputs]
        });
        env2.serverInput.entityInputs.length = 0;
      }
    }, 100);
  } catch (error) {
    console.error("\u274C Failed to start J-Event Watcher:", error);
  }
};
var applyServerInput = async (env2, serverInput) => {
  const startTime = Date.now();
  try {
    if (!serverInput) {
      log.error("\u274C Null server input provided");
      return { entityOutbox: [], mergedInputs: [] };
    }
    if (!Array.isArray(serverInput.serverTxs)) {
      log.error(`\u274C Invalid serverTxs: expected array, got ${typeof serverInput.serverTxs}`);
      return { entityOutbox: [], mergedInputs: [] };
    }
    if (!Array.isArray(serverInput.entityInputs)) {
      log.error(`\u274C Invalid entityInputs: expected array, got ${typeof serverInput.entityInputs}`);
      return { entityOutbox: [], mergedInputs: [] };
    }
    if (serverInput.serverTxs.length > 1000) {
      log.error(`\u274C Too many server transactions: ${serverInput.serverTxs.length} > 1000`);
      return { entityOutbox: [], mergedInputs: [] };
    }
    if (serverInput.entityInputs.length > 1e4) {
      log.error(`\u274C Too many entity inputs: ${serverInput.entityInputs.length} > 10000`);
      return { entityOutbox: [], mergedInputs: [] };
    }
    env2.serverInput.serverTxs.push(...serverInput.serverTxs);
    env2.serverInput.entityInputs.push(...serverInput.entityInputs);
    const mergedInputs = mergeEntityInputs(env2.serverInput.entityInputs);
    const entityOutbox = [];
    if (DEBUG) {
      console.log(`
=== TICK ${env2.height} ===`);
      console.log(`Server inputs: ${serverInput.serverTxs.length} new serverTxs, ${serverInput.entityInputs.length} new entityInputs`);
      console.log(`Total in env: ${env2.serverInput.serverTxs.length} serverTxs, ${env2.serverInput.entityInputs.length} entityInputs (merged to ${mergedInputs.length})`);
      if (mergedInputs.length > 0) {
        console.log(`\uD83D\uDD04 Processing merged inputs:`);
        mergedInputs.forEach((input, i) => {
          const parts = [];
          if (input.entityTxs?.length)
            parts.push(`${input.entityTxs.length} txs`);
          if (input.precommits?.size)
            parts.push(`${input.precommits.size} precommits`);
          if (input.proposedFrame)
            parts.push(`frame: ${input.proposedFrame.hash.slice(0, 10)}...`);
          console.log(`  ${i + 1}. ${input.entityId}:${input.signerId} (${parts.join(", ") || "empty"})`);
        });
      }
    }
    console.log(`\uD83D\uDD0D REPLICA-DEBUG: Processing ${env2.serverInput.serverTxs.length} serverTxs, current replicas: ${env2.replicas.size}`);
    env2.serverInput.serverTxs.forEach((serverTx) => {
      if (serverTx.type === "importReplica") {
        if (DEBUG)
          console.log(`Importing replica Entity #${formatEntityDisplay(serverTx.entityId)}:${formatSignerDisplay(serverTx.signerId)} (proposer: ${serverTx.data.isProposer})`);
        const replicaKey = `${serverTx.entityId}:${serverTx.signerId}`;
        env2.replicas.set(replicaKey, {
          entityId: serverTx.entityId,
          signerId: serverTx.signerId,
          state: {
            entityId: serverTx.entityId,
            height: 0,
            timestamp: env2.timestamp,
            nonces: new Map,
            messages: [],
            proposals: new Map,
            config: serverTx.data.config,
            reserves: new Map,
            accounts: new Map,
            jBlock: 0
          },
          mempool: [],
          isProposer: serverTx.data.isProposer
        });
        const createdReplica = env2.replicas.get(replicaKey);
        const actualJBlock = createdReplica?.state.jBlock;
        console.log(`\uD83D\uDD0D REPLICA-DEBUG: Added replica ${replicaKey}, jBlock should be 0, actually is: ${actualJBlock} (type: ${typeof actualJBlock})`);
        if (env2.gossip && createdReplica) {
          const profile = {
            entityId: serverTx.entityId,
            capabilities: [],
            hubs: [],
            metadata: {
              lastUpdated: Date.now(),
              routingFeePPM: 100,
              baseFee: 0n
            },
            accounts: []
          };
          env2.gossip.announce(profile);
          console.log(`\uD83D\uDCE1 Broadcast initial profile for Entity #${formatEntityDisplay(serverTx.entityId)}`);
        }
        if (typeof actualJBlock !== "number") {
          console.error(`\uD83D\uDCA5 ENTITY-CREATION-BUG: Just created entity with invalid jBlock!`);
          console.error(`\uD83D\uDCA5   Expected: 0 (number), Got: ${typeof actualJBlock}, Value: ${actualJBlock}`);
          if (createdReplica) {
            createdReplica.state.jBlock = 0;
            console.log(`\uD83D\uDCA5   FIXED: Set jBlock to 0 for replica ${replicaKey}`);
          }
        }
      }
    });
    console.log(`\uD83D\uDD0D REPLICA-DEBUG: After processing serverTxs, total replicas: ${env2.replicas.size}`);
    console.log(`\uD83D\uDD0D SERVER-PROCESSING: About to process ${mergedInputs.length} merged entity inputs`);
    for (const entityInput of mergedInputs) {
      const jEventCount = entityInput.entityTxs?.filter((tx) => tx.type === "j_event").length || 0;
      if (jEventCount > 0) {
        console.log(`\uD83D\uDEA8 FOUND-J-EVENTS: Entity ${entityInput.entityId.slice(0, 10)}... has ${jEventCount} j-events from ${entityInput.signerId || "auto"}`);
        entityInput.entityTxs?.filter((tx) => tx.type === "j_event").forEach((jEvent, i) => {
          console.log(`\uD83D\uDEA8   J-EVENT-${i}: type=${jEvent.data.event.type}, block=${jEvent.data.blockNumber}, observedAt=${new Date(jEvent.data.observedAt).toLocaleTimeString()}`);
        });
      }
      let actualSignerId = entityInput.signerId;
      if (!actualSignerId || actualSignerId === "") {
        const hasAccountInput = entityInput.entityTxs?.some((tx) => tx.type === "accountInput");
        if (hasAccountInput) {
          const entityReplicaKeys = Array.from(env2.replicas.keys()).filter((key) => key.startsWith(entityInput.entityId + ":"));
          if (entityReplicaKeys.length > 0) {
            const firstReplica = env2.replicas.get(entityReplicaKeys[0]);
            if (firstReplica?.state.config.validators[0]) {
              actualSignerId = firstReplica.state.config.validators[0];
              console.log(`\uD83D\uDD04 AUTO-ROUTE: Routing AccountInput to proposer ${actualSignerId} for entity ${entityInput.entityId.slice(0, 10)}...`);
            }
          }
        }
        if (!actualSignerId || actualSignerId === "") {
          console.warn(`\u26A0\uFE0F No signerId and unable to determine proposer for entity ${entityInput.entityId.slice(0, 10)}...`);
          continue;
        }
      }
      const replicaKey = `${entityInput.entityId}:${actualSignerId}`;
      const entityReplica = env2.replicas.get(replicaKey);
      console.log(`\uD83D\uDD0D REPLICA-LOOKUP: Key="${replicaKey}"`);
      console.log(`\uD83D\uDD0D REPLICA-LOOKUP: Found replica: ${!!entityReplica}`);
      console.log(`\uD83D\uDD0D REPLICA-LOOKUP: Input txs: ${entityInput.entityTxs?.length || 0}`);
      if (entityInput.entityTxs && entityInput.entityTxs.length > 0) {
        console.log(`\uD83D\uDD0D REPLICA-LOOKUP: Tx types:`, entityInput.entityTxs.map((tx) => tx.type));
      }
      if (!entityReplica) {
        console.log(`\uD83D\uDD0D REPLICA-LOOKUP: Available replica keys:`, Array.from(env2.replicas.keys()));
      }
      if (entityReplica) {
        if (DEBUG) {
          console.log(`Processing input for ${replicaKey}:`);
          if (entityInput.entityTxs?.length)
            console.log(`  \u2192 ${entityInput.entityTxs.length} transactions`);
          if (entityInput.proposedFrame)
            console.log(`  \u2192 Proposed frame: ${entityInput.proposedFrame.hash}`);
          if (entityInput.precommits?.size)
            console.log(`  \u2192 ${entityInput.precommits.size} precommits`);
        }
        const { newState, outputs } = await applyEntityInput(env2, entityReplica, entityInput);
        env2.replicas.set(replicaKey, { ...entityReplica, state: newState });
        entityOutbox.push(...outputs);
      }
    }
    const hasServerTxs = env2.serverInput.serverTxs.length > 0;
    const hasEntityInputs = mergedInputs.length > 0;
    const hasOutputs = entityOutbox.length > 0;
    if (hasServerTxs || hasEntityInputs || hasOutputs) {
      env2.height++;
      env2.timestamp = Date.now();
      const inputDescription = `Tick ${env2.height - 1}: ${env2.serverInput.serverTxs.length} serverTxs, ${mergedInputs.length} merged entityInputs \u2192 ${entityOutbox.length} outputs`;
      const processedInput = {
        serverTxs: [...env2.serverInput.serverTxs],
        entityInputs: [...mergedInputs]
      };
      env2.serverInput.serverTxs.length = 0;
      env2.serverInput.entityInputs.length = 0;
      await captureSnapshot(env2, env2.history, db, processedInput, entityOutbox, inputDescription);
    } else {
      console.log(`\u26AA SKIP-FRAME: No serverTxs, entityInputs, or outputs - not creating empty frame`);
    }
    console.log(`\uD83D\uDD0D REPLICA-DEBUG: Before notifyEnvChange, total replicas: ${env2.replicas.size}`);
    console.log(`\uD83D\uDD0D REPLICA-DEBUG: Replica keys:`, Array.from(env2.replicas.keys()));
    console.log(`\uD83D\uDD0D GOSSIP-DEBUG: Environment keys before notify:`, Object.keys(env2));
    console.log(`\uD83D\uDD0D GOSSIP-DEBUG: Gossip layer exists:`, !!env2.gossip);
    console.log(`\uD83D\uDD0D GOSSIP-DEBUG: Gossip layer type:`, typeof env2.gossip);
    console.log(`\uD83D\uDD0D GOSSIP-DEBUG: Gossip announce method:`, typeof env2.gossip?.announce);
    if (!env2.gossip) {
      console.log(`\uD83D\uDEA8 CRITICAL: gossip layer missing from environment, creating new one`);
      env2.gossip = createGossipLayer();
      console.log(`\u2705 Gossip layer created and added to environment`);
    }
    const oldEntityKeys = Array.from(env2.replicas.keys()).filter((key) => key.startsWith("0x0000000000000000000000000000000000000000000000000000000000000001:") || key.startsWith("0x0000000000000000000000000000000000000000000000000000000000000002:"));
    const newEntityKeys = Array.from(env2.replicas.keys()).filter((key) => !key.startsWith("0x0000000000000000000000000000000000000000000000000000000000000001:") && !key.startsWith("0x0000000000000000000000000000000000000000000000000000000000000002:") && !key.startsWith("0x57e360b00f393ea6d898d6119f71db49241be80aec0fbdecf6358b0103d43a31:"));
    console.log(`\uD83D\uDD0D OLD-ENTITY-DEBUG: ${oldEntityKeys.length} old entities:`, oldEntityKeys.slice(0, 2));
    console.log(`\uD83D\uDD0D NEW-ENTITY-DEBUG: ${newEntityKeys.length} new entities:`, newEntityKeys.slice(0, 2));
    if (oldEntityKeys.length > 0 && newEntityKeys.length > 0) {
      const oldReplica = env2.replicas.get(oldEntityKeys[0]);
      const newReplica = env2.replicas.get(newEntityKeys[0]);
      console.log(`\uD83D\uDD0D OLD-REPLICA-STRUCTURE:`, {
        hasState: !!oldReplica?.state,
        hasConfig: !!oldReplica?.state?.config,
        hasJurisdiction: !!oldReplica?.state?.config?.jurisdiction,
        jurisdictionName: oldReplica?.state?.config?.jurisdiction?.name
      });
      console.log(`\uD83D\uDD0D NEW-REPLICA-STRUCTURE:`, {
        hasState: !!newReplica?.state,
        hasConfig: !!newReplica?.state?.config,
        hasJurisdiction: !!newReplica?.state?.config?.jurisdiction,
        jurisdictionName: newReplica?.state?.config?.jurisdiction?.name
      });
    }
    notifyEnvChange(env2);
    if (DEBUG && entityOutbox.length > 0) {
      console.log(`\uD83D\uDCE4 Outputs: ${entityOutbox.length} messages`);
      entityOutbox.forEach((output2, i) => {
        console.log(`  ${i + 1}. \u2192 ${output2.signerId} (${output2.entityTxs ? `${output2.entityTxs.length} txs` : ""}${output2.proposedFrame ? ` proposal: ${output2.proposedFrame.hash.slice(0, 10)}...` : ""}${output2.precommits ? ` ${output2.precommits.size} precommits` : ""})`);
      });
    } else if (DEBUG && entityOutbox.length === 0) {
      console.log(`\uD83D\uDCE4 No outputs generated`);
    }
    if (DEBUG) {
      console.log(`Replica states:`);
      env2.replicas.forEach((replica, key) => {
        const [entityId, signerId] = key.split(":");
        const entityDisplay = formatEntityDisplay(entityId);
        const signerDisplay = formatSignerDisplay(signerId);
        console.log(`  Entity #${entityDisplay}:${signerDisplay}: mempool=${replica.mempool.length}, messages=${replica.state.messages.length}, proposal=${replica.proposal ? "\u2713" : "\u2717"}`);
      });
    }
    const isProcessUntilEmptyCall = serverInput.serverTxs.length === 0 && serverInput.entityInputs.length > 0;
    if (!isProcessUntilEmptyCall && (serverInput.serverTxs.length > 0 || mergedInputs.length > 0)) {
      const snapshot = {
        replicas: new Map(env2.replicas),
        height: env2.height,
        timestamp: env2.timestamp,
        serverInput: { serverTxs: [], entityInputs: [] },
        history: [],
        gossip: env2.gossip
      };
      if (!env2.history) {
        env2.history = [];
      }
      env2.history.push(snapshot);
      console.log(`\uD83D\uDCF8 Frame ${env2.height}: Snapshot added to history (${serverInput.serverTxs.length} serverTxs, ${mergedInputs.length} entityInputs)`);
    }
    notifyEnvChange(env2);
    const endTime = Date.now();
    if (DEBUG) {
      console.log(`\u23F1\uFE0F  Tick ${env2.height - 1} completed in ${endTime - startTime}ms`);
    }
    return { entityOutbox, mergedInputs };
  } catch (error) {
    log.error(`\u274C Error processing server input:`, error);
    return { entityOutbox: [], mergedInputs: [] };
  }
};
var main = async () => {
  if (!isBrowser) {
    try {
      const { loadJurisdictions: loadJurisdictions2 } = await Promise.resolve().then(() => (init_jurisdiction_loader(), exports_jurisdiction_loader));
      const jurisdictions = loadJurisdictions2();
      console.log("\uD83D\uDD0D STARTUP: Current jurisdictions content (from centralized loader):");
      console.log("\uD83D\uDCCD Ethereum Depository:", jurisdictions.jurisdictions.ethereum.contracts.depository);
      console.log("\uD83D\uDCCD Ethereum EntityProvider:", jurisdictions.jurisdictions.ethereum.contracts.entityProvider);
      console.log("\uD83D\uDCCD Last updated:", jurisdictions.lastUpdated);
      console.log("\uD83D\uDCCD Full Ethereum config:", JSON.stringify(jurisdictions.jurisdictions.ethereum, null, 2));
    } catch (error) {
      console.log("\u26A0\uFE0F Failed to load jurisdictions:", error.message);
    }
  }
  console.log("\uD83D\uDD78\uFE0F Initializing gossip layer...");
  const gossipLayer = createGossipLayer();
  console.log("\u2705 Gossip layer initialized");
  console.log("\uD83D\uDCE1 Loading persisted profiles from database...");
  await loadPersistedProfiles(db, gossipLayer);
  env = {
    replicas: new Map,
    height: 0,
    timestamp: Date.now(),
    serverInput: { serverTxs: [], entityInputs: [] },
    history: [],
    gossip: gossipLayer
  };
  try {
    if (isBrowser) {
      console.log("\uD83C\uDF10 BROWSER-DEBUG: Starting IndexedDB snapshot loading process...");
    } else {
      console.log("\uD83D\uDDA5\uFE0F Node.js environment: Attempting to load snapshots from filesystem...");
    }
    console.log("\uD83D\uDD0D BROWSER-DEBUG: Querying latest_height from database...");
    const latestHeightBuffer = await db.get(Buffer.from("latest_height"));
    const latestHeight = parseInt(latestHeightBuffer.toString(), 10);
    console.log(`\uD83D\uDCCA BROWSER-DEBUG: Found latest height in DB: ${latestHeight}`);
    console.log(`\uD83D\uDCCA Found latest height: ${latestHeight}, loading ${latestHeight + 1} snapshots...`);
    console.log(`\uD83D\uDCE5 Loading snapshots: 1 to ${latestHeight}...`);
    const snapshots = [];
    for (let i = 1;i <= latestHeight; i++) {
      try {
        const buffer = await db.get(Buffer.from(`snapshot:${i}`));
        const snapshot = decode2(buffer);
        snapshots.push(snapshot);
        console.log(`\uD83D\uDCE6 Snapshot ${i}: loaded ${buffer.length} bytes`);
      } catch (error) {
        console.error(`\u274C Failed to load snapshot ${i}:`, error);
        console.warn(`\u26A0\uFE0F Snapshot ${i} missing, continuing with available data...`);
      }
    }
    if (snapshots.length === 0) {
      console.log(`\uD83D\uDCE6 No snapshots found (latestHeight: ${latestHeight}), using fresh environment`);
      throw new Error("LEVEL_NOT_FOUND");
    }
    console.log(`\uD83D\uDCCA Successfully loaded ${snapshots.length}/${latestHeight} snapshots (starting from height 1)`);
    env.history = snapshots;
    if (snapshots.length > 0) {
      const latestSnapshot = snapshots[snapshots.length - 1];
      const gossipLayer2 = createGossipLayer();
      if (latestSnapshot.gossip?.profiles) {
        for (const [id2, profile] of Object.entries(latestSnapshot.gossip.profiles)) {
          gossipLayer2.profiles.set(id2, profile);
        }
        console.log(`\uD83D\uDCE1 Restored gossip profiles: ${Object.keys(latestSnapshot.gossip.profiles).length} entries`);
      }
      env = {
        replicas: new Map(Array.from(latestSnapshot.replicas.entries()).map(([key, replica]) => [key, cloneEntityReplica(replica)])),
        height: latestSnapshot.height,
        timestamp: latestSnapshot.timestamp,
        serverInput: {
          serverTxs: [],
          entityInputs: []
        },
        history: snapshots,
        gossip: gossipLayer2
      };
      console.log(`\u2705 History restored. Server is at height ${env.height} with ${env.history.length} snapshots.`);
      console.log(`\uD83D\uDCC8 Snapshot details:`, {
        height: env.height,
        replicaCount: env.replicas.size,
        timestamp: new Date(env.timestamp).toISOString(),
        serverInputs: env.serverInput.entityInputs.length
      });
    }
  } catch (error) {
    if (error.code === "LEVEL_NOT_FOUND") {
      console.log("\uD83D\uDCE6 BROWSER-DEBUG: No saved state found, using fresh environment");
      if (isBrowser) {
        console.log("\uD83D\uDCA1 BROWSER-DEBUG: This is normal for first-time use. IndexedDB will be created automatically.");
        console.log("\uD83D\uDD0D BROWSER-DEBUG: Fresh environment means entities will start with jBlock=0");
      } else {
        console.log("\uD83D\uDCA1 Node.js: No existing snapshots in db directory.");
      }
    } else {
      console.error("\u274C Failed to load state from LevelDB:", error);
      console.error("\uD83D\uDD0D Error details:", {
        code: error.code,
        message: error.message,
        isBrowser,
        dbLocation: isBrowser ? "IndexedDB: db" : "db"
      });
      throw error;
    }
  }
  if (!isBrowser) {
    console.log(`
\uD83D\uDE80 Hanko tests disabled during development - focusing on core functionality`);
  } else {
    console.log("\uD83C\uDF10 Browser environment: Demos available via UI buttons, not auto-running");
  }
  log.info(`\uD83C\uDFAF Server startup complete. Height: ${env.height}, Entities: ${env.replicas.size}`);
  if (isBrowser) {
    console.log(`\uD83D\uDD0D BROWSER-DEBUG: Final state before j-watcher start:`);
    console.log(`\uD83D\uDD0D   Environment height: ${env.height}`);
    console.log(`\uD83D\uDD0D   Total replicas: ${env.replicas.size}`);
    for (const [replicaKey, replica] of env.replicas.entries()) {
      const [entityId, signerId] = replicaKey.split(":");
      console.log(`\uD83D\uDD0D   Entity ${entityId.slice(0, 10)}... (${signerId}): jBlock=${replica.state.jBlock}, isProposer=${replica.isProposer}`);
    }
  }
  if (!jWatcherStarted) {
    try {
      console.log("\uD83D\uDD2D STARTING-JWATCHER: Snapshots loaded, starting j-watcher...");
      await startJEventWatcher(env);
      jWatcherStarted = true;
      console.log("\uD83D\uDD2D JWATCHER-READY: J-watcher started successfully");
    } catch (error) {
      console.error("\u274C Failed to start J-Event Watcher:", error);
    }
  } else {
    console.log("\uD83D\uDD2D JWATCHER-SKIP: J-watcher already started, skipping");
  }
  return env;
};
var getHistory = () => env.history || [];
var getSnapshot = (index) => {
  const history = env.history || [];
  return index >= 0 && index < history.length ? history[index] : null;
};
var getCurrentHistoryIndex = () => (env.history || []).length - 1;
var clearDatabaseAndHistory = async () => {
  console.log("\uD83D\uDDD1\uFE0F Clearing database and resetting server history...");
  await clearDatabase(db);
  env = {
    replicas: new Map,
    height: 0,
    timestamp: Date.now(),
    serverInput: { serverTxs: [], entityInputs: [] },
    history: [],
    gossip: createGossipLayer()
  };
  console.log("\u2705 Database and server history cleared");
};
var getJWatcherStatus = () => {
  if (!jWatcher || !env)
    return null;
  return {
    isWatching: jWatcher.getStatus().isWatching,
    proposers: Array.from(env.replicas.entries()).filter(([key, replica]) => replica.isProposer).map(([key, replica]) => {
      const [entityId, signerId] = key.split(":");
      return {
        entityId: entityId.slice(0, 10) + "...",
        signerId,
        jBlock: replica.state.jBlock
      };
    }),
    nextSyncIn: Math.floor((1000 - Date.now() % 1000) / 100) / 10
  };
};
if (!isBrowser) {
  main().then(async (env2) => {
    if (env2) {
      const noDemoFlag = process.env.NO_DEMO === "1" || process.argv.includes("--no-demo");
      if (!noDemoFlag) {
        console.log("\u2705 Node.js environment initialized. Running demo for local testing...");
        console.log("\uD83D\uDCA1 To skip demo, use: NO_DEMO=1 bun run src/server.ts or --no-demo flag");
        await runDemo(env2);
        await startJEventWatcher(env2);
        setTimeout(async () => {
          await verifyJurisdictionRegistrations();
        }, 2000);
      } else {
        console.log("\u2705 Node.js environment initialized. Demo skipped (NO_DEMO=1 or --no-demo)");
        console.log("\uD83D\uDCA1 Use XLN.runDemo(env) to run demo manually if needed");
      }
    }
  }).catch((error) => {
    console.error("\u274C An error occurred during Node.js auto-execution:", error);
  });
}
var verifyJurisdictionRegistrations = async () => {
  console.log(`
\uD83D\uDD0D === JURISDICTION VERIFICATION ===`);
  console.log(`\uD83D\uDCCB Verifying entity registrations across all jurisdictions...
`);
  const jurisdictions = await getAvailableJurisdictions();
  for (const jurisdiction of jurisdictions) {
    try {
      console.log(`\uD83C\uDFDB\uFE0F ${jurisdiction.name}:`);
      console.log(`   \uD83D\uDCE1 RPC: ${jurisdiction.address}`);
      console.log(`   \uD83D\uDCC4 Contract: ${jurisdiction.entityProviderAddress}`);
      const { entityProvider } = await connectToEthereum(jurisdiction);
      const nextNumber = await entityProvider.nextNumber();
      const registeredCount = Number(nextNumber) - 1;
      console.log(`   \uD83D\uDCCA Registered Entities: ${registeredCount}`);
      if (registeredCount > 0) {
        console.log(`   \uD83D\uDCDD Entity Details:`);
        for (let i = 1;i <= registeredCount; i++) {
          try {
            const entityId = generateNumberedEntityId(i);
            const entityInfo = await entityProvider.entities(entityId);
            console.log(`      #${i}: ${entityId.slice(0, 10)}... (Block: ${entityInfo.registrationBlock})`);
          } catch (error) {
            console.log(`      #${i}: Error reading entity data`);
          }
        }
      }
      console.log("");
    } catch (error) {
      console.error(`   \u274C Failed to verify ${jurisdiction.name}:`, error instanceof Error ? error.message : error);
      console.log("");
    }
  }
  console.log(`\u2705 Jurisdiction verification complete!
`);
};
var demoCompleteHanko = async () => {
  try {
    const isBrowser2 = typeof window !== "undefined";
    if (isBrowser2) {
      console.log("\uD83C\uDFAF Browser environment detected - running simplified Hanko demo...");
      console.log("\u2705 Basic signature verification available");
      console.log("\uD83D\uDCA1 Full test suite available in Node.js environment");
      console.log("\u2705 Hanko browser demo completed!");
      return;
    }
    console.log("\uD83C\uDFAF Running complete Hanko test suite...");
    await runAllTests();
    console.log("\u2705 Complete Hanko tests passed!");
  } catch (error) {
    console.error("\u274C Complete Hanko tests failed:", error);
    throw error;
  }
};
var runDemoWrapper = async (env2) => {
  try {
    console.log("\uD83D\uDE80 Starting XLN Consensus Demo...");
    console.log("\uD83D\uDCCA This will demonstrate entity creation, consensus, and message passing");
    const result = await runDemo(env2);
    console.log("\u2705 XLN Demo completed successfully!");
    console.log("\uD83C\uDFAF Check the entity cards above to see the results");
    console.log("\uD83D\uDD70\uFE0F Use the time machine to replay the consensus steps");
    return result;
  } catch (error) {
    console.error("\u274C XLN Demo failed:", error);
    throw error;
  }
};
var createEmptyEnv = () => {
  return {
    replicas: new Map,
    height: 0,
    timestamp: Date.now(),
    serverInput: { serverTxs: [], entityInputs: [] },
    history: [],
    gossip: createGossipLayer()
  };
};
var processUntilEmpty = async (env2, inputs) => {
  let outputs = inputs || [];
  let iterationCount = 0;
  const maxIterations = 10;
  if (outputs.length > 0) {
    console.log("\uD83D\uDD25 PROCESS-CASCADE: Starting with", outputs.length, "initial outputs");
    console.log("\uD83D\uDD25 PROCESS-CASCADE: Initial outputs:", outputs.map((o) => ({
      entityId: o.entityId.slice(0, 8) + "...",
      signerId: o.signerId,
      txs: o.entityTxs?.length || 0,
      precommits: o.precommits?.size || 0,
      hasFrame: !!o.proposedFrame
    })));
  }
  outputs.forEach((output2, i) => {
    if (output2.entityTxs?.some((tx) => tx.type === "vote")) {
      console.log(`\uD83D\uDDF3\uFE0F VOTE-DEBUG: Input ${i + 1} contains vote transactions:`, output2.entityTxs.filter((tx) => tx.type === "vote"));
    }
  });
  while (outputs.length > 0 && iterationCount < maxIterations) {
    iterationCount++;
    console.log(`\uD83D\uDD25 PROCESS-CASCADE: Iteration ${iterationCount} - processing ${outputs.length} outputs`);
    const result = await applyServerInput(env2, { serverTxs: [], entityInputs: outputs });
    outputs = result.entityOutbox;
    console.log(`\uD83D\uDD25 PROCESS-CASCADE: Iteration ${iterationCount} generated ${outputs.length} new outputs`);
    if (outputs.length > 0) {
      console.log("\uD83D\uDD25 PROCESS-CASCADE: New outputs:", outputs.map((o) => ({
        entityId: o.entityId.slice(0, 8) + "...",
        signerId: o.signerId,
        txs: o.entityTxs?.length || 0,
        precommits: o.precommits?.size || 0,
        hasFrame: !!o.proposedFrame
      })));
    }
  }
  if (iterationCount > 0) {
    const snapshot = {
      replicas: new Map(env2.replicas),
      height: env2.height,
      timestamp: env2.timestamp,
      serverInput: { serverTxs: [], entityInputs: [] },
      history: [],
      gossip: env2.gossip
    };
    if (!env2.history) {
      env2.history = [];
    }
    env2.history.push(snapshot);
    console.log(`\uD83D\uDCF8 Frame ${env2.height}: ProcessUntilEmpty snapshot added (after ${iterationCount} iterations)`);
  }
  if (iterationCount >= maxIterations) {
    console.warn("\u26A0\uFE0F processUntilEmpty reached maximum iterations");
  } else if (iterationCount > 0) {
    console.log(`\uD83D\uDD25 PROCESS-CASCADE: Completed after ${iterationCount} iterations`);
  }
  return env2;
};
var searchEntityNames2 = (query, limit) => searchEntityNames(db, query, limit);
var resolveEntityName2 = (entityId) => resolveEntityName(db, entityId);
var getEntityDisplayInfoFromProfile = (entityId) => getEntityDisplayInfo2(db, entityId);
export {
  transferNameBetweenEntities,
  submitSettle,
  submitReserveToReserve,
  submitProcessBatch,
  submitPrefundAccount,
  searchEntityNames2 as searchEntityNames,
  runDemoWrapper,
  runDemo,
  resolveEntityName2 as resolveEntityName,
  resolveEntityIdentifier,
  requestNamedEntity,
  registerNumberedEntityOnChain,
  registerEnvChangeCallback,
  processUntilEmpty,
  prepopulate,
  main,
  isEntityRegistered,
  hashBoard,
  getSnapshot,
  getSignerDisplayInfo,
  getNextEntityNumber,
  getJurisdictionByAddress,
  getJWatcherStatus,
  getHistory,
  getEntityInfoFromChain,
  getEntityDisplayInfoFromProfile,
  getEntityDisplayInfo,
  getCurrentHistoryIndex,
  getAvailableJurisdictions,
  generateSignerAvatar,
  generateNumberedEntityId,
  generateNamedEntityId,
  generateLazyEntityId,
  generateEntityAvatar,
  formatSignerDisplay,
  formatEntityDisplay,
  encodeBoard,
  detectEntityType,
  demoCompleteHanko,
  debugFundReserves,
  db,
  createProfileUpdateTx,
  createNumberedEntity,
  createLazyEntity,
  createEmptyEnv,
  connectToEthereum,
  clearDatabaseAndHistory,
  clearDatabase,
  assignNameOnChain,
  applyServerInput
};
